; ModuleID = 'diospyros.ll'
source_filename = "llvm-tests/2d-2d-conv.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

@__const.main.mat_in = private unnamed_addr constant [2 x [2 x float]] [[2 x float] [float 1.000000e+00, float 2.000000e+00], [2 x float] [float 3.000000e+00, float 4.000000e+00]], align 16
@__const.main.f_in = private unnamed_addr constant [2 x [2 x float]] [[2 x float] [float 1.000000e+00, float 1.000000e+00], [2 x float] [float 1.000000e+00, float 1.000000e+00]], align 16
@.str = private unnamed_addr constant [12 x i8] c"output: %f\0A\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define void @convolution([2 x float]* %0, [2 x float]* %1, [3 x float]* %2) #0 {
.preheader7:
  %3 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %4 = load float, float* %3, align 4
  %5 = insertelement <4 x float> zeroinitializer, float %4, i32 0
  %6 = insertelement <4 x float> %5, float 0.000000e+00, i32 1
  %7 = insertelement <4 x float> %6, float 0.000000e+00, i32 2
  %8 = insertelement <4 x float> %7, float 0.000000e+00, i32 3
  %9 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %10 = load float, float* %9, align 4
  %11 = insertelement <4 x float> zeroinitializer, float %10, i32 0
  %12 = insertelement <4 x float> %11, float 0.000000e+00, i32 1
  %13 = insertelement <4 x float> %12, float 0.000000e+00, i32 2
  %14 = insertelement <4 x float> %13, float 0.000000e+00, i32 3
  %15 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %16 = load float, float* %15, align 4
  %17 = insertelement <4 x float> zeroinitializer, float %16, i32 0
  %18 = insertelement <4 x float> %17, float 0.000000e+00, i32 1
  %19 = insertelement <4 x float> %18, float 0.000000e+00, i32 2
  %20 = insertelement <4 x float> %19, float 0.000000e+00, i32 3
  %21 = call <4 x float> @llvm.fma.v4f32(<4 x float> %14, <4 x float> %20, <4 x float> %8)
  %22 = extractelement <4 x float> %21, i32 0
  %23 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float %22, float* %23, align 4
  %24 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %25 = load float, float* %24, align 4
  %26 = insertelement <4 x float> zeroinitializer, float %25, i32 0
  %27 = insertelement <4 x float> %26, float 0.000000e+00, i32 1
  %28 = insertelement <4 x float> %27, float 0.000000e+00, i32 2
  %29 = insertelement <4 x float> %28, float 0.000000e+00, i32 3
  %30 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %31 = load float, float* %30, align 4
  %32 = insertelement <4 x float> zeroinitializer, float %31, i32 0
  %33 = insertelement <4 x float> %32, float 0.000000e+00, i32 1
  %34 = insertelement <4 x float> %33, float 0.000000e+00, i32 2
  %35 = insertelement <4 x float> %34, float 0.000000e+00, i32 3
  %36 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %37 = load float, float* %36, align 4
  %38 = insertelement <4 x float> zeroinitializer, float %37, i32 0
  %39 = insertelement <4 x float> %38, float 0.000000e+00, i32 1
  %40 = insertelement <4 x float> %39, float 0.000000e+00, i32 2
  %41 = insertelement <4 x float> %40, float 0.000000e+00, i32 3
  %42 = call <4 x float> @llvm.fma.v4f32(<4 x float> %35, <4 x float> %41, <4 x float> %29)
  %43 = extractelement <4 x float> %42, i32 0
  %44 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float %43, float* %44, align 4
  %45 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %46 = load float, float* %45, align 4
  %47 = insertelement <4 x float> zeroinitializer, float %46, i32 0
  %48 = insertelement <4 x float> %47, float 0.000000e+00, i32 1
  %49 = insertelement <4 x float> %48, float 0.000000e+00, i32 2
  %50 = insertelement <4 x float> %49, float 0.000000e+00, i32 3
  %51 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %52 = load float, float* %51, align 4
  %53 = insertelement <4 x float> zeroinitializer, float %52, i32 0
  %54 = insertelement <4 x float> %53, float 1.000000e+00, i32 1
  %55 = insertelement <4 x float> %54, float 1.000000e+00, i32 2
  %56 = insertelement <4 x float> %55, float 1.000000e+00, i32 3
  %57 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %58 = load float, float* %57, align 4
  %59 = insertelement <4 x float> zeroinitializer, float %58, i32 0
  %60 = insertelement <4 x float> %59, float 0.000000e+00, i32 1
  %61 = insertelement <4 x float> %60, float 0.000000e+00, i32 2
  %62 = insertelement <4 x float> %61, float 0.000000e+00, i32 3
  %63 = call <4 x float> @llvm.fma.v4f32(<4 x float> %56, <4 x float> %62, <4 x float> %50)
  %64 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %65 = load float, float* %64, align 4
  %66 = insertelement <4 x float> zeroinitializer, float %65, i32 0
  %67 = insertelement <4 x float> %66, float 0.000000e+00, i32 1
  %68 = insertelement <4 x float> %67, float 0.000000e+00, i32 2
  %69 = insertelement <4 x float> %68, float 0.000000e+00, i32 3
  %70 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %71 = load float, float* %70, align 4
  %72 = insertelement <4 x float> zeroinitializer, float %71, i32 0
  %73 = insertelement <4 x float> %72, float 0.000000e+00, i32 1
  %74 = insertelement <4 x float> %73, float 0.000000e+00, i32 2
  %75 = insertelement <4 x float> %74, float 0.000000e+00, i32 3
  %76 = call <4 x float> @llvm.fma.v4f32(<4 x float> %69, <4 x float> %75, <4 x float> %63)
  %77 = extractelement <4 x float> %76, i32 0
  %78 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float %77, float* %78, align 4
  %79 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %80 = load float, float* %79, align 4
  %81 = insertelement <4 x float> zeroinitializer, float %80, i32 0
  %82 = insertelement <4 x float> %81, float 0.000000e+00, i32 1
  %83 = insertelement <4 x float> %82, float 0.000000e+00, i32 2
  %84 = insertelement <4 x float> %83, float 0.000000e+00, i32 3
  %85 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %86 = load float, float* %85, align 4
  %87 = insertelement <4 x float> zeroinitializer, float %86, i32 0
  %88 = insertelement <4 x float> %87, float 0.000000e+00, i32 1
  %89 = insertelement <4 x float> %88, float 0.000000e+00, i32 2
  %90 = insertelement <4 x float> %89, float 0.000000e+00, i32 3
  %91 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %92 = load float, float* %91, align 4
  %93 = insertelement <4 x float> zeroinitializer, float %92, i32 0
  %94 = insertelement <4 x float> %93, float 0.000000e+00, i32 1
  %95 = insertelement <4 x float> %94, float 0.000000e+00, i32 2
  %96 = insertelement <4 x float> %95, float 0.000000e+00, i32 3
  %97 = call <4 x float> @llvm.fma.v4f32(<4 x float> %90, <4 x float> %96, <4 x float> %84)
  %98 = extractelement <4 x float> %97, i32 0
  %99 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float %98, float* %99, align 4
  %100 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  %101 = load float, float* %100, align 4
  %102 = insertelement <4 x float> zeroinitializer, float %101, i32 0
  %103 = insertelement <4 x float> %102, float 0.000000e+00, i32 1
  %104 = insertelement <4 x float> %103, float 0.000000e+00, i32 2
  %105 = insertelement <4 x float> %104, float 0.000000e+00, i32 3
  %106 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %107 = load float, float* %106, align 4
  %108 = insertelement <4 x float> zeroinitializer, float %107, i32 0
  %109 = insertelement <4 x float> %108, float 0.000000e+00, i32 1
  %110 = insertelement <4 x float> %109, float 0.000000e+00, i32 2
  %111 = insertelement <4 x float> %110, float 0.000000e+00, i32 3
  %112 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %113 = load float, float* %112, align 4
  %114 = insertelement <4 x float> zeroinitializer, float %113, i32 0
  %115 = insertelement <4 x float> %114, float 0.000000e+00, i32 1
  %116 = insertelement <4 x float> %115, float 0.000000e+00, i32 2
  %117 = insertelement <4 x float> %116, float 0.000000e+00, i32 3
  %118 = call <4 x float> @llvm.fma.v4f32(<4 x float> %111, <4 x float> %117, <4 x float> %105)
  %119 = extractelement <4 x float> %118, i32 0
  %120 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  store float %119, float* %120, align 4
  %121 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  %122 = load float, float* %121, align 4
  %123 = insertelement <4 x float> zeroinitializer, float %122, i32 0
  %124 = insertelement <4 x float> %123, float 0.000000e+00, i32 1
  %125 = insertelement <4 x float> %124, float 0.000000e+00, i32 2
  %126 = insertelement <4 x float> %125, float 0.000000e+00, i32 3
  %127 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %128 = load float, float* %127, align 4
  %129 = insertelement <4 x float> zeroinitializer, float %128, i32 0
  %130 = insertelement <4 x float> %129, float 1.000000e+00, i32 1
  %131 = insertelement <4 x float> %130, float 1.000000e+00, i32 2
  %132 = insertelement <4 x float> %131, float 1.000000e+00, i32 3
  %133 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %134 = load float, float* %133, align 4
  %135 = insertelement <4 x float> zeroinitializer, float %134, i32 0
  %136 = insertelement <4 x float> %135, float 0.000000e+00, i32 1
  %137 = insertelement <4 x float> %136, float 0.000000e+00, i32 2
  %138 = insertelement <4 x float> %137, float 0.000000e+00, i32 3
  %139 = call <4 x float> @llvm.fma.v4f32(<4 x float> %132, <4 x float> %138, <4 x float> %126)
  %140 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %141 = load float, float* %140, align 4
  %142 = insertelement <4 x float> zeroinitializer, float %141, i32 0
  %143 = insertelement <4 x float> %142, float 0.000000e+00, i32 1
  %144 = insertelement <4 x float> %143, float 0.000000e+00, i32 2
  %145 = insertelement <4 x float> %144, float 0.000000e+00, i32 3
  %146 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %147 = load float, float* %146, align 4
  %148 = insertelement <4 x float> zeroinitializer, float %147, i32 0
  %149 = insertelement <4 x float> %148, float 0.000000e+00, i32 1
  %150 = insertelement <4 x float> %149, float 0.000000e+00, i32 2
  %151 = insertelement <4 x float> %150, float 0.000000e+00, i32 3
  %152 = call <4 x float> @llvm.fma.v4f32(<4 x float> %145, <4 x float> %151, <4 x float> %139)
  %153 = extractelement <4 x float> %152, i32 0
  %154 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  store float %153, float* %154, align 4
  %155 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %156 = load float, float* %155, align 4
  %157 = insertelement <4 x float> zeroinitializer, float %156, i32 0
  %158 = insertelement <4 x float> %157, float 0.000000e+00, i32 1
  %159 = insertelement <4 x float> %158, float 0.000000e+00, i32 2
  %160 = insertelement <4 x float> %159, float 0.000000e+00, i32 3
  %161 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %162 = load float, float* %161, align 4
  %163 = insertelement <4 x float> zeroinitializer, float %162, i32 0
  %164 = insertelement <4 x float> %163, float 0.000000e+00, i32 1
  %165 = insertelement <4 x float> %164, float 0.000000e+00, i32 2
  %166 = insertelement <4 x float> %165, float 0.000000e+00, i32 3
  %167 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %168 = load float, float* %167, align 4
  %169 = insertelement <4 x float> zeroinitializer, float %168, i32 0
  %170 = insertelement <4 x float> %169, float 0.000000e+00, i32 1
  %171 = insertelement <4 x float> %170, float 0.000000e+00, i32 2
  %172 = insertelement <4 x float> %171, float 0.000000e+00, i32 3
  %173 = call <4 x float> @llvm.fma.v4f32(<4 x float> %166, <4 x float> %172, <4 x float> %160)
  %174 = extractelement <4 x float> %173, i32 0
  %175 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %174, float* %175, align 4
  %176 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %177 = load float, float* %176, align 4
  %178 = insertelement <4 x float> zeroinitializer, float %177, i32 0
  %179 = insertelement <4 x float> %178, float 0.000000e+00, i32 1
  %180 = insertelement <4 x float> %179, float 0.000000e+00, i32 2
  %181 = insertelement <4 x float> %180, float 0.000000e+00, i32 3
  %182 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %183 = load float, float* %182, align 4
  %184 = insertelement <4 x float> zeroinitializer, float %183, i32 0
  %185 = insertelement <4 x float> %184, float 1.000000e+00, i32 1
  %186 = insertelement <4 x float> %185, float 1.000000e+00, i32 2
  %187 = insertelement <4 x float> %186, float 1.000000e+00, i32 3
  %188 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %189 = load float, float* %188, align 4
  %190 = insertelement <4 x float> zeroinitializer, float %189, i32 0
  %191 = insertelement <4 x float> %190, float 0.000000e+00, i32 1
  %192 = insertelement <4 x float> %191, float 0.000000e+00, i32 2
  %193 = insertelement <4 x float> %192, float 0.000000e+00, i32 3
  %194 = call <4 x float> @llvm.fma.v4f32(<4 x float> %187, <4 x float> %193, <4 x float> %181)
  %195 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %196 = load float, float* %195, align 4
  %197 = insertelement <4 x float> zeroinitializer, float %196, i32 0
  %198 = insertelement <4 x float> %197, float 0.000000e+00, i32 1
  %199 = insertelement <4 x float> %198, float 0.000000e+00, i32 2
  %200 = insertelement <4 x float> %199, float 0.000000e+00, i32 3
  %201 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %202 = load float, float* %201, align 4
  %203 = insertelement <4 x float> zeroinitializer, float %202, i32 0
  %204 = insertelement <4 x float> %203, float 0.000000e+00, i32 1
  %205 = insertelement <4 x float> %204, float 0.000000e+00, i32 2
  %206 = insertelement <4 x float> %205, float 0.000000e+00, i32 3
  %207 = call <4 x float> @llvm.fma.v4f32(<4 x float> %200, <4 x float> %206, <4 x float> %194)
  %208 = extractelement <4 x float> %207, i32 0
  %209 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %208, float* %209, align 4
  %210 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %211 = load float, float* %210, align 4
  %212 = insertelement <4 x float> zeroinitializer, float %211, i32 0
  %213 = insertelement <4 x float> %212, float 0.000000e+00, i32 1
  %214 = insertelement <4 x float> %213, float 0.000000e+00, i32 2
  %215 = insertelement <4 x float> %214, float 0.000000e+00, i32 3
  %216 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %217 = load float, float* %216, align 4
  %218 = insertelement <4 x float> zeroinitializer, float %217, i32 0
  %219 = insertelement <4 x float> %218, float 1.000000e+00, i32 1
  %220 = insertelement <4 x float> %219, float 1.000000e+00, i32 2
  %221 = insertelement <4 x float> %220, float 1.000000e+00, i32 3
  %222 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %223 = load float, float* %222, align 4
  %224 = insertelement <4 x float> zeroinitializer, float %223, i32 0
  %225 = insertelement <4 x float> %224, float 0.000000e+00, i32 1
  %226 = insertelement <4 x float> %225, float 0.000000e+00, i32 2
  %227 = insertelement <4 x float> %226, float 0.000000e+00, i32 3
  %228 = call <4 x float> @llvm.fma.v4f32(<4 x float> %221, <4 x float> %227, <4 x float> %215)
  %229 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %230 = load float, float* %229, align 4
  %231 = insertelement <4 x float> zeroinitializer, float %230, i32 0
  %232 = insertelement <4 x float> %231, float 1.000000e+00, i32 1
  %233 = insertelement <4 x float> %232, float 1.000000e+00, i32 2
  %234 = insertelement <4 x float> %233, float 1.000000e+00, i32 3
  %235 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %236 = load float, float* %235, align 4
  %237 = insertelement <4 x float> zeroinitializer, float %236, i32 0
  %238 = insertelement <4 x float> %237, float 0.000000e+00, i32 1
  %239 = insertelement <4 x float> %238, float 0.000000e+00, i32 2
  %240 = insertelement <4 x float> %239, float 0.000000e+00, i32 3
  %241 = call <4 x float> @llvm.fma.v4f32(<4 x float> %234, <4 x float> %240, <4 x float> %228)
  %242 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %243 = load float, float* %242, align 4
  %244 = insertelement <4 x float> zeroinitializer, float %243, i32 0
  %245 = insertelement <4 x float> %244, float 0.000000e+00, i32 1
  %246 = insertelement <4 x float> %245, float 0.000000e+00, i32 2
  %247 = insertelement <4 x float> %246, float 0.000000e+00, i32 3
  %248 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %249 = load float, float* %248, align 4
  %250 = insertelement <4 x float> zeroinitializer, float %249, i32 0
  %251 = insertelement <4 x float> %250, float 0.000000e+00, i32 1
  %252 = insertelement <4 x float> %251, float 0.000000e+00, i32 2
  %253 = insertelement <4 x float> %252, float 0.000000e+00, i32 3
  %254 = call <4 x float> @llvm.fma.v4f32(<4 x float> %247, <4 x float> %253, <4 x float> %241)
  %255 = extractelement <4 x float> %254, i32 0
  %256 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %255, float* %256, align 4
  %257 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %258 = load float, float* %257, align 4
  %259 = insertelement <4 x float> zeroinitializer, float %258, i32 0
  %260 = insertelement <4 x float> %259, float 0.000000e+00, i32 1
  %261 = insertelement <4 x float> %260, float 0.000000e+00, i32 2
  %262 = insertelement <4 x float> %261, float 0.000000e+00, i32 3
  %263 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %264 = load float, float* %263, align 4
  %265 = insertelement <4 x float> zeroinitializer, float %264, i32 0
  %266 = insertelement <4 x float> %265, float 1.000000e+00, i32 1
  %267 = insertelement <4 x float> %266, float 1.000000e+00, i32 2
  %268 = insertelement <4 x float> %267, float 1.000000e+00, i32 3
  %269 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %270 = load float, float* %269, align 4
  %271 = insertelement <4 x float> zeroinitializer, float %270, i32 0
  %272 = insertelement <4 x float> %271, float 0.000000e+00, i32 1
  %273 = insertelement <4 x float> %272, float 0.000000e+00, i32 2
  %274 = insertelement <4 x float> %273, float 0.000000e+00, i32 3
  %275 = call <4 x float> @llvm.fma.v4f32(<4 x float> %268, <4 x float> %274, <4 x float> %262)
  %276 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %277 = load float, float* %276, align 4
  %278 = insertelement <4 x float> zeroinitializer, float %277, i32 0
  %279 = insertelement <4 x float> %278, float 1.000000e+00, i32 1
  %280 = insertelement <4 x float> %279, float 1.000000e+00, i32 2
  %281 = insertelement <4 x float> %280, float 1.000000e+00, i32 3
  %282 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %283 = load float, float* %282, align 4
  %284 = insertelement <4 x float> zeroinitializer, float %283, i32 0
  %285 = insertelement <4 x float> %284, float 0.000000e+00, i32 1
  %286 = insertelement <4 x float> %285, float 0.000000e+00, i32 2
  %287 = insertelement <4 x float> %286, float 0.000000e+00, i32 3
  %288 = call <4 x float> @llvm.fma.v4f32(<4 x float> %281, <4 x float> %287, <4 x float> %275)
  %289 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %290 = load float, float* %289, align 4
  %291 = insertelement <4 x float> zeroinitializer, float %290, i32 0
  %292 = insertelement <4 x float> %291, float 1.000000e+00, i32 1
  %293 = insertelement <4 x float> %292, float 1.000000e+00, i32 2
  %294 = insertelement <4 x float> %293, float 1.000000e+00, i32 3
  %295 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %296 = load float, float* %295, align 4
  %297 = insertelement <4 x float> zeroinitializer, float %296, i32 0
  %298 = insertelement <4 x float> %297, float 0.000000e+00, i32 1
  %299 = insertelement <4 x float> %298, float 0.000000e+00, i32 2
  %300 = insertelement <4 x float> %299, float 0.000000e+00, i32 3
  %301 = call <4 x float> @llvm.fma.v4f32(<4 x float> %294, <4 x float> %300, <4 x float> %288)
  %302 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %303 = load float, float* %302, align 4
  %304 = insertelement <4 x float> zeroinitializer, float %303, i32 0
  %305 = insertelement <4 x float> %304, float 0.000000e+00, i32 1
  %306 = insertelement <4 x float> %305, float 0.000000e+00, i32 2
  %307 = insertelement <4 x float> %306, float 0.000000e+00, i32 3
  %308 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %309 = load float, float* %308, align 4
  %310 = insertelement <4 x float> zeroinitializer, float %309, i32 0
  %311 = insertelement <4 x float> %310, float 0.000000e+00, i32 1
  %312 = insertelement <4 x float> %311, float 0.000000e+00, i32 2
  %313 = insertelement <4 x float> %312, float 0.000000e+00, i32 3
  %314 = call <4 x float> @llvm.fma.v4f32(<4 x float> %307, <4 x float> %313, <4 x float> %301)
  %315 = extractelement <4 x float> %314, i32 0
  %316 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %315, float* %316, align 4
  %317 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  %318 = load float, float* %317, align 4
  %319 = insertelement <4 x float> zeroinitializer, float %318, i32 0
  %320 = insertelement <4 x float> %319, float 0.000000e+00, i32 1
  %321 = insertelement <4 x float> %320, float 0.000000e+00, i32 2
  %322 = insertelement <4 x float> %321, float 0.000000e+00, i32 3
  %323 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %324 = load float, float* %323, align 4
  %325 = insertelement <4 x float> zeroinitializer, float %324, i32 0
  %326 = insertelement <4 x float> %325, float 0.000000e+00, i32 1
  %327 = insertelement <4 x float> %326, float 0.000000e+00, i32 2
  %328 = insertelement <4 x float> %327, float 0.000000e+00, i32 3
  %329 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %330 = load float, float* %329, align 4
  %331 = insertelement <4 x float> zeroinitializer, float %330, i32 0
  %332 = insertelement <4 x float> %331, float 0.000000e+00, i32 1
  %333 = insertelement <4 x float> %332, float 0.000000e+00, i32 2
  %334 = insertelement <4 x float> %333, float 0.000000e+00, i32 3
  %335 = call <4 x float> @llvm.fma.v4f32(<4 x float> %328, <4 x float> %334, <4 x float> %322)
  %336 = extractelement <4 x float> %335, i32 0
  %337 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  store float %336, float* %337, align 4
  %338 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  %339 = load float, float* %338, align 4
  %340 = insertelement <4 x float> zeroinitializer, float %339, i32 0
  %341 = insertelement <4 x float> %340, float 0.000000e+00, i32 1
  %342 = insertelement <4 x float> %341, float 0.000000e+00, i32 2
  %343 = insertelement <4 x float> %342, float 0.000000e+00, i32 3
  %344 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %345 = load float, float* %344, align 4
  %346 = insertelement <4 x float> zeroinitializer, float %345, i32 0
  %347 = insertelement <4 x float> %346, float 1.000000e+00, i32 1
  %348 = insertelement <4 x float> %347, float 1.000000e+00, i32 2
  %349 = insertelement <4 x float> %348, float 1.000000e+00, i32 3
  %350 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %351 = load float, float* %350, align 4
  %352 = insertelement <4 x float> zeroinitializer, float %351, i32 0
  %353 = insertelement <4 x float> %352, float 0.000000e+00, i32 1
  %354 = insertelement <4 x float> %353, float 0.000000e+00, i32 2
  %355 = insertelement <4 x float> %354, float 0.000000e+00, i32 3
  %356 = call <4 x float> @llvm.fma.v4f32(<4 x float> %349, <4 x float> %355, <4 x float> %343)
  %357 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %358 = load float, float* %357, align 4
  %359 = insertelement <4 x float> zeroinitializer, float %358, i32 0
  %360 = insertelement <4 x float> %359, float 0.000000e+00, i32 1
  %361 = insertelement <4 x float> %360, float 0.000000e+00, i32 2
  %362 = insertelement <4 x float> %361, float 0.000000e+00, i32 3
  %363 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %364 = load float, float* %363, align 4
  %365 = insertelement <4 x float> zeroinitializer, float %364, i32 0
  %366 = insertelement <4 x float> %365, float 0.000000e+00, i32 1
  %367 = insertelement <4 x float> %366, float 0.000000e+00, i32 2
  %368 = insertelement <4 x float> %367, float 0.000000e+00, i32 3
  %369 = call <4 x float> @llvm.fma.v4f32(<4 x float> %362, <4 x float> %368, <4 x float> %356)
  %370 = extractelement <4 x float> %369, i32 0
  %371 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  store float %370, float* %371, align 4
  %372 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 0
  %373 = load float, float* %372, align 4
  %374 = insertelement <4 x float> zeroinitializer, float %373, i32 0
  %375 = insertelement <4 x float> %374, float 0.000000e+00, i32 1
  %376 = insertelement <4 x float> %375, float 0.000000e+00, i32 2
  %377 = insertelement <4 x float> %376, float 0.000000e+00, i32 3
  %378 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %379 = load float, float* %378, align 4
  %380 = insertelement <4 x float> zeroinitializer, float %379, i32 0
  %381 = insertelement <4 x float> %380, float 0.000000e+00, i32 1
  %382 = insertelement <4 x float> %381, float 0.000000e+00, i32 2
  %383 = insertelement <4 x float> %382, float 0.000000e+00, i32 3
  %384 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %385 = load float, float* %384, align 4
  %386 = insertelement <4 x float> zeroinitializer, float %385, i32 0
  %387 = insertelement <4 x float> %386, float 0.000000e+00, i32 1
  %388 = insertelement <4 x float> %387, float 0.000000e+00, i32 2
  %389 = insertelement <4 x float> %388, float 0.000000e+00, i32 3
  %390 = call <4 x float> @llvm.fma.v4f32(<4 x float> %383, <4 x float> %389, <4 x float> %377)
  %391 = extractelement <4 x float> %390, i32 0
  %392 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 0
  store float %391, float* %392, align 4
  %393 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  %394 = load float, float* %393, align 4
  %395 = insertelement <4 x float> zeroinitializer, float %394, i32 0
  %396 = insertelement <4 x float> %395, float 0.000000e+00, i32 1
  %397 = insertelement <4 x float> %396, float 0.000000e+00, i32 2
  %398 = insertelement <4 x float> %397, float 0.000000e+00, i32 3
  %399 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %400 = load float, float* %399, align 4
  %401 = insertelement <4 x float> zeroinitializer, float %400, i32 0
  %402 = insertelement <4 x float> %401, float 0.000000e+00, i32 1
  %403 = insertelement <4 x float> %402, float 0.000000e+00, i32 2
  %404 = insertelement <4 x float> %403, float 0.000000e+00, i32 3
  %405 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %406 = load float, float* %405, align 4
  %407 = insertelement <4 x float> zeroinitializer, float %406, i32 0
  %408 = insertelement <4 x float> %407, float 0.000000e+00, i32 1
  %409 = insertelement <4 x float> %408, float 0.000000e+00, i32 2
  %410 = insertelement <4 x float> %409, float 0.000000e+00, i32 3
  %411 = call <4 x float> @llvm.fma.v4f32(<4 x float> %404, <4 x float> %410, <4 x float> %398)
  %412 = extractelement <4 x float> %411, i32 0
  %413 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  store float %412, float* %413, align 4
  %414 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  %415 = load float, float* %414, align 4
  %416 = insertelement <4 x float> zeroinitializer, float %415, i32 0
  %417 = insertelement <4 x float> %416, float 0.000000e+00, i32 1
  %418 = insertelement <4 x float> %417, float 0.000000e+00, i32 2
  %419 = insertelement <4 x float> %418, float 0.000000e+00, i32 3
  %420 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %421 = load float, float* %420, align 4
  %422 = insertelement <4 x float> zeroinitializer, float %421, i32 0
  %423 = insertelement <4 x float> %422, float 1.000000e+00, i32 1
  %424 = insertelement <4 x float> %423, float 1.000000e+00, i32 2
  %425 = insertelement <4 x float> %424, float 1.000000e+00, i32 3
  %426 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %427 = load float, float* %426, align 4
  %428 = insertelement <4 x float> zeroinitializer, float %427, i32 0
  %429 = insertelement <4 x float> %428, float 0.000000e+00, i32 1
  %430 = insertelement <4 x float> %429, float 0.000000e+00, i32 2
  %431 = insertelement <4 x float> %430, float 0.000000e+00, i32 3
  %432 = call <4 x float> @llvm.fma.v4f32(<4 x float> %425, <4 x float> %431, <4 x float> %419)
  %433 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %434 = load float, float* %433, align 4
  %435 = insertelement <4 x float> zeroinitializer, float %434, i32 0
  %436 = insertelement <4 x float> %435, float 0.000000e+00, i32 1
  %437 = insertelement <4 x float> %436, float 0.000000e+00, i32 2
  %438 = insertelement <4 x float> %437, float 0.000000e+00, i32 3
  %439 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %440 = load float, float* %439, align 4
  %441 = insertelement <4 x float> zeroinitializer, float %440, i32 0
  %442 = insertelement <4 x float> %441, float 0.000000e+00, i32 1
  %443 = insertelement <4 x float> %442, float 0.000000e+00, i32 2
  %444 = insertelement <4 x float> %443, float 0.000000e+00, i32 3
  %445 = call <4 x float> @llvm.fma.v4f32(<4 x float> %438, <4 x float> %444, <4 x float> %432)
  %446 = extractelement <4 x float> %445, i32 0
  %447 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  store float %446, float* %447, align 4
  %448 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 2
  %449 = load float, float* %448, align 4
  %450 = insertelement <4 x float> zeroinitializer, float %449, i32 0
  %451 = insertelement <4 x float> %450, float 0.000000e+00, i32 1
  %452 = insertelement <4 x float> %451, float 0.000000e+00, i32 2
  %453 = insertelement <4 x float> %452, float 0.000000e+00, i32 3
  %454 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %455 = load float, float* %454, align 4
  %456 = insertelement <4 x float> zeroinitializer, float %455, i32 0
  %457 = insertelement <4 x float> %456, float 0.000000e+00, i32 1
  %458 = insertelement <4 x float> %457, float 0.000000e+00, i32 2
  %459 = insertelement <4 x float> %458, float 0.000000e+00, i32 3
  %460 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %461 = load float, float* %460, align 4
  %462 = insertelement <4 x float> zeroinitializer, float %461, i32 0
  %463 = insertelement <4 x float> %462, float 0.000000e+00, i32 1
  %464 = insertelement <4 x float> %463, float 0.000000e+00, i32 2
  %465 = insertelement <4 x float> %464, float 0.000000e+00, i32 3
  %466 = call <4 x float> @llvm.fma.v4f32(<4 x float> %459, <4 x float> %465, <4 x float> %453)
  %467 = extractelement <4 x float> %466, i32 0
  %468 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 2
  store float %467, float* %468, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #0 {
.preheader:
  %0 = alloca [2 x [2 x float]], align 16
  %1 = alloca [2 x [2 x float]], align 16
  %2 = alloca [3 x [3 x float]], align 16
  %3 = bitcast [2 x [2 x float]]* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %3, i8* nonnull align 16 dereferenceable(16) bitcast ([2 x [2 x float]]* @__const.main.mat_in to i8*), i64 16, i1 false)
  %4 = bitcast [2 x [2 x float]]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %4, i8* nonnull align 16 dereferenceable(16) bitcast ([2 x [2 x float]]* @__const.main.f_in to i8*), i64 16, i1 false)
  %5 = bitcast [3 x [3 x float]]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(36) %5, i8 0, i64 36, i1 false)
  %6 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %0, i64 0, i64 0
  %7 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %1, i64 0, i64 0
  %8 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0
  call void @convolution([2 x float]* nonnull %6, [2 x float]* nonnull %7, [3 x float]* nonnull %8)
  %9 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 0
  %10 = load float, float* %9, align 16
  %11 = fpext float %10 to double
  %12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %11) #5
  %13 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 1
  %14 = load float, float* %13, align 4
  %15 = fpext float %14 to double
  %16 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %15) #5
  %17 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 2
  %18 = load float, float* %17, align 8
  %19 = fpext float %18 to double
  %20 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %19) #5
  %21 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 0
  %22 = load float, float* %21, align 4
  %23 = fpext float %22 to double
  %24 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %23) #5
  %25 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 1
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %27) #5
  %29 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 2
  %30 = load float, float* %29, align 4
  %31 = fpext float %30 to double
  %32 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %31) #5
  %33 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 0
  %34 = load float, float* %33, align 8
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %35) #5
  %37 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 1
  %38 = load float, float* %37, align 4
  %39 = fpext float %38 to double
  %40 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %39) #5
  %41 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 2
  %42 = load float, float* %41, align 8
  %43 = fpext float %42 to double
  %44 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %43) #5
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @printf(i8*, ...) #3

; Function Attrs: nounwind readnone speculatable willreturn
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #4

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable willreturn }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 11.0.1"}
