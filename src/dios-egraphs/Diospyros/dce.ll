; ModuleID = 'build/diospyros.ll'
source_filename = "fail-tests/qr-decomp-local-arrays.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

@.str = private unnamed_addr constant [4 x i8] c"%f\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"Q Output: %f\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"Expected Q Output: %f\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"R Output: %f\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"Expected R Output: %f\0A\00", align 1

; Function Attrs: alwaysinline nounwind ssp uwtable
define float @sgn(float %0) #0 {
  %2 = fcmp ogt float %0, 0.000000e+00
  %3 = zext i1 %2 to i32
  %4 = fcmp olt float %0, 0.000000e+00
  %.neg = sext i1 %4 to i32
  %5 = add nsw i32 %.neg, %3
  %6 = sitofp i32 %5 to float
  ret float %6
}

; Function Attrs: noinline nounwind ssp uwtable
define float @no_opt_sgn(float %0) #1 {
  %2 = fcmp ogt float %0, 0.000000e+00
  %3 = zext i1 %2 to i32
  %4 = fcmp olt float %0, 0.000000e+00
  %.neg = sext i1 %4 to i32
  %5 = add nsw i32 %.neg, %3
  %6 = sitofp i32 %5 to float
  ret float %6
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define float @naive_norm(float* %0, i32 %1) #0 {
  %3 = icmp sgt i32 %1, 0
  %smax = select i1 %3, i32 %1, i32 0
  %wide.trip.count = zext i32 %smax to i64
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %4 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %wide.trip.count, 3
  %5 = icmp ult i64 %4, 3
  br i1 %5, label %._crit_edge.unr-lcssa, label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 2147483644
  br label %6

6:                                                ; preds = %6, %.lr.ph.new
  %.013 = phi float [ 0.000000e+00, %.lr.ph.new ], [ %22, %6 ]
  %indvars.iv2 = phi i64 [ 0, %.lr.ph.new ], [ %indvars.iv.next.3, %6 ]
  %niter = phi i64 [ %unroll_iter, %.lr.ph.new ], [ %niter.nsub.3, %6 ]
  %7 = getelementptr inbounds float, float* %0, i64 %indvars.iv2
  %8 = load float, float* %7, align 4
  %9 = fmul float %8, %8
  %10 = fadd float %.013, %9
  %indvars.iv.next = or i64 %indvars.iv2, 1
  %11 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %12
  %14 = fadd float %10, %13
  %indvars.iv.next.1 = or i64 %indvars.iv2, 2
  %15 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, %16
  %18 = fadd float %14, %17
  %indvars.iv.next.2 = or i64 %indvars.iv2, 3
  %19 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %20
  %22 = fadd float %18, %21
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv2, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3.not = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3.not, label %._crit_edge.unr-lcssa, label %6

._crit_edge.unr-lcssa:                            ; preds = %6, %.lr.ph
  %split.ph = phi float [ undef, %.lr.ph ], [ %22, %6 ]
  %.013.unr = phi float [ 0.000000e+00, %.lr.ph ], [ %22, %6 ]
  %indvars.iv2.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next.3, %6 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %._crit_edge, label %.epil.preheader

.epil.preheader:                                  ; preds = %.epil.preheader, %._crit_edge.unr-lcssa
  %.013.epil = phi float [ %26, %.epil.preheader ], [ %.013.unr, %._crit_edge.unr-lcssa ]
  %indvars.iv2.epil = phi i64 [ %indvars.iv.next.epil, %.epil.preheader ], [ %indvars.iv2.unr, %._crit_edge.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %.epil.preheader ], [ %xtraiter, %._crit_edge.unr-lcssa ]
  %23 = getelementptr inbounds float, float* %0, i64 %indvars.iv2.epil
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %24
  %26 = fadd float %.013.epil, %25
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv2.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %._crit_edge, label %.epil.preheader, !llvm.loop !3

._crit_edge:                                      ; preds = %.epil.preheader, %._crit_edge.unr-lcssa, %2
  %.01.lcssa = phi float [ 0.000000e+00, %2 ], [ %split.ph, %._crit_edge.unr-lcssa ], [ %26, %.epil.preheader ]
  %27 = call float @llvm.sqrt.f32(float %.01.lcssa)
  ret float %27
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #2

; Function Attrs: noinline nounwind ssp uwtable
define float @no_opt_naive_norm(float* %0, i32 %1) #1 {
  %3 = icmp sgt i32 %1, 0
  %smax = select i1 %3, i32 %1, i32 0
  %wide.trip.count = zext i32 %smax to i64
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %4 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %wide.trip.count, 3
  %5 = icmp ult i64 %4, 3
  br i1 %5, label %._crit_edge.unr-lcssa, label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 2147483644
  br label %6

6:                                                ; preds = %6, %.lr.ph.new
  %.013 = phi float [ 0.000000e+00, %.lr.ph.new ], [ %22, %6 ]
  %indvars.iv2 = phi i64 [ 0, %.lr.ph.new ], [ %indvars.iv.next.3, %6 ]
  %niter = phi i64 [ %unroll_iter, %.lr.ph.new ], [ %niter.nsub.3, %6 ]
  %7 = getelementptr inbounds float, float* %0, i64 %indvars.iv2
  %8 = load float, float* %7, align 4
  %9 = fmul float %8, %8
  %10 = fadd float %.013, %9
  %indvars.iv.next = or i64 %indvars.iv2, 1
  %11 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %12
  %14 = fadd float %10, %13
  %indvars.iv.next.1 = or i64 %indvars.iv2, 2
  %15 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, %16
  %18 = fadd float %14, %17
  %indvars.iv.next.2 = or i64 %indvars.iv2, 3
  %19 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %20
  %22 = fadd float %18, %21
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv2, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3.not = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3.not, label %._crit_edge.unr-lcssa, label %6

._crit_edge.unr-lcssa:                            ; preds = %6, %.lr.ph
  %split.ph = phi float [ undef, %.lr.ph ], [ %22, %6 ]
  %.013.unr = phi float [ 0.000000e+00, %.lr.ph ], [ %22, %6 ]
  %indvars.iv2.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next.3, %6 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %._crit_edge, label %.epil.preheader

.epil.preheader:                                  ; preds = %.epil.preheader, %._crit_edge.unr-lcssa
  %.013.epil = phi float [ %26, %.epil.preheader ], [ %.013.unr, %._crit_edge.unr-lcssa ]
  %indvars.iv2.epil = phi i64 [ %indvars.iv.next.epil, %.epil.preheader ], [ %indvars.iv2.unr, %._crit_edge.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %.epil.preheader ], [ %xtraiter, %._crit_edge.unr-lcssa ]
  %23 = getelementptr inbounds float, float* %0, i64 %indvars.iv2.epil
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %24
  %26 = fadd float %.013.epil, %25
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv2.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %._crit_edge, label %.epil.preheader, !llvm.loop !5

._crit_edge:                                      ; preds = %.epil.preheader, %._crit_edge.unr-lcssa, %2
  %.01.lcssa = phi float [ 0.000000e+00, %2 ], [ %split.ph, %._crit_edge.unr-lcssa ], [ %26, %.epil.preheader ]
  %27 = call float @llvm.sqrt.f32(float %.01.lcssa)
  ret float %27
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define void @naive_fixed_transpose(float* %0) #0 {
.lr.ph:
  %1 = getelementptr inbounds float, float* %0, i64 1
  %2 = bitcast float* %1 to i32*
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds float, float* %0, i64 2
  %5 = bitcast float* %4 to i32*
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  store i32 %3, i32* %5, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @no_opt_naive_fixed_transpose(float* %0) #1 {
.lr.ph:
  %1 = getelementptr inbounds float, float* %0, i64 1
  %2 = bitcast float* %1 to i32*
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds float, float* %0, i64 2
  %5 = bitcast float* %4 to i32*
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  store i32 %3, i32* %5, align 4
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define void @naive_fixed_matrix_multiply(float* %0, float* %1, float* %2) #0 {
.preheader:
  store float 0.000000e+00, float* %2, align 4
  %3 = getelementptr float, float* %0, i32 0
  %4 = load float, float* %3, align 4
  %5 = insertelement <4 x float> zeroinitializer, float %4, i32 0
  %6 = insertelement <4 x float> %5, float 0.000000e+00, i32 1
  %7 = insertelement <4 x float> %6, float 0.000000e+00, i32 2
  %8 = insertelement <4 x float> %7, float 0.000000e+00, i32 3
  %9 = getelementptr float, float* %1, i32 0
  %10 = load float, float* %9, align 4
  %11 = insertelement <4 x float> zeroinitializer, float %10, i32 0
  %12 = insertelement <4 x float> %11, float 0.000000e+00, i32 1
  %13 = insertelement <4 x float> %12, float 0.000000e+00, i32 2
  %14 = insertelement <4 x float> %13, float 0.000000e+00, i32 3
  %15 = call <4 x float> @llvm.fma.v4f32(<4 x float> %8, <4 x float> %14, <4 x float> zeroinitializer)
  %16 = extractelement <4 x float> %15, i32 0
  store float %16, float* %2, align 4
  %17 = getelementptr float, float* %0, i32 0
  %18 = load float, float* %17, align 4
  %19 = insertelement <4 x float> zeroinitializer, float %18, i32 0
  %20 = insertelement <4 x float> %19, float 1.000000e+00, i32 1
  %21 = insertelement <4 x float> %20, float 1.000000e+00, i32 2
  %22 = insertelement <4 x float> %21, float 1.000000e+00, i32 3
  %23 = insertelement <4 x float> zeroinitializer, float %10, i32 0
  %24 = insertelement <4 x float> %23, float 0.000000e+00, i32 1
  %25 = insertelement <4 x float> %24, float 0.000000e+00, i32 2
  %26 = insertelement <4 x float> %25, float 0.000000e+00, i32 3
  %27 = fmul <4 x float> %22, %26
  %28 = fadd <4 x float> %27, zeroinitializer
  %29 = getelementptr float, float* %0, i32 0
  %30 = getelementptr inbounds float, float* %29, i64 1
  %31 = load float, float* %30, align 4
  %32 = insertelement <4 x float> zeroinitializer, float %31, i32 0
  %33 = insertelement <4 x float> %32, float 0.000000e+00, i32 1
  %34 = insertelement <4 x float> %33, float 0.000000e+00, i32 2
  %35 = insertelement <4 x float> %34, float 0.000000e+00, i32 3
  %36 = getelementptr float, float* %1, i32 0
  %37 = getelementptr inbounds float, float* %36, i64 2
  %38 = load float, float* %37, align 4
  %39 = insertelement <4 x float> zeroinitializer, float %38, i32 0
  %40 = insertelement <4 x float> %39, float 0.000000e+00, i32 1
  %41 = insertelement <4 x float> %40, float 0.000000e+00, i32 2
  %42 = insertelement <4 x float> %41, float 0.000000e+00, i32 3
  %43 = call <4 x float> @llvm.fma.v4f32(<4 x float> %35, <4 x float> %42, <4 x float> %28)
  %44 = extractelement <4 x float> %43, i32 0
  store float %44, float* %2, align 4
  %45 = extractelement <4 x float> %43, i32 1
  %46 = getelementptr float, float* %2, i32 0
  %47 = getelementptr inbounds float, float* %46, i64 1
  store float %45, float* %47, align 4
  %48 = getelementptr float, float* %0, i32 0
  %49 = load float, float* %48, align 4
  %50 = insertelement <4 x float> zeroinitializer, float %49, i32 0
  %51 = insertelement <4 x float> %50, float 0.000000e+00, i32 1
  %52 = insertelement <4 x float> %51, float 0.000000e+00, i32 2
  %53 = insertelement <4 x float> %52, float 0.000000e+00, i32 3
  %54 = getelementptr float, float* %1, i32 0
  %55 = getelementptr inbounds float, float* %54, i64 1
  %56 = load float, float* %55, align 4
  %57 = insertelement <4 x float> zeroinitializer, float %56, i32 0
  %58 = insertelement <4 x float> %57, float 0.000000e+00, i32 1
  %59 = insertelement <4 x float> %58, float 0.000000e+00, i32 2
  %60 = insertelement <4 x float> %59, float 0.000000e+00, i32 3
  %61 = call <4 x float> @llvm.fma.v4f32(<4 x float> %53, <4 x float> %60, <4 x float> zeroinitializer)
  %62 = extractelement <4 x float> %61, i32 0
  store float %62, float* %47, align 4
  %63 = insertelement <4 x float> zeroinitializer, float %49, i32 0
  %64 = insertelement <4 x float> %63, float 1.000000e+00, i32 1
  %65 = insertelement <4 x float> %64, float 1.000000e+00, i32 2
  %66 = insertelement <4 x float> %65, float 1.000000e+00, i32 3
  %67 = insertelement <4 x float> zeroinitializer, float %56, i32 0
  %68 = insertelement <4 x float> %67, float 0.000000e+00, i32 1
  %69 = insertelement <4 x float> %68, float 0.000000e+00, i32 2
  %70 = insertelement <4 x float> %69, float 0.000000e+00, i32 3
  %71 = fmul <4 x float> %66, %70
  %72 = fadd <4 x float> %71, zeroinitializer
  %73 = getelementptr float, float* %0, i32 0
  %74 = getelementptr inbounds float, float* %73, i64 1
  %75 = load float, float* %74, align 4
  %76 = insertelement <4 x float> zeroinitializer, float %75, i32 0
  %77 = insertelement <4 x float> %76, float 0.000000e+00, i32 1
  %78 = insertelement <4 x float> %77, float 0.000000e+00, i32 2
  %79 = insertelement <4 x float> %78, float 0.000000e+00, i32 3
  %80 = getelementptr float, float* %1, i32 0
  %81 = getelementptr inbounds float, float* %80, i64 3
  %82 = load float, float* %81, align 4
  %83 = insertelement <4 x float> zeroinitializer, float %82, i32 0
  %84 = insertelement <4 x float> %83, float 0.000000e+00, i32 1
  %85 = insertelement <4 x float> %84, float 0.000000e+00, i32 2
  %86 = insertelement <4 x float> %85, float 0.000000e+00, i32 3
  %87 = call <4 x float> @llvm.fma.v4f32(<4 x float> %79, <4 x float> %86, <4 x float> %72)
  %88 = extractelement <4 x float> %87, i32 0
  store float %88, float* %47, align 4
  %89 = extractelement <4 x float> %87, i32 1
  %90 = getelementptr float, float* %2, i32 0
  %91 = getelementptr inbounds float, float* %90, i64 2
  store float %89, float* %91, align 4
  %92 = getelementptr float, float* %0, i32 0
  %93 = getelementptr inbounds float, float* %92, i64 2
  %94 = load float, float* %93, align 4
  %95 = insertelement <4 x float> zeroinitializer, float %94, i32 0
  %96 = insertelement <4 x float> %95, float 0.000000e+00, i32 1
  %97 = insertelement <4 x float> %96, float 0.000000e+00, i32 2
  %98 = insertelement <4 x float> %97, float 0.000000e+00, i32 3
  %99 = getelementptr float, float* %1, i32 0
  %100 = load float, float* %99, align 4
  %101 = insertelement <4 x float> zeroinitializer, float %100, i32 0
  %102 = insertelement <4 x float> %101, float 0.000000e+00, i32 1
  %103 = insertelement <4 x float> %102, float 0.000000e+00, i32 2
  %104 = insertelement <4 x float> %103, float 0.000000e+00, i32 3
  %105 = call <4 x float> @llvm.fma.v4f32(<4 x float> %98, <4 x float> %104, <4 x float> zeroinitializer)
  %106 = extractelement <4 x float> %105, i32 0
  store float %106, float* %91, align 4
  %107 = insertelement <4 x float> zeroinitializer, float %94, i32 0
  %108 = insertelement <4 x float> %107, float 1.000000e+00, i32 1
  %109 = insertelement <4 x float> %108, float 1.000000e+00, i32 2
  %110 = insertelement <4 x float> %109, float 1.000000e+00, i32 3
  %111 = insertelement <4 x float> zeroinitializer, float %100, i32 0
  %112 = insertelement <4 x float> %111, float 0.000000e+00, i32 1
  %113 = insertelement <4 x float> %112, float 0.000000e+00, i32 2
  %114 = insertelement <4 x float> %113, float 0.000000e+00, i32 3
  %115 = fmul <4 x float> %110, %114
  %116 = fadd <4 x float> %115, zeroinitializer
  %117 = getelementptr float, float* %0, i32 0
  %118 = getelementptr inbounds float, float* %117, i64 3
  %119 = load float, float* %118, align 4
  %120 = insertelement <4 x float> zeroinitializer, float %119, i32 0
  %121 = insertelement <4 x float> %120, float 0.000000e+00, i32 1
  %122 = insertelement <4 x float> %121, float 0.000000e+00, i32 2
  %123 = insertelement <4 x float> %122, float 0.000000e+00, i32 3
  %124 = load float, float* %37, align 4
  %125 = insertelement <4 x float> zeroinitializer, float %124, i32 0
  %126 = insertelement <4 x float> %125, float 0.000000e+00, i32 1
  %127 = insertelement <4 x float> %126, float 0.000000e+00, i32 2
  %128 = insertelement <4 x float> %127, float 0.000000e+00, i32 3
  %129 = call <4 x float> @llvm.fma.v4f32(<4 x float> %123, <4 x float> %128, <4 x float> %116)
  %130 = extractelement <4 x float> %129, i32 0
  store float %130, float* %91, align 4
  %131 = extractelement <4 x float> %129, i32 1
  %132 = getelementptr float, float* %2, i32 0
  %133 = getelementptr inbounds float, float* %132, i64 3
  store float %131, float* %133, align 4
  %134 = load float, float* %93, align 4
  %135 = insertelement <4 x float> zeroinitializer, float %134, i32 0
  %136 = insertelement <4 x float> %135, float 0.000000e+00, i32 1
  %137 = insertelement <4 x float> %136, float 0.000000e+00, i32 2
  %138 = insertelement <4 x float> %137, float 0.000000e+00, i32 3
  %139 = load float, float* %55, align 4
  %140 = insertelement <4 x float> zeroinitializer, float %139, i32 0
  %141 = insertelement <4 x float> %140, float 0.000000e+00, i32 1
  %142 = insertelement <4 x float> %141, float 0.000000e+00, i32 2
  %143 = insertelement <4 x float> %142, float 0.000000e+00, i32 3
  %144 = call <4 x float> @llvm.fma.v4f32(<4 x float> %138, <4 x float> %143, <4 x float> zeroinitializer)
  %145 = extractelement <4 x float> %144, i32 0
  store float %145, float* %133, align 4
  %146 = load float, float* %93, align 4
  %147 = insertelement <4 x float> zeroinitializer, float %146, i32 0
  %148 = insertelement <4 x float> %147, float 1.000000e+00, i32 1
  %149 = insertelement <4 x float> %148, float 1.000000e+00, i32 2
  %150 = insertelement <4 x float> %149, float 1.000000e+00, i32 3
  %151 = insertelement <4 x float> zeroinitializer, float %139, i32 0
  %152 = insertelement <4 x float> %151, float 0.000000e+00, i32 1
  %153 = insertelement <4 x float> %152, float 0.000000e+00, i32 2
  %154 = insertelement <4 x float> %153, float 0.000000e+00, i32 3
  %155 = fmul <4 x float> %150, %154
  %156 = fadd <4 x float> %155, zeroinitializer
  %157 = load float, float* %118, align 4
  %158 = insertelement <4 x float> zeroinitializer, float %157, i32 0
  %159 = insertelement <4 x float> %158, float 0.000000e+00, i32 1
  %160 = insertelement <4 x float> %159, float 0.000000e+00, i32 2
  %161 = insertelement <4 x float> %160, float 0.000000e+00, i32 3
  %162 = load float, float* %81, align 4
  %163 = insertelement <4 x float> zeroinitializer, float %162, i32 0
  %164 = insertelement <4 x float> %163, float 0.000000e+00, i32 1
  %165 = insertelement <4 x float> %164, float 0.000000e+00, i32 2
  %166 = insertelement <4 x float> %165, float 0.000000e+00, i32 3
  %167 = call <4 x float> @llvm.fma.v4f32(<4 x float> %161, <4 x float> %166, <4 x float> %156)
  %168 = extractelement <4 x float> %167, i32 0
  store float %168, float* %133, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @no_opt_naive_fixed_matrix_multiply(float* %0, float* %1, float* %2) #1 {
.preheader:
  store float 0.000000e+00, float* %2, align 4
  %3 = load float, float* %0, align 4
  %4 = load float, float* %1, align 4
  %5 = fmul float %3, %4
  %6 = fadd float %5, 0.000000e+00
  store float %6, float* %2, align 4
  %7 = getelementptr inbounds float, float* %0, i64 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds float, float* %1, i64 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %8, %10
  %12 = fadd float %6, %11
  store float %12, float* %2, align 4
  %13 = getelementptr inbounds float, float* %2, i64 1
  store float 0.000000e+00, float* %13, align 4
  %14 = load float, float* %0, align 4
  %15 = getelementptr inbounds float, float* %1, i64 1
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = fadd float %17, 0.000000e+00
  store float %18, float* %13, align 4
  %19 = load float, float* %7, align 4
  %20 = getelementptr inbounds float, float* %1, i64 3
  %21 = load float, float* %20, align 4
  %22 = fmul float %19, %21
  %23 = fadd float %18, %22
  store float %23, float* %13, align 4
  %24 = getelementptr inbounds float, float* %0, i64 2
  %25 = getelementptr inbounds float, float* %2, i64 2
  store float 0.000000e+00, float* %25, align 4
  %26 = load float, float* %24, align 4
  %27 = load float, float* %1, align 4
  %28 = fmul float %26, %27
  %29 = fadd float %28, 0.000000e+00
  store float %29, float* %25, align 4
  %30 = getelementptr inbounds float, float* %0, i64 3
  %31 = load float, float* %30, align 4
  %32 = load float, float* %9, align 4
  %33 = fmul float %31, %32
  %34 = fadd float %29, %33
  store float %34, float* %25, align 4
  %35 = getelementptr inbounds float, float* %2, i64 3
  store float 0.000000e+00, float* %35, align 4
  %36 = load float, float* %24, align 4
  %37 = load float, float* %15, align 4
  %38 = fmul float %36, %37
  %39 = fadd float %38, 0.000000e+00
  store float %39, float* %35, align 4
  %40 = load float, float* %30, align 4
  %41 = load float, float* %20, align 4
  %42 = fmul float %40, %41
  %43 = fadd float %39, %42
  store float %43, float* %35, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @naive_fixed_qr_decomp(float* %0, float* %1, float* %2) #1 {
.preheader49:
  %3 = getelementptr float, float* %0, i32 0
  %4 = bitcast float* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = bitcast i32 %5 to float
  %7 = insertelement <4 x float> zeroinitializer, float %6, i32 0
  %8 = insertelement <4 x float> %7, float 0.000000e+00, i32 1
  %9 = insertelement <4 x float> %8, float 0.000000e+00, i32 2
  %10 = insertelement <4 x float> %9, float 0.000000e+00, i32 3
  %11 = extractelement <4 x float> %10, i32 0
  %12 = getelementptr float, float* %2, i32 0
  %13 = bitcast float* %12 to i32*
  %14 = bitcast i32* %13 to float*
  store float %11, float* %14, align 4
  %15 = getelementptr float, float* %0, i32 0
  %16 = getelementptr inbounds float, float* %15, i64 1
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = bitcast i32 %18 to float
  %20 = insertelement <4 x float> zeroinitializer, float %19, i32 0
  %21 = insertelement <4 x float> %20, float 0.000000e+00, i32 1
  %22 = insertelement <4 x float> %21, float 0.000000e+00, i32 2
  %23 = insertelement <4 x float> %22, float 0.000000e+00, i32 3
  %24 = extractelement <4 x float> %23, i32 0
  %25 = getelementptr float, float* %2, i32 0
  %26 = getelementptr inbounds float, float* %25, i64 1
  %27 = bitcast float* %26 to i32*
  %28 = bitcast i32* %27 to float*
  store float %24, float* %28, align 4
  %29 = getelementptr float, float* %0, i32 0
  %30 = getelementptr inbounds float, float* %29, i64 2
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = bitcast i32 %32 to float
  %34 = insertelement <4 x float> zeroinitializer, float %33, i32 0
  %35 = insertelement <4 x float> %34, float 0.000000e+00, i32 1
  %36 = insertelement <4 x float> %35, float 0.000000e+00, i32 2
  %37 = insertelement <4 x float> %36, float 0.000000e+00, i32 3
  %38 = extractelement <4 x float> %37, i32 0
  %39 = getelementptr float, float* %2, i32 0
  %40 = getelementptr inbounds float, float* %39, i64 2
  %41 = bitcast float* %40 to i32*
  %42 = bitcast i32* %41 to float*
  store float %38, float* %42, align 4
  %43 = getelementptr float, float* %0, i32 0
  %44 = getelementptr inbounds float, float* %43, i64 3
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = bitcast i32 %46 to float
  %48 = fneg float %47
  %49 = insertelement <4 x float> zeroinitializer, float %48, i32 0
  %50 = bitcast i32 %5 to float ; !! This is referencing an old load: match that should not occur?
  %51 = bitcast i32 %5 to float
  %52 = fmul float %50, %51
  %53 = fadd float %52, 0.000000e+00
  %54 = load i32, i32* %31, align 4
  %55 = bitcast i32 %54 to float
  %56 = bitcast i32 %54 to float
  %57 = fmul float %55, %56
  %58 = fadd float %53, %57
  %59 = call float @llvm.sqrt.f32(float %58)
  %60 = bitcast i32 %5 to float
  %61 = fcmp olt float %60, 0.000000e+00
  %62 = sext i1 %61 to i32
  %63 = fcmp ogt float %60, 0.000000e+00
  %64 = zext i1 %63 to i32
  %65 = add nsw i32 %62, %64
  %66 = sitofp i32 %65 to float
  %67 = fneg float %66
  %68 = fmul float %59, %67
  %69 = bitcast i32 %5 to float
  %70 = fadd float %69, %68
  %71 = bitcast i32 %5 to float
  %72 = bitcast i32 %5 to float
  %73 = fmul float %71, %72
  %74 = fadd float %73, 0.000000e+00
  %75 = bitcast i32 %54 to float
  %76 = bitcast i32 %54 to float
  %77 = fmul float %75, %76
  %78 = fadd float %74, %77
  %79 = call float @llvm.sqrt.f32(float %78)
  %80 = fneg float %66
  %81 = fmul float %79, %80
  %82 = bitcast i32 %5 to float
  %83 = fadd float %82, %81
  %84 = bitcast i32 %5 to float
  %85 = bitcast i32 %5 to float
  %86 = fmul float %84, %85
  %87 = fadd float %86, 0.000000e+00
  %88 = bitcast i32 %54 to float
  %89 = bitcast i32 %54 to float
  %90 = fmul float %88, %89
  %91 = fadd float %87, %90
  %92 = call float @llvm.sqrt.f32(float %91)
  %93 = fneg float %66
  %94 = fmul float %92, %93
  %95 = bitcast i32 %5 to float
  %96 = fadd float %95, %94
  %97 = fmul float %83, %96
  %98 = fadd float %97, 0.000000e+00
  %99 = bitcast i32 %5 to float
  %100 = bitcast i32 %5 to float
  %101 = fmul float %99, %100
  %102 = fadd float %101, 0.000000e+00
  %103 = bitcast i32 %54 to float
  %104 = bitcast i32 %54 to float
  %105 = fmul float %103, %104
  %106 = fadd float %102, %105
  %107 = call float @llvm.sqrt.f32(float %106)
  %108 = fneg float %66
  %109 = fmul float %107, %108
  %110 = fmul float %109, 0.000000e+00
  %111 = bitcast i32 %54 to float
  %112 = fadd float %111, %110
  %113 = bitcast i32 %5 to float
  %114 = bitcast i32 %5 to float
  %115 = fmul float %113, %114
  %116 = fadd float %115, 0.000000e+00
  %117 = bitcast i32 %54 to float
  %118 = bitcast i32 %54 to float
  %119 = fmul float %117, %118
  %120 = fadd float %116, %119
  %121 = call float @llvm.sqrt.f32(float %120)
  %122 = fneg float %66
  %123 = fmul float %121, %122
  %124 = fmul float %123, 0.000000e+00
  %125 = bitcast i32 %54 to float
  %126 = fadd float %125, %124
  %127 = fmul float %112, %126
  %128 = fadd float %98, %127
  %129 = call float @llvm.sqrt.f32(float %128)
  %130 = fadd float %129, 0.000000e+00
  %131 = fdiv float %70, %130
  %132 = fmul float %131, 2.000000e+00
  %133 = bitcast i32 %5 to float
  %134 = bitcast i32 %5 to float
  %135 = fmul float %133, %134
  %136 = fadd float %135, 0.000000e+00
  %137 = bitcast i32 %54 to float
  %138 = bitcast i32 %54 to float
  %139 = fmul float %137, %138
  %140 = fadd float %136, %139
  %141 = call float @llvm.sqrt.f32(float %140)
  %142 = fneg float %66
  %143 = fmul float %141, %142
  %144 = bitcast i32 %5 to float
  %145 = fadd float %144, %143
  %146 = bitcast i32 %5 to float
  %147 = bitcast i32 %5 to float
  %148 = fmul float %146, %147
  %149 = fadd float %148, 0.000000e+00
  %150 = bitcast i32 %54 to float
  %151 = bitcast i32 %54 to float
  %152 = fmul float %150, %151
  %153 = fadd float %149, %152
  %154 = call float @llvm.sqrt.f32(float %153)
  %155 = fneg float %66
  %156 = fmul float %154, %155
  %157 = bitcast i32 %5 to float
  %158 = fadd float %157, %156
  %159 = bitcast i32 %5 to float
  %160 = bitcast i32 %5 to float
  %161 = fmul float %159, %160
  %162 = fadd float %161, 0.000000e+00
  %163 = bitcast i32 %54 to float
  %164 = bitcast i32 %54 to float
  %165 = fmul float %163, %164
  %166 = fadd float %162, %165
  %167 = call float @llvm.sqrt.f32(float %166)
  %168 = fneg float %66
  %169 = fmul float %167, %168
  %170 = bitcast i32 %5 to float
  %171 = fadd float %170, %169
  %172 = fmul float %158, %171
  %173 = fadd float %172, 0.000000e+00
  %174 = bitcast i32 %5 to float
  %175 = bitcast i32 %5 to float
  %176 = fmul float %174, %175
  %177 = fadd float %176, 0.000000e+00
  %178 = bitcast i32 %54 to float
  %179 = bitcast i32 %54 to float
  %180 = fmul float %178, %179
  %181 = fadd float %177, %180
  %182 = call float @llvm.sqrt.f32(float %181)
  %183 = fneg float %66
  %184 = fmul float %182, %183
  %185 = fmul float %184, 0.000000e+00
  %186 = bitcast i32 %54 to float
  %187 = fadd float %186, %185
  %188 = bitcast i32 %5 to float
  %189 = bitcast i32 %5 to float
  %190 = fmul float %188, %189
  %191 = fadd float %190, 0.000000e+00
  %192 = bitcast i32 %54 to float
  %193 = bitcast i32 %54 to float
  %194 = fmul float %192, %193
  %195 = fadd float %191, %194
  %196 = call float @llvm.sqrt.f32(float %195)
  %197 = fneg float %66
  %198 = fmul float %196, %197
  %199 = fmul float %198, 0.000000e+00
  %200 = bitcast i32 %54 to float
  %201 = fadd float %200, %199
  %202 = fmul float %187, %201
  %203 = fadd float %173, %202
  %204 = call float @llvm.sqrt.f32(float %203)
  %205 = fadd float %204, 0.000000e+00
  %206 = fdiv float %145, %205
  %207 = fmul float %132, %206
  %208 = insertelement <4 x float> %49, float %207, i32 1
  %209 = bitcast i32 %5 to float
  %210 = bitcast i32 %5 to float
  %211 = fmul float %209, %210
  %212 = fadd float %211, 0.000000e+00
  %213 = bitcast i32 %54 to float
  %214 = bitcast i32 %54 to float
  %215 = fmul float %213, %214
  %216 = fadd float %212, %215
  %217 = call float @llvm.sqrt.f32(float %216)
  %218 = fneg float %66
  %219 = fmul float %217, %218
  %220 = bitcast i32 %5 to float
  %221 = fadd float %220, %219
  %222 = bitcast i32 %5 to float
  %223 = bitcast i32 %5 to float
  %224 = fmul float %222, %223
  %225 = fadd float %224, 0.000000e+00
  %226 = bitcast i32 %54 to float
  %227 = bitcast i32 %54 to float
  %228 = fmul float %226, %227
  %229 = fadd float %225, %228
  %230 = call float @llvm.sqrt.f32(float %229)
  %231 = fneg float %66
  %232 = fmul float %230, %231
  %233 = bitcast i32 %5 to float
  %234 = fadd float %233, %232
  %235 = bitcast i32 %5 to float
  %236 = bitcast i32 %5 to float
  %237 = fmul float %235, %236
  %238 = fadd float %237, 0.000000e+00
  %239 = bitcast i32 %54 to float
  %240 = bitcast i32 %54 to float
  %241 = fmul float %239, %240
  %242 = fadd float %238, %241
  %243 = call float @llvm.sqrt.f32(float %242)
  %244 = fneg float %66
  %245 = fmul float %243, %244
  %246 = bitcast i32 %5 to float
  %247 = fadd float %246, %245
  %248 = fmul float %234, %247
  %249 = fadd float %248, 0.000000e+00
  %250 = bitcast i32 %5 to float
  %251 = bitcast i32 %5 to float
  %252 = fmul float %250, %251
  %253 = fadd float %252, 0.000000e+00
  %254 = bitcast i32 %54 to float
  %255 = bitcast i32 %54 to float
  %256 = fmul float %254, %255
  %257 = fadd float %253, %256
  %258 = call float @llvm.sqrt.f32(float %257)
  %259 = fneg float %66
  %260 = fmul float %258, %259
  %261 = fmul float %260, 0.000000e+00
  %262 = bitcast i32 %54 to float
  %263 = fadd float %262, %261
  %264 = bitcast i32 %5 to float
  %265 = bitcast i32 %5 to float
  %266 = fmul float %264, %265
  %267 = fadd float %266, 0.000000e+00
  %268 = bitcast i32 %54 to float
  %269 = bitcast i32 %54 to float
  %270 = fmul float %268, %269
  %271 = fadd float %267, %270
  %272 = call float @llvm.sqrt.f32(float %271)
  %273 = fneg float %66
  %274 = fmul float %272, %273
  %275 = fmul float %274, 0.000000e+00
  %276 = bitcast i32 %54 to float
  %277 = fadd float %276, %275
  %278 = fmul float %263, %277
  %279 = fadd float %249, %278
  %280 = call float @llvm.sqrt.f32(float %279)
  %281 = fadd float %280, 0.000000e+00
  %282 = fdiv float %221, %281
  %283 = fmul float %282, 2.000000e+00
  %284 = bitcast i32 %5 to float
  %285 = bitcast i32 %5 to float
  %286 = fmul float %284, %285
  %287 = fadd float %286, 0.000000e+00
  %288 = bitcast i32 %54 to float
  %289 = bitcast i32 %54 to float
  %290 = fmul float %288, %289
  %291 = fadd float %287, %290
  %292 = call float @llvm.sqrt.f32(float %291)
  %293 = fneg float %66
  %294 = fmul float %292, %293
  %295 = fmul float %294, 0.000000e+00
  %296 = bitcast i32 %54 to float
  %297 = fadd float %296, %295
  %298 = bitcast i32 %5 to float
  %299 = bitcast i32 %5 to float
  %300 = fmul float %298, %299
  %301 = fadd float %300, 0.000000e+00
  %302 = bitcast i32 %54 to float
  %303 = bitcast i32 %54 to float
  %304 = fmul float %302, %303
  %305 = fadd float %301, %304
  %306 = call float @llvm.sqrt.f32(float %305)
  %307 = fneg float %66
  %308 = fmul float %306, %307
  %309 = bitcast i32 %5 to float
  %310 = fadd float %309, %308
  %311 = bitcast i32 %5 to float
  %312 = bitcast i32 %5 to float
  %313 = fmul float %311, %312
  %314 = fadd float %313, 0.000000e+00
  %315 = bitcast i32 %54 to float
  %316 = bitcast i32 %54 to float
  %317 = fmul float %315, %316
  %318 = fadd float %314, %317
  %319 = call float @llvm.sqrt.f32(float %318)
  %320 = fneg float %66
  %321 = fmul float %319, %320
  %322 = bitcast i32 %5 to float
  %323 = fadd float %322, %321
  %324 = fmul float %310, %323
  %325 = fadd float %324, 0.000000e+00
  %326 = bitcast i32 %5 to float
  %327 = bitcast i32 %5 to float
  %328 = fmul float %326, %327
  %329 = fadd float %328, 0.000000e+00
  %330 = bitcast i32 %54 to float
  %331 = bitcast i32 %54 to float
  %332 = fmul float %330, %331
  %333 = fadd float %329, %332
  %334 = call float @llvm.sqrt.f32(float %333)
  %335 = fneg float %66
  %336 = fmul float %334, %335
  %337 = fmul float %336, 0.000000e+00
  %338 = bitcast i32 %54 to float
  %339 = fadd float %338, %337
  %340 = bitcast i32 %5 to float
  %341 = bitcast i32 %5 to float
  %342 = fmul float %340, %341
  %343 = fadd float %342, 0.000000e+00
  %344 = bitcast i32 %54 to float
  %345 = bitcast i32 %54 to float
  %346 = fmul float %344, %345
  %347 = fadd float %343, %346
  %348 = call float @llvm.sqrt.f32(float %347)
  %349 = fneg float %66
  %350 = fmul float %348, %349
  %351 = fmul float %350, 0.000000e+00
  %352 = bitcast i32 %54 to float
  %353 = fadd float %352, %351
  %354 = fmul float %339, %353
  %355 = fadd float %325, %354
  %356 = call float @llvm.sqrt.f32(float %355)
  %357 = fadd float %356, 0.000000e+00
  %358 = fdiv float %297, %357
  %359 = fmul float %283, %358
  %360 = insertelement <4 x float> %208, float %359, i32 2
  %361 = bitcast i32 %5 to float
  %362 = bitcast i32 %5 to float
  %363 = fmul float %361, %362
  %364 = fadd float %363, 0.000000e+00
  %365 = bitcast i32 %54 to float
  %366 = bitcast i32 %54 to float
  %367 = fmul float %365, %366
  %368 = fadd float %364, %367
  %369 = call float @llvm.sqrt.f32(float %368)
  %370 = fneg float %66
  %371 = fmul float %369, %370
  %372 = fmul float %371, 0.000000e+00
  %373 = bitcast i32 %54 to float
  %374 = fadd float %373, %372
  %375 = bitcast i32 %5 to float
  %376 = bitcast i32 %5 to float
  %377 = fmul float %375, %376
  %378 = fadd float %377, 0.000000e+00
  %379 = bitcast i32 %54 to float
  %380 = bitcast i32 %54 to float
  %381 = fmul float %379, %380
  %382 = fadd float %378, %381
  %383 = call float @llvm.sqrt.f32(float %382)
  %384 = fneg float %66
  %385 = fmul float %383, %384
  %386 = bitcast i32 %5 to float
  %387 = fadd float %386, %385
  %388 = bitcast i32 %5 to float
  %389 = bitcast i32 %5 to float
  %390 = fmul float %388, %389
  %391 = fadd float %390, 0.000000e+00
  %392 = bitcast i32 %54 to float
  %393 = bitcast i32 %54 to float
  %394 = fmul float %392, %393
  %395 = fadd float %391, %394
  %396 = call float @llvm.sqrt.f32(float %395)
  %397 = fneg float %66
  %398 = fmul float %396, %397
  %399 = bitcast i32 %5 to float
  %400 = fadd float %399, %398
  %401 = fmul float %387, %400
  %402 = fadd float %401, 0.000000e+00
  %403 = bitcast i32 %5 to float
  %404 = bitcast i32 %5 to float
  %405 = fmul float %403, %404
  %406 = fadd float %405, 0.000000e+00
  %407 = bitcast i32 %54 to float
  %408 = bitcast i32 %54 to float
  %409 = fmul float %407, %408
  %410 = fadd float %406, %409
  %411 = call float @llvm.sqrt.f32(float %410)
  %412 = fneg float %66
  %413 = fmul float %411, %412
  %414 = fmul float %413, 0.000000e+00
  %415 = bitcast i32 %54 to float
  %416 = fadd float %415, %414
  %417 = bitcast i32 %5 to float
  %418 = bitcast i32 %5 to float
  %419 = fmul float %417, %418
  %420 = fadd float %419, 0.000000e+00
  %421 = bitcast i32 %54 to float
  %422 = bitcast i32 %54 to float
  %423 = fmul float %421, %422
  %424 = fadd float %420, %423
  %425 = call float @llvm.sqrt.f32(float %424)
  %426 = fneg float %66
  %427 = fmul float %425, %426
  %428 = fmul float %427, 0.000000e+00
  %429 = bitcast i32 %54 to float
  %430 = fadd float %429, %428
  %431 = fmul float %416, %430
  %432 = fadd float %402, %431
  %433 = call float @llvm.sqrt.f32(float %432)
  %434 = fadd float %433, 0.000000e+00
  %435 = fdiv float %374, %434
  %436 = fmul float %435, 2.000000e+00
  %437 = bitcast i32 %5 to float
  %438 = bitcast i32 %5 to float
  %439 = fmul float %437, %438
  %440 = fadd float %439, 0.000000e+00
  %441 = bitcast i32 %54 to float
  %442 = bitcast i32 %54 to float
  %443 = fmul float %441, %442
  %444 = fadd float %440, %443
  %445 = call float @llvm.sqrt.f32(float %444)
  %446 = fneg float %66
  %447 = fmul float %445, %446
  %448 = bitcast i32 %5 to float
  %449 = fadd float %448, %447
  %450 = bitcast i32 %5 to float
  %451 = bitcast i32 %5 to float
  %452 = fmul float %450, %451
  %453 = fadd float %452, 0.000000e+00
  %454 = bitcast i32 %54 to float
  %455 = bitcast i32 %54 to float
  %456 = fmul float %454, %455
  %457 = fadd float %453, %456
  %458 = call float @llvm.sqrt.f32(float %457)
  %459 = fneg float %66
  %460 = fmul float %458, %459
  %461 = bitcast i32 %5 to float
  %462 = fadd float %461, %460
  %463 = bitcast i32 %5 to float
  %464 = bitcast i32 %5 to float
  %465 = fmul float %463, %464
  %466 = fadd float %465, 0.000000e+00
  %467 = bitcast i32 %54 to float
  %468 = bitcast i32 %54 to float
  %469 = fmul float %467, %468
  %470 = fadd float %466, %469
  %471 = call float @llvm.sqrt.f32(float %470)
  %472 = fneg float %66
  %473 = fmul float %471, %472
  %474 = bitcast i32 %5 to float
  %475 = fadd float %474, %473
  %476 = fmul float %462, %475
  %477 = fadd float %476, 0.000000e+00
  %478 = bitcast i32 %5 to float
  %479 = bitcast i32 %5 to float
  %480 = fmul float %478, %479
  %481 = fadd float %480, 0.000000e+00
  %482 = bitcast i32 %54 to float
  %483 = bitcast i32 %54 to float
  %484 = fmul float %482, %483
  %485 = fadd float %481, %484
  %486 = call float @llvm.sqrt.f32(float %485)
  %487 = fneg float %66
  %488 = fmul float %486, %487
  %489 = fmul float %488, 0.000000e+00
  %490 = bitcast i32 %54 to float
  %491 = fadd float %490, %489
  %492 = bitcast i32 %5 to float
  %493 = bitcast i32 %5 to float
  %494 = fmul float %492, %493
  %495 = fadd float %494, 0.000000e+00
  %496 = bitcast i32 %54 to float
  %497 = bitcast i32 %54 to float
  %498 = fmul float %496, %497
  %499 = fadd float %495, %498
  %500 = call float @llvm.sqrt.f32(float %499)
  %501 = fneg float %66
  %502 = fmul float %500, %501
  %503 = fmul float %502, 0.000000e+00
  %504 = bitcast i32 %54 to float
  %505 = fadd float %504, %503
  %506 = fmul float %491, %505
  %507 = fadd float %477, %506
  %508 = call float @llvm.sqrt.f32(float %507)
  %509 = fadd float %508, 0.000000e+00
  %510 = fdiv float %449, %509
  %511 = fmul float %436, %510
  %512 = insertelement <4 x float> %360, float %511, i32 3
  %513 = fsub <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, %512
  %514 = bitcast i32 %5 to float
  %515 = bitcast i32 %5 to float
  %516 = fmul float %514, %515
  %517 = fadd float %516, 0.000000e+00
  %518 = bitcast i32 %54 to float
  %519 = bitcast i32 %54 to float
  %520 = fmul float %518, %519
  %521 = fadd float %517, %520
  %522 = call float @llvm.sqrt.f32(float %521)
  %523 = fneg float %66
  %524 = fmul float %522, %523
  %525 = fmul float %524, 0.000000e+00
  %526 = bitcast i32 %54 to float
  %527 = fadd float %526, %525
  %528 = bitcast i32 %5 to float
  %529 = bitcast i32 %5 to float
  %530 = fmul float %528, %529
  %531 = fadd float %530, 0.000000e+00
  %532 = bitcast i32 %54 to float
  %533 = bitcast i32 %54 to float
  %534 = fmul float %532, %533
  %535 = fadd float %531, %534
  %536 = call float @llvm.sqrt.f32(float %535)
  %537 = fneg float %66
  %538 = fmul float %536, %537
  %539 = bitcast i32 %5 to float
  %540 = fadd float %539, %538
  %541 = bitcast i32 %5 to float
  %542 = bitcast i32 %5 to float
  %543 = fmul float %541, %542
  %544 = fadd float %543, 0.000000e+00
  %545 = bitcast i32 %54 to float
  %546 = bitcast i32 %54 to float
  %547 = fmul float %545, %546
  %548 = fadd float %544, %547
  %549 = call float @llvm.sqrt.f32(float %548)
  %550 = fneg float %66
  %551 = fmul float %549, %550
  %552 = bitcast i32 %5 to float
  %553 = fadd float %552, %551
  %554 = fmul float %540, %553
  %555 = fadd float %554, 0.000000e+00
  %556 = bitcast i32 %5 to float
  %557 = bitcast i32 %5 to float
  %558 = fmul float %556, %557
  %559 = fadd float %558, 0.000000e+00
  %560 = bitcast i32 %54 to float
  %561 = bitcast i32 %54 to float
  %562 = fmul float %560, %561
  %563 = fadd float %559, %562
  %564 = call float @llvm.sqrt.f32(float %563)
  %565 = fneg float %66
  %566 = fmul float %564, %565
  %567 = fmul float %566, 0.000000e+00
  %568 = bitcast i32 %54 to float
  %569 = fadd float %568, %567
  %570 = bitcast i32 %5 to float
  %571 = bitcast i32 %5 to float
  %572 = fmul float %570, %571
  %573 = fadd float %572, 0.000000e+00
  %574 = bitcast i32 %54 to float
  %575 = bitcast i32 %54 to float
  %576 = fmul float %574, %575
  %577 = fadd float %573, %576
  %578 = call float @llvm.sqrt.f32(float %577)
  %579 = fneg float %66
  %580 = fmul float %578, %579
  %581 = fmul float %580, 0.000000e+00
  %582 = bitcast i32 %54 to float
  %583 = fadd float %582, %581
  %584 = fmul float %569, %583
  %585 = fadd float %555, %584
  %586 = call float @llvm.sqrt.f32(float %585)
  %587 = fadd float %586, 0.000000e+00
  %588 = fdiv float %527, %587
  %589 = fmul float %588, 2.000000e+00
  %590 = bitcast i32 %5 to float
  %591 = bitcast i32 %5 to float
  %592 = fmul float %590, %591
  %593 = fadd float %592, 0.000000e+00
  %594 = bitcast i32 %54 to float
  %595 = bitcast i32 %54 to float
  %596 = fmul float %594, %595
  %597 = fadd float %593, %596
  %598 = call float @llvm.sqrt.f32(float %597)
  %599 = fneg float %66
  %600 = fmul float %598, %599
  %601 = fmul float %600, 0.000000e+00
  %602 = bitcast i32 %54 to float
  %603 = fadd float %602, %601
  %604 = bitcast i32 %5 to float
  %605 = bitcast i32 %5 to float
  %606 = fmul float %604, %605
  %607 = fadd float %606, 0.000000e+00
  %608 = bitcast i32 %54 to float
  %609 = bitcast i32 %54 to float
  %610 = fmul float %608, %609
  %611 = fadd float %607, %610
  %612 = call float @llvm.sqrt.f32(float %611)
  %613 = fneg float %66
  %614 = fmul float %612, %613
  %615 = bitcast i32 %5 to float
  %616 = fadd float %615, %614
  %617 = bitcast i32 %5 to float
  %618 = bitcast i32 %5 to float
  %619 = fmul float %617, %618
  %620 = fadd float %619, 0.000000e+00
  %621 = bitcast i32 %54 to float
  %622 = bitcast i32 %54 to float
  %623 = fmul float %621, %622
  %624 = fadd float %620, %623
  %625 = call float @llvm.sqrt.f32(float %624)
  %626 = fneg float %66
  %627 = fmul float %625, %626
  %628 = bitcast i32 %5 to float
  %629 = fadd float %628, %627
  %630 = fmul float %616, %629
  %631 = fadd float %630, 0.000000e+00
  %632 = bitcast i32 %5 to float
  %633 = bitcast i32 %5 to float
  %634 = fmul float %632, %633
  %635 = fadd float %634, 0.000000e+00
  %636 = bitcast i32 %54 to float
  %637 = bitcast i32 %54 to float
  %638 = fmul float %636, %637
  %639 = fadd float %635, %638
  %640 = call float @llvm.sqrt.f32(float %639)
  %641 = fneg float %66
  %642 = fmul float %640, %641
  %643 = fmul float %642, 0.000000e+00
  %644 = bitcast i32 %54 to float
  %645 = fadd float %644, %643
  %646 = bitcast i32 %5 to float
  %647 = bitcast i32 %5 to float
  %648 = fmul float %646, %647
  %649 = fadd float %648, 0.000000e+00
  %650 = bitcast i32 %54 to float
  %651 = bitcast i32 %54 to float
  %652 = fmul float %650, %651
  %653 = fadd float %649, %652
  %654 = call float @llvm.sqrt.f32(float %653)
  %655 = fneg float %66
  %656 = fmul float %654, %655
  %657 = fmul float %656, 0.000000e+00
  %658 = bitcast i32 %54 to float
  %659 = fadd float %658, %657
  %660 = fmul float %645, %659
  %661 = fadd float %631, %660
  %662 = call float @llvm.sqrt.f32(float %661)
  %663 = fadd float %662, 0.000000e+00
  %664 = fdiv float %603, %663
  %665 = fmul float %589, %664
  %666 = fsub float 1.000000e+00, %665
  %667 = insertelement <4 x float> zeroinitializer, float %666, i32 0
  %668 = insertelement <4 x float> %667, float 0.000000e+00, i32 1
  %669 = insertelement <4 x float> %668, float 0.000000e+00, i32 2
  %670 = insertelement <4 x float> %669, float 0.000000e+00, i32 3
  %671 = shufflevector <4 x float> %513, <4 x float> %670, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %672 = extractelement <8 x float> %671, i32 0
  %673 = getelementptr float, float* %2, i32 0
  %674 = getelementptr inbounds float, float* %673, i64 3
  %675 = bitcast float* %674 to i32*
  %676 = bitcast i32* %675 to float*
  store float %672, float* %676, align 4
  %677 = bitcast float* %1 to i8*
  %678 = alloca [4 x float], align 16
  %679 = bitcast [4 x float]* %678 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %677, i8* nonnull align 16 dereferenceable(16) %679, i64 16, i1 false)
  store float 0.000000e+00, float* %2, align 4
  %680 = bitcast i32 %5 to float
  %681 = bitcast i32 %5 to float
  %682 = fmul float %680, %681
  %683 = fadd float %682, 0.000000e+00
  %684 = load i32, i32* %31, align 4
  %685 = bitcast i32 %684 to float
  %686 = bitcast i32 %684 to float
  %687 = fmul float %685, %686
  %688 = fadd float %683, %687
  %689 = call float @llvm.sqrt.f32(float %688)
  %690 = sext i1 %61 to i32
  %691 = zext i1 %63 to i32
  %692 = add nsw i32 %690, %691
  %693 = sitofp i32 %692 to float
  %694 = fneg float %693
  %695 = fmul float %689, %694
  %696 = bitcast i32 %5 to float
  %697 = fadd float %696, %695
  %698 = bitcast i32 %5 to float
  %699 = bitcast i32 %5 to float
  %700 = fmul float %698, %699
  %701 = fadd float %700, 0.000000e+00
  %702 = bitcast i32 %684 to float
  %703 = bitcast i32 %684 to float
  %704 = fmul float %702, %703
  %705 = fadd float %701, %704
  %706 = call float @llvm.sqrt.f32(float %705)
  %707 = fneg float %693
  %708 = fmul float %706, %707
  %709 = bitcast i32 %5 to float
  %710 = fadd float %709, %708
  %711 = bitcast i32 %5 to float
  %712 = bitcast i32 %5 to float
  %713 = fmul float %711, %712
  %714 = fadd float %713, 0.000000e+00
  %715 = bitcast i32 %684 to float
  %716 = bitcast i32 %684 to float
  %717 = fmul float %715, %716
  %718 = fadd float %714, %717
  %719 = call float @llvm.sqrt.f32(float %718)
  %720 = fneg float %693
  %721 = fmul float %719, %720
  %722 = bitcast i32 %5 to float
  %723 = fadd float %722, %721
  %724 = fmul float %710, %723
  %725 = fadd float %724, 0.000000e+00
  %726 = bitcast i32 %5 to float
  %727 = bitcast i32 %5 to float
  %728 = fmul float %726, %727
  %729 = fadd float %728, 0.000000e+00
  %730 = bitcast i32 %684 to float
  %731 = bitcast i32 %684 to float
  %732 = fmul float %730, %731
  %733 = fadd float %729, %732
  %734 = call float @llvm.sqrt.f32(float %733)
  %735 = fneg float %693
  %736 = fmul float %734, %735
  %737 = fmul float %736, 0.000000e+00
  %738 = bitcast i32 %684 to float
  %739 = fadd float %738, %737
  %740 = bitcast i32 %5 to float
  %741 = bitcast i32 %5 to float
  %742 = fmul float %740, %741
  %743 = fadd float %742, 0.000000e+00
  %744 = bitcast i32 %684 to float
  %745 = bitcast i32 %684 to float
  %746 = fmul float %744, %745
  %747 = fadd float %743, %746
  %748 = call float @llvm.sqrt.f32(float %747)
  %749 = fneg float %693
  %750 = fmul float %748, %749
  %751 = fmul float %750, 0.000000e+00
  %752 = bitcast i32 %684 to float
  %753 = fadd float %752, %751
  %754 = fmul float %739, %753
  %755 = fadd float %725, %754
  %756 = call float @llvm.sqrt.f32(float %755)
  %757 = fadd float %756, 0.000000e+00
  %758 = fdiv float %697, %757
  %759 = fmul float %758, 2.000000e+00
  %760 = bitcast i32 %5 to float
  %761 = bitcast i32 %5 to float
  %762 = fmul float %760, %761
  %763 = fadd float %762, 0.000000e+00
  %764 = bitcast i32 %684 to float
  %765 = bitcast i32 %684 to float
  %766 = fmul float %764, %765
  %767 = fadd float %763, %766
  %768 = call float @llvm.sqrt.f32(float %767)
  %769 = fneg float %693
  %770 = fmul float %768, %769
  %771 = bitcast i32 %5 to float
  %772 = fadd float %771, %770
  %773 = bitcast i32 %5 to float
  %774 = bitcast i32 %5 to float
  %775 = fmul float %773, %774
  %776 = fadd float %775, 0.000000e+00
  %777 = bitcast i32 %684 to float
  %778 = bitcast i32 %684 to float
  %779 = fmul float %777, %778
  %780 = fadd float %776, %779
  %781 = call float @llvm.sqrt.f32(float %780)
  %782 = fneg float %693
  %783 = fmul float %781, %782
  %784 = bitcast i32 %5 to float
  %785 = fadd float %784, %783
  %786 = bitcast i32 %5 to float
  %787 = bitcast i32 %5 to float
  %788 = fmul float %786, %787
  %789 = fadd float %788, 0.000000e+00
  %790 = bitcast i32 %684 to float
  %791 = bitcast i32 %684 to float
  %792 = fmul float %790, %791
  %793 = fadd float %789, %792
  %794 = call float @llvm.sqrt.f32(float %793)
  %795 = fneg float %693
  %796 = fmul float %794, %795
  %797 = bitcast i32 %5 to float
  %798 = fadd float %797, %796
  %799 = fmul float %785, %798
  %800 = fadd float %799, 0.000000e+00
  %801 = bitcast i32 %5 to float
  %802 = bitcast i32 %5 to float
  %803 = fmul float %801, %802
  %804 = fadd float %803, 0.000000e+00
  %805 = bitcast i32 %684 to float
  %806 = bitcast i32 %684 to float
  %807 = fmul float %805, %806
  %808 = fadd float %804, %807
  %809 = call float @llvm.sqrt.f32(float %808)
  %810 = fneg float %693
  %811 = fmul float %809, %810
  %812 = fmul float %811, 0.000000e+00
  %813 = bitcast i32 %684 to float
  %814 = fadd float %813, %812
  %815 = bitcast i32 %5 to float
  %816 = bitcast i32 %5 to float
  %817 = fmul float %815, %816
  %818 = fadd float %817, 0.000000e+00
  %819 = bitcast i32 %684 to float
  %820 = bitcast i32 %684 to float
  %821 = fmul float %819, %820
  %822 = fadd float %818, %821
  %823 = call float @llvm.sqrt.f32(float %822)
  %824 = fneg float %693
  %825 = fmul float %823, %824
  %826 = fmul float %825, 0.000000e+00
  %827 = bitcast i32 %684 to float
  %828 = fadd float %827, %826
  %829 = fmul float %814, %828
  %830 = fadd float %800, %829
  %831 = call float @llvm.sqrt.f32(float %830)
  %832 = fadd float %831, 0.000000e+00
  %833 = fdiv float %772, %832
  %834 = fmul float %759, %833
  %835 = fsub float 1.000000e+00, %834
  %836 = insertelement <4 x float> zeroinitializer, float %835, i32 0
  %837 = insertelement <4 x float> %836, float 0.000000e+00, i32 1
  %838 = insertelement <4 x float> %837, float 0.000000e+00, i32 2
  %839 = insertelement <4 x float> %838, float 0.000000e+00, i32 3
  %840 = getelementptr float, float* %0, i32 0
  %841 = load float, float* %840, align 4
  %842 = insertelement <4 x float> zeroinitializer, float %841, i32 0
  %843 = insertelement <4 x float> %842, float 0.000000e+00, i32 1
  %844 = insertelement <4 x float> %843, float 0.000000e+00, i32 2
  %845 = insertelement <4 x float> %844, float 0.000000e+00, i32 3
  %846 = call <4 x float> @llvm.fma.v4f32(<4 x float> %839, <4 x float> %845, <4 x float> zeroinitializer)
  %847 = extractelement <4 x float> %846, i32 0
  store float %847, float* %2, align 4
  %848 = bitcast i32 %5 to float
  %849 = bitcast i32 %5 to float
  %850 = fmul float %848, %849
  %851 = fadd float %850, 0.000000e+00
  %852 = bitcast i32 %684 to float
  %853 = bitcast i32 %684 to float
  %854 = fmul float %852, %853
  %855 = fadd float %851, %854
  %856 = call float @llvm.sqrt.f32(float %855)
  %857 = fneg float %693
  %858 = fmul float %856, %857
  %859 = bitcast i32 %5 to float
  %860 = fadd float %859, %858
  %861 = bitcast i32 %5 to float
  %862 = bitcast i32 %5 to float
  %863 = fmul float %861, %862
  %864 = fadd float %863, 0.000000e+00
  %865 = bitcast i32 %684 to float
  %866 = bitcast i32 %684 to float
  %867 = fmul float %865, %866
  %868 = fadd float %864, %867
  %869 = call float @llvm.sqrt.f32(float %868)
  %870 = fneg float %693
  %871 = fmul float %869, %870
  %872 = bitcast i32 %5 to float
  %873 = fadd float %872, %871
  %874 = bitcast i32 %5 to float
  %875 = bitcast i32 %5 to float
  %876 = fmul float %874, %875
  %877 = fadd float %876, 0.000000e+00
  %878 = bitcast i32 %684 to float
  %879 = bitcast i32 %684 to float
  %880 = fmul float %878, %879
  %881 = fadd float %877, %880
  %882 = call float @llvm.sqrt.f32(float %881)
  %883 = fneg float %693
  %884 = fmul float %882, %883
  %885 = bitcast i32 %5 to float
  %886 = fadd float %885, %884
  %887 = fmul float %873, %886
  %888 = fadd float %887, 0.000000e+00
  %889 = bitcast i32 %5 to float
  %890 = bitcast i32 %5 to float
  %891 = fmul float %889, %890
  %892 = fadd float %891, 0.000000e+00
  %893 = bitcast i32 %684 to float
  %894 = bitcast i32 %684 to float
  %895 = fmul float %893, %894
  %896 = fadd float %892, %895
  %897 = call float @llvm.sqrt.f32(float %896)
  %898 = fneg float %693
  %899 = fmul float %897, %898
  %900 = fmul float %899, 0.000000e+00
  %901 = bitcast i32 %684 to float
  %902 = fadd float %901, %900
  %903 = bitcast i32 %5 to float
  %904 = bitcast i32 %5 to float
  %905 = fmul float %903, %904
  %906 = fadd float %905, 0.000000e+00
  %907 = bitcast i32 %684 to float
  %908 = bitcast i32 %684 to float
  %909 = fmul float %907, %908
  %910 = fadd float %906, %909
  %911 = call float @llvm.sqrt.f32(float %910)
  %912 = fneg float %693
  %913 = fmul float %911, %912
  %914 = fmul float %913, 0.000000e+00
  %915 = bitcast i32 %684 to float
  %916 = fadd float %915, %914
  %917 = fmul float %902, %916
  %918 = fadd float %888, %917
  %919 = call float @llvm.sqrt.f32(float %918)
  %920 = fadd float %919, 0.000000e+00
  %921 = fdiv float %860, %920
  %922 = fmul float %921, 2.000000e+00
  %923 = bitcast i32 %5 to float
  %924 = bitcast i32 %5 to float
  %925 = fmul float %923, %924
  %926 = fadd float %925, 0.000000e+00
  %927 = bitcast i32 %684 to float
  %928 = bitcast i32 %684 to float
  %929 = fmul float %927, %928
  %930 = fadd float %926, %929
  %931 = call float @llvm.sqrt.f32(float %930)
  %932 = fneg float %693
  %933 = fmul float %931, %932
  %934 = bitcast i32 %5 to float
  %935 = fadd float %934, %933
  %936 = bitcast i32 %5 to float
  %937 = bitcast i32 %5 to float
  %938 = fmul float %936, %937
  %939 = fadd float %938, 0.000000e+00
  %940 = bitcast i32 %684 to float
  %941 = bitcast i32 %684 to float
  %942 = fmul float %940, %941
  %943 = fadd float %939, %942
  %944 = call float @llvm.sqrt.f32(float %943)
  %945 = fneg float %693
  %946 = fmul float %944, %945
  %947 = bitcast i32 %5 to float
  %948 = fadd float %947, %946
  %949 = bitcast i32 %5 to float
  %950 = bitcast i32 %5 to float
  %951 = fmul float %949, %950
  %952 = fadd float %951, 0.000000e+00
  %953 = bitcast i32 %684 to float
  %954 = bitcast i32 %684 to float
  %955 = fmul float %953, %954
  %956 = fadd float %952, %955
  %957 = call float @llvm.sqrt.f32(float %956)
  %958 = fneg float %693
  %959 = fmul float %957, %958
  %960 = bitcast i32 %5 to float
  %961 = fadd float %960, %959
  %962 = fmul float %948, %961
  %963 = fadd float %962, 0.000000e+00
  %964 = bitcast i32 %5 to float
  %965 = bitcast i32 %5 to float
  %966 = fmul float %964, %965
  %967 = fadd float %966, 0.000000e+00
  %968 = bitcast i32 %684 to float
  %969 = bitcast i32 %684 to float
  %970 = fmul float %968, %969
  %971 = fadd float %967, %970
  %972 = call float @llvm.sqrt.f32(float %971)
  %973 = fneg float %693
  %974 = fmul float %972, %973
  %975 = fmul float %974, 0.000000e+00
  %976 = bitcast i32 %684 to float
  %977 = fadd float %976, %975
  %978 = bitcast i32 %5 to float
  %979 = bitcast i32 %5 to float
  %980 = fmul float %978, %979
  %981 = fadd float %980, 0.000000e+00
  %982 = bitcast i32 %684 to float
  %983 = bitcast i32 %684 to float
  %984 = fmul float %982, %983
  %985 = fadd float %981, %984
  %986 = call float @llvm.sqrt.f32(float %985)
  %987 = fneg float %693
  %988 = fmul float %986, %987
  %989 = fmul float %988, 0.000000e+00
  %990 = bitcast i32 %684 to float
  %991 = fadd float %990, %989
  %992 = fmul float %977, %991
  %993 = fadd float %963, %992
  %994 = call float @llvm.sqrt.f32(float %993)
  %995 = fadd float %994, 0.000000e+00
  %996 = fdiv float %935, %995
  %997 = fmul float %922, %996
  %998 = fsub float 1.000000e+00, %997
  %999 = fmul float %998, %841
  %1000 = fadd float %999, 0.000000e+00
  %1001 = bitcast i32 %5 to float
  %1002 = bitcast i32 %5 to float
  %1003 = fmul float %1001, %1002
  %1004 = fadd float %1003, 0.000000e+00
  %1005 = bitcast i32 %684 to float
  %1006 = bitcast i32 %684 to float
  %1007 = fmul float %1005, %1006
  %1008 = fadd float %1004, %1007
  %1009 = call float @llvm.sqrt.f32(float %1008)
  %1010 = fneg float %693
  %1011 = fmul float %1009, %1010
  %1012 = bitcast i32 %5 to float
  %1013 = fadd float %1012, %1011
  %1014 = bitcast i32 %5 to float
  %1015 = bitcast i32 %5 to float
  %1016 = fmul float %1014, %1015
  %1017 = fadd float %1016, 0.000000e+00
  %1018 = bitcast i32 %684 to float
  %1019 = bitcast i32 %684 to float
  %1020 = fmul float %1018, %1019
  %1021 = fadd float %1017, %1020
  %1022 = call float @llvm.sqrt.f32(float %1021)
  %1023 = fneg float %693
  %1024 = fmul float %1022, %1023
  %1025 = bitcast i32 %5 to float
  %1026 = fadd float %1025, %1024
  %1027 = bitcast i32 %5 to float
  %1028 = bitcast i32 %5 to float
  %1029 = fmul float %1027, %1028
  %1030 = fadd float %1029, 0.000000e+00
  %1031 = bitcast i32 %684 to float
  %1032 = bitcast i32 %684 to float
  %1033 = fmul float %1031, %1032
  %1034 = fadd float %1030, %1033
  %1035 = call float @llvm.sqrt.f32(float %1034)
  %1036 = fneg float %693
  %1037 = fmul float %1035, %1036
  %1038 = bitcast i32 %5 to float
  %1039 = fadd float %1038, %1037
  %1040 = fmul float %1026, %1039
  %1041 = fadd float %1040, 0.000000e+00
  %1042 = bitcast i32 %5 to float
  %1043 = bitcast i32 %5 to float
  %1044 = fmul float %1042, %1043
  %1045 = fadd float %1044, 0.000000e+00
  %1046 = bitcast i32 %684 to float
  %1047 = bitcast i32 %684 to float
  %1048 = fmul float %1046, %1047
  %1049 = fadd float %1045, %1048
  %1050 = call float @llvm.sqrt.f32(float %1049)
  %1051 = fneg float %693
  %1052 = fmul float %1050, %1051
  %1053 = fmul float %1052, 0.000000e+00
  %1054 = bitcast i32 %684 to float
  %1055 = fadd float %1054, %1053
  %1056 = bitcast i32 %5 to float
  %1057 = bitcast i32 %5 to float
  %1058 = fmul float %1056, %1057
  %1059 = fadd float %1058, 0.000000e+00
  %1060 = bitcast i32 %684 to float
  %1061 = bitcast i32 %684 to float
  %1062 = fmul float %1060, %1061
  %1063 = fadd float %1059, %1062
  %1064 = call float @llvm.sqrt.f32(float %1063)
  %1065 = fneg float %693
  %1066 = fmul float %1064, %1065
  %1067 = fmul float %1066, 0.000000e+00
  %1068 = bitcast i32 %684 to float
  %1069 = fadd float %1068, %1067
  %1070 = fmul float %1055, %1069
  %1071 = fadd float %1041, %1070
  %1072 = call float @llvm.sqrt.f32(float %1071)
  %1073 = fadd float %1072, 0.000000e+00
  %1074 = fdiv float %1013, %1073
  %1075 = fmul float %1074, 2.000000e+00
  %1076 = bitcast i32 %5 to float
  %1077 = bitcast i32 %5 to float
  %1078 = fmul float %1076, %1077
  %1079 = fadd float %1078, 0.000000e+00
  %1080 = bitcast i32 %684 to float
  %1081 = bitcast i32 %684 to float
  %1082 = fmul float %1080, %1081
  %1083 = fadd float %1079, %1082
  %1084 = call float @llvm.sqrt.f32(float %1083)
  %1085 = fneg float %693
  %1086 = fmul float %1084, %1085
  %1087 = fmul float %1086, 0.000000e+00
  %1088 = bitcast i32 %684 to float
  %1089 = fadd float %1088, %1087
  %1090 = bitcast i32 %5 to float
  %1091 = bitcast i32 %5 to float
  %1092 = fmul float %1090, %1091
  %1093 = fadd float %1092, 0.000000e+00
  %1094 = bitcast i32 %684 to float
  %1095 = bitcast i32 %684 to float
  %1096 = fmul float %1094, %1095
  %1097 = fadd float %1093, %1096
  %1098 = call float @llvm.sqrt.f32(float %1097)
  %1099 = fneg float %693
  %1100 = fmul float %1098, %1099
  %1101 = bitcast i32 %5 to float
  %1102 = fadd float %1101, %1100
  %1103 = bitcast i32 %5 to float
  %1104 = bitcast i32 %5 to float
  %1105 = fmul float %1103, %1104
  %1106 = fadd float %1105, 0.000000e+00
  %1107 = bitcast i32 %684 to float
  %1108 = bitcast i32 %684 to float
  %1109 = fmul float %1107, %1108
  %1110 = fadd float %1106, %1109
  %1111 = call float @llvm.sqrt.f32(float %1110)
  %1112 = fneg float %693
  %1113 = fmul float %1111, %1112
  %1114 = bitcast i32 %5 to float
  %1115 = fadd float %1114, %1113
  %1116 = fmul float %1102, %1115
  %1117 = fadd float %1116, 0.000000e+00
  %1118 = bitcast i32 %5 to float
  %1119 = bitcast i32 %5 to float
  %1120 = fmul float %1118, %1119
  %1121 = fadd float %1120, 0.000000e+00
  %1122 = bitcast i32 %684 to float
  %1123 = bitcast i32 %684 to float
  %1124 = fmul float %1122, %1123
  %1125 = fadd float %1121, %1124
  %1126 = call float @llvm.sqrt.f32(float %1125)
  %1127 = fneg float %693
  %1128 = fmul float %1126, %1127
  %1129 = fmul float %1128, 0.000000e+00
  %1130 = bitcast i32 %684 to float
  %1131 = fadd float %1130, %1129
  %1132 = bitcast i32 %5 to float
  %1133 = bitcast i32 %5 to float
  %1134 = fmul float %1132, %1133
  %1135 = fadd float %1134, 0.000000e+00
  %1136 = bitcast i32 %684 to float
  %1137 = bitcast i32 %684 to float
  %1138 = fmul float %1136, %1137
  %1139 = fadd float %1135, %1138
  %1140 = call float @llvm.sqrt.f32(float %1139)
  %1141 = fneg float %693
  %1142 = fmul float %1140, %1141
  %1143 = fmul float %1142, 0.000000e+00
  %1144 = bitcast i32 %684 to float
  %1145 = fadd float %1144, %1143
  %1146 = fmul float %1131, %1145
  %1147 = fadd float %1117, %1146
  %1148 = call float @llvm.sqrt.f32(float %1147)
  %1149 = fadd float %1148, 0.000000e+00
  %1150 = fdiv float %1089, %1149
  %1151 = fmul float %1075, %1150
  %1152 = fneg float %1151
  %1153 = getelementptr float, float* %0, i32 0
  %1154 = getelementptr inbounds float, float* %1153, i64 2
  %1155 = load float, float* %1154, align 4
  %1156 = fmul float %1152, %1155
  %1157 = fadd float %1000, %1156
  %1158 = insertelement <4 x float> zeroinitializer, float %1157, i32 0
  %1159 = insertelement <4 x float> %1158, float 0.000000e+00, i32 1
  %1160 = insertelement <4 x float> %1159, float 0.000000e+00, i32 2
  %1161 = insertelement <4 x float> %1160, float 0.000000e+00, i32 3
  %1162 = extractelement <4 x float> %1161, i32 0
  store float %1162, float* %2, align 4
  %1163 = extractelement <4 x float> %1161, i32 1
  %1164 = getelementptr float, float* %2, i32 0
  %1165 = getelementptr inbounds float, float* %1164, i64 1
  store float %1163, float* %1165, align 4
  %1166 = bitcast i32 %5 to float
  %1167 = bitcast i32 %5 to float
  %1168 = fmul float %1166, %1167
  %1169 = fadd float %1168, 0.000000e+00
  %1170 = bitcast i32 %684 to float
  %1171 = bitcast i32 %684 to float
  %1172 = fmul float %1170, %1171
  %1173 = fadd float %1169, %1172
  %1174 = call float @llvm.sqrt.f32(float %1173)
  %1175 = fneg float %693
  %1176 = fmul float %1174, %1175
  %1177 = bitcast i32 %5 to float
  %1178 = fadd float %1177, %1176
  %1179 = bitcast i32 %5 to float
  %1180 = bitcast i32 %5 to float
  %1181 = fmul float %1179, %1180
  %1182 = fadd float %1181, 0.000000e+00
  %1183 = bitcast i32 %684 to float
  %1184 = bitcast i32 %684 to float
  %1185 = fmul float %1183, %1184
  %1186 = fadd float %1182, %1185
  %1187 = call float @llvm.sqrt.f32(float %1186)
  %1188 = fneg float %693
  %1189 = fmul float %1187, %1188
  %1190 = bitcast i32 %5 to float
  %1191 = fadd float %1190, %1189
  %1192 = bitcast i32 %5 to float
  %1193 = bitcast i32 %5 to float
  %1194 = fmul float %1192, %1193
  %1195 = fadd float %1194, 0.000000e+00
  %1196 = bitcast i32 %684 to float
  %1197 = bitcast i32 %684 to float
  %1198 = fmul float %1196, %1197
  %1199 = fadd float %1195, %1198
  %1200 = call float @llvm.sqrt.f32(float %1199)
  %1201 = fneg float %693
  %1202 = fmul float %1200, %1201
  %1203 = bitcast i32 %5 to float
  %1204 = fadd float %1203, %1202
  %1205 = fmul float %1191, %1204
  %1206 = fadd float %1205, 0.000000e+00
  %1207 = bitcast i32 %5 to float
  %1208 = bitcast i32 %5 to float
  %1209 = fmul float %1207, %1208
  %1210 = fadd float %1209, 0.000000e+00
  %1211 = bitcast i32 %684 to float
  %1212 = bitcast i32 %684 to float
  %1213 = fmul float %1211, %1212
  %1214 = fadd float %1210, %1213
  %1215 = call float @llvm.sqrt.f32(float %1214)
  %1216 = fneg float %693
  %1217 = fmul float %1215, %1216
  %1218 = fmul float %1217, 0.000000e+00
  %1219 = bitcast i32 %684 to float
  %1220 = fadd float %1219, %1218
  %1221 = bitcast i32 %5 to float
  %1222 = bitcast i32 %5 to float
  %1223 = fmul float %1221, %1222
  %1224 = fadd float %1223, 0.000000e+00
  %1225 = bitcast i32 %684 to float
  %1226 = bitcast i32 %684 to float
  %1227 = fmul float %1225, %1226
  %1228 = fadd float %1224, %1227
  %1229 = call float @llvm.sqrt.f32(float %1228)
  %1230 = fneg float %693
  %1231 = fmul float %1229, %1230
  %1232 = fmul float %1231, 0.000000e+00
  %1233 = bitcast i32 %684 to float
  %1234 = fadd float %1233, %1232
  %1235 = fmul float %1220, %1234
  %1236 = fadd float %1206, %1235
  %1237 = call float @llvm.sqrt.f32(float %1236)
  %1238 = fadd float %1237, 0.000000e+00
  %1239 = fdiv float %1178, %1238
  %1240 = fmul float %1239, 2.000000e+00
  %1241 = bitcast i32 %5 to float
  %1242 = bitcast i32 %5 to float
  %1243 = fmul float %1241, %1242
  %1244 = fadd float %1243, 0.000000e+00
  %1245 = bitcast i32 %684 to float
  %1246 = bitcast i32 %684 to float
  %1247 = fmul float %1245, %1246
  %1248 = fadd float %1244, %1247
  %1249 = call float @llvm.sqrt.f32(float %1248)
  %1250 = fneg float %693
  %1251 = fmul float %1249, %1250
  %1252 = bitcast i32 %5 to float
  %1253 = fadd float %1252, %1251
  %1254 = bitcast i32 %5 to float
  %1255 = bitcast i32 %5 to float
  %1256 = fmul float %1254, %1255
  %1257 = fadd float %1256, 0.000000e+00
  %1258 = bitcast i32 %684 to float
  %1259 = bitcast i32 %684 to float
  %1260 = fmul float %1258, %1259
  %1261 = fadd float %1257, %1260
  %1262 = call float @llvm.sqrt.f32(float %1261)
  %1263 = fneg float %693
  %1264 = fmul float %1262, %1263
  %1265 = bitcast i32 %5 to float
  %1266 = fadd float %1265, %1264
  %1267 = bitcast i32 %5 to float
  %1268 = bitcast i32 %5 to float
  %1269 = fmul float %1267, %1268
  %1270 = fadd float %1269, 0.000000e+00
  %1271 = bitcast i32 %684 to float
  %1272 = bitcast i32 %684 to float
  %1273 = fmul float %1271, %1272
  %1274 = fadd float %1270, %1273
  %1275 = call float @llvm.sqrt.f32(float %1274)
  %1276 = fneg float %693
  %1277 = fmul float %1275, %1276
  %1278 = bitcast i32 %5 to float
  %1279 = fadd float %1278, %1277
  %1280 = fmul float %1266, %1279
  %1281 = fadd float %1280, 0.000000e+00
  %1282 = bitcast i32 %5 to float
  %1283 = bitcast i32 %5 to float
  %1284 = fmul float %1282, %1283
  %1285 = fadd float %1284, 0.000000e+00
  %1286 = bitcast i32 %684 to float
  %1287 = bitcast i32 %684 to float
  %1288 = fmul float %1286, %1287
  %1289 = fadd float %1285, %1288
  %1290 = call float @llvm.sqrt.f32(float %1289)
  %1291 = fneg float %693
  %1292 = fmul float %1290, %1291
  %1293 = fmul float %1292, 0.000000e+00
  %1294 = bitcast i32 %684 to float
  %1295 = fadd float %1294, %1293
  %1296 = bitcast i32 %5 to float
  %1297 = bitcast i32 %5 to float
  %1298 = fmul float %1296, %1297
  %1299 = fadd float %1298, 0.000000e+00
  %1300 = bitcast i32 %684 to float
  %1301 = bitcast i32 %684 to float
  %1302 = fmul float %1300, %1301
  %1303 = fadd float %1299, %1302
  %1304 = call float @llvm.sqrt.f32(float %1303)
  %1305 = fneg float %693
  %1306 = fmul float %1304, %1305
  %1307 = fmul float %1306, 0.000000e+00
  %1308 = bitcast i32 %684 to float
  %1309 = fadd float %1308, %1307
  %1310 = fmul float %1295, %1309
  %1311 = fadd float %1281, %1310
  %1312 = call float @llvm.sqrt.f32(float %1311)
  %1313 = fadd float %1312, 0.000000e+00
  %1314 = fdiv float %1253, %1313
  %1315 = fmul float %1240, %1314
  %1316 = fsub float 1.000000e+00, %1315
  %1317 = insertelement <4 x float> zeroinitializer, float %1316, i32 0
  %1318 = insertelement <4 x float> %1317, float 0.000000e+00, i32 1
  %1319 = insertelement <4 x float> %1318, float 0.000000e+00, i32 2
  %1320 = insertelement <4 x float> %1319, float 0.000000e+00, i32 3
  %1321 = getelementptr float, float* %0, i32 0
  %1322 = getelementptr inbounds float, float* %1321, i64 1
  %1323 = load float, float* %1322, align 4
  %1324 = insertelement <4 x float> zeroinitializer, float %1323, i32 0
  %1325 = insertelement <4 x float> %1324, float 0.000000e+00, i32 1
  %1326 = insertelement <4 x float> %1325, float 0.000000e+00, i32 2
  %1327 = insertelement <4 x float> %1326, float 0.000000e+00, i32 3
  %1328 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1320, <4 x float> %1327, <4 x float> zeroinitializer)
  %1329 = extractelement <4 x float> %1328, i32 0
  store float %1329, float* %1165, align 4
  %1330 = bitcast i32 %5 to float
  %1331 = bitcast i32 %5 to float
  %1332 = fmul float %1330, %1331
  %1333 = fadd float %1332, 0.000000e+00
  %1334 = bitcast i32 %684 to float
  %1335 = bitcast i32 %684 to float
  %1336 = fmul float %1334, %1335
  %1337 = fadd float %1333, %1336
  %1338 = call float @llvm.sqrt.f32(float %1337)
  %1339 = fneg float %693
  %1340 = fmul float %1338, %1339
  %1341 = bitcast i32 %5 to float
  %1342 = fadd float %1341, %1340
  %1343 = bitcast i32 %5 to float
  %1344 = bitcast i32 %5 to float
  %1345 = fmul float %1343, %1344
  %1346 = fadd float %1345, 0.000000e+00
  %1347 = bitcast i32 %684 to float
  %1348 = bitcast i32 %684 to float
  %1349 = fmul float %1347, %1348
  %1350 = fadd float %1346, %1349
  %1351 = call float @llvm.sqrt.f32(float %1350)
  %1352 = fneg float %693
  %1353 = fmul float %1351, %1352
  %1354 = bitcast i32 %5 to float
  %1355 = fadd float %1354, %1353
  %1356 = bitcast i32 %5 to float
  %1357 = bitcast i32 %5 to float
  %1358 = fmul float %1356, %1357
  %1359 = fadd float %1358, 0.000000e+00
  %1360 = bitcast i32 %684 to float
  %1361 = bitcast i32 %684 to float
  %1362 = fmul float %1360, %1361
  %1363 = fadd float %1359, %1362
  %1364 = call float @llvm.sqrt.f32(float %1363)
  %1365 = fneg float %693
  %1366 = fmul float %1364, %1365
  %1367 = bitcast i32 %5 to float
  %1368 = fadd float %1367, %1366
  %1369 = fmul float %1355, %1368
  %1370 = fadd float %1369, 0.000000e+00
  %1371 = bitcast i32 %5 to float
  %1372 = bitcast i32 %5 to float
  %1373 = fmul float %1371, %1372
  %1374 = fadd float %1373, 0.000000e+00
  %1375 = bitcast i32 %684 to float
  %1376 = bitcast i32 %684 to float
  %1377 = fmul float %1375, %1376
  %1378 = fadd float %1374, %1377
  %1379 = call float @llvm.sqrt.f32(float %1378)
  %1380 = fneg float %693
  %1381 = fmul float %1379, %1380
  %1382 = fmul float %1381, 0.000000e+00
  %1383 = bitcast i32 %684 to float
  %1384 = fadd float %1383, %1382
  %1385 = bitcast i32 %5 to float
  %1386 = bitcast i32 %5 to float
  %1387 = fmul float %1385, %1386
  %1388 = fadd float %1387, 0.000000e+00
  %1389 = bitcast i32 %684 to float
  %1390 = bitcast i32 %684 to float
  %1391 = fmul float %1389, %1390
  %1392 = fadd float %1388, %1391
  %1393 = call float @llvm.sqrt.f32(float %1392)
  %1394 = fneg float %693
  %1395 = fmul float %1393, %1394
  %1396 = fmul float %1395, 0.000000e+00
  %1397 = bitcast i32 %684 to float
  %1398 = fadd float %1397, %1396
  %1399 = fmul float %1384, %1398
  %1400 = fadd float %1370, %1399
  %1401 = call float @llvm.sqrt.f32(float %1400)
  %1402 = fadd float %1401, 0.000000e+00
  %1403 = fdiv float %1342, %1402
  %1404 = fmul float %1403, 2.000000e+00
  %1405 = bitcast i32 %5 to float
  %1406 = bitcast i32 %5 to float
  %1407 = fmul float %1405, %1406
  %1408 = fadd float %1407, 0.000000e+00
  %1409 = bitcast i32 %684 to float
  %1410 = bitcast i32 %684 to float
  %1411 = fmul float %1409, %1410
  %1412 = fadd float %1408, %1411
  %1413 = call float @llvm.sqrt.f32(float %1412)
  %1414 = fneg float %693
  %1415 = fmul float %1413, %1414
  %1416 = bitcast i32 %5 to float
  %1417 = fadd float %1416, %1415
  %1418 = bitcast i32 %5 to float
  %1419 = bitcast i32 %5 to float
  %1420 = fmul float %1418, %1419
  %1421 = fadd float %1420, 0.000000e+00
  %1422 = bitcast i32 %684 to float
  %1423 = bitcast i32 %684 to float
  %1424 = fmul float %1422, %1423
  %1425 = fadd float %1421, %1424
  %1426 = call float @llvm.sqrt.f32(float %1425)
  %1427 = fneg float %693
  %1428 = fmul float %1426, %1427
  %1429 = bitcast i32 %5 to float
  %1430 = fadd float %1429, %1428
  %1431 = bitcast i32 %5 to float
  %1432 = bitcast i32 %5 to float
  %1433 = fmul float %1431, %1432
  %1434 = fadd float %1433, 0.000000e+00
  %1435 = bitcast i32 %684 to float
  %1436 = bitcast i32 %684 to float
  %1437 = fmul float %1435, %1436
  %1438 = fadd float %1434, %1437
  %1439 = call float @llvm.sqrt.f32(float %1438)
  %1440 = fneg float %693
  %1441 = fmul float %1439, %1440
  %1442 = bitcast i32 %5 to float
  %1443 = fadd float %1442, %1441
  %1444 = fmul float %1430, %1443
  %1445 = fadd float %1444, 0.000000e+00
  %1446 = bitcast i32 %5 to float
  %1447 = bitcast i32 %5 to float
  %1448 = fmul float %1446, %1447
  %1449 = fadd float %1448, 0.000000e+00
  %1450 = bitcast i32 %684 to float
  %1451 = bitcast i32 %684 to float
  %1452 = fmul float %1450, %1451
  %1453 = fadd float %1449, %1452
  %1454 = call float @llvm.sqrt.f32(float %1453)
  %1455 = fneg float %693
  %1456 = fmul float %1454, %1455
  %1457 = fmul float %1456, 0.000000e+00
  %1458 = bitcast i32 %684 to float
  %1459 = fadd float %1458, %1457
  %1460 = bitcast i32 %5 to float
  %1461 = bitcast i32 %5 to float
  %1462 = fmul float %1460, %1461
  %1463 = fadd float %1462, 0.000000e+00
  %1464 = bitcast i32 %684 to float
  %1465 = bitcast i32 %684 to float
  %1466 = fmul float %1464, %1465
  %1467 = fadd float %1463, %1466
  %1468 = call float @llvm.sqrt.f32(float %1467)
  %1469 = fneg float %693
  %1470 = fmul float %1468, %1469
  %1471 = fmul float %1470, 0.000000e+00
  %1472 = bitcast i32 %684 to float
  %1473 = fadd float %1472, %1471
  %1474 = fmul float %1459, %1473
  %1475 = fadd float %1445, %1474
  %1476 = call float @llvm.sqrt.f32(float %1475)
  %1477 = fadd float %1476, 0.000000e+00
  %1478 = fdiv float %1417, %1477
  %1479 = fmul float %1404, %1478
  %1480 = fsub float 1.000000e+00, %1479
  %1481 = load float, float* %1322, align 4
  %1482 = fmul float %1480, %1481
  %1483 = fadd float %1482, 0.000000e+00
  %1484 = bitcast i32 %5 to float
  %1485 = bitcast i32 %5 to float
  %1486 = fmul float %1484, %1485
  %1487 = fadd float %1486, 0.000000e+00
  %1488 = bitcast i32 %684 to float
  %1489 = bitcast i32 %684 to float
  %1490 = fmul float %1488, %1489
  %1491 = fadd float %1487, %1490
  %1492 = call float @llvm.sqrt.f32(float %1491)
  %1493 = fneg float %693
  %1494 = fmul float %1492, %1493
  %1495 = bitcast i32 %5 to float
  %1496 = fadd float %1495, %1494
  %1497 = bitcast i32 %5 to float
  %1498 = bitcast i32 %5 to float
  %1499 = fmul float %1497, %1498
  %1500 = fadd float %1499, 0.000000e+00
  %1501 = bitcast i32 %684 to float
  %1502 = bitcast i32 %684 to float
  %1503 = fmul float %1501, %1502
  %1504 = fadd float %1500, %1503
  %1505 = call float @llvm.sqrt.f32(float %1504)
  %1506 = fneg float %693
  %1507 = fmul float %1505, %1506
  %1508 = bitcast i32 %5 to float
  %1509 = fadd float %1508, %1507
  %1510 = bitcast i32 %5 to float
  %1511 = bitcast i32 %5 to float
  %1512 = fmul float %1510, %1511
  %1513 = fadd float %1512, 0.000000e+00
  %1514 = bitcast i32 %684 to float
  %1515 = bitcast i32 %684 to float
  %1516 = fmul float %1514, %1515
  %1517 = fadd float %1513, %1516
  %1518 = call float @llvm.sqrt.f32(float %1517)
  %1519 = fneg float %693
  %1520 = fmul float %1518, %1519
  %1521 = bitcast i32 %5 to float
  %1522 = fadd float %1521, %1520
  %1523 = fmul float %1509, %1522
  %1524 = fadd float %1523, 0.000000e+00
  %1525 = bitcast i32 %5 to float
  %1526 = bitcast i32 %5 to float
  %1527 = fmul float %1525, %1526
  %1528 = fadd float %1527, 0.000000e+00
  %1529 = bitcast i32 %684 to float
  %1530 = bitcast i32 %684 to float
  %1531 = fmul float %1529, %1530
  %1532 = fadd float %1528, %1531
  %1533 = call float @llvm.sqrt.f32(float %1532)
  %1534 = fneg float %693
  %1535 = fmul float %1533, %1534
  %1536 = fmul float %1535, 0.000000e+00
  %1537 = bitcast i32 %684 to float
  %1538 = fadd float %1537, %1536
  %1539 = bitcast i32 %5 to float
  %1540 = bitcast i32 %5 to float
  %1541 = fmul float %1539, %1540
  %1542 = fadd float %1541, 0.000000e+00
  %1543 = bitcast i32 %684 to float
  %1544 = bitcast i32 %684 to float
  %1545 = fmul float %1543, %1544
  %1546 = fadd float %1542, %1545
  %1547 = call float @llvm.sqrt.f32(float %1546)
  %1548 = fneg float %693
  %1549 = fmul float %1547, %1548
  %1550 = fmul float %1549, 0.000000e+00
  %1551 = bitcast i32 %684 to float
  %1552 = fadd float %1551, %1550
  %1553 = fmul float %1538, %1552
  %1554 = fadd float %1524, %1553
  %1555 = call float @llvm.sqrt.f32(float %1554)
  %1556 = fadd float %1555, 0.000000e+00
  %1557 = fdiv float %1496, %1556
  %1558 = fmul float %1557, 2.000000e+00
  %1559 = bitcast i32 %5 to float
  %1560 = bitcast i32 %5 to float
  %1561 = fmul float %1559, %1560
  %1562 = fadd float %1561, 0.000000e+00
  %1563 = bitcast i32 %684 to float
  %1564 = bitcast i32 %684 to float
  %1565 = fmul float %1563, %1564
  %1566 = fadd float %1562, %1565
  %1567 = call float @llvm.sqrt.f32(float %1566)
  %1568 = fneg float %693
  %1569 = fmul float %1567, %1568
  %1570 = fmul float %1569, 0.000000e+00
  %1571 = bitcast i32 %684 to float
  %1572 = fadd float %1571, %1570
  %1573 = bitcast i32 %5 to float
  %1574 = bitcast i32 %5 to float
  %1575 = fmul float %1573, %1574
  %1576 = fadd float %1575, 0.000000e+00
  %1577 = bitcast i32 %684 to float
  %1578 = bitcast i32 %684 to float
  %1579 = fmul float %1577, %1578
  %1580 = fadd float %1576, %1579
  %1581 = call float @llvm.sqrt.f32(float %1580)
  %1582 = fneg float %693
  %1583 = fmul float %1581, %1582
  %1584 = bitcast i32 %5 to float
  %1585 = fadd float %1584, %1583
  %1586 = bitcast i32 %5 to float
  %1587 = bitcast i32 %5 to float
  %1588 = fmul float %1586, %1587
  %1589 = fadd float %1588, 0.000000e+00
  %1590 = bitcast i32 %684 to float
  %1591 = bitcast i32 %684 to float
  %1592 = fmul float %1590, %1591
  %1593 = fadd float %1589, %1592
  %1594 = call float @llvm.sqrt.f32(float %1593)
  %1595 = fneg float %693
  %1596 = fmul float %1594, %1595
  %1597 = bitcast i32 %5 to float
  %1598 = fadd float %1597, %1596
  %1599 = fmul float %1585, %1598
  %1600 = fadd float %1599, 0.000000e+00
  %1601 = bitcast i32 %5 to float
  %1602 = bitcast i32 %5 to float
  %1603 = fmul float %1601, %1602
  %1604 = fadd float %1603, 0.000000e+00
  %1605 = bitcast i32 %684 to float
  %1606 = bitcast i32 %684 to float
  %1607 = fmul float %1605, %1606
  %1608 = fadd float %1604, %1607
  %1609 = call float @llvm.sqrt.f32(float %1608)
  %1610 = fneg float %693
  %1611 = fmul float %1609, %1610
  %1612 = fmul float %1611, 0.000000e+00
  %1613 = bitcast i32 %684 to float
  %1614 = fadd float %1613, %1612
  %1615 = bitcast i32 %5 to float
  %1616 = bitcast i32 %5 to float
  %1617 = fmul float %1615, %1616
  %1618 = fadd float %1617, 0.000000e+00
  %1619 = bitcast i32 %684 to float
  %1620 = bitcast i32 %684 to float
  %1621 = fmul float %1619, %1620
  %1622 = fadd float %1618, %1621
  %1623 = call float @llvm.sqrt.f32(float %1622)
  %1624 = fneg float %693
  %1625 = fmul float %1623, %1624
  %1626 = fmul float %1625, 0.000000e+00
  %1627 = bitcast i32 %684 to float
  %1628 = fadd float %1627, %1626
  %1629 = fmul float %1614, %1628
  %1630 = fadd float %1600, %1629
  %1631 = call float @llvm.sqrt.f32(float %1630)
  %1632 = fadd float %1631, 0.000000e+00
  %1633 = fdiv float %1572, %1632
  %1634 = fmul float %1558, %1633
  %1635 = fneg float %1634
  %1636 = getelementptr float, float* %0, i32 0
  %1637 = getelementptr inbounds float, float* %1636, i64 3
  %1638 = load float, float* %1637, align 4
  %1639 = fmul float %1635, %1638
  %1640 = fadd float %1483, %1639
  %1641 = insertelement <4 x float> zeroinitializer, float %1640, i32 0
  %1642 = insertelement <4 x float> %1641, float 0.000000e+00, i32 1
  %1643 = insertelement <4 x float> %1642, float 0.000000e+00, i32 2
  %1644 = insertelement <4 x float> %1643, float 0.000000e+00, i32 3
  %1645 = extractelement <4 x float> %1644, i32 0
  store float %1645, float* %1165, align 4
  %1646 = extractelement <4 x float> %1644, i32 1
  %1647 = getelementptr float, float* %2, i32 0
  %1648 = getelementptr inbounds float, float* %1647, i64 2
  store float %1646, float* %1648, align 4
  %1649 = getelementptr float, float* %0, i32 0
  %1650 = bitcast float* %1649 to i32*
  %1651 = load i32, i32* %1650, align 4
  %1652 = bitcast i32 %1651 to float
  %1653 = bitcast i32 %1651 to float
  %1654 = fmul float %1652, %1653
  %1655 = fadd float %1654, 0.000000e+00
  %1656 = bitcast i32 %684 to float
  %1657 = bitcast i32 %684 to float
  %1658 = fmul float %1656, %1657
  %1659 = fadd float %1655, %1658
  %1660 = call float @llvm.sqrt.f32(float %1659)
  %1661 = fneg float %693
  %1662 = fmul float %1660, %1661
  %1663 = fmul float %1662, 0.000000e+00
  %1664 = bitcast i32 %684 to float
  %1665 = fadd float %1664, %1663
  %1666 = bitcast i32 %1651 to float
  %1667 = bitcast i32 %1651 to float
  %1668 = fmul float %1666, %1667
  %1669 = fadd float %1668, 0.000000e+00
  %1670 = bitcast i32 %684 to float
  %1671 = bitcast i32 %684 to float
  %1672 = fmul float %1670, %1671
  %1673 = fadd float %1669, %1672
  %1674 = call float @llvm.sqrt.f32(float %1673)
  %1675 = fneg float %693
  %1676 = fmul float %1674, %1675
  %1677 = bitcast i32 %1651 to float
  %1678 = fadd float %1677, %1676
  %1679 = bitcast i32 %1651 to float
  %1680 = bitcast i32 %1651 to float
  %1681 = fmul float %1679, %1680
  %1682 = fadd float %1681, 0.000000e+00
  %1683 = bitcast i32 %684 to float
  %1684 = bitcast i32 %684 to float
  %1685 = fmul float %1683, %1684
  %1686 = fadd float %1682, %1685
  %1687 = call float @llvm.sqrt.f32(float %1686)
  %1688 = fneg float %693
  %1689 = fmul float %1687, %1688
  %1690 = bitcast i32 %1651 to float
  %1691 = fadd float %1690, %1689
  %1692 = fmul float %1678, %1691
  %1693 = fadd float %1692, 0.000000e+00
  %1694 = bitcast i32 %1651 to float
  %1695 = bitcast i32 %1651 to float
  %1696 = fmul float %1694, %1695
  %1697 = fadd float %1696, 0.000000e+00
  %1698 = bitcast i32 %684 to float
  %1699 = bitcast i32 %684 to float
  %1700 = fmul float %1698, %1699
  %1701 = fadd float %1697, %1700
  %1702 = call float @llvm.sqrt.f32(float %1701)
  %1703 = fneg float %693
  %1704 = fmul float %1702, %1703
  %1705 = fmul float %1704, 0.000000e+00
  %1706 = bitcast i32 %684 to float
  %1707 = fadd float %1706, %1705
  %1708 = bitcast i32 %1651 to float
  %1709 = bitcast i32 %1651 to float
  %1710 = fmul float %1708, %1709
  %1711 = fadd float %1710, 0.000000e+00
  %1712 = bitcast i32 %684 to float
  %1713 = bitcast i32 %684 to float
  %1714 = fmul float %1712, %1713
  %1715 = fadd float %1711, %1714
  %1716 = call float @llvm.sqrt.f32(float %1715)
  %1717 = fneg float %693
  %1718 = fmul float %1716, %1717
  %1719 = fmul float %1718, 0.000000e+00
  %1720 = bitcast i32 %684 to float
  %1721 = fadd float %1720, %1719
  %1722 = fmul float %1707, %1721
  %1723 = fadd float %1693, %1722
  %1724 = call float @llvm.sqrt.f32(float %1723)
  %1725 = fadd float %1724, 0.000000e+00
  %1726 = fdiv float %1665, %1725
  %1727 = fmul float %1726, 2.000000e+00
  %1728 = bitcast i32 %1651 to float
  %1729 = bitcast i32 %1651 to float
  %1730 = fmul float %1728, %1729
  %1731 = fadd float %1730, 0.000000e+00
  %1732 = bitcast i32 %684 to float
  %1733 = bitcast i32 %684 to float
  %1734 = fmul float %1732, %1733
  %1735 = fadd float %1731, %1734
  %1736 = call float @llvm.sqrt.f32(float %1735)
  %1737 = fneg float %693
  %1738 = fmul float %1736, %1737
  %1739 = bitcast i32 %1651 to float
  %1740 = fadd float %1739, %1738
  %1741 = bitcast i32 %1651 to float
  %1742 = bitcast i32 %1651 to float
  %1743 = fmul float %1741, %1742
  %1744 = fadd float %1743, 0.000000e+00
  %1745 = bitcast i32 %684 to float
  %1746 = bitcast i32 %684 to float
  %1747 = fmul float %1745, %1746
  %1748 = fadd float %1744, %1747
  %1749 = call float @llvm.sqrt.f32(float %1748)
  %1750 = fneg float %693
  %1751 = fmul float %1749, %1750
  %1752 = bitcast i32 %1651 to float
  %1753 = fadd float %1752, %1751
  %1754 = bitcast i32 %1651 to float
  %1755 = bitcast i32 %1651 to float
  %1756 = fmul float %1754, %1755
  %1757 = fadd float %1756, 0.000000e+00
  %1758 = bitcast i32 %684 to float
  %1759 = bitcast i32 %684 to float
  %1760 = fmul float %1758, %1759
  %1761 = fadd float %1757, %1760
  %1762 = call float @llvm.sqrt.f32(float %1761)
  %1763 = fneg float %693
  %1764 = fmul float %1762, %1763
  %1765 = bitcast i32 %1651 to float
  %1766 = fadd float %1765, %1764
  %1767 = fmul float %1753, %1766
  %1768 = fadd float %1767, 0.000000e+00
  %1769 = bitcast i32 %1651 to float
  %1770 = bitcast i32 %1651 to float
  %1771 = fmul float %1769, %1770
  %1772 = fadd float %1771, 0.000000e+00
  %1773 = bitcast i32 %684 to float
  %1774 = bitcast i32 %684 to float
  %1775 = fmul float %1773, %1774
  %1776 = fadd float %1772, %1775
  %1777 = call float @llvm.sqrt.f32(float %1776)
  %1778 = fneg float %693
  %1779 = fmul float %1777, %1778
  %1780 = fmul float %1779, 0.000000e+00
  %1781 = bitcast i32 %684 to float
  %1782 = fadd float %1781, %1780
  %1783 = bitcast i32 %1651 to float
  %1784 = bitcast i32 %1651 to float
  %1785 = fmul float %1783, %1784
  %1786 = fadd float %1785, 0.000000e+00
  %1787 = bitcast i32 %684 to float
  %1788 = bitcast i32 %684 to float
  %1789 = fmul float %1787, %1788
  %1790 = fadd float %1786, %1789
  %1791 = call float @llvm.sqrt.f32(float %1790)
  %1792 = fneg float %693
  %1793 = fmul float %1791, %1792
  %1794 = fmul float %1793, 0.000000e+00
  %1795 = bitcast i32 %684 to float
  %1796 = fadd float %1795, %1794
  %1797 = fmul float %1782, %1796
  %1798 = fadd float %1768, %1797
  %1799 = call float @llvm.sqrt.f32(float %1798)
  %1800 = fadd float %1799, 0.000000e+00
  %1801 = fdiv float %1740, %1800
  %1802 = fmul float %1727, %1801
  %1803 = fneg float %1802
  %1804 = insertelement <4 x float> zeroinitializer, float %1803, i32 0
  %1805 = insertelement <4 x float> %1804, float 0.000000e+00, i32 1
  %1806 = insertelement <4 x float> %1805, float 0.000000e+00, i32 2
  %1807 = insertelement <4 x float> %1806, float 0.000000e+00, i32 3
  %1808 = getelementptr float, float* %0, i32 0
  %1809 = load float, float* %1808, align 4
  %1810 = insertelement <4 x float> zeroinitializer, float %1809, i32 0
  %1811 = insertelement <4 x float> %1810, float 0.000000e+00, i32 1
  %1812 = insertelement <4 x float> %1811, float 0.000000e+00, i32 2
  %1813 = insertelement <4 x float> %1812, float 0.000000e+00, i32 3
  %1814 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1807, <4 x float> %1813, <4 x float> zeroinitializer)
  %1815 = extractelement <4 x float> %1814, i32 0
  store float %1815, float* %1648, align 4
  %1816 = bitcast i32 %1651 to float
  %1817 = bitcast i32 %1651 to float
  %1818 = fmul float %1816, %1817
  %1819 = fadd float %1818, 0.000000e+00
  %1820 = bitcast i32 %684 to float
  %1821 = bitcast i32 %684 to float
  %1822 = fmul float %1820, %1821
  %1823 = fadd float %1819, %1822
  %1824 = call float @llvm.sqrt.f32(float %1823)
  %1825 = fneg float %693
  %1826 = fmul float %1824, %1825
  %1827 = fmul float %1826, 0.000000e+00
  %1828 = bitcast i32 %684 to float
  %1829 = fadd float %1828, %1827
  %1830 = bitcast i32 %1651 to float
  %1831 = bitcast i32 %1651 to float
  %1832 = fmul float %1830, %1831
  %1833 = fadd float %1832, 0.000000e+00
  %1834 = bitcast i32 %684 to float
  %1835 = bitcast i32 %684 to float
  %1836 = fmul float %1834, %1835
  %1837 = fadd float %1833, %1836
  %1838 = call float @llvm.sqrt.f32(float %1837)
  %1839 = fneg float %693
  %1840 = fmul float %1838, %1839
  %1841 = bitcast i32 %1651 to float
  %1842 = fadd float %1841, %1840
  %1843 = bitcast i32 %1651 to float
  %1844 = bitcast i32 %1651 to float
  %1845 = fmul float %1843, %1844
  %1846 = fadd float %1845, 0.000000e+00
  %1847 = bitcast i32 %684 to float
  %1848 = bitcast i32 %684 to float
  %1849 = fmul float %1847, %1848
  %1850 = fadd float %1846, %1849
  %1851 = call float @llvm.sqrt.f32(float %1850)
  %1852 = fneg float %693
  %1853 = fmul float %1851, %1852
  %1854 = bitcast i32 %1651 to float
  %1855 = fadd float %1854, %1853
  %1856 = fmul float %1842, %1855
  %1857 = fadd float %1856, 0.000000e+00
  %1858 = bitcast i32 %1651 to float
  %1859 = bitcast i32 %1651 to float
  %1860 = fmul float %1858, %1859
  %1861 = fadd float %1860, 0.000000e+00
  %1862 = bitcast i32 %684 to float
  %1863 = bitcast i32 %684 to float
  %1864 = fmul float %1862, %1863
  %1865 = fadd float %1861, %1864
  %1866 = call float @llvm.sqrt.f32(float %1865)
  %1867 = fneg float %693
  %1868 = fmul float %1866, %1867
  %1869 = fmul float %1868, 0.000000e+00
  %1870 = bitcast i32 %684 to float
  %1871 = fadd float %1870, %1869
  %1872 = bitcast i32 %1651 to float
  %1873 = bitcast i32 %1651 to float
  %1874 = fmul float %1872, %1873
  %1875 = fadd float %1874, 0.000000e+00
  %1876 = bitcast i32 %684 to float
  %1877 = bitcast i32 %684 to float
  %1878 = fmul float %1876, %1877
  %1879 = fadd float %1875, %1878
  %1880 = call float @llvm.sqrt.f32(float %1879)
  %1881 = fneg float %693
  %1882 = fmul float %1880, %1881
  %1883 = fmul float %1882, 0.000000e+00
  %1884 = bitcast i32 %684 to float
  %1885 = fadd float %1884, %1883
  %1886 = fmul float %1871, %1885
  %1887 = fadd float %1857, %1886
  %1888 = call float @llvm.sqrt.f32(float %1887)
  %1889 = fadd float %1888, 0.000000e+00
  %1890 = fdiv float %1829, %1889
  %1891 = fmul float %1890, 2.000000e+00
  %1892 = bitcast i32 %1651 to float
  %1893 = bitcast i32 %1651 to float
  %1894 = fmul float %1892, %1893
  %1895 = fadd float %1894, 0.000000e+00
  %1896 = bitcast i32 %684 to float
  %1897 = bitcast i32 %684 to float
  %1898 = fmul float %1896, %1897
  %1899 = fadd float %1895, %1898
  %1900 = call float @llvm.sqrt.f32(float %1899)
  %1901 = fneg float %693
  %1902 = fmul float %1900, %1901
  %1903 = bitcast i32 %1651 to float
  %1904 = fadd float %1903, %1902
  %1905 = bitcast i32 %1651 to float
  %1906 = bitcast i32 %1651 to float
  %1907 = fmul float %1905, %1906
  %1908 = fadd float %1907, 0.000000e+00
  %1909 = bitcast i32 %684 to float
  %1910 = bitcast i32 %684 to float
  %1911 = fmul float %1909, %1910
  %1912 = fadd float %1908, %1911
  %1913 = call float @llvm.sqrt.f32(float %1912)
  %1914 = fneg float %693
  %1915 = fmul float %1913, %1914
  %1916 = bitcast i32 %1651 to float
  %1917 = fadd float %1916, %1915
  %1918 = bitcast i32 %1651 to float
  %1919 = bitcast i32 %1651 to float
  %1920 = fmul float %1918, %1919
  %1921 = fadd float %1920, 0.000000e+00
  %1922 = bitcast i32 %684 to float
  %1923 = bitcast i32 %684 to float
  %1924 = fmul float %1922, %1923
  %1925 = fadd float %1921, %1924
  %1926 = call float @llvm.sqrt.f32(float %1925)
  %1927 = fneg float %693
  %1928 = fmul float %1926, %1927
  %1929 = bitcast i32 %1651 to float
  %1930 = fadd float %1929, %1928
  %1931 = fmul float %1917, %1930
  %1932 = fadd float %1931, 0.000000e+00
  %1933 = bitcast i32 %1651 to float
  %1934 = bitcast i32 %1651 to float
  %1935 = fmul float %1933, %1934
  %1936 = fadd float %1935, 0.000000e+00
  %1937 = bitcast i32 %684 to float
  %1938 = bitcast i32 %684 to float
  %1939 = fmul float %1937, %1938
  %1940 = fadd float %1936, %1939
  %1941 = call float @llvm.sqrt.f32(float %1940)
  %1942 = fneg float %693
  %1943 = fmul float %1941, %1942
  %1944 = fmul float %1943, 0.000000e+00
  %1945 = bitcast i32 %684 to float
  %1946 = fadd float %1945, %1944
  %1947 = bitcast i32 %1651 to float
  %1948 = bitcast i32 %1651 to float
  %1949 = fmul float %1947, %1948
  %1950 = fadd float %1949, 0.000000e+00
  %1951 = bitcast i32 %684 to float
  %1952 = bitcast i32 %684 to float
  %1953 = fmul float %1951, %1952
  %1954 = fadd float %1950, %1953
  %1955 = call float @llvm.sqrt.f32(float %1954)
  %1956 = fneg float %693
  %1957 = fmul float %1955, %1956
  %1958 = fmul float %1957, 0.000000e+00
  %1959 = bitcast i32 %684 to float
  %1960 = fadd float %1959, %1958
  %1961 = fmul float %1946, %1960
  %1962 = fadd float %1932, %1961
  %1963 = call float @llvm.sqrt.f32(float %1962)
  %1964 = fadd float %1963, 0.000000e+00
  %1965 = fdiv float %1904, %1964
  %1966 = fmul float %1891, %1965
  %1967 = fneg float %1966
  %1968 = fmul float %1967, %1809
  %1969 = fadd float %1968, 0.000000e+00
  %1970 = bitcast i32 %1651 to float
  %1971 = bitcast i32 %1651 to float
  %1972 = fmul float %1970, %1971
  %1973 = fadd float %1972, 0.000000e+00
  %1974 = bitcast i32 %684 to float
  %1975 = bitcast i32 %684 to float
  %1976 = fmul float %1974, %1975
  %1977 = fadd float %1973, %1976
  %1978 = call float @llvm.sqrt.f32(float %1977)
  %1979 = fneg float %693
  %1980 = fmul float %1978, %1979
  %1981 = fmul float %1980, 0.000000e+00
  %1982 = bitcast i32 %684 to float
  %1983 = fadd float %1982, %1981
  %1984 = bitcast i32 %1651 to float
  %1985 = bitcast i32 %1651 to float
  %1986 = fmul float %1984, %1985
  %1987 = fadd float %1986, 0.000000e+00
  %1988 = bitcast i32 %684 to float
  %1989 = bitcast i32 %684 to float
  %1990 = fmul float %1988, %1989
  %1991 = fadd float %1987, %1990
  %1992 = call float @llvm.sqrt.f32(float %1991)
  %1993 = fneg float %693
  %1994 = fmul float %1992, %1993
  %1995 = bitcast i32 %1651 to float
  %1996 = fadd float %1995, %1994
  %1997 = bitcast i32 %1651 to float
  %1998 = bitcast i32 %1651 to float
  %1999 = fmul float %1997, %1998
  %2000 = fadd float %1999, 0.000000e+00
  %2001 = bitcast i32 %684 to float
  %2002 = bitcast i32 %684 to float
  %2003 = fmul float %2001, %2002
  %2004 = fadd float %2000, %2003
  %2005 = call float @llvm.sqrt.f32(float %2004)
  %2006 = fneg float %693
  %2007 = fmul float %2005, %2006
  %2008 = bitcast i32 %1651 to float
  %2009 = fadd float %2008, %2007
  %2010 = fmul float %1996, %2009
  %2011 = fadd float %2010, 0.000000e+00
  %2012 = bitcast i32 %1651 to float
  %2013 = bitcast i32 %1651 to float
  %2014 = fmul float %2012, %2013
  %2015 = fadd float %2014, 0.000000e+00
  %2016 = bitcast i32 %684 to float
  %2017 = bitcast i32 %684 to float
  %2018 = fmul float %2016, %2017
  %2019 = fadd float %2015, %2018
  %2020 = call float @llvm.sqrt.f32(float %2019)
  %2021 = fneg float %693
  %2022 = fmul float %2020, %2021
  %2023 = fmul float %2022, 0.000000e+00
  %2024 = bitcast i32 %684 to float
  %2025 = fadd float %2024, %2023
  %2026 = bitcast i32 %1651 to float
  %2027 = bitcast i32 %1651 to float
  %2028 = fmul float %2026, %2027
  %2029 = fadd float %2028, 0.000000e+00
  %2030 = bitcast i32 %684 to float
  %2031 = bitcast i32 %684 to float
  %2032 = fmul float %2030, %2031
  %2033 = fadd float %2029, %2032
  %2034 = call float @llvm.sqrt.f32(float %2033)
  %2035 = fneg float %693
  %2036 = fmul float %2034, %2035
  %2037 = fmul float %2036, 0.000000e+00
  %2038 = bitcast i32 %684 to float
  %2039 = fadd float %2038, %2037
  %2040 = fmul float %2025, %2039
  %2041 = fadd float %2011, %2040
  %2042 = call float @llvm.sqrt.f32(float %2041)
  %2043 = fadd float %2042, 0.000000e+00
  %2044 = fdiv float %1983, %2043
  %2045 = fmul float %2044, 2.000000e+00
  %2046 = bitcast i32 %1651 to float
  %2047 = bitcast i32 %1651 to float
  %2048 = fmul float %2046, %2047
  %2049 = fadd float %2048, 0.000000e+00
  %2050 = bitcast i32 %684 to float
  %2051 = bitcast i32 %684 to float
  %2052 = fmul float %2050, %2051
  %2053 = fadd float %2049, %2052
  %2054 = call float @llvm.sqrt.f32(float %2053)
  %2055 = fneg float %693
  %2056 = fmul float %2054, %2055
  %2057 = fmul float %2056, 0.000000e+00
  %2058 = bitcast i32 %684 to float
  %2059 = fadd float %2058, %2057
  %2060 = bitcast i32 %1651 to float
  %2061 = bitcast i32 %1651 to float
  %2062 = fmul float %2060, %2061
  %2063 = fadd float %2062, 0.000000e+00
  %2064 = bitcast i32 %684 to float
  %2065 = bitcast i32 %684 to float
  %2066 = fmul float %2064, %2065
  %2067 = fadd float %2063, %2066
  %2068 = call float @llvm.sqrt.f32(float %2067)
  %2069 = fneg float %693
  %2070 = fmul float %2068, %2069
  %2071 = bitcast i32 %1651 to float
  %2072 = fadd float %2071, %2070
  %2073 = bitcast i32 %1651 to float
  %2074 = bitcast i32 %1651 to float
  %2075 = fmul float %2073, %2074
  %2076 = fadd float %2075, 0.000000e+00
  %2077 = bitcast i32 %684 to float
  %2078 = bitcast i32 %684 to float
  %2079 = fmul float %2077, %2078
  %2080 = fadd float %2076, %2079
  %2081 = call float @llvm.sqrt.f32(float %2080)
  %2082 = fneg float %693
  %2083 = fmul float %2081, %2082
  %2084 = bitcast i32 %1651 to float
  %2085 = fadd float %2084, %2083
  %2086 = fmul float %2072, %2085
  %2087 = fadd float %2086, 0.000000e+00
  %2088 = bitcast i32 %1651 to float
  %2089 = bitcast i32 %1651 to float
  %2090 = fmul float %2088, %2089
  %2091 = fadd float %2090, 0.000000e+00
  %2092 = bitcast i32 %684 to float
  %2093 = bitcast i32 %684 to float
  %2094 = fmul float %2092, %2093
  %2095 = fadd float %2091, %2094
  %2096 = call float @llvm.sqrt.f32(float %2095)
  %2097 = fneg float %693
  %2098 = fmul float %2096, %2097
  %2099 = fmul float %2098, 0.000000e+00
  %2100 = bitcast i32 %684 to float
  %2101 = fadd float %2100, %2099
  %2102 = bitcast i32 %1651 to float
  %2103 = bitcast i32 %1651 to float
  %2104 = fmul float %2102, %2103
  %2105 = fadd float %2104, 0.000000e+00
  %2106 = bitcast i32 %684 to float
  %2107 = bitcast i32 %684 to float
  %2108 = fmul float %2106, %2107
  %2109 = fadd float %2105, %2108
  %2110 = call float @llvm.sqrt.f32(float %2109)
  %2111 = fneg float %693
  %2112 = fmul float %2110, %2111
  %2113 = fmul float %2112, 0.000000e+00
  %2114 = bitcast i32 %684 to float
  %2115 = fadd float %2114, %2113
  %2116 = fmul float %2101, %2115
  %2117 = fadd float %2087, %2116
  %2118 = call float @llvm.sqrt.f32(float %2117)
  %2119 = fadd float %2118, 0.000000e+00
  %2120 = fdiv float %2059, %2119
  %2121 = fmul float %2045, %2120
  %2122 = fsub float 1.000000e+00, %2121
  %2123 = load float, float* %1154, align 4
  %2124 = fmul float %2122, %2123
  %2125 = fadd float %1969, %2124
  %2126 = insertelement <4 x float> zeroinitializer, float %2125, i32 0
  %2127 = insertelement <4 x float> %2126, float 0.000000e+00, i32 1
  %2128 = insertelement <4 x float> %2127, float 0.000000e+00, i32 2
  %2129 = insertelement <4 x float> %2128, float 0.000000e+00, i32 3
  %2130 = extractelement <4 x float> %2129, i32 0
  store float %2130, float* %1648, align 4
  %2131 = extractelement <4 x float> %2129, i32 1
  %2132 = getelementptr float, float* %2, i32 0
  %2133 = getelementptr inbounds float, float* %2132, i64 3
  store float %2131, float* %2133, align 4
  %2134 = bitcast i32 %1651 to float
  %2135 = bitcast i32 %1651 to float
  %2136 = fmul float %2134, %2135
  %2137 = fadd float %2136, 0.000000e+00
  %2138 = bitcast i32 %684 to float
  %2139 = bitcast i32 %684 to float
  %2140 = fmul float %2138, %2139
  %2141 = fadd float %2137, %2140
  %2142 = call float @llvm.sqrt.f32(float %2141)
  %2143 = fneg float %693
  %2144 = fmul float %2142, %2143
  %2145 = fmul float %2144, 0.000000e+00
  %2146 = bitcast i32 %684 to float
  %2147 = fadd float %2146, %2145
  %2148 = bitcast i32 %1651 to float
  %2149 = bitcast i32 %1651 to float
  %2150 = fmul float %2148, %2149
  %2151 = fadd float %2150, 0.000000e+00
  %2152 = bitcast i32 %684 to float
  %2153 = bitcast i32 %684 to float
  %2154 = fmul float %2152, %2153
  %2155 = fadd float %2151, %2154
  %2156 = call float @llvm.sqrt.f32(float %2155)
  %2157 = fneg float %693
  %2158 = fmul float %2156, %2157
  %2159 = bitcast i32 %1651 to float
  %2160 = fadd float %2159, %2158
  %2161 = bitcast i32 %1651 to float
  %2162 = bitcast i32 %1651 to float
  %2163 = fmul float %2161, %2162
  %2164 = fadd float %2163, 0.000000e+00
  %2165 = bitcast i32 %684 to float
  %2166 = bitcast i32 %684 to float
  %2167 = fmul float %2165, %2166
  %2168 = fadd float %2164, %2167
  %2169 = call float @llvm.sqrt.f32(float %2168)
  %2170 = fneg float %693
  %2171 = fmul float %2169, %2170
  %2172 = bitcast i32 %1651 to float
  %2173 = fadd float %2172, %2171
  %2174 = fmul float %2160, %2173
  %2175 = fadd float %2174, 0.000000e+00
  %2176 = bitcast i32 %1651 to float
  %2177 = bitcast i32 %1651 to float
  %2178 = fmul float %2176, %2177
  %2179 = fadd float %2178, 0.000000e+00
  %2180 = bitcast i32 %684 to float
  %2181 = bitcast i32 %684 to float
  %2182 = fmul float %2180, %2181
  %2183 = fadd float %2179, %2182
  %2184 = call float @llvm.sqrt.f32(float %2183)
  %2185 = fneg float %693
  %2186 = fmul float %2184, %2185
  %2187 = fmul float %2186, 0.000000e+00
  %2188 = bitcast i32 %684 to float
  %2189 = fadd float %2188, %2187
  %2190 = bitcast i32 %1651 to float
  %2191 = bitcast i32 %1651 to float
  %2192 = fmul float %2190, %2191
  %2193 = fadd float %2192, 0.000000e+00
  %2194 = bitcast i32 %684 to float
  %2195 = bitcast i32 %684 to float
  %2196 = fmul float %2194, %2195
  %2197 = fadd float %2193, %2196
  %2198 = call float @llvm.sqrt.f32(float %2197)
  %2199 = fneg float %693
  %2200 = fmul float %2198, %2199
  %2201 = fmul float %2200, 0.000000e+00
  %2202 = bitcast i32 %684 to float
  %2203 = fadd float %2202, %2201
  %2204 = fmul float %2189, %2203
  %2205 = fadd float %2175, %2204
  %2206 = call float @llvm.sqrt.f32(float %2205)
  %2207 = fadd float %2206, 0.000000e+00
  %2208 = fdiv float %2147, %2207
  %2209 = fmul float %2208, 2.000000e+00
  %2210 = bitcast i32 %1651 to float
  %2211 = bitcast i32 %1651 to float
  %2212 = fmul float %2210, %2211
  %2213 = fadd float %2212, 0.000000e+00
  %2214 = bitcast i32 %684 to float
  %2215 = bitcast i32 %684 to float
  %2216 = fmul float %2214, %2215
  %2217 = fadd float %2213, %2216
  %2218 = call float @llvm.sqrt.f32(float %2217)
  %2219 = fneg float %693
  %2220 = fmul float %2218, %2219
  %2221 = bitcast i32 %1651 to float
  %2222 = fadd float %2221, %2220
  %2223 = bitcast i32 %1651 to float
  %2224 = bitcast i32 %1651 to float
  %2225 = fmul float %2223, %2224
  %2226 = fadd float %2225, 0.000000e+00
  %2227 = bitcast i32 %684 to float
  %2228 = bitcast i32 %684 to float
  %2229 = fmul float %2227, %2228
  %2230 = fadd float %2226, %2229
  %2231 = call float @llvm.sqrt.f32(float %2230)
  %2232 = fneg float %693
  %2233 = fmul float %2231, %2232
  %2234 = bitcast i32 %1651 to float
  %2235 = fadd float %2234, %2233
  %2236 = bitcast i32 %1651 to float
  %2237 = bitcast i32 %1651 to float
  %2238 = fmul float %2236, %2237
  %2239 = fadd float %2238, 0.000000e+00
  %2240 = bitcast i32 %684 to float
  %2241 = bitcast i32 %684 to float
  %2242 = fmul float %2240, %2241
  %2243 = fadd float %2239, %2242
  %2244 = call float @llvm.sqrt.f32(float %2243)
  %2245 = fneg float %693
  %2246 = fmul float %2244, %2245
  %2247 = bitcast i32 %1651 to float
  %2248 = fadd float %2247, %2246
  %2249 = fmul float %2235, %2248
  %2250 = fadd float %2249, 0.000000e+00
  %2251 = bitcast i32 %1651 to float
  %2252 = bitcast i32 %1651 to float
  %2253 = fmul float %2251, %2252
  %2254 = fadd float %2253, 0.000000e+00
  %2255 = bitcast i32 %684 to float
  %2256 = bitcast i32 %684 to float
  %2257 = fmul float %2255, %2256
  %2258 = fadd float %2254, %2257
  %2259 = call float @llvm.sqrt.f32(float %2258)
  %2260 = fneg float %693
  %2261 = fmul float %2259, %2260
  %2262 = fmul float %2261, 0.000000e+00
  %2263 = bitcast i32 %684 to float
  %2264 = fadd float %2263, %2262
  %2265 = bitcast i32 %1651 to float
  %2266 = bitcast i32 %1651 to float
  %2267 = fmul float %2265, %2266
  %2268 = fadd float %2267, 0.000000e+00
  %2269 = bitcast i32 %684 to float
  %2270 = bitcast i32 %684 to float
  %2271 = fmul float %2269, %2270
  %2272 = fadd float %2268, %2271
  %2273 = call float @llvm.sqrt.f32(float %2272)
  %2274 = fneg float %693
  %2275 = fmul float %2273, %2274
  %2276 = fmul float %2275, 0.000000e+00
  %2277 = bitcast i32 %684 to float
  %2278 = fadd float %2277, %2276
  %2279 = fmul float %2264, %2278
  %2280 = fadd float %2250, %2279
  %2281 = call float @llvm.sqrt.f32(float %2280)
  %2282 = fadd float %2281, 0.000000e+00
  %2283 = fdiv float %2222, %2282
  %2284 = fmul float %2209, %2283
  %2285 = fneg float %2284
  %2286 = insertelement <4 x float> zeroinitializer, float %2285, i32 0
  %2287 = insertelement <4 x float> %2286, float 0.000000e+00, i32 1
  %2288 = insertelement <4 x float> %2287, float 0.000000e+00, i32 2
  %2289 = insertelement <4 x float> %2288, float 0.000000e+00, i32 3
  %2290 = load float, float* %1322, align 4
  %2291 = insertelement <4 x float> zeroinitializer, float %2290, i32 0
  %2292 = insertelement <4 x float> %2291, float 0.000000e+00, i32 1
  %2293 = insertelement <4 x float> %2292, float 0.000000e+00, i32 2
  %2294 = insertelement <4 x float> %2293, float 0.000000e+00, i32 3
  %2295 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2289, <4 x float> %2294, <4 x float> zeroinitializer)
  %2296 = extractelement <4 x float> %2295, i32 0
  store float %2296, float* %2133, align 4
  %2297 = bitcast i32 %1651 to float
  %2298 = bitcast i32 %1651 to float
  %2299 = fmul float %2297, %2298
  %2300 = fadd float %2299, 0.000000e+00
  %2301 = bitcast i32 %684 to float
  %2302 = bitcast i32 %684 to float
  %2303 = fmul float %2301, %2302
  %2304 = fadd float %2300, %2303
  %2305 = call float @llvm.sqrt.f32(float %2304)
  %2306 = fneg float %693
  %2307 = fmul float %2305, %2306
  %2308 = fmul float %2307, 0.000000e+00
  %2309 = bitcast i32 %684 to float
  %2310 = fadd float %2309, %2308
  %2311 = bitcast i32 %1651 to float
  %2312 = bitcast i32 %1651 to float
  %2313 = fmul float %2311, %2312
  %2314 = fadd float %2313, 0.000000e+00
  %2315 = bitcast i32 %684 to float
  %2316 = bitcast i32 %684 to float
  %2317 = fmul float %2315, %2316
  %2318 = fadd float %2314, %2317
  %2319 = call float @llvm.sqrt.f32(float %2318)
  %2320 = fneg float %693
  %2321 = fmul float %2319, %2320
  %2322 = bitcast i32 %1651 to float
  %2323 = fadd float %2322, %2321
  %2324 = bitcast i32 %1651 to float
  %2325 = bitcast i32 %1651 to float
  %2326 = fmul float %2324, %2325
  %2327 = fadd float %2326, 0.000000e+00
  %2328 = bitcast i32 %684 to float
  %2329 = bitcast i32 %684 to float
  %2330 = fmul float %2328, %2329
  %2331 = fadd float %2327, %2330
  %2332 = call float @llvm.sqrt.f32(float %2331)
  %2333 = fneg float %693
  %2334 = fmul float %2332, %2333
  %2335 = bitcast i32 %1651 to float
  %2336 = fadd float %2335, %2334
  %2337 = fmul float %2323, %2336
  %2338 = fadd float %2337, 0.000000e+00
  %2339 = bitcast i32 %1651 to float
  %2340 = bitcast i32 %1651 to float
  %2341 = fmul float %2339, %2340
  %2342 = fadd float %2341, 0.000000e+00
  %2343 = bitcast i32 %684 to float
  %2344 = bitcast i32 %684 to float
  %2345 = fmul float %2343, %2344
  %2346 = fadd float %2342, %2345
  %2347 = call float @llvm.sqrt.f32(float %2346)
  %2348 = fneg float %693
  %2349 = fmul float %2347, %2348
  %2350 = fmul float %2349, 0.000000e+00
  %2351 = bitcast i32 %684 to float
  %2352 = fadd float %2351, %2350
  %2353 = bitcast i32 %1651 to float
  %2354 = bitcast i32 %1651 to float
  %2355 = fmul float %2353, %2354
  %2356 = fadd float %2355, 0.000000e+00
  %2357 = bitcast i32 %684 to float
  %2358 = bitcast i32 %684 to float
  %2359 = fmul float %2357, %2358
  %2360 = fadd float %2356, %2359
  %2361 = call float @llvm.sqrt.f32(float %2360)
  %2362 = fneg float %693
  %2363 = fmul float %2361, %2362
  %2364 = fmul float %2363, 0.000000e+00
  %2365 = bitcast i32 %684 to float
  %2366 = fadd float %2365, %2364
  %2367 = fmul float %2352, %2366
  %2368 = fadd float %2338, %2367
  %2369 = call float @llvm.sqrt.f32(float %2368)
  %2370 = fadd float %2369, 0.000000e+00
  %2371 = fdiv float %2310, %2370
  %2372 = fmul float %2371, 2.000000e+00
  %2373 = bitcast i32 %1651 to float
  %2374 = bitcast i32 %1651 to float
  %2375 = fmul float %2373, %2374
  %2376 = fadd float %2375, 0.000000e+00
  %2377 = bitcast i32 %684 to float
  %2378 = bitcast i32 %684 to float
  %2379 = fmul float %2377, %2378
  %2380 = fadd float %2376, %2379
  %2381 = call float @llvm.sqrt.f32(float %2380)
  %2382 = fneg float %693
  %2383 = fmul float %2381, %2382
  %2384 = bitcast i32 %1651 to float
  %2385 = fadd float %2384, %2383
  %2386 = bitcast i32 %1651 to float
  %2387 = bitcast i32 %1651 to float
  %2388 = fmul float %2386, %2387
  %2389 = fadd float %2388, 0.000000e+00
  %2390 = bitcast i32 %684 to float
  %2391 = bitcast i32 %684 to float
  %2392 = fmul float %2390, %2391
  %2393 = fadd float %2389, %2392
  %2394 = call float @llvm.sqrt.f32(float %2393)
  %2395 = fneg float %693
  %2396 = fmul float %2394, %2395
  %2397 = bitcast i32 %1651 to float
  %2398 = fadd float %2397, %2396
  %2399 = bitcast i32 %1651 to float
  %2400 = bitcast i32 %1651 to float
  %2401 = fmul float %2399, %2400
  %2402 = fadd float %2401, 0.000000e+00
  %2403 = bitcast i32 %684 to float
  %2404 = bitcast i32 %684 to float
  %2405 = fmul float %2403, %2404
  %2406 = fadd float %2402, %2405
  %2407 = call float @llvm.sqrt.f32(float %2406)
  %2408 = fneg float %693
  %2409 = fmul float %2407, %2408
  %2410 = bitcast i32 %1651 to float
  %2411 = fadd float %2410, %2409
  %2412 = fmul float %2398, %2411
  %2413 = fadd float %2412, 0.000000e+00
  %2414 = bitcast i32 %1651 to float
  %2415 = bitcast i32 %1651 to float
  %2416 = fmul float %2414, %2415
  %2417 = fadd float %2416, 0.000000e+00
  %2418 = bitcast i32 %684 to float
  %2419 = bitcast i32 %684 to float
  %2420 = fmul float %2418, %2419
  %2421 = fadd float %2417, %2420
  %2422 = call float @llvm.sqrt.f32(float %2421)
  %2423 = fneg float %693
  %2424 = fmul float %2422, %2423
  %2425 = fmul float %2424, 0.000000e+00
  %2426 = bitcast i32 %684 to float
  %2427 = fadd float %2426, %2425
  %2428 = bitcast i32 %1651 to float
  %2429 = bitcast i32 %1651 to float
  %2430 = fmul float %2428, %2429
  %2431 = fadd float %2430, 0.000000e+00
  %2432 = bitcast i32 %684 to float
  %2433 = bitcast i32 %684 to float
  %2434 = fmul float %2432, %2433
  %2435 = fadd float %2431, %2434
  %2436 = call float @llvm.sqrt.f32(float %2435)
  %2437 = fneg float %693
  %2438 = fmul float %2436, %2437
  %2439 = fmul float %2438, 0.000000e+00
  %2440 = bitcast i32 %684 to float
  %2441 = fadd float %2440, %2439
  %2442 = fmul float %2427, %2441
  %2443 = fadd float %2413, %2442
  %2444 = call float @llvm.sqrt.f32(float %2443)
  %2445 = fadd float %2444, 0.000000e+00
  %2446 = fdiv float %2385, %2445
  %2447 = fmul float %2372, %2446
  %2448 = fneg float %2447
  %2449 = fmul float %2448, %2290
  %2450 = fadd float %2449, 0.000000e+00
  %2451 = bitcast i32 %1651 to float
  %2452 = bitcast i32 %1651 to float
  %2453 = fmul float %2451, %2452
  %2454 = fadd float %2453, 0.000000e+00
  %2455 = bitcast i32 %684 to float
  %2456 = bitcast i32 %684 to float
  %2457 = fmul float %2455, %2456
  %2458 = fadd float %2454, %2457
  %2459 = call float @llvm.sqrt.f32(float %2458)
  %2460 = fneg float %693
  %2461 = fmul float %2459, %2460
  %2462 = fmul float %2461, 0.000000e+00
  %2463 = bitcast i32 %684 to float
  %2464 = fadd float %2463, %2462
  %2465 = bitcast i32 %1651 to float
  %2466 = bitcast i32 %1651 to float
  %2467 = fmul float %2465, %2466
  %2468 = fadd float %2467, 0.000000e+00
  %2469 = bitcast i32 %684 to float
  %2470 = bitcast i32 %684 to float
  %2471 = fmul float %2469, %2470
  %2472 = fadd float %2468, %2471
  %2473 = call float @llvm.sqrt.f32(float %2472)
  %2474 = fneg float %693
  %2475 = fmul float %2473, %2474
  %2476 = bitcast i32 %1651 to float
  %2477 = fadd float %2476, %2475
  %2478 = bitcast i32 %1651 to float
  %2479 = bitcast i32 %1651 to float
  %2480 = fmul float %2478, %2479
  %2481 = fadd float %2480, 0.000000e+00
  %2482 = bitcast i32 %684 to float
  %2483 = bitcast i32 %684 to float
  %2484 = fmul float %2482, %2483
  %2485 = fadd float %2481, %2484
  %2486 = call float @llvm.sqrt.f32(float %2485)
  %2487 = fneg float %693
  %2488 = fmul float %2486, %2487
  %2489 = bitcast i32 %1651 to float
  %2490 = fadd float %2489, %2488
  %2491 = fmul float %2477, %2490
  %2492 = fadd float %2491, 0.000000e+00
  %2493 = bitcast i32 %1651 to float
  %2494 = bitcast i32 %1651 to float
  %2495 = fmul float %2493, %2494
  %2496 = fadd float %2495, 0.000000e+00
  %2497 = bitcast i32 %684 to float
  %2498 = bitcast i32 %684 to float
  %2499 = fmul float %2497, %2498
  %2500 = fadd float %2496, %2499
  %2501 = call float @llvm.sqrt.f32(float %2500)
  %2502 = fneg float %693
  %2503 = fmul float %2501, %2502
  %2504 = fmul float %2503, 0.000000e+00
  %2505 = bitcast i32 %684 to float
  %2506 = fadd float %2505, %2504
  %2507 = bitcast i32 %1651 to float
  %2508 = bitcast i32 %1651 to float
  %2509 = fmul float %2507, %2508
  %2510 = fadd float %2509, 0.000000e+00
  %2511 = bitcast i32 %684 to float
  %2512 = bitcast i32 %684 to float
  %2513 = fmul float %2511, %2512
  %2514 = fadd float %2510, %2513
  %2515 = call float @llvm.sqrt.f32(float %2514)
  %2516 = fneg float %693
  %2517 = fmul float %2515, %2516
  %2518 = fmul float %2517, 0.000000e+00
  %2519 = bitcast i32 %684 to float
  %2520 = fadd float %2519, %2518
  %2521 = fmul float %2506, %2520
  %2522 = fadd float %2492, %2521
  %2523 = call float @llvm.sqrt.f32(float %2522)
  %2524 = fadd float %2523, 0.000000e+00
  %2525 = fdiv float %2464, %2524
  %2526 = fmul float %2525, 2.000000e+00
  %2527 = bitcast i32 %1651 to float
  %2528 = bitcast i32 %1651 to float
  %2529 = fmul float %2527, %2528
  %2530 = fadd float %2529, 0.000000e+00
  %2531 = bitcast i32 %684 to float
  %2532 = bitcast i32 %684 to float
  %2533 = fmul float %2531, %2532
  %2534 = fadd float %2530, %2533
  %2535 = call float @llvm.sqrt.f32(float %2534)
  %2536 = fneg float %693
  %2537 = fmul float %2535, %2536
  %2538 = fmul float %2537, 0.000000e+00
  %2539 = bitcast i32 %684 to float
  %2540 = fadd float %2539, %2538
  %2541 = bitcast i32 %1651 to float
  %2542 = bitcast i32 %1651 to float
  %2543 = fmul float %2541, %2542
  %2544 = fadd float %2543, 0.000000e+00
  %2545 = bitcast i32 %684 to float
  %2546 = bitcast i32 %684 to float
  %2547 = fmul float %2545, %2546
  %2548 = fadd float %2544, %2547
  %2549 = call float @llvm.sqrt.f32(float %2548)
  %2550 = fneg float %693
  %2551 = fmul float %2549, %2550
  %2552 = bitcast i32 %1651 to float
  %2553 = fadd float %2552, %2551
  %2554 = bitcast i32 %1651 to float
  %2555 = bitcast i32 %1651 to float
  %2556 = fmul float %2554, %2555
  %2557 = fadd float %2556, 0.000000e+00
  %2558 = bitcast i32 %684 to float
  %2559 = bitcast i32 %684 to float
  %2560 = fmul float %2558, %2559
  %2561 = fadd float %2557, %2560
  %2562 = call float @llvm.sqrt.f32(float %2561)
  %2563 = fneg float %693
  %2564 = fmul float %2562, %2563
  %2565 = bitcast i32 %1651 to float
  %2566 = fadd float %2565, %2564
  %2567 = fmul float %2553, %2566
  %2568 = fadd float %2567, 0.000000e+00
  %2569 = bitcast i32 %1651 to float
  %2570 = bitcast i32 %1651 to float
  %2571 = fmul float %2569, %2570
  %2572 = fadd float %2571, 0.000000e+00
  %2573 = bitcast i32 %684 to float
  %2574 = bitcast i32 %684 to float
  %2575 = fmul float %2573, %2574
  %2576 = fadd float %2572, %2575
  %2577 = call float @llvm.sqrt.f32(float %2576)
  %2578 = fneg float %693
  %2579 = fmul float %2577, %2578
  %2580 = fmul float %2579, 0.000000e+00
  %2581 = bitcast i32 %684 to float
  %2582 = fadd float %2581, %2580
  %2583 = bitcast i32 %1651 to float
  %2584 = bitcast i32 %1651 to float
  %2585 = fmul float %2583, %2584
  %2586 = fadd float %2585, 0.000000e+00
  %2587 = bitcast i32 %684 to float
  %2588 = bitcast i32 %684 to float
  %2589 = fmul float %2587, %2588
  %2590 = fadd float %2586, %2589
  %2591 = call float @llvm.sqrt.f32(float %2590)
  %2592 = fneg float %693
  %2593 = fmul float %2591, %2592
  %2594 = fmul float %2593, 0.000000e+00
  %2595 = bitcast i32 %684 to float
  %2596 = fadd float %2595, %2594
  %2597 = fmul float %2582, %2596
  %2598 = fadd float %2568, %2597
  %2599 = call float @llvm.sqrt.f32(float %2598)
  %2600 = fadd float %2599, 0.000000e+00
  %2601 = fdiv float %2540, %2600
  %2602 = fmul float %2526, %2601
  %2603 = fsub float 1.000000e+00, %2602
  %2604 = load float, float* %1637, align 4
  %2605 = fmul float %2603, %2604
  %2606 = fadd float %2450, %2605
  %2607 = insertelement <4 x float> zeroinitializer, float %2606, i32 0
  %2608 = insertelement <4 x float> %2607, float 0.000000e+00, i32 1
  %2609 = insertelement <4 x float> %2608, float 0.000000e+00, i32 2
  %2610 = insertelement <4 x float> %2609, float 0.000000e+00, i32 3
  %2611 = extractelement <4 x float> %2610, i32 0
  store float %2611, float* %2133, align 4
  %2612 = getelementptr float, float* %1, i32 0
  %2613 = getelementptr inbounds float, float* %2612, i64 2
  %2614 = bitcast float* %2613 to i32*
  %2615 = load i32, i32* %2614, align 4
  %2616 = bitcast i32 %2615 to float
  %2617 = insertelement <4 x float> zeroinitializer, float %2616, i32 0
  %2618 = getelementptr float, float* %1, i32 0
  %2619 = getelementptr inbounds float, float* %2618, i64 1
  %2620 = bitcast float* %2619 to i32*
  %2621 = load i32, i32* %2620, align 4
  %2622 = bitcast i32 %2621 to float
  %2623 = insertelement <4 x float> %2617, float %2622, i32 1
  %2624 = insertelement <4 x float> %2623, float 0.000000e+00, i32 2
  %2625 = insertelement <4 x float> %2624, float 0.000000e+00, i32 3
  %2626 = extractelement <4 x float> %2625, i32 0
  %2627 = bitcast i32* %2620 to float*
  store float %2626, float* %2627, align 4
  %2628 = extractelement <4 x float> %2625, i32 1
  %2629 = bitcast i32* %2614 to float*
  store float %2628, float* %2629, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind ssp uwtable
define void @no_opt_naive_fixed_qr_decomp(float* %0, float* %1, float* %2) #1 {
.preheader13:
  %3 = bitcast float* %2 to i8*
  %4 = bitcast float* %0 to i8*
  %5 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false, i1 true, i1 false)
  %6 = call i8* @__memcpy_chk(i8* %3, i8* %4, i64 16, i64 %5) #8
  %7 = call dereferenceable_or_null(16) i8* @calloc(i64 4, i64 4) #9
  %8 = bitcast i8* %7 to float*
  store float 1.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = getelementptr inbounds i8, i8* %7, i64 12
  %11 = bitcast i8* %10 to float*
  store float 1.000000e+00, float* %11, align 4
  %12 = bitcast float* %1 to i8*
  %13 = call i64 @llvm.objectsize.i64.p0i8(i8* %12, i1 false, i1 true, i1 false)
  %14 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #9
  %15 = bitcast i8* %14 to float*
  %16 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #9
  %17 = bitcast i8* %16 to float*
  %18 = bitcast float* %2 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = bitcast i8* %14 to i32*
  store i32 %19, i32* %20, align 4
  %21 = bitcast i8* %7 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = bitcast i8* %16 to i32*
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds float, float* %2, i64 2
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %14, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 4
  %29 = bitcast i8* %9 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %16, i64 4
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = load float, float* %15, align 4
  %34 = call float @no_opt_sgn(float %33)
  %35 = fneg float %34
  %36 = call float @no_opt_naive_norm(float* nonnull %15, i32 2)
  %37 = fmul float %36, %35
  %38 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #9
  %39 = bitcast i8* %38 to float*
  %40 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #9
  %41 = load float, float* %15, align 4
  %42 = load float, float* %17, align 4
  %43 = fmul float %37, %42
  %44 = fadd float %41, %43
  store float %44, float* %39, align 4
  %45 = bitcast i8* %27 to float*
  %46 = load float, float* %45, align 4
  %47 = bitcast i8* %31 to float*
  %48 = load float, float* %47, align 4
  %49 = fmul float %37, %48
  %50 = fadd float %46, %49
  %51 = getelementptr inbounds i8, i8* %38, i64 4
  %52 = bitcast i8* %51 to float*
  store float %50, float* %52, align 4
  %53 = bitcast i8* %40 to float*
  %54 = call float @no_opt_naive_norm(float* nonnull %39, i32 2)
  %55 = fadd float %54, 0x3EE4F8B580000000
  %56 = load float, float* %39, align 4
  %57 = fdiv float %56, %55
  store float %57, float* %53, align 4
  %58 = load float, float* %52, align 4
  %59 = fdiv float %58, %55
  %60 = getelementptr inbounds i8, i8* %40, i64 4
  %61 = bitcast i8* %60 to float*
  store float %59, float* %61, align 4
  %62 = call dereferenceable_or_null(16) i8* @calloc(i64 4, i64 4) #9
  %63 = bitcast i8* %62 to float*
  %64 = load float, float* %53, align 4
  %65 = fmul float %64, 2.000000e+00
  %66 = fmul float %65, %64
  %67 = fsub float 1.000000e+00, %66
  store float %67, float* %63, align 4
  %68 = load float, float* %53, align 4
  %69 = fmul float %68, 2.000000e+00
  %70 = load float, float* %61, align 4
  %71 = fmul float %69, %70
  %72 = fsub float 0.000000e+00, %71
  %73 = getelementptr inbounds i8, i8* %62, i64 4
  %74 = bitcast i8* %73 to float*
  store float %72, float* %74, align 4
  %75 = load float, float* %61, align 4
  %76 = fmul float %75, 2.000000e+00
  %77 = load float, float* %53, align 4
  %78 = fmul float %76, %77
  %79 = fsub float 0.000000e+00, %78
  %80 = getelementptr inbounds i8, i8* %62, i64 8
  %81 = bitcast i8* %80 to float*
  store float %79, float* %81, align 4
  %82 = load float, float* %61, align 4
  %83 = fmul float %82, 2.000000e+00
  %84 = fmul float %83, %82
  %85 = fsub float 1.000000e+00, %84
  %86 = getelementptr inbounds i8, i8* %62, i64 12
  %87 = bitcast i8* %86 to float*
  store float %85, float* %87, align 4
  %88 = call dereferenceable_or_null(16) i8* @calloc(i64 4, i64 4) #9
  %89 = bitcast i8* %88 to float*
  %90 = bitcast i8* %62 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = bitcast i8* %88 to i32*
  store i32 %91, i32* %92, align 4
  %93 = bitcast i8* %73 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds i8, i8* %88, i64 4
  %96 = bitcast i8* %95 to i32*
  store i32 %94, i32* %96, align 4
  %97 = bitcast i8* %80 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds i8, i8* %88, i64 8
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 4
  %101 = bitcast i8* %86 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds i8, i8* %88, i64 12
  %104 = bitcast i8* %103 to i32*
  store i32 %102, i32* %104, align 4
  %105 = call i8* @__memcpy_chk(i8* %12, i8* %88, i64 16, i64 %13) #8
  call void @no_opt_naive_fixed_matrix_multiply(float* %89, float* %0, float* %2)
  call void @free(i8* %14)
  call void @free(i8* %16)
  call void @free(i8* %38)
  call void @free(i8* %40)
  call void @free(i8* %62)
  call void @free(i8* %88)
  call void @no_opt_naive_fixed_transpose(float* %1)
  ret void
}

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #2

; Function Attrs: allocsize(0,1)
declare i8* @calloc(i64, i64) #5

declare void @free(i8*) #6

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #1 {
.preheader6:
  %0 = alloca i64, align 8
  %1 = alloca [4 x float], align 16
  %2 = alloca [4 x float], align 16
  %3 = alloca [4 x float], align 16
  %4 = alloca [4 x float], align 16
  %5 = alloca [4 x float], align 16
  %6 = call i64 @time(i64* null) #8
  store i64 %6, i64* %0, align 8
  %7 = call i64 @time(i64* nonnull %0) #8
  %8 = trunc i64 %7 to i32
  call void @srand(i32 %8) #8
  %9 = call i32 @rand() #8
  %10 = sitofp i32 %9 to float
  %11 = fdiv float %10, 0x41747AE140000000
  %12 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 0
  store float %11, float* %12, align 16
  %13 = fpext float %11 to double
  %14 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %13) #8
  %15 = call i32 @rand() #8
  %16 = sitofp i32 %15 to float
  %17 = fdiv float %16, 0x41747AE140000000
  %18 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 1
  store float %17, float* %18, align 4
  %19 = fpext float %17 to double
  %20 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %19) #8
  %21 = call i32 @rand() #8
  %22 = sitofp i32 %21 to float
  %23 = fdiv float %22, 0x41747AE140000000
  %24 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 2
  store float %23, float* %24, align 8
  %25 = fpext float %23 to double
  %26 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %25) #8
  %27 = call i32 @rand() #8
  %28 = sitofp i32 %27 to float
  %29 = fdiv float %28, 0x41747AE140000000
  %30 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 3
  store float %29, float* %30, align 4
  %31 = fpext float %29 to double
  %32 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %31) #8
  %33 = bitcast [4 x float]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %33, i8 0, i64 16, i1 false)
  %34 = bitcast [4 x float]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %34, i8 0, i64 16, i1 false)
  %35 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 0
  %36 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 0
  call void @naive_fixed_qr_decomp(float* nonnull %12, float* nonnull %35, float* nonnull %36)
  %37 = bitcast [4 x float]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %37, i8 0, i64 16, i1 false)
  %38 = bitcast [4 x float]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %38, i8 0, i64 16, i1 false)
  %39 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %40 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 0
  call void @no_opt_naive_fixed_qr_decomp(float* nonnull %12, float* nonnull %39, float* nonnull %40)
  %41 = load float, float* %35, align 16
  %42 = fpext float %41 to double
  %43 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), double %42) #8
  %44 = load float, float* %39, align 16
  %45 = fpext float %44 to double
  %46 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), double %45) #8
  %47 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 1
  %48 = load float, float* %47, align 4
  %49 = fpext float %48 to double
  %50 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), double %49) #8
  %51 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 1
  %52 = load float, float* %51, align 4
  %53 = fpext float %52 to double
  %54 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), double %53) #8
  %55 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 2
  %56 = load float, float* %55, align 8
  %57 = fpext float %56 to double
  %58 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), double %57) #8
  %59 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 2
  %60 = load float, float* %59, align 8
  %61 = fpext float %60 to double
  %62 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), double %61) #8
  %63 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 3
  %64 = load float, float* %63, align 4
  %65 = fpext float %64 to double
  %66 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), double %65) #8
  %67 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 3
  %68 = load float, float* %67, align 4
  %69 = fpext float %68 to double
  %70 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), double %69) #8
  %71 = load float, float* %36, align 16
  %72 = fpext float %71 to double
  %73 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double %72) #8
  %74 = load float, float* %40, align 16
  %75 = fpext float %74 to double
  %76 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), double %75) #8
  %77 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 1
  %78 = load float, float* %77, align 4
  %79 = fpext float %78 to double
  %80 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double %79) #8
  %81 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 1
  %82 = load float, float* %81, align 4
  %83 = fpext float %82 to double
  %84 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), double %83) #8
  %85 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 2
  %86 = load float, float* %85, align 8
  %87 = fpext float %86 to double
  %88 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double %87) #8
  %89 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 2
  %90 = load float, float* %89, align 8
  %91 = fpext float %90 to double
  %92 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), double %91) #8
  %93 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 3
  %94 = load float, float* %93, align 4
  %95 = fpext float %94 to double
  %96 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), double %95) #8
  %97 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 3
  %98 = load float, float* %97, align 4
  %99 = fpext float %98 to double
  %100 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0), double %99) #8
  ret i32 0
}

declare i64 @time(i64*) #6

declare void @srand(i32) #6

declare i32 @rand() #6

declare i32 @printf(i8*, ...) #6

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #7

; Function Attrs: nounwind readnone speculatable willreturn
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #2

attributes #0 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { allocsize(0,1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { argmemonly nounwind willreturn }
attributes #8 = { nounwind }
attributes #9 = { nounwind allocsize(0,1) }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 11.0.1"}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
