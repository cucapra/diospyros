; ModuleID = 'diospyros.ll'
source_filename = "llvm-tests/load_reuse.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

@__const.main.mat_in = private unnamed_addr constant [2 x [2 x float]] [[2 x float] [float 1.000000e+00, float 2.000000e+00], [2 x float] [float 3.000000e+00, float 4.000000e+00]], align 16
@__const.main.f_in = private unnamed_addr constant [2 x [2 x float]] [[2 x float] [float 1.000000e+00, float 1.000000e+00], [2 x float] [float 1.000000e+00, float 1.000000e+00]], align 16
@.str = private unnamed_addr constant [12 x i8] c"output: %f\0A\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define void @load_use_twice([2 x float]* %0, [2 x float]* %1, [3 x float]* %2, [3 x float]* %3) #0 {
.preheader7:
  %4 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %5 = load float, float* %4, align 4
  %6 = insertelement <4 x float> zeroinitializer, float %5, i32 0
  %7 = insertelement <4 x float> %6, float 0.000000e+00, i32 1
  %8 = insertelement <4 x float> %7, float 0.000000e+00, i32 2
  %9 = insertelement <4 x float> %8, float 0.000000e+00, i32 3
  %10 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %11 = load float, float* %10, align 4
  %12 = insertelement <4 x float> zeroinitializer, float %11, i32 0
  %13 = insertelement <4 x float> %12, float 1.000000e+00, i32 1
  %14 = insertelement <4 x float> %13, float 1.000000e+00, i32 2
  %15 = insertelement <4 x float> %14, float 1.000000e+00, i32 3
  %16 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %17 = load float, float* %16, align 4
  %18 = insertelement <4 x float> zeroinitializer, float %17, i32 0
  %19 = insertelement <4 x float> %18, float 1.000000e+00, i32 1
  %20 = insertelement <4 x float> %19, float 1.000000e+00, i32 2
  %21 = insertelement <4 x float> %20, float 1.000000e+00, i32 3
  %22 = fmul <4 x float> %15, %21
  %23 = fmul <4 x float> %22, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %24 = fadd <4 x float> %23, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %25 = fadd <4 x float> %9, %24
  %26 = extractelement <4 x float> %25, i32 0
  %27 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float %26, float* %27, align 4
  %28 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  %29 = load float, float* %28, align 4
  %30 = insertelement <4 x float> zeroinitializer, float %29, i32 0
  %31 = insertelement <4 x float> %30, float 0.000000e+00, i32 1
  %32 = insertelement <4 x float> %31, float 0.000000e+00, i32 2
  %33 = insertelement <4 x float> %32, float 0.000000e+00, i32 3
  %34 = insertelement <4 x float> zeroinitializer, float %11, i32 0
  %35 = insertelement <4 x float> %34, float 1.000000e+00, i32 1
  %36 = insertelement <4 x float> %35, float 1.000000e+00, i32 2
  %37 = insertelement <4 x float> %36, float 1.000000e+00, i32 3
  %38 = insertelement <4 x float> zeroinitializer, float %17, i32 0
  %39 = insertelement <4 x float> %38, float 1.000000e+00, i32 1
  %40 = insertelement <4 x float> %39, float 1.000000e+00, i32 2
  %41 = insertelement <4 x float> %40, float 1.000000e+00, i32 3
  %42 = fmul <4 x float> %37, %41
  %43 = fmul <4 x float> %42, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %44 = fadd <4 x float> %43, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %45 = fadd <4 x float> %33, %44
  %46 = extractelement <4 x float> %45, i32 0
  %47 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  store float %46, float* %47, align 4
  %48 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %49 = load float, float* %48, align 4
  %50 = insertelement <4 x float> zeroinitializer, float %49, i32 0
  %51 = insertelement <4 x float> %50, float 0.000000e+00, i32 1
  %52 = insertelement <4 x float> %51, float 0.000000e+00, i32 2
  %53 = insertelement <4 x float> %52, float 0.000000e+00, i32 3
  %54 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %55 = load float, float* %54, align 4
  %56 = insertelement <4 x float> zeroinitializer, float %55, i32 0
  %57 = insertelement <4 x float> %56, float 1.000000e+00, i32 1
  %58 = insertelement <4 x float> %57, float 1.000000e+00, i32 2
  %59 = insertelement <4 x float> %58, float 1.000000e+00, i32 3
  %60 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %61 = load float, float* %60, align 4
  %62 = insertelement <4 x float> zeroinitializer, float %61, i32 0
  %63 = insertelement <4 x float> %62, float 1.000000e+00, i32 1
  %64 = insertelement <4 x float> %63, float 1.000000e+00, i32 2
  %65 = insertelement <4 x float> %64, float 1.000000e+00, i32 3
  %66 = fmul <4 x float> %59, %65
  %67 = fmul <4 x float> %66, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %68 = fadd <4 x float> %67, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %69 = fadd <4 x float> %53, %68
  %70 = extractelement <4 x float> %69, i32 0
  %71 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float %70, float* %71, align 4
  %72 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  %73 = load float, float* %72, align 4
  %74 = insertelement <4 x float> zeroinitializer, float %73, i32 0
  %75 = insertelement <4 x float> %74, float 0.000000e+00, i32 1
  %76 = insertelement <4 x float> %75, float 0.000000e+00, i32 2
  %77 = insertelement <4 x float> %76, float 0.000000e+00, i32 3
  %78 = insertelement <4 x float> zeroinitializer, float %55, i32 0
  %79 = insertelement <4 x float> %78, float 1.000000e+00, i32 1
  %80 = insertelement <4 x float> %79, float 1.000000e+00, i32 2
  %81 = insertelement <4 x float> %80, float 1.000000e+00, i32 3
  %82 = insertelement <4 x float> zeroinitializer, float %61, i32 0
  %83 = insertelement <4 x float> %82, float 1.000000e+00, i32 1
  %84 = insertelement <4 x float> %83, float 1.000000e+00, i32 2
  %85 = insertelement <4 x float> %84, float 1.000000e+00, i32 3
  %86 = fmul <4 x float> %81, %85
  %87 = fmul <4 x float> %86, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %88 = fadd <4 x float> %87, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %89 = fadd <4 x float> %77, %88
  %90 = extractelement <4 x float> %89, i32 0
  %91 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  store float %90, float* %91, align 4
  %92 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %93 = load float, float* %92, align 4
  %94 = insertelement <4 x float> zeroinitializer, float %93, i32 0
  %95 = insertelement <4 x float> %94, float 0.000000e+00, i32 1
  %96 = insertelement <4 x float> %95, float 0.000000e+00, i32 2
  %97 = insertelement <4 x float> %96, float 0.000000e+00, i32 3
  %98 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %99 = load float, float* %98, align 4
  %100 = insertelement <4 x float> zeroinitializer, float %99, i32 0
  %101 = insertelement <4 x float> %100, float 1.000000e+00, i32 1
  %102 = insertelement <4 x float> %101, float 1.000000e+00, i32 2
  %103 = insertelement <4 x float> %102, float 1.000000e+00, i32 3
  %104 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %105 = load float, float* %104, align 4
  %106 = insertelement <4 x float> zeroinitializer, float %105, i32 0
  %107 = insertelement <4 x float> %106, float 1.000000e+00, i32 1
  %108 = insertelement <4 x float> %107, float 1.000000e+00, i32 2
  %109 = insertelement <4 x float> %108, float 1.000000e+00, i32 3
  %110 = fmul <4 x float> %103, %109
  %111 = fmul <4 x float> %110, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %112 = fadd <4 x float> %111, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %113 = fadd <4 x float> %97, %112
  %114 = extractelement <4 x float> %113, i32 0
  %115 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float %114, float* %115, align 4
  %116 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  %117 = load float, float* %116, align 4
  %118 = insertelement <4 x float> zeroinitializer, float %117, i32 0
  %119 = insertelement <4 x float> %118, float 0.000000e+00, i32 1
  %120 = insertelement <4 x float> %119, float 0.000000e+00, i32 2
  %121 = insertelement <4 x float> %120, float 0.000000e+00, i32 3
  %122 = insertelement <4 x float> zeroinitializer, float %99, i32 0
  %123 = insertelement <4 x float> %122, float 1.000000e+00, i32 1
  %124 = insertelement <4 x float> %123, float 1.000000e+00, i32 2
  %125 = insertelement <4 x float> %124, float 1.000000e+00, i32 3
  %126 = insertelement <4 x float> zeroinitializer, float %105, i32 0
  %127 = insertelement <4 x float> %126, float 1.000000e+00, i32 1
  %128 = insertelement <4 x float> %127, float 1.000000e+00, i32 2
  %129 = insertelement <4 x float> %128, float 1.000000e+00, i32 3
  %130 = fmul <4 x float> %125, %129
  %131 = fmul <4 x float> %130, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %132 = fadd <4 x float> %131, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %133 = fadd <4 x float> %121, %132
  %134 = extractelement <4 x float> %133, i32 0
  %135 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  store float %134, float* %135, align 4
  %136 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %137 = load float, float* %136, align 4
  %138 = insertelement <4 x float> zeroinitializer, float %137, i32 0
  %139 = insertelement <4 x float> %138, float 0.000000e+00, i32 1
  %140 = insertelement <4 x float> %139, float 0.000000e+00, i32 2
  %141 = insertelement <4 x float> %140, float 0.000000e+00, i32 3
  %142 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %143 = load float, float* %142, align 4
  %144 = insertelement <4 x float> zeroinitializer, float %143, i32 0
  %145 = insertelement <4 x float> %144, float 1.000000e+00, i32 1
  %146 = insertelement <4 x float> %145, float 1.000000e+00, i32 2
  %147 = insertelement <4 x float> %146, float 1.000000e+00, i32 3
  %148 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %149 = load float, float* %148, align 4
  %150 = insertelement <4 x float> zeroinitializer, float %149, i32 0
  %151 = insertelement <4 x float> %150, float 1.000000e+00, i32 1
  %152 = insertelement <4 x float> %151, float 1.000000e+00, i32 2
  %153 = insertelement <4 x float> %152, float 1.000000e+00, i32 3
  %154 = fmul <4 x float> %147, %153
  %155 = fmul <4 x float> %154, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %156 = fadd <4 x float> %155, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %157 = fadd <4 x float> %141, %156
  %158 = extractelement <4 x float> %157, i32 0
  %159 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float %158, float* %159, align 4
  %160 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 2
  %161 = load float, float* %160, align 4
  %162 = insertelement <4 x float> zeroinitializer, float %161, i32 0
  %163 = insertelement <4 x float> %162, float 0.000000e+00, i32 1
  %164 = insertelement <4 x float> %163, float 0.000000e+00, i32 2
  %165 = insertelement <4 x float> %164, float 0.000000e+00, i32 3
  %166 = insertelement <4 x float> zeroinitializer, float %143, i32 0
  %167 = insertelement <4 x float> %166, float 1.000000e+00, i32 1
  %168 = insertelement <4 x float> %167, float 1.000000e+00, i32 2
  %169 = insertelement <4 x float> %168, float 1.000000e+00, i32 3
  %170 = insertelement <4 x float> zeroinitializer, float %149, i32 0
  %171 = insertelement <4 x float> %170, float 1.000000e+00, i32 1
  %172 = insertelement <4 x float> %171, float 1.000000e+00, i32 2
  %173 = insertelement <4 x float> %172, float 1.000000e+00, i32 3
  %174 = fmul <4 x float> %169, %173
  %175 = fmul <4 x float> %174, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %176 = fadd <4 x float> %175, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %177 = fadd <4 x float> %165, %176
  %178 = extractelement <4 x float> %177, i32 0
  %179 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 2
  store float %178, float* %179, align 4
  %180 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  %181 = load float, float* %180, align 4
  %182 = insertelement <4 x float> zeroinitializer, float %181, i32 0
  %183 = insertelement <4 x float> %182, float 0.000000e+00, i32 1
  %184 = insertelement <4 x float> %183, float 0.000000e+00, i32 2
  %185 = insertelement <4 x float> %184, float 0.000000e+00, i32 3
  %186 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %187 = load float, float* %186, align 4
  %188 = insertelement <4 x float> zeroinitializer, float %187, i32 0
  %189 = insertelement <4 x float> %188, float 1.000000e+00, i32 1
  %190 = insertelement <4 x float> %189, float 1.000000e+00, i32 2
  %191 = insertelement <4 x float> %190, float 1.000000e+00, i32 3
  %192 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %193 = load float, float* %192, align 4
  %194 = insertelement <4 x float> zeroinitializer, float %193, i32 0
  %195 = insertelement <4 x float> %194, float 1.000000e+00, i32 1
  %196 = insertelement <4 x float> %195, float 1.000000e+00, i32 2
  %197 = insertelement <4 x float> %196, float 1.000000e+00, i32 3
  %198 = fmul <4 x float> %191, %197
  %199 = fmul <4 x float> %198, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %200 = fadd <4 x float> %199, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %201 = fadd <4 x float> %185, %200
  %202 = extractelement <4 x float> %201, i32 0
  %203 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  store float %202, float* %203, align 4
  %204 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  %205 = load float, float* %204, align 4
  %206 = insertelement <4 x float> zeroinitializer, float %205, i32 0
  %207 = insertelement <4 x float> %206, float 0.000000e+00, i32 1
  %208 = insertelement <4 x float> %207, float 0.000000e+00, i32 2
  %209 = insertelement <4 x float> %208, float 0.000000e+00, i32 3
  %210 = insertelement <4 x float> zeroinitializer, float %187, i32 0
  %211 = insertelement <4 x float> %210, float 1.000000e+00, i32 1
  %212 = insertelement <4 x float> %211, float 1.000000e+00, i32 2
  %213 = insertelement <4 x float> %212, float 1.000000e+00, i32 3
  %214 = insertelement <4 x float> zeroinitializer, float %193, i32 0
  %215 = insertelement <4 x float> %214, float 1.000000e+00, i32 1
  %216 = insertelement <4 x float> %215, float 1.000000e+00, i32 2
  %217 = insertelement <4 x float> %216, float 1.000000e+00, i32 3
  %218 = fmul <4 x float> %213, %217
  %219 = fmul <4 x float> %218, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %220 = fadd <4 x float> %219, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %221 = fadd <4 x float> %209, %220
  %222 = extractelement <4 x float> %221, i32 0
  %223 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  store float %222, float* %223, align 4
  %224 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  %225 = load float, float* %224, align 4
  %226 = insertelement <4 x float> zeroinitializer, float %225, i32 0
  %227 = insertelement <4 x float> %226, float 0.000000e+00, i32 1
  %228 = insertelement <4 x float> %227, float 0.000000e+00, i32 2
  %229 = insertelement <4 x float> %228, float 0.000000e+00, i32 3
  %230 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %231 = load float, float* %230, align 4
  %232 = insertelement <4 x float> zeroinitializer, float %231, i32 0
  %233 = insertelement <4 x float> %232, float 1.000000e+00, i32 1
  %234 = insertelement <4 x float> %233, float 1.000000e+00, i32 2
  %235 = insertelement <4 x float> %234, float 1.000000e+00, i32 3
  %236 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %237 = load float, float* %236, align 4
  %238 = insertelement <4 x float> zeroinitializer, float %237, i32 0
  %239 = insertelement <4 x float> %238, float 1.000000e+00, i32 1
  %240 = insertelement <4 x float> %239, float 1.000000e+00, i32 2
  %241 = insertelement <4 x float> %240, float 1.000000e+00, i32 3
  %242 = fmul <4 x float> %235, %241
  %243 = fmul <4 x float> %242, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %244 = fadd <4 x float> %243, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %245 = fadd <4 x float> %229, %244
  %246 = extractelement <4 x float> %245, i32 0
  %247 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  store float %246, float* %247, align 4
  %248 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  %249 = load float, float* %248, align 4
  %250 = insertelement <4 x float> zeroinitializer, float %249, i32 0
  %251 = insertelement <4 x float> %250, float 0.000000e+00, i32 1
  %252 = insertelement <4 x float> %251, float 0.000000e+00, i32 2
  %253 = insertelement <4 x float> %252, float 0.000000e+00, i32 3
  %254 = insertelement <4 x float> zeroinitializer, float %231, i32 0
  %255 = insertelement <4 x float> %254, float 1.000000e+00, i32 1
  %256 = insertelement <4 x float> %255, float 1.000000e+00, i32 2
  %257 = insertelement <4 x float> %256, float 1.000000e+00, i32 3
  %258 = insertelement <4 x float> zeroinitializer, float %237, i32 0
  %259 = insertelement <4 x float> %258, float 1.000000e+00, i32 1
  %260 = insertelement <4 x float> %259, float 1.000000e+00, i32 2
  %261 = insertelement <4 x float> %260, float 1.000000e+00, i32 3
  %262 = fmul <4 x float> %257, %261
  %263 = fmul <4 x float> %262, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %264 = fadd <4 x float> %263, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %265 = fadd <4 x float> %253, %264
  %266 = extractelement <4 x float> %265, i32 0
  %267 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  store float %266, float* %267, align 4
  %268 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %269 = load float, float* %268, align 4
  %270 = insertelement <4 x float> zeroinitializer, float %269, i32 0
  %271 = insertelement <4 x float> %270, float 0.000000e+00, i32 1
  %272 = insertelement <4 x float> %271, float 0.000000e+00, i32 2
  %273 = insertelement <4 x float> %272, float 0.000000e+00, i32 3
  %274 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %275 = load float, float* %274, align 4
  %276 = insertelement <4 x float> zeroinitializer, float %275, i32 0
  %277 = insertelement <4 x float> %276, float 1.000000e+00, i32 1
  %278 = insertelement <4 x float> %277, float 1.000000e+00, i32 2
  %279 = insertelement <4 x float> %278, float 1.000000e+00, i32 3
  %280 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %281 = load float, float* %280, align 4
  %282 = insertelement <4 x float> zeroinitializer, float %281, i32 0
  %283 = insertelement <4 x float> %282, float 1.000000e+00, i32 1
  %284 = insertelement <4 x float> %283, float 1.000000e+00, i32 2
  %285 = insertelement <4 x float> %284, float 1.000000e+00, i32 3
  %286 = fmul <4 x float> %279, %285
  %287 = fmul <4 x float> %286, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %288 = fadd <4 x float> %287, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %289 = fadd <4 x float> %273, %288
  %290 = extractelement <4 x float> %289, i32 0
  %291 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %290, float* %291, align 4
  %292 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %293 = load float, float* %292, align 4
  %294 = insertelement <4 x float> zeroinitializer, float %293, i32 0
  %295 = insertelement <4 x float> %294, float 0.000000e+00, i32 1
  %296 = insertelement <4 x float> %295, float 0.000000e+00, i32 2
  %297 = insertelement <4 x float> %296, float 0.000000e+00, i32 3
  %298 = insertelement <4 x float> zeroinitializer, float %275, i32 0
  %299 = insertelement <4 x float> %298, float 1.000000e+00, i32 1
  %300 = insertelement <4 x float> %299, float 1.000000e+00, i32 2
  %301 = insertelement <4 x float> %300, float 1.000000e+00, i32 3
  %302 = insertelement <4 x float> zeroinitializer, float %281, i32 0
  %303 = insertelement <4 x float> %302, float 1.000000e+00, i32 1
  %304 = insertelement <4 x float> %303, float 1.000000e+00, i32 2
  %305 = insertelement <4 x float> %304, float 1.000000e+00, i32 3
  %306 = fmul <4 x float> %301, %305
  %307 = fmul <4 x float> %306, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %308 = fadd <4 x float> %307, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %309 = fadd <4 x float> %297, %308
  %310 = extractelement <4 x float> %309, i32 0
  %311 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %310, float* %311, align 4
  %312 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %313 = load float, float* %312, align 4
  %314 = insertelement <4 x float> zeroinitializer, float %313, i32 0
  %315 = insertelement <4 x float> %314, float 0.000000e+00, i32 1
  %316 = insertelement <4 x float> %315, float 0.000000e+00, i32 2
  %317 = insertelement <4 x float> %316, float 0.000000e+00, i32 3
  %318 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %319 = load float, float* %318, align 4
  %320 = insertelement <4 x float> zeroinitializer, float %319, i32 0
  %321 = insertelement <4 x float> %320, float 1.000000e+00, i32 1
  %322 = insertelement <4 x float> %321, float 1.000000e+00, i32 2
  %323 = insertelement <4 x float> %322, float 1.000000e+00, i32 3
  %324 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %325 = load float, float* %324, align 4
  %326 = insertelement <4 x float> zeroinitializer, float %325, i32 0
  %327 = insertelement <4 x float> %326, float 1.000000e+00, i32 1
  %328 = insertelement <4 x float> %327, float 1.000000e+00, i32 2
  %329 = insertelement <4 x float> %328, float 1.000000e+00, i32 3
  %330 = fmul <4 x float> %323, %329
  %331 = fmul <4 x float> %330, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %332 = fadd <4 x float> %331, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %333 = fadd <4 x float> %317, %332
  %334 = extractelement <4 x float> %333, i32 0
  %335 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %334, float* %335, align 4
  %336 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %337 = load float, float* %336, align 4
  %338 = insertelement <4 x float> zeroinitializer, float %337, i32 0
  %339 = insertelement <4 x float> %338, float 0.000000e+00, i32 1
  %340 = insertelement <4 x float> %339, float 0.000000e+00, i32 2
  %341 = insertelement <4 x float> %340, float 0.000000e+00, i32 3
  %342 = insertelement <4 x float> zeroinitializer, float %319, i32 0
  %343 = insertelement <4 x float> %342, float 1.000000e+00, i32 1
  %344 = insertelement <4 x float> %343, float 1.000000e+00, i32 2
  %345 = insertelement <4 x float> %344, float 1.000000e+00, i32 3
  %346 = insertelement <4 x float> zeroinitializer, float %325, i32 0
  %347 = insertelement <4 x float> %346, float 1.000000e+00, i32 1
  %348 = insertelement <4 x float> %347, float 1.000000e+00, i32 2
  %349 = insertelement <4 x float> %348, float 1.000000e+00, i32 3
  %350 = fmul <4 x float> %345, %349
  %351 = fmul <4 x float> %350, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %352 = fadd <4 x float> %351, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %353 = fadd <4 x float> %341, %352
  %354 = extractelement <4 x float> %353, i32 0
  %355 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %354, float* %355, align 4
  %356 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %357 = load float, float* %356, align 4
  %358 = insertelement <4 x float> zeroinitializer, float %357, i32 0
  %359 = insertelement <4 x float> %358, float 0.000000e+00, i32 1
  %360 = insertelement <4 x float> %359, float 0.000000e+00, i32 2
  %361 = insertelement <4 x float> %360, float 0.000000e+00, i32 3
  %362 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %363 = load float, float* %362, align 4
  %364 = insertelement <4 x float> zeroinitializer, float %363, i32 0
  %365 = insertelement <4 x float> %364, float 1.000000e+00, i32 1
  %366 = insertelement <4 x float> %365, float 1.000000e+00, i32 2
  %367 = insertelement <4 x float> %366, float 1.000000e+00, i32 3
  %368 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %369 = load float, float* %368, align 4
  %370 = insertelement <4 x float> zeroinitializer, float %369, i32 0
  %371 = insertelement <4 x float> %370, float 1.000000e+00, i32 1
  %372 = insertelement <4 x float> %371, float 1.000000e+00, i32 2
  %373 = insertelement <4 x float> %372, float 1.000000e+00, i32 3
  %374 = fmul <4 x float> %367, %373
  %375 = fmul <4 x float> %374, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %376 = fadd <4 x float> %375, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %377 = fadd <4 x float> %361, %376
  %378 = extractelement <4 x float> %377, i32 0
  %379 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %378, float* %379, align 4
  %380 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %381 = load float, float* %380, align 4
  %382 = insertelement <4 x float> zeroinitializer, float %381, i32 0
  %383 = insertelement <4 x float> %382, float 0.000000e+00, i32 1
  %384 = insertelement <4 x float> %383, float 0.000000e+00, i32 2
  %385 = insertelement <4 x float> %384, float 0.000000e+00, i32 3
  %386 = insertelement <4 x float> zeroinitializer, float %363, i32 0
  %387 = insertelement <4 x float> %386, float 1.000000e+00, i32 1
  %388 = insertelement <4 x float> %387, float 1.000000e+00, i32 2
  %389 = insertelement <4 x float> %388, float 1.000000e+00, i32 3
  %390 = insertelement <4 x float> zeroinitializer, float %369, i32 0
  %391 = insertelement <4 x float> %390, float 1.000000e+00, i32 1
  %392 = insertelement <4 x float> %391, float 1.000000e+00, i32 2
  %393 = insertelement <4 x float> %392, float 1.000000e+00, i32 3
  %394 = fmul <4 x float> %389, %393
  %395 = fmul <4 x float> %394, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %396 = fadd <4 x float> %395, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %397 = fadd <4 x float> %385, %396
  %398 = extractelement <4 x float> %397, i32 0
  %399 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %398, float* %399, align 4
  %400 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %401 = load float, float* %400, align 4
  %402 = insertelement <4 x float> zeroinitializer, float %401, i32 0
  %403 = insertelement <4 x float> %402, float 0.000000e+00, i32 1
  %404 = insertelement <4 x float> %403, float 0.000000e+00, i32 2
  %405 = insertelement <4 x float> %404, float 0.000000e+00, i32 3
  %406 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %407 = load float, float* %406, align 4
  %408 = insertelement <4 x float> zeroinitializer, float %407, i32 0
  %409 = insertelement <4 x float> %408, float 1.000000e+00, i32 1
  %410 = insertelement <4 x float> %409, float 1.000000e+00, i32 2
  %411 = insertelement <4 x float> %410, float 1.000000e+00, i32 3
  %412 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %413 = load float, float* %412, align 4
  %414 = insertelement <4 x float> zeroinitializer, float %413, i32 0
  %415 = insertelement <4 x float> %414, float 1.000000e+00, i32 1
  %416 = insertelement <4 x float> %415, float 1.000000e+00, i32 2
  %417 = insertelement <4 x float> %416, float 1.000000e+00, i32 3
  %418 = fmul <4 x float> %411, %417
  %419 = fmul <4 x float> %418, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %420 = fadd <4 x float> %419, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %421 = fadd <4 x float> %405, %420
  %422 = extractelement <4 x float> %421, i32 0
  %423 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %422, float* %423, align 4
  %424 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %425 = load float, float* %424, align 4
  %426 = insertelement <4 x float> zeroinitializer, float %425, i32 0
  %427 = insertelement <4 x float> %426, float 0.000000e+00, i32 1
  %428 = insertelement <4 x float> %427, float 0.000000e+00, i32 2
  %429 = insertelement <4 x float> %428, float 0.000000e+00, i32 3
  %430 = insertelement <4 x float> zeroinitializer, float %407, i32 0
  %431 = insertelement <4 x float> %430, float 1.000000e+00, i32 1
  %432 = insertelement <4 x float> %431, float 1.000000e+00, i32 2
  %433 = insertelement <4 x float> %432, float 1.000000e+00, i32 3
  %434 = insertelement <4 x float> zeroinitializer, float %413, i32 0
  %435 = insertelement <4 x float> %434, float 1.000000e+00, i32 1
  %436 = insertelement <4 x float> %435, float 1.000000e+00, i32 2
  %437 = insertelement <4 x float> %436, float 1.000000e+00, i32 3
  %438 = fmul <4 x float> %433, %437
  %439 = fmul <4 x float> %438, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %440 = fadd <4 x float> %439, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %441 = fadd <4 x float> %429, %440
  %442 = extractelement <4 x float> %441, i32 0
  %443 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %442, float* %443, align 4
  %444 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  %445 = load float, float* %444, align 4
  %446 = insertelement <4 x float> zeroinitializer, float %445, i32 0
  %447 = insertelement <4 x float> %446, float 0.000000e+00, i32 1
  %448 = insertelement <4 x float> %447, float 0.000000e+00, i32 2
  %449 = insertelement <4 x float> %448, float 0.000000e+00, i32 3
  %450 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %451 = load float, float* %450, align 4
  %452 = insertelement <4 x float> zeroinitializer, float %451, i32 0
  %453 = insertelement <4 x float> %452, float 1.000000e+00, i32 1
  %454 = insertelement <4 x float> %453, float 1.000000e+00, i32 2
  %455 = insertelement <4 x float> %454, float 1.000000e+00, i32 3
  %456 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %457 = load float, float* %456, align 4
  %458 = insertelement <4 x float> zeroinitializer, float %457, i32 0
  %459 = insertelement <4 x float> %458, float 1.000000e+00, i32 1
  %460 = insertelement <4 x float> %459, float 1.000000e+00, i32 2
  %461 = insertelement <4 x float> %460, float 1.000000e+00, i32 3
  %462 = fmul <4 x float> %455, %461
  %463 = fmul <4 x float> %462, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %464 = fadd <4 x float> %463, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %465 = fadd <4 x float> %449, %464
  %466 = extractelement <4 x float> %465, i32 0
  %467 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  store float %466, float* %467, align 4
  %468 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  %469 = load float, float* %468, align 4
  %470 = insertelement <4 x float> zeroinitializer, float %469, i32 0
  %471 = insertelement <4 x float> %470, float 0.000000e+00, i32 1
  %472 = insertelement <4 x float> %471, float 0.000000e+00, i32 2
  %473 = insertelement <4 x float> %472, float 0.000000e+00, i32 3
  %474 = insertelement <4 x float> zeroinitializer, float %451, i32 0
  %475 = insertelement <4 x float> %474, float 1.000000e+00, i32 1
  %476 = insertelement <4 x float> %475, float 1.000000e+00, i32 2
  %477 = insertelement <4 x float> %476, float 1.000000e+00, i32 3
  %478 = insertelement <4 x float> zeroinitializer, float %457, i32 0
  %479 = insertelement <4 x float> %478, float 1.000000e+00, i32 1
  %480 = insertelement <4 x float> %479, float 1.000000e+00, i32 2
  %481 = insertelement <4 x float> %480, float 1.000000e+00, i32 3
  %482 = fmul <4 x float> %477, %481
  %483 = fmul <4 x float> %482, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %484 = fadd <4 x float> %483, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %485 = fadd <4 x float> %473, %484
  %486 = extractelement <4 x float> %485, i32 0
  %487 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  store float %486, float* %487, align 4
  %488 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  %489 = load float, float* %488, align 4
  %490 = insertelement <4 x float> zeroinitializer, float %489, i32 0
  %491 = insertelement <4 x float> %490, float 0.000000e+00, i32 1
  %492 = insertelement <4 x float> %491, float 0.000000e+00, i32 2
  %493 = insertelement <4 x float> %492, float 0.000000e+00, i32 3
  %494 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %495 = load float, float* %494, align 4
  %496 = insertelement <4 x float> zeroinitializer, float %495, i32 0
  %497 = insertelement <4 x float> %496, float 1.000000e+00, i32 1
  %498 = insertelement <4 x float> %497, float 1.000000e+00, i32 2
  %499 = insertelement <4 x float> %498, float 1.000000e+00, i32 3
  %500 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %501 = load float, float* %500, align 4
  %502 = insertelement <4 x float> zeroinitializer, float %501, i32 0
  %503 = insertelement <4 x float> %502, float 1.000000e+00, i32 1
  %504 = insertelement <4 x float> %503, float 1.000000e+00, i32 2
  %505 = insertelement <4 x float> %504, float 1.000000e+00, i32 3
  %506 = fmul <4 x float> %499, %505
  %507 = fmul <4 x float> %506, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %508 = fadd <4 x float> %507, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %509 = fadd <4 x float> %493, %508
  %510 = extractelement <4 x float> %509, i32 0
  %511 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  store float %510, float* %511, align 4
  %512 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  %513 = load float, float* %512, align 4
  %514 = insertelement <4 x float> zeroinitializer, float %513, i32 0
  %515 = insertelement <4 x float> %514, float 0.000000e+00, i32 1
  %516 = insertelement <4 x float> %515, float 0.000000e+00, i32 2
  %517 = insertelement <4 x float> %516, float 0.000000e+00, i32 3
  %518 = insertelement <4 x float> zeroinitializer, float %495, i32 0
  %519 = insertelement <4 x float> %518, float 1.000000e+00, i32 1
  %520 = insertelement <4 x float> %519, float 1.000000e+00, i32 2
  %521 = insertelement <4 x float> %520, float 1.000000e+00, i32 3
  %522 = insertelement <4 x float> zeroinitializer, float %501, i32 0
  %523 = insertelement <4 x float> %522, float 1.000000e+00, i32 1
  %524 = insertelement <4 x float> %523, float 1.000000e+00, i32 2
  %525 = insertelement <4 x float> %524, float 1.000000e+00, i32 3
  %526 = fmul <4 x float> %521, %525
  %527 = fmul <4 x float> %526, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %528 = fadd <4 x float> %527, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %529 = fadd <4 x float> %517, %528
  %530 = extractelement <4 x float> %529, i32 0
  %531 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  store float %530, float* %531, align 4
  %532 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 0
  %533 = load float, float* %532, align 4
  %534 = insertelement <4 x float> zeroinitializer, float %533, i32 0
  %535 = insertelement <4 x float> %534, float 0.000000e+00, i32 1
  %536 = insertelement <4 x float> %535, float 0.000000e+00, i32 2
  %537 = insertelement <4 x float> %536, float 0.000000e+00, i32 3
  %538 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %539 = load float, float* %538, align 4
  %540 = insertelement <4 x float> zeroinitializer, float %539, i32 0
  %541 = insertelement <4 x float> %540, float 1.000000e+00, i32 1
  %542 = insertelement <4 x float> %541, float 1.000000e+00, i32 2
  %543 = insertelement <4 x float> %542, float 1.000000e+00, i32 3
  %544 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %545 = load float, float* %544, align 4
  %546 = insertelement <4 x float> zeroinitializer, float %545, i32 0
  %547 = insertelement <4 x float> %546, float 1.000000e+00, i32 1
  %548 = insertelement <4 x float> %547, float 1.000000e+00, i32 2
  %549 = insertelement <4 x float> %548, float 1.000000e+00, i32 3
  %550 = fmul <4 x float> %543, %549
  %551 = fmul <4 x float> %550, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %552 = fadd <4 x float> %551, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %553 = fadd <4 x float> %537, %552
  %554 = extractelement <4 x float> %553, i32 0
  %555 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 0
  store float %554, float* %555, align 4
  %556 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 0
  %557 = load float, float* %556, align 4
  %558 = insertelement <4 x float> zeroinitializer, float %557, i32 0
  %559 = insertelement <4 x float> %558, float 0.000000e+00, i32 1
  %560 = insertelement <4 x float> %559, float 0.000000e+00, i32 2
  %561 = insertelement <4 x float> %560, float 0.000000e+00, i32 3
  %562 = insertelement <4 x float> zeroinitializer, float %539, i32 0
  %563 = insertelement <4 x float> %562, float 1.000000e+00, i32 1
  %564 = insertelement <4 x float> %563, float 1.000000e+00, i32 2
  %565 = insertelement <4 x float> %564, float 1.000000e+00, i32 3
  %566 = insertelement <4 x float> zeroinitializer, float %545, i32 0
  %567 = insertelement <4 x float> %566, float 1.000000e+00, i32 1
  %568 = insertelement <4 x float> %567, float 1.000000e+00, i32 2
  %569 = insertelement <4 x float> %568, float 1.000000e+00, i32 3
  %570 = fmul <4 x float> %565, %569
  %571 = fmul <4 x float> %570, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %572 = fadd <4 x float> %571, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %573 = fadd <4 x float> %561, %572
  %574 = extractelement <4 x float> %573, i32 0
  %575 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 0
  store float %574, float* %575, align 4
  %576 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  %577 = load float, float* %576, align 4
  %578 = insertelement <4 x float> zeroinitializer, float %577, i32 0
  %579 = insertelement <4 x float> %578, float 0.000000e+00, i32 1
  %580 = insertelement <4 x float> %579, float 0.000000e+00, i32 2
  %581 = insertelement <4 x float> %580, float 0.000000e+00, i32 3
  %582 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %583 = load float, float* %582, align 4
  %584 = insertelement <4 x float> zeroinitializer, float %583, i32 0
  %585 = insertelement <4 x float> %584, float 1.000000e+00, i32 1
  %586 = insertelement <4 x float> %585, float 1.000000e+00, i32 2
  %587 = insertelement <4 x float> %586, float 1.000000e+00, i32 3
  %588 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %589 = load float, float* %588, align 4
  %590 = insertelement <4 x float> zeroinitializer, float %589, i32 0
  %591 = insertelement <4 x float> %590, float 1.000000e+00, i32 1
  %592 = insertelement <4 x float> %591, float 1.000000e+00, i32 2
  %593 = insertelement <4 x float> %592, float 1.000000e+00, i32 3
  %594 = fmul <4 x float> %587, %593
  %595 = fmul <4 x float> %594, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %596 = fadd <4 x float> %595, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %597 = fadd <4 x float> %581, %596
  %598 = extractelement <4 x float> %597, i32 0
  %599 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  store float %598, float* %599, align 4
  %600 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  %601 = load float, float* %600, align 4
  %602 = insertelement <4 x float> zeroinitializer, float %601, i32 0
  %603 = insertelement <4 x float> %602, float 0.000000e+00, i32 1
  %604 = insertelement <4 x float> %603, float 0.000000e+00, i32 2
  %605 = insertelement <4 x float> %604, float 0.000000e+00, i32 3
  %606 = insertelement <4 x float> zeroinitializer, float %583, i32 0
  %607 = insertelement <4 x float> %606, float 1.000000e+00, i32 1
  %608 = insertelement <4 x float> %607, float 1.000000e+00, i32 2
  %609 = insertelement <4 x float> %608, float 1.000000e+00, i32 3
  %610 = insertelement <4 x float> zeroinitializer, float %589, i32 0
  %611 = insertelement <4 x float> %610, float 1.000000e+00, i32 1
  %612 = insertelement <4 x float> %611, float 1.000000e+00, i32 2
  %613 = insertelement <4 x float> %612, float 1.000000e+00, i32 3
  %614 = fmul <4 x float> %609, %613
  %615 = fmul <4 x float> %614, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %616 = fadd <4 x float> %615, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %617 = fadd <4 x float> %605, %616
  %618 = extractelement <4 x float> %617, i32 0
  %619 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  store float %618, float* %619, align 4
  %620 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  %621 = load float, float* %620, align 4
  %622 = insertelement <4 x float> zeroinitializer, float %621, i32 0
  %623 = insertelement <4 x float> %622, float 0.000000e+00, i32 1
  %624 = insertelement <4 x float> %623, float 0.000000e+00, i32 2
  %625 = insertelement <4 x float> %624, float 0.000000e+00, i32 3
  %626 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %627 = load float, float* %626, align 4
  %628 = insertelement <4 x float> zeroinitializer, float %627, i32 0
  %629 = insertelement <4 x float> %628, float 1.000000e+00, i32 1
  %630 = insertelement <4 x float> %629, float 1.000000e+00, i32 2
  %631 = insertelement <4 x float> %630, float 1.000000e+00, i32 3
  %632 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %633 = load float, float* %632, align 4
  %634 = insertelement <4 x float> zeroinitializer, float %633, i32 0
  %635 = insertelement <4 x float> %634, float 1.000000e+00, i32 1
  %636 = insertelement <4 x float> %635, float 1.000000e+00, i32 2
  %637 = insertelement <4 x float> %636, float 1.000000e+00, i32 3
  %638 = fmul <4 x float> %631, %637
  %639 = fmul <4 x float> %638, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %640 = fadd <4 x float> %639, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %641 = fadd <4 x float> %625, %640
  %642 = extractelement <4 x float> %641, i32 0
  %643 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  store float %642, float* %643, align 4
  %644 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  %645 = load float, float* %644, align 4
  %646 = insertelement <4 x float> zeroinitializer, float %645, i32 0
  %647 = insertelement <4 x float> %646, float 0.000000e+00, i32 1
  %648 = insertelement <4 x float> %647, float 0.000000e+00, i32 2
  %649 = insertelement <4 x float> %648, float 0.000000e+00, i32 3
  %650 = insertelement <4 x float> zeroinitializer, float %627, i32 0
  %651 = insertelement <4 x float> %650, float 1.000000e+00, i32 1
  %652 = insertelement <4 x float> %651, float 1.000000e+00, i32 2
  %653 = insertelement <4 x float> %652, float 1.000000e+00, i32 3
  %654 = insertelement <4 x float> zeroinitializer, float %633, i32 0
  %655 = insertelement <4 x float> %654, float 1.000000e+00, i32 1
  %656 = insertelement <4 x float> %655, float 1.000000e+00, i32 2
  %657 = insertelement <4 x float> %656, float 1.000000e+00, i32 3
  %658 = fmul <4 x float> %653, %657
  %659 = fmul <4 x float> %658, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %660 = fadd <4 x float> %659, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %661 = fadd <4 x float> %649, %660
  %662 = extractelement <4 x float> %661, i32 0
  %663 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  store float %662, float* %663, align 4
  %664 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 2
  %665 = load float, float* %664, align 4
  %666 = insertelement <4 x float> zeroinitializer, float %665, i32 0
  %667 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 2
  %668 = load float, float* %667, align 4
  %669 = insertelement <4 x float> %666, float %668, i32 1
  %670 = insertelement <4 x float> %669, float 0.000000e+00, i32 2
  %671 = insertelement <4 x float> %670, float 0.000000e+00, i32 3
  %672 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %673 = load float, float* %672, align 4
  %674 = insertelement <4 x float> zeroinitializer, float %673, i32 0
  %675 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %676 = load float, float* %675, align 4
  %677 = insertelement <4 x float> %674, float %676, i32 1
  %678 = insertelement <4 x float> %677, float 1.000000e+00, i32 2
  %679 = insertelement <4 x float> %678, float 1.000000e+00, i32 3
  %680 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %681 = load float, float* %680, align 4
  %682 = insertelement <4 x float> zeroinitializer, float %681, i32 0
  %683 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %684 = load float, float* %683, align 4
  %685 = insertelement <4 x float> %682, float %684, i32 1
  %686 = insertelement <4 x float> %685, float 1.000000e+00, i32 2
  %687 = insertelement <4 x float> %686, float 1.000000e+00, i32 3
  %688 = fmul <4 x float> %679, %687
  %689 = fmul <4 x float> %688, <float 3.000000e+00, float 2.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %690 = fadd <4 x float> %689, <float -4.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %691 = fadd <4 x float> %671, %690
  %692 = extractelement <4 x float> %691, i32 0
  %693 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 2
  store float %692, float* %693, align 4
  %694 = extractelement <4 x float> %691, i32 1
  %695 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 2
  store float %694, float* %695, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #0 {
.preheader:
  %0 = alloca [2 x [2 x float]], align 16
  %1 = alloca [2 x [2 x float]], align 16
  %2 = alloca [3 x [3 x float]], align 16
  %3 = alloca [3 x [3 x float]], align 16
  %4 = bitcast [2 x [2 x float]]* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %4, i8* nonnull align 16 dereferenceable(16) bitcast ([2 x [2 x float]]* @__const.main.mat_in to i8*), i64 16, i1 false)
  %5 = bitcast [2 x [2 x float]]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %5, i8* nonnull align 16 dereferenceable(16) bitcast ([2 x [2 x float]]* @__const.main.f_in to i8*), i64 16, i1 false)
  %6 = bitcast [3 x [3 x float]]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(36) %6, i8 0, i64 36, i1 false)
  %7 = bitcast [3 x [3 x float]]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(36) %7, i8 0, i64 36, i1 false)
  %8 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %0, i64 0, i64 0
  %9 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %1, i64 0, i64 0
  %10 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0
  %11 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0
  call void @load_use_twice([2 x float]* nonnull %8, [2 x float]* nonnull %9, [3 x float]* nonnull %10, [3 x float]* nonnull %11)
  %12 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 0
  %13 = load float, float* %12, align 16
  %14 = fpext float %13 to double
  %15 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %14) #4
  %16 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0, i64 0
  %17 = load float, float* %16, align 16
  %18 = fpext float %17 to double
  %19 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %18) #4
  %20 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 1
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %22) #4
  %24 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0, i64 1
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %26) #4
  %28 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 2
  %29 = load float, float* %28, align 8
  %30 = fpext float %29 to double
  %31 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %30) #4
  %32 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0, i64 2
  %33 = load float, float* %32, align 8
  %34 = fpext float %33 to double
  %35 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %34) #4
  %36 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 0
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %38) #4
  %40 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 1, i64 0
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  %43 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %42) #4
  %44 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 1
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %46) #4
  %48 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 1, i64 1
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  %51 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %50) #4
  %52 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 2
  %53 = load float, float* %52, align 4
  %54 = fpext float %53 to double
  %55 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %54) #4
  %56 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 1, i64 2
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %58) #4
  %60 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 0
  %61 = load float, float* %60, align 8
  %62 = fpext float %61 to double
  %63 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %62) #4
  %64 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 2, i64 0
  %65 = load float, float* %64, align 8
  %66 = fpext float %65 to double
  %67 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %66) #4
  %68 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 1
  %69 = load float, float* %68, align 4
  %70 = fpext float %69 to double
  %71 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %70) #4
  %72 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 2, i64 1
  %73 = load float, float* %72, align 4
  %74 = fpext float %73 to double
  %75 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %74) #4
  %76 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 2
  %77 = load float, float* %76, align 8
  %78 = fpext float %77 to double
  %79 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %78) #4
  %80 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 2, i64 2
  %81 = load float, float* %80, align 8
  %82 = fpext float %81 to double
  %83 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %82) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @printf(i8*, ...) #3

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 11.0.1"}
