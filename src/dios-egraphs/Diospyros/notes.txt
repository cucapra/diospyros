FFT is likely going to break, because the temps are ordered in a fashion that 
they cannot be moved before vectorization; need an algorithm 
to decide conservatively when vectorization can be done and on which sets of code.

Likewise, loop unrolling will likely break most vectorization outputs, because the
temps will straddle vector adds.

E.g.
temp  = 3 + 4;
v += temp 

temp = 5 + 6;
v += temp
might break when it is unrolled out.

 
Need to also select code to vectorize on; this can use the code from world's simplist pass
for independent adds, to idnentify independent linear runs of binary operators.

Its worth porting over the code on vectorization of independent adds from 
https://github.com/JonathanDLTran/Summer2021/blob/main/Learning-LLVM/llvm-pass-skeleton/skeleton/Skeleton.cpp

Its also good to see what an example fft output looks like; and then the c program
regular compiler could be used as the expected printed output.

Also FFT makes use of xor, bitwise shift, bit and and bit or operations. These 
are not implemented in diospyros pass, despite the fact that they are binary operators
themselves. This means we should probably implement these as well.

But this also means VecLang has to change!!! (for XOR and shifting).

FFT - has not been tested whatsoever