FFT is likely going to break, because the temps are ordered in a fashion that 
they cannot be moved before vectorization; need an algorithm 
to decide conservatively when vectorization can be done and on which sets of code.

Likewise, loop unrolling will likely break most vectorization outputs, because the
temps will straddle vector adds.

E.g.
temp  = 3 + 4;
v += temp 

temp = 5 + 6;
v += temp
might break when it is unrolled out.

 
Need to also select code to vectorize on; this can use the code from world's simplist pass
for independent adds, to idnentify independent linear runs of binary operators.

Its worth porting over the code on vectorization of independent adds from 
https://github.com/JonathanDLTran/Summer2021/blob/main/Learning-LLVM/llvm-pass-skeleton/skeleton/Skeleton.cpp

Its also good to see what an example fft output looks like; and then the c program
regular compiler could be used as the expected printed output.

Also FFT makes use of xor, bitwise shift, bit and and bit or operations. These 
are not implemented in diospyros pass, despite the fact that they are binary operators
themselves. This means we should probably implement these as well.

But this also means VecLang has to change!!! (for XOR and shifting).

FFT - has not been tested whatsoever


---------------- 9/03/2021 FFT ----------------
store float %102, float* %18, align 4
%103 = load float*, float** %12, align 8

- store/load 
- there's an issue with the store and load to %18. This might be influencing
the issues with the wrong values; what's the issue with this? 
- there's an issue with 
- removing temporary variables removes issues; this is true on all test cases;
- how to fix this issue?
    + I was thinking about backtracking from the last load to a store to the same 
    value, and checking if there was a shared llvm value.
        * Might not work
    + No idea?

- should see what happens when loop unrolling occurs. Does this break the implementation?

Running Copy Propagation might actually solve a bunch of problems with temps!
    - Highly suggest runnign copy propagation to remove temps.

-------------- 9/04/2021 Next Steps with Jasper ----------------

Next steps:
- Copy Propagation Pass
- Loop Unrolling Pass
- Porting further benchmarks that are non-matrix based 
- Debugging further benchmarks
- Merge stuff onto LLVM branch/Main branch
- Flaky Test: five_binops.c failed about 1 in 20 times when using HashMaps in Rust.