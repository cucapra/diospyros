{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6","program":"/Users/wandang/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","lexpr","--edition=2018","/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"fast-float-parsing\"","-C","metadata=f754f3ef7808c6ff","-C","extra-filename=-f754f3ef7808c6ff","--out-dir","/Users/wandang/Desktop/diospyros/src/dios-egraphs/Diospyros/target/rls/debug/deps","-L","dependency=/Users/wandang/Desktop/diospyros/src/dios-egraphs/Diospyros/target/rls/debug/deps","--extern","itoa=/Users/wandang/Desktop/diospyros/src/dios-egraphs/Diospyros/target/rls/debug/deps/libitoa-fb932fd894b18e56.rmeta","--extern","lexpr_macros=/Users/wandang/Desktop/diospyros/src/dios-egraphs/Diospyros/target/rls/debug/deps/liblexpr_macros-5de8d154f3bf9cd4.dylib","--extern","proc_macro_hack=/Users/wandang/Desktop/diospyros/src/dios-egraphs/Diospyros/target/rls/debug/deps/libproc_macro_hack-041f83a7af0c798e.dylib","--extern","ryu=/Users/wandang/Desktop/diospyros/src/dios-egraphs/Diospyros/target/rls/debug/deps/libryu-2ac15f1a27986ddc.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/wandang/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/wandang/Desktop/diospyros/src/dios-egraphs/Diospyros/target/rls/debug/deps/liblexpr-f754f3ef7808c6ff.rmeta"},"prelude":{"crate_id":{"name":"lexpr","disambiguator":[4758527160578390338,12179100728623151643]},"crate_root":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src","external_crates":[{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14497711731351875891,7574154950596153320]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[17161976177339802527,9637120080719870273]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[12784072134307519025,4657485898025748013]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8860544973196061204,9932137894390183628]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[15484098214765895148,4360652648143560453]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13802683045354889200,17279120461159080731]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13733846401634403672,16568137600355934567]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5926527291982439463,7261863668131194074]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2147386378482378397,1448349958257004752]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8504510625746843556,11549570195915831773]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[1145582961014725186,16562354883654090131]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[6582153069738696943,14519107576634371424]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[15498041504304623936,9266600846380482125]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[12608136573466536856,1503974727608604885]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[16755883997827362908,2889333423780235391]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":16,"id":{"name":"panic_unwind","disambiguator":[3009561993154964965,13259943199418826037]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":17,"id":{"name":"proc_macro_hack","disambiguator":[18271058969028991263,8469930609677089162]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","num":18,"id":{"name":"lexpr_macros","disambiguator":[10065482277649128788,17007695080732356355]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","num":19,"id":{"name":"itoa","disambiguator":[4053364750128791569,17849697835791693943]}},{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","num":20,"id":{"name":"ryu","disambiguator":[1414442814882747122,12094744306941252496]}}],"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":0,"byte_end":12395,"line_start":1,"line_end":384,"column_start":1,"column_end":11}},"imports":[{"kind":"Use","ref_id":{"krate":18,"index":125},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11786,"byte_end":11790,"line_start":346,"line_end":346,"column_start":23,"column_end":27},"alias_span":null,"name":"_proc_macro_hack_sexp","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1373},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51513,"byte_end":51518,"line_start":20,"line_end":20,"column_start":13,"column_end":18},"alias_span":null,"name":"Datum","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":1402},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51520,"byte_end":51524,"line_start":20,"line_end":20,"column_start":20,"column_end":24},"alias_span":null,"name":"Span","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":1323},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51540,"byte_end":51550,"line_start":21,"line_end":21,"column_start":14,"column_end":24},"alias_span":null,"name":"CharSyntax","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":1295},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51552,"byte_end":51565,"line_start":21,"line_end":21,"column_start":26,"column_end":39},"alias_span":null,"name":"KeywordSyntax","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":1310},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51567,"byte_end":51579,"line_start":21,"line_end":21,"column_start":41,"column_end":53},"alias_span":null,"name":"StringSyntax","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":620},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51601,"byte_end":51607,"line_start":24,"line_end":24,"column_start":16,"column_end":22},"alias_span":null,"name":"IoRead","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":1656},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51609,"byte_end":51617,"line_start":24,"line_end":24,"column_start":24,"column_end":32},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":581},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51619,"byte_end":51623,"line_start":24,"line_end":24,"column_start":34,"column_end":38},"alias_span":null,"name":"Read","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":624},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51625,"byte_end":51634,"line_start":24,"line_end":24,"column_start":40,"column_end":49},"alias_span":null,"name":"SliceRead","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":628},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51636,"byte_end":51643,"line_start":24,"line_end":24,"column_start":51,"column_end":58},"alias_span":null,"name":"StrRead","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":457},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51678,"byte_end":51683,"line_start":27,"line_end":27,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":459},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51685,"byte_end":51691,"line_start":27,"line_end":27,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":220}},{"kind":"Use","ref_id":{"krate":0,"index":1323},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159757,"byte_end":159767,"line_start":13,"line_end":13,"column_start":25,"column_end":35},"alias_span":null,"name":"CharSyntax","value":"","parent":{"krate":0,"index":800}},{"kind":"Use","ref_id":{"krate":0,"index":1295},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159769,"byte_end":159782,"line_start":13,"line_end":13,"column_start":37,"column_end":50},"alias_span":null,"name":"KeywordSyntax","value":"","parent":{"krate":0,"index":800}},{"kind":"Use","ref_id":{"krate":0,"index":1310},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159784,"byte_end":159796,"line_start":13,"line_end":13,"column_start":52,"column_end":64},"alias_span":null,"name":"StringSyntax","value":"","parent":{"krate":0,"index":800}},{"kind":"Use","ref_id":{"krate":0,"index":1159},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191683,"byte_end":191688,"line_start":96,"line_end":96,"column_start":22,"column_end":27},"alias_span":null,"name":"Index","value":"","parent":{"krate":0,"index":1002}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11939,"byte_end":11950,"line_start":359,"line_end":359,"column_start":5,"column_end":16},"alias_span":null,"name":"from_reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":403},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11952,"byte_end":11970,"line_start":359,"line_end":359,"column_start":18,"column_end":36},"alias_span":null,"name":"from_reader_custom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11972,"byte_end":11982,"line_start":359,"line_end":359,"column_start":38,"column_end":48},"alias_span":null,"name":"from_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":409},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11984,"byte_end":12001,"line_start":359,"line_end":359,"column_start":50,"column_end":67},"alias_span":null,"name":"from_slice_custom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":413},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12003,"byte_end":12011,"line_start":359,"line_end":359,"column_start":69,"column_end":77},"alias_span":null,"name":"from_str","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12013,"byte_end":12028,"line_start":359,"line_end":359,"column_start":79,"column_end":94},"alias_span":null,"name":"from_str_custom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":297},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12034,"byte_end":12040,"line_start":360,"line_end":360,"column_start":5,"column_end":11},"alias_span":null,"name":"Parser","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1000},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12088,"byte_end":12097,"line_start":365,"line_end":365,"column_start":5,"column_end":14},"alias_span":null,"name":"to_string","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1001},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12099,"byte_end":12115,"line_start":365,"line_end":365,"column_start":16,"column_end":32},"alias_span":null,"name":"to_string_custom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":998},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12117,"byte_end":12123,"line_start":365,"line_end":365,"column_start":34,"column_end":40},"alias_span":null,"name":"to_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":999},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12125,"byte_end":12138,"line_start":365,"line_end":365,"column_start":42,"column_end":55},"alias_span":null,"name":"to_vec_custom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":994},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12140,"byte_end":12149,"line_start":365,"line_end":365,"column_start":57,"column_end":66},"alias_span":null,"name":"to_writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":996},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12151,"byte_end":12167,"line_start":365,"line_end":365,"column_start":68,"column_end":84},"alias_span":null,"name":"to_writer_custom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1771},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12169,"byte_end":12176,"line_start":365,"line_end":365,"column_start":86,"column_end":93},"alias_span":null,"name":"Printer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1780},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12212,"byte_end":12217,"line_start":369,"line_end":369,"column_start":16,"column_end":21},"alias_span":null,"name":"Value","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1373},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12250,"byte_end":12255,"line_start":372,"line_end":372,"column_start":16,"column_end":21},"alias_span":null,"name":"Datum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1336},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12287,"byte_end":12291,"line_start":375,"line_end":375,"column_start":15,"column_end":19},"alias_span":null,"name":"Cons","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1159},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12324,"byte_end":12329,"line_start":378,"line_end":378,"column_start":16,"column_end":21},"alias_span":null,"name":"Index","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1484},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":12363,"byte_end":12369,"line_start":381,"line_end":381,"column_start":17,"column_end":23},"alias_span":null,"name":"Number","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":0,"byte_end":12395,"line_start":1,"line_end":384,"column_start":1,"column_end":11},"name":"","qualname":"::","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":1287},{"krate":0,"index":1291},{"krate":0,"index":6},{"krate":0,"index":10},{"krate":0,"index":75},{"krate":0,"index":181},{"krate":0,"index":220},{"krate":0,"index":800},{"krate":0,"index":1002},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1241},{"krate":0,"index":1244},{"krate":0,"index":1247},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1266},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284}],"decl_id":null,"docs":" This crate provides facilities for parsing, printing and\n manipulating S-expression data. S-expressions are the format used\n to represent code and data in the Lisp language family.","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":23,"byte_end":49,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"allow(clippy :: match_like_matches_macro)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":158,"byte_end":201,"line_start":5,"line_end":5,"column_start":1,"column_end":44}},{"value":"allow(clippy :: manual_range_contains)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":261,"byte_end":301,"line_start":7,"line_end":7,"column_start":1,"column_end":41}},{"value":"/ This crate provides facilities for parsing, printing and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":303,"byte_end":363,"line_start":9,"line_end":9,"column_start":1,"column_end":61}},{"value":"/ manipulating S-expression data. S-expressions are the format used","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":364,"byte_end":433,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ to represent code and data in the Lisp language family.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":434,"byte_end":493,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":494,"byte_end":497,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":498,"byte_end":511,"line_start":13,"line_end":13,"column_start":1,"column_end":14}},{"value":"/ ((name . \"John Doe\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":512,"byte_end":536,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/  (age . 43)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":537,"byte_end":552,"line_start":15,"line_end":15,"column_start":1,"column_end":16}},{"value":"/  (address","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":553,"byte_end":566,"line_start":16,"line_end":16,"column_start":1,"column_end":14}},{"value":"/   (street \"10 Downing Street\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":567,"byte_end":601,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/   (city \"London\"))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":602,"byte_end":624,"line_start":18,"line_end":18,"column_start":1,"column_end":23}},{"value":"/  (phones \"+44 1234567\" \"+44 2345678\"))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":625,"byte_end":667,"line_start":19,"line_end":19,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":668,"byte_end":675,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":676,"byte_end":679,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ `lexpr` also supports more complex types; including keywords and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":680,"byte_end":748,"line_start":22,"line_end":22,"column_start":1,"column_end":69}},{"value":"/ configurable tokens for `true`, `false` and `nil`, by default","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":749,"byte_end":814,"line_start":23,"line_end":23,"column_start":1,"column_end":66}},{"value":"/ using Scheme syntax:","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":815,"byte_end":839,"line_start":24,"line_end":24,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":840,"byte_end":843,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":844,"byte_end":857,"line_start":26,"line_end":26,"column_start":1,"column_end":14}},{"value":"/ (define-class rectangle ()","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":858,"byte_end":888,"line_start":27,"line_end":27,"column_start":1,"column_end":31}},{"value":"/  (width","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":889,"byte_end":900,"line_start":28,"line_end":28,"column_start":1,"column_end":12}},{"value":"/    #:init-value #nil ;; Nil value","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":901,"byte_end":938,"line_start":29,"line_end":29,"column_start":1,"column_end":38}},{"value":"/    #:settable #t     ;; true","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":939,"byte_end":971,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/    #:guard (> width 10)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":972,"byte_end":999,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/  )","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1000,"byte_end":1006,"line_start":32,"line_end":32,"column_start":1,"column_end":7}},{"value":"/  (height","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1007,"byte_end":1019,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/    #:init-value 10","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1020,"byte_end":1042,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"/    #:writable #f ;; false","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1043,"byte_end":1072,"line_start":35,"line_end":35,"column_start":1,"column_end":30}},{"value":"/   ))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1073,"byte_end":1081,"line_start":36,"line_end":36,"column_start":1,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1082,"byte_end":1089,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1090,"byte_end":1093,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Note that keywords, and the corresponding `#:` notation, is not","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1094,"byte_end":1161,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/ part of standard Scheme, but is supported by `lexpr`'s default","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1162,"byte_end":1228,"line_start":40,"line_end":40,"column_start":1,"column_end":67}},{"value":"/ parser settings.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1229,"byte_end":1249,"line_start":41,"line_end":41,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1250,"byte_end":1253,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ There are three common ways that you might find yourself needing","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1254,"byte_end":1322,"line_start":43,"line_end":43,"column_start":1,"column_end":69}},{"value":"/ to work with S-expression data in Rust:","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1323,"byte_end":1366,"line_start":44,"line_end":44,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1367,"byte_end":1370,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ - **As text data**. An unprocessed string of S-expression data","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1371,"byte_end":1437,"line_start":46,"line_end":46,"column_start":1,"column_end":67}},{"value":"/   that you receive from a Lisp program, read from a file, or","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1438,"byte_end":1502,"line_start":47,"line_end":47,"column_start":1,"column_end":65}},{"value":"/   prepare to send to a Lisp program.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1503,"byte_end":1543,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1544,"byte_end":1547,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ - **As an dynamically typed representation**. Maybe you want to check that","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1548,"byte_end":1626,"line_start":50,"line_end":50,"column_start":1,"column_end":79}},{"value":"/   some S-expression data is valid before passing it on, but without knowing","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1627,"byte_end":1706,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/   the structure of what it contains. Or you want to handle arbirarily","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1707,"byte_end":1780,"line_start":52,"line_end":52,"column_start":1,"column_end":74}},{"value":"/   structured data, like Lisp code.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1781,"byte_end":1819,"line_start":53,"line_end":53,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1820,"byte_end":1823,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ - **As a statically typed Rust data structure**. When you expect all","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1824,"byte_end":1896,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/   or most of your data to conform to a particular structure and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1897,"byte_end":1964,"line_start":56,"line_end":56,"column_start":1,"column_end":68}},{"value":"/   want to get real work done without the dynamically typed nature","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":1965,"byte_end":2034,"line_start":57,"line_end":57,"column_start":1,"column_end":70}},{"value":"/   of S-expressions tripping you up.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2035,"byte_end":2074,"line_start":58,"line_end":58,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2075,"byte_end":2078,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ Only the first two items of this list are handled by `lexpr`; for conversion","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2079,"byte_end":2159,"line_start":60,"line_end":60,"column_start":1,"column_end":81}},{"value":"/ from and to statically typed Rust data structures see the [`serde-lexpr`]","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2160,"byte_end":2237,"line_start":61,"line_end":61,"column_start":1,"column_end":78}},{"value":"/ crate.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2238,"byte_end":2248,"line_start":62,"line_end":62,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2249,"byte_end":2252,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Operating on dynamically typed S-expression data","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2253,"byte_end":2307,"line_start":64,"line_end":64,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2308,"byte_end":2311,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Any valid S-expression can be manipulated using the [`Value`] data","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2312,"byte_end":2382,"line_start":66,"line_end":66,"column_start":1,"column_end":71}},{"value":"/ structure.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2383,"byte_end":2397,"line_start":67,"line_end":67,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2398,"byte_end":2401,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ ## Constructing S-expression values","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2402,"byte_end":2441,"line_start":69,"line_end":69,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2442,"byte_end":2445,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2446,"byte_end":2453,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/  use lexpr::{Value, parse::Error};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2454,"byte_end":2492,"line_start":72,"line_end":72,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2493,"byte_end":2496,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # fn main() -> Result<(), Error> {","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2497,"byte_end":2535,"line_start":74,"line_end":74,"column_start":1,"column_end":39}},{"value":"/ // Some s-expressions a &str.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2536,"byte_end":2569,"line_start":75,"line_end":75,"column_start":1,"column_end":34}},{"value":"/ let data = r#\"((name . \"John Doe\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2570,"byte_end":2608,"line_start":76,"line_end":76,"column_start":1,"column_end":39}},{"value":"/                (age . 43)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2609,"byte_end":2638,"line_start":77,"line_end":77,"column_start":1,"column_end":30}},{"value":"/                (phones \"+44 1234567\" \"+44 2345678\"))\"#;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2639,"byte_end":2698,"line_start":78,"line_end":78,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2699,"byte_end":2702,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ // Parse the string of data into lexpr::Value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2703,"byte_end":2753,"line_start":80,"line_end":80,"column_start":1,"column_end":51}},{"value":"/ let v = lexpr::from_str(data)?;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2754,"byte_end":2789,"line_start":81,"line_end":81,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2790,"byte_end":2793,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ // Access parts of the data by indexing with square brackets.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2794,"byte_end":2859,"line_start":83,"line_end":83,"column_start":1,"column_end":66}},{"value":"/ println!(\"Please call {} at the number {}\", v[\"name\"], v[\"phones\"][1]);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2860,"byte_end":2935,"line_start":84,"line_end":84,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2936,"byte_end":2939,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Ok(())","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2940,"byte_end":2950,"line_start":86,"line_end":86,"column_start":1,"column_end":11}},{"value":"/ # }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2951,"byte_end":2958,"line_start":87,"line_end":87,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2959,"byte_end":2966,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2967,"byte_end":2970,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ # What are S-expressions?","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":2971,"byte_end":3000,"line_start":90,"line_end":90,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3001,"byte_end":3004,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ S-expressions, as mentioned above, are the notation used by various dialects","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3005,"byte_end":3085,"line_start":92,"line_end":92,"column_start":1,"column_end":81}},{"value":"/ of Lisp to represent data (and code). As a data format, it is roughly","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3086,"byte_end":3159,"line_start":93,"line_end":93,"column_start":1,"column_end":74}},{"value":"/ comparable to JSON (JavaScript Object Notation), but syntactically more","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3160,"byte_end":3235,"line_start":94,"line_end":94,"column_start":1,"column_end":76}},{"value":"/ lightweight. Also, JSON is designed for consumption and generation by","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3236,"byte_end":3309,"line_start":95,"line_end":95,"column_start":1,"column_end":74}},{"value":"/ machines, which is reflected by the fact that it does not specify a syntax","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3310,"byte_end":3388,"line_start":96,"line_end":96,"column_start":1,"column_end":79}},{"value":"/ for comments. S-expressions on the other hand, are intended to be written","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3389,"byte_end":3466,"line_start":97,"line_end":97,"column_start":1,"column_end":78}},{"value":"/ and read by humans as well as machines. In this respect, they are more like","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3467,"byte_end":3546,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ YAML, but have a simpler and less syntactically rigid structure. For","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3547,"byte_end":3619,"line_start":99,"line_end":99,"column_start":1,"column_end":73}},{"value":"/ example, indentation does not convey any information to the parser, but is","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3620,"byte_end":3698,"line_start":100,"line_end":100,"column_start":1,"column_end":79}},{"value":"/ used only to allow for easier digestion by humans.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3699,"byte_end":3753,"line_start":101,"line_end":101,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3754,"byte_end":3757,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ Different Lisp dialects have notational differences for some data types, and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3758,"byte_end":3838,"line_start":103,"line_end":103,"column_start":1,"column_end":81}},{"value":"/ some may lack specific data types completely. This section tries to give an","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3839,"byte_end":3918,"line_start":104,"line_end":104,"column_start":1,"column_end":80}},{"value":"/ overview over the different types of values representable by the [`Value`]","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3919,"byte_end":3997,"line_start":105,"line_end":105,"column_start":1,"column_end":79}},{"value":"/ data type and how it relates to different Lisp dialects. All examples are","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":3998,"byte_end":4075,"line_start":106,"line_end":106,"column_start":1,"column_end":78}},{"value":"/ given in the syntax used in [Guile](https://www.gnu.org/software/guile/)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4076,"byte_end":4152,"line_start":107,"line_end":107,"column_start":1,"column_end":77}},{"value":"/ Scheme implementation.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4153,"byte_end":4179,"line_start":108,"line_end":108,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4180,"byte_end":4183,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ The parser and serializer implementation in `lexpr` can be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4184,"byte_end":4246,"line_start":110,"line_end":110,"column_start":1,"column_end":63}},{"value":"/ tailored to parse and generate S-expression data in various","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4247,"byte_end":4310,"line_start":111,"line_end":111,"column_start":1,"column_end":64}},{"value":"/ \"dialects\" in use by different Lisp variants; the aim is to cover","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4311,"byte_end":4380,"line_start":112,"line_end":112,"column_start":1,"column_end":70}},{"value":"/ large parts of R6RS and R7RS Scheme with some Guile and Racket","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4381,"byte_end":4447,"line_start":113,"line_end":113,"column_start":1,"column_end":67}},{"value":"/ extensions, as well as Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4448,"byte_end":4486,"line_start":114,"line_end":114,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4487,"byte_end":4490,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ In the following, the S-expression values that are modeled by","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4491,"byte_end":4556,"line_start":116,"line_end":116,"column_start":1,"column_end":66}},{"value":"/ `lexpr` are introduced, In general, S-expression values can be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4557,"byte_end":4623,"line_start":117,"line_end":117,"column_start":1,"column_end":67}},{"value":"/ split into the two categories primitive types and compound types.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4624,"byte_end":4693,"line_start":118,"line_end":118,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4694,"byte_end":4697,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ ## Primitive types","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4698,"byte_end":4720,"line_start":120,"line_end":120,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4721,"byte_end":4724,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ Primitive, or non-compound types are those that can not","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4725,"byte_end":4784,"line_start":122,"line_end":122,"column_start":1,"column_end":60}},{"value":"/ recursively contain arbitrary other values. Numbers,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4785,"byte_end":4841,"line_start":123,"line_end":123,"column_start":1,"column_end":57}},{"value":"/ strings and booleans fall into this category.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4842,"byte_end":4891,"line_start":124,"line_end":124,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4892,"byte_end":4895,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ ### Symbols and keywords","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4896,"byte_end":4924,"line_start":126,"line_end":126,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4925,"byte_end":4928,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Lisp has a data type not commonly found in other languages, namely","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":4929,"byte_end":4999,"line_start":128,"line_end":128,"column_start":1,"column_end":71}},{"value":"/ \"symbols\". A symbol is conceptually similar to identifiers in other","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5000,"byte_end":5071,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/ languages, but allow for a much richer set of characters than typically","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5072,"byte_end":5147,"line_start":130,"line_end":130,"column_start":1,"column_end":76}},{"value":"/ allowed for identifiers in other languages. Also, identifiers in other","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5148,"byte_end":5222,"line_start":131,"line_end":131,"column_start":1,"column_end":75}},{"value":"/ languages can usually not be used in data; Lisps expose them as a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5223,"byte_end":5292,"line_start":132,"line_end":132,"column_start":1,"column_end":70}},{"value":"/ primitive data type, a result of the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5293,"byte_end":5333,"line_start":133,"line_end":133,"column_start":1,"column_end":41}},{"value":"/ [homoiconicity](https://en.wikipedia.org/wiki/Homoiconicity) of the Lisp","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5334,"byte_end":5410,"line_start":134,"line_end":134,"column_start":1,"column_end":77}},{"value":"/ language family.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5411,"byte_end":5431,"line_start":135,"line_end":135,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5432,"byte_end":5435,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5436,"byte_end":5439,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5440,"byte_end":5453,"line_start":138,"line_end":138,"column_start":1,"column_end":14}},{"value":"/ this-is-a-symbol ; A single symbol, dashes are allowed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5454,"byte_end":5512,"line_start":139,"line_end":139,"column_start":1,"column_end":59}},{"value":"/ another.symbol   ; Periods are allowed as well","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5513,"byte_end":5563,"line_start":140,"line_end":140,"column_start":1,"column_end":51}},{"value":"/ foo$bar!<_>?     ; As are quite a few other characters","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5564,"byte_end":5622,"line_start":141,"line_end":141,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5623,"byte_end":5630,"line_start":142,"line_end":142,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5631,"byte_end":5634,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ Another data type, present in some Lisp dialects, such as Emacs","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5635,"byte_end":5702,"line_start":144,"line_end":144,"column_start":1,"column_end":68}},{"value":"/ Lisp, Common Lisp, and several Scheme implementations, are","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5703,"byte_end":5765,"line_start":145,"line_end":145,"column_start":1,"column_end":63}},{"value":"/ keywords. These are also supported by `lexpr`. Keywords are very","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5766,"byte_end":5834,"line_start":146,"line_end":146,"column_start":1,"column_end":69}},{"value":"/ similiar to symbols, but are typically prefixed by `:` or `#:` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5835,"byte_end":5905,"line_start":147,"line_end":147,"column_start":1,"column_end":71}},{"value":"/ are used for different purposes in the language.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5906,"byte_end":5958,"line_start":148,"line_end":148,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5959,"byte_end":5962,"line_start":149,"line_end":149,"column_start":1,"column_end":4}},{"value":"/ ```lisp","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5963,"byte_end":5974,"line_start":150,"line_end":150,"column_start":1,"column_end":12}},{"value":"/ #:foo ; A keyword named \"foo\", written in Guile/Racket notation","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":5975,"byte_end":6042,"line_start":151,"line_end":151,"column_start":1,"column_end":68}},{"value":"/ :bar  ; A keyword named \"bar\", written in Emacs Lisp or Common Lisp notation","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6043,"byte_end":6123,"line_start":152,"line_end":152,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6124,"byte_end":6131,"line_start":153,"line_end":153,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6132,"byte_end":6135,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ ### Booleans","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6136,"byte_end":6152,"line_start":155,"line_end":155,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6153,"byte_end":6156,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ While Scheme has a primitive boolean data type, more traditional Lisps such","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6157,"byte_end":6236,"line_start":157,"line_end":157,"column_start":1,"column_end":80}},{"value":"/ as Emacs Lisp and Common Lisp do not; they instead use the symbols `t` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6237,"byte_end":6315,"line_start":158,"line_end":158,"column_start":1,"column_end":79}},{"value":"/ `nil` to represent boolean values. Using parser options, `lexpr` allows to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6316,"byte_end":6394,"line_start":159,"line_end":159,"column_start":1,"column_end":79}},{"value":"/ parse these symbols as booleans, which may be desirable in some","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6395,"byte_end":6462,"line_start":160,"line_end":160,"column_start":1,"column_end":68}},{"value":"/ circumstances, as booleans are simpler to handle than symbols.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6463,"byte_end":6529,"line_start":161,"line_end":161,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6530,"byte_end":6533,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/  ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6534,"byte_end":6548,"line_start":163,"line_end":163,"column_start":1,"column_end":15}},{"value":"/  #t ; The literal representing true","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6549,"byte_end":6588,"line_start":164,"line_end":164,"column_start":1,"column_end":40}},{"value":"/  #f ; The literal representing false","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6589,"byte_end":6629,"line_start":165,"line_end":165,"column_start":1,"column_end":41}},{"value":"/  ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6630,"byte_end":6638,"line_start":166,"line_end":166,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6639,"byte_end":6642,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ### The empty list and \"nil\"","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6643,"byte_end":6675,"line_start":168,"line_end":168,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6676,"byte_end":6679,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ In traditional Lisps, the end of list is represented as by a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6680,"byte_end":6744,"line_start":170,"line_end":170,"column_start":1,"column_end":65}},{"value":"/ special atom written as `nil`. In Scheme, the empty list is an","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6745,"byte_end":6811,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/ atom written as `()`, and there `nil` is just a regular","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6812,"byte_end":6871,"line_start":172,"line_end":172,"column_start":1,"column_end":60}},{"value":"/ symbol. Both `nil` and the empty list are present and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6872,"byte_end":6929,"line_start":173,"line_end":173,"column_start":1,"column_end":58}},{"value":"/ distinguishable in `lexpr`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6930,"byte_end":6961,"line_start":174,"line_end":174,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6962,"byte_end":6965,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ ### Numbers","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6966,"byte_end":6981,"line_start":176,"line_end":176,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6982,"byte_end":6985,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ Numbers are represented by the [`Number`] abstract data type. It can handle","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":6986,"byte_end":7065,"line_start":178,"line_end":178,"column_start":1,"column_end":80}},{"value":"/ signed and unsigned integers, each up to 64 bit size, as well as floating","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7066,"byte_end":7143,"line_start":179,"line_end":179,"column_start":1,"column_end":78}},{"value":"/ point numbers. The Scheme syntax for hexadecimal, octal, and binary literals","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7144,"byte_end":7224,"line_start":180,"line_end":180,"column_start":1,"column_end":81}},{"value":"/ is supported.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7225,"byte_end":7242,"line_start":181,"line_end":181,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7243,"byte_end":7246,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7247,"byte_end":7260,"line_start":183,"line_end":183,"column_start":1,"column_end":14}},{"value":"/ 1 -4 3.14  ; A postive, negative, and a floating point number","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7261,"byte_end":7326,"line_start":184,"line_end":184,"column_start":1,"column_end":66}},{"value":"/ #xDEADBEEF ; An integer written using decimal notation","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7327,"byte_end":7385,"line_start":185,"line_end":185,"column_start":1,"column_end":59}},{"value":"/ #o0677     ; Octal","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7386,"byte_end":7408,"line_start":186,"line_end":186,"column_start":1,"column_end":23}},{"value":"/ #b10110    ; Binary","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7409,"byte_end":7432,"line_start":187,"line_end":187,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7433,"byte_end":7440,"line_start":188,"line_end":188,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7441,"byte_end":7444,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ Scheme has an elaborate numerical type hierarchy (called \"numeric tower\"),","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7445,"byte_end":7523,"line_start":190,"line_end":190,"column_start":1,"column_end":79}},{"value":"/ which supports fractionals, numbers of arbitrary size, and complex","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7524,"byte_end":7594,"line_start":191,"line_end":191,"column_start":1,"column_end":71}},{"value":"/ numbers. These more advanced number types are not yet supported by `lexpr`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7595,"byte_end":7674,"line_start":192,"line_end":192,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7675,"byte_end":7678,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7679,"byte_end":7682,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ ### Characters","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7683,"byte_end":7701,"line_start":195,"line_end":195,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7702,"byte_end":7705,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ Characters are unicode codepoints, represented by Rust's `char` data type","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7706,"byte_end":7783,"line_start":197,"line_end":197,"column_start":1,"column_end":78}},{"value":"/ embedded in the [`Value::Char`] variant.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7784,"byte_end":7828,"line_start":198,"line_end":198,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7829,"byte_end":7832,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ ### Strings","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7833,"byte_end":7848,"line_start":200,"line_end":200,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7849,"byte_end":7852,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7853,"byte_end":7866,"line_start":202,"line_end":202,"column_start":1,"column_end":14}},{"value":"/ \"Hello World!\"","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7867,"byte_end":7885,"line_start":203,"line_end":203,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7886,"byte_end":7893,"line_start":204,"line_end":204,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7894,"byte_end":7897,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ ## Lists","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7898,"byte_end":7910,"line_start":206,"line_end":206,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7911,"byte_end":7914,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ Lists are a sequence of values, of either atoms or lists. In fact,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7915,"byte_end":7985,"line_start":208,"line_end":208,"column_start":1,"column_end":71}},{"value":"/ Lisp does not have a \"real\" list data type, but instead lists are","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":7986,"byte_end":8055,"line_start":209,"line_end":209,"column_start":1,"column_end":70}},{"value":"/ represented by chains of so-called \"cons cells\", which are used to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8056,"byte_end":8126,"line_start":210,"line_end":210,"column_start":1,"column_end":71}},{"value":"/ form a singly-linked list, terminated by the empty list (or `nil`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8127,"byte_end":8196,"line_start":211,"line_end":211,"column_start":1,"column_end":70}},{"value":"/ in tradional Lisps). It is also possible for the terminator to not","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8197,"byte_end":8267,"line_start":212,"line_end":212,"column_start":1,"column_end":71}},{"value":"/ be the empty list, but instead be af an arbitrary other data type.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8268,"byte_end":8338,"line_start":213,"line_end":213,"column_start":1,"column_end":71}},{"value":"/ In this case, the list is refered to as an \"improper\" or \"dotted\"","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8339,"byte_end":8408,"line_start":214,"line_end":214,"column_start":1,"column_end":70}},{"value":"/ list. Here are some examples:","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8409,"byte_end":8442,"line_start":215,"line_end":215,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8443,"byte_end":8446,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8447,"byte_end":8460,"line_start":217,"line_end":217,"column_start":1,"column_end":14}},{"value":"/ (\"Hello\" \"World\")   ; A regular list","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8461,"byte_end":8501,"line_start":218,"line_end":218,"column_start":1,"column_end":41}},{"value":"/ ;; A list having with another, single-element, list as","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8502,"byte_end":8560,"line_start":219,"line_end":219,"column_start":1,"column_end":59}},{"value":"/ ;; its second item","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8561,"byte_end":8583,"line_start":220,"line_end":220,"column_start":1,"column_end":23}},{"value":"/ (\"Hello\" (\"World\"))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8584,"byte_end":8607,"line_start":221,"line_end":221,"column_start":1,"column_end":24}},{"value":"/ (1 . 2) ; A cons cell, represented as an improper list by `lexpr`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8608,"byte_end":8677,"line_start":222,"line_end":222,"column_start":1,"column_end":70}},{"value":"/ (1 2 . 3) ; A dotted (improper) list","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8678,"byte_end":8718,"line_start":223,"line_end":223,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8719,"byte_end":8726,"line_start":224,"line_end":224,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8727,"byte_end":8730,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ Lists are not only used to represent sequences of values, but also","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8731,"byte_end":8801,"line_start":226,"line_end":226,"column_start":1,"column_end":71}},{"value":"/ associative arrays, also known as maps. A map is represented as a list","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8802,"byte_end":8876,"line_start":227,"line_end":227,"column_start":1,"column_end":75}},{"value":"/ containing cons cells, where the first field of each cons cell, called","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8877,"byte_end":8951,"line_start":228,"line_end":228,"column_start":1,"column_end":75}},{"value":"/ `car`, for obscure historical reasons, is the key, and the second field","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":8952,"byte_end":9027,"line_start":229,"line_end":229,"column_start":1,"column_end":76}},{"value":"/ (`cdr`) of the cons cell is the associated value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9028,"byte_end":9081,"line_start":230,"line_end":230,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9082,"byte_end":9085,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9086,"byte_end":9099,"line_start":232,"line_end":232,"column_start":1,"column_end":14}},{"value":"/ ;; An association list with the symbols `a` and `b` as keys","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9100,"byte_end":9163,"line_start":233,"line_end":233,"column_start":1,"column_end":64}},{"value":"/ ((a . 42) (b . 43))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9164,"byte_end":9187,"line_start":234,"line_end":234,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9188,"byte_end":9195,"line_start":235,"line_end":235,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9196,"byte_end":9199,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ ## Vectors","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9200,"byte_end":9214,"line_start":237,"line_end":237,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9215,"byte_end":9218,"line_start":238,"line_end":238,"column_start":1,"column_end":4}},{"value":"/ In contrast to lists, which are represented as singly-linked chains of \"cons","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9219,"byte_end":9299,"line_start":239,"line_end":239,"column_start":1,"column_end":81}},{"value":"/ cells\", vectors allow O(1) indexing, and thus are quite similar to Rusts","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9300,"byte_end":9376,"line_start":240,"line_end":240,"column_start":1,"column_end":77}},{"value":"/ `Vec` datatype.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9377,"byte_end":9396,"line_start":241,"line_end":241,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9397,"byte_end":9400,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9401,"byte_end":9414,"line_start":243,"line_end":243,"column_start":1,"column_end":14}},{"value":"/ #(1 2 \"three\") ; A vector in Scheme notation","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9415,"byte_end":9463,"line_start":244,"line_end":244,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9464,"byte_end":9471,"line_start":245,"line_end":245,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9472,"byte_end":9475,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ ## Byte vectors","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9476,"byte_end":9495,"line_start":247,"line_end":247,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9496,"byte_end":9499,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ Byte vectors are similar to regular vectors, but are uniform: each element","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9500,"byte_end":9578,"line_start":249,"line_end":249,"column_start":1,"column_end":79}},{"value":"/ only holds a single byte, i.e. an exact integer in the range of 0 to 255,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9579,"byte_end":9656,"line_start":250,"line_end":250,"column_start":1,"column_end":78}},{"value":"/ inclusive.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9657,"byte_end":9671,"line_start":251,"line_end":251,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9672,"byte_end":9675,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ ```scheme","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9676,"byte_end":9689,"line_start":253,"line_end":253,"column_start":1,"column_end":14}},{"value":"/ #u8(41 42 43) ; A byte vector","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9690,"byte_end":9723,"line_start":254,"line_end":254,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9724,"byte_end":9731,"line_start":255,"line_end":255,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9732,"byte_end":9735,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ [Serde]: https://crates.io/crates/serde","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9736,"byte_end":9779,"line_start":257,"line_end":257,"column_start":1,"column_end":44}},{"value":"/ [`serde-lexpr`]: https://docs.rs/serde-lexpr","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":9780,"byte_end":9828,"line_start":258,"line_end":258,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1296},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12717,"byte_end":12728,"line_start":10,"line_end":10,"column_start":5,"column_end":16},"name":"ColonPrefix","qualname":"::syntax::KeywordSyntax::ColonPrefix","value":"KeywordSyntax::ColonPrefix","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" Parse identifiers starting with a colon as keywords.","sig":null,"attributes":[{"value":"/ Parse identifiers starting with a colon as keywords.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12556,"byte_end":12612,"line_start":6,"line_end":6,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12617,"byte_end":12620,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ In the absence of this option, such identifiers would be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12625,"byte_end":12685,"line_start":8,"line_end":8,"column_start":5,"column_end":65}},{"value":"/ parsed as symbols.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12690,"byte_end":12712,"line_start":9,"line_end":9,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1298},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12894,"byte_end":12906,"line_start":16,"line_end":16,"column_start":5,"column_end":17},"name":"ColonPostfix","qualname":"::syntax::KeywordSyntax::ColonPostfix","value":"KeywordSyntax::ColonPostfix","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" Parse identifiers ending with a colon as keywords.","sig":null,"attributes":[{"value":"/ Parse identifiers ending with a colon as keywords.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12735,"byte_end":12789,"line_start":12,"line_end":12,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12794,"byte_end":12797,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ In the absence of this option, such identifiers would be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12802,"byte_end":12862,"line_start":14,"line_end":14,"column_start":5,"column_end":65}},{"value":"/ parsed as symbols.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12867,"byte_end":12889,"line_start":15,"line_end":15,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1300},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13075,"byte_end":13085,"line_start":22,"line_end":22,"column_start":5,"column_end":15},"name":"Octothorpe","qualname":"::syntax::KeywordSyntax::Octothorpe","value":"KeywordSyntax::Octothorpe","parent":{"krate":0,"index":1295},"children":[],"decl_id":null,"docs":" Parse identifiers prefixed with `#:` as keywords.","sig":null,"attributes":[{"value":"/ Parse identifiers prefixed with `#:` as keywords.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12913,"byte_end":12966,"line_start":18,"line_end":18,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12971,"byte_end":12974,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ In the absence of this option, the sequence `#:` will result","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12979,"byte_end":13043,"line_start":20,"line_end":20,"column_start":5,"column_end":69}},{"value":"/ in a parser error.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13048,"byte_end":13070,"line_start":21,"line_end":21,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12536,"byte_end":12549,"line_start":5,"line_end":5,"column_start":10,"column_end":23},"name":"KeywordSyntax","qualname":"::syntax::KeywordSyntax","value":"pub enum KeywordSyntax { ColonPrefix, ColonPostfix, Octothorpe, }","parent":null,"children":[{"krate":0,"index":1296},{"krate":0,"index":1298},{"krate":0,"index":1300}],"decl_id":null,"docs":" Indicates a syntax of keywords.\n","sig":null,"attributes":[{"value":"/ Indicates a syntax of keywords.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":12450,"byte_end":12485,"line_start":3,"line_end":3,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1311},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13682,"byte_end":13686,"line_start":45,"line_end":45,"column_start":5,"column_end":9},"name":"R6RS","qualname":"::syntax::StringSyntax::R6RS","value":"StringSyntax::R6RS","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Syntax as specified the R6RS.","sig":null,"attributes":[{"value":"/ Syntax as specified the R6RS.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13432,"byte_end":13465,"line_start":40,"line_end":40,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13470,"byte_end":13473,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ Note that there is no R7RS variant, because R6RS specifies a superset of","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13478,"byte_end":13554,"line_start":42,"line_end":42,"column_start":5,"column_end":81}},{"value":"/ R7RS syntax. When printing however, the syntax used will be restricted","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13559,"byte_end":13633,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ to be understood by an R7RS parser.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13638,"byte_end":13677,"line_start":44,"line_end":44,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13794,"byte_end":13799,"line_start":50,"line_end":50,"column_start":5,"column_end":10},"name":"Elisp","qualname":"::syntax::StringSyntax::Elisp","value":"StringSyntax::Elisp","parent":{"krate":0,"index":1310},"children":[],"decl_id":null,"docs":" Emacs Lisp syntax.","sig":null,"attributes":[{"value":"/ Emacs Lisp syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13693,"byte_end":13715,"line_start":47,"line_end":47,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13720,"byte_end":13723,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Note that unibyte strings will be parsed as byte vectors.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13728,"byte_end":13789,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":1310},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13413,"byte_end":13425,"line_start":39,"line_end":39,"column_start":10,"column_end":22},"name":"StringSyntax","qualname":"::syntax::StringSyntax","value":"pub enum StringSyntax { R6RS, Elisp, }","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1313}],"decl_id":null,"docs":" Indicates the syntax for strings.\n","sig":null,"attributes":[{"value":"/ Indicates the syntax for strings.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13325,"byte_end":13362,"line_start":37,"line_end":37,"column_start":1,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":14059,"byte_end":14063,"line_start":60,"line_end":60,"column_start":5,"column_end":9},"name":"R6RS","qualname":"::syntax::CharSyntax::R6RS","value":"CharSyntax::R6RS","parent":{"krate":0,"index":1323},"children":[],"decl_id":null,"docs":" Syntax as specified in R6RS.","sig":null,"attributes":[{"value":"/ Syntax as specified in R6RS.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13912,"byte_end":13944,"line_start":56,"line_end":56,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13949,"byte_end":13952,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ Note that there is no R7RS variant, because R6RS specifies a superset of","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13957,"byte_end":14033,"line_start":58,"line_end":58,"column_start":5,"column_end":81}},{"value":"/ R7RS syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":14038,"byte_end":14054,"line_start":59,"line_end":59,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":14097,"byte_end":14102,"line_start":63,"line_end":63,"column_start":5,"column_end":10},"name":"Elisp","qualname":"::syntax::CharSyntax::Elisp","value":"CharSyntax::Elisp","parent":{"krate":0,"index":1323},"children":[],"decl_id":null,"docs":" Emacs Lisp syntax.\n","sig":null,"attributes":[{"value":"/ Emacs Lisp syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":14070,"byte_end":14092,"line_start":62,"line_end":62,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13895,"byte_end":13905,"line_start":55,"line_end":55,"column_start":10,"column_end":20},"name":"CharSyntax","qualname":"::syntax::CharSyntax","value":"pub enum CharSyntax { R6RS, Elisp, }","parent":null,"children":[{"krate":0,"index":1324},{"krate":0,"index":1326}],"decl_id":null,"docs":" Indicates the syntax for characters.\n","sig":null,"attributes":[{"value":"/ Indicates the syntax for characters.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13804,"byte_end":13844,"line_start":53,"line_end":53,"column_start":1,"column_end":41}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cons","qualname":"::cons","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","parent":null,"children":[{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":1336},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1342},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":1344},{"krate":0,"index":1348},{"krate":0,"index":1351},{"krate":0,"index":1354},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":65},{"krate":0,"index":71}],"decl_id":null,"docs":" List \"cons cell\" data type and accompanying iterator types.\n","sig":null,"attributes":[{"value":"/ List \"cons cell\" data type and accompanying iterator types.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14107,"byte_end":14170,"line_start":1,"line_end":1,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":1336},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15406,"byte_end":15410,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"Cons","qualname":"::cons::Cons","value":"Cons {  }","parent":null,"children":[{"krate":0,"index":1337}],"decl_id":null,"docs":" A Lisp \"cons cell\".","sig":null,"attributes":[{"value":"/ A Lisp \"cons cell\".","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14205,"byte_end":14228,"line_start":6,"line_end":6,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14229,"byte_end":14232,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ A cons cell is similiar to a two-element tuple in Rust. Its fields","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14233,"byte_end":14303,"line_start":8,"line_end":8,"column_start":1,"column_end":71}},{"value":"/ are traditionally called `car` and `cdr`, for obscure historical","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14304,"byte_end":14372,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ reasons. Both the `car` and the `cdr` field can hold any `Value`,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14373,"byte_end":14442,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ including other cons cells.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14443,"byte_end":14474,"line_start":11,"line_end":11,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14475,"byte_end":14478,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This data type is used to represent singly-linked lists, by","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14479,"byte_end":14542,"line_start":13,"line_end":13,"column_start":1,"column_end":64}},{"value":"/ forming a chain of cons cells where the list element is kept in","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14543,"byte_end":14610,"line_start":14,"line_end":14,"column_start":1,"column_end":68}},{"value":"/ the `car` field, and the `cdr` field either points to the next","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14611,"byte_end":14677,"line_start":15,"line_end":15,"column_start":1,"column_end":67}},{"value":"/ cons cell, or terminates the list with any other value. Usually,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14678,"byte_end":14746,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ that terminator value is `Value::Null`, also referred to as the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14747,"byte_end":14814,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ empty list. If any other terminating value is used, the resulting","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14815,"byte_end":14884,"line_start":18,"line_end":18,"column_start":1,"column_end":70}},{"value":"/ linked list is referred to as \"dotted\", or \"improper\" list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14885,"byte_end":14948,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14949,"byte_end":14952,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ The `Cons` data type provides some utility function for the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":14953,"byte_end":15016,"line_start":21,"line_end":21,"column_start":1,"column_end":64}},{"value":"/ singly-linked list use case, such as iterating through the list or","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15017,"byte_end":15087,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/ converting the list to a vector. To account for the possibility of","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15088,"byte_end":15158,"line_start":23,"line_end":23,"column_start":1,"column_end":71}},{"value":"/ dotted lists, the iterators and vector conversion functions have","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15159,"byte_end":15227,"line_start":24,"line_end":24,"column_start":1,"column_end":69}},{"value":"/ slightly unusual types.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15228,"byte_end":15255,"line_start":25,"line_end":25,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15256,"byte_end":15259,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The most natural way to traverse a singly linked list is probably by using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15260,"byte_end":15338,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ the `list_iter` method.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15339,"byte_end":15366,"line_start":28,"line_end":28,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15685,"byte_end":15688,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<Cons>::new","value":"pub fn new<T, U>(T, U) -> Self where T: Into<Value>, U: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new cons cell from two values.\n","sig":null,"attributes":[{"value":"/ Constructs a new cons cell from two values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15626,"byte_end":15673,"line_start":41,"line_end":41,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15942,"byte_end":15945,"line_start":53,"line_end":53,"column_start":12,"column_end":15},"name":"car","qualname":"<Cons>::car","value":"pub fn car(&Self) -> &Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the `car` field.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the `car` field.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15874,"byte_end":15930,"line_start":52,"line_end":52,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16074,"byte_end":16081,"line_start":58,"line_end":58,"column_start":12,"column_end":19},"name":"car_mut","qualname":"<Cons>::car_mut","value":"pub fn car_mut(&mut Self) -> &mut Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value in the `car` field.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value in the `car` field.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15998,"byte_end":16062,"line_start":57,"line_end":57,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16183,"byte_end":16190,"line_start":63,"line_end":63,"column_start":12,"column_end":19},"name":"set_car","qualname":"<Cons>::set_car","value":"pub fn set_car<impl Into<Value>: Into<Value>>(&mut Self, impl Into<Value>)","parent":null,"children":[],"decl_id":null,"docs":" Sets the `car` field.\n","sig":null,"attributes":[{"value":"/ Sets the `car` field.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16146,"byte_end":16171,"line_start":62,"line_end":62,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16340,"byte_end":16343,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"cdr","qualname":"<Cons>::cdr","value":"pub fn cdr(&Self) -> &Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the `cdr` field.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the value in the `cdr` field.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16272,"byte_end":16328,"line_start":67,"line_end":67,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16472,"byte_end":16479,"line_start":73,"line_end":73,"column_start":12,"column_end":19},"name":"cdr_mut","qualname":"<Cons>::cdr_mut","value":"pub fn cdr_mut(&mut Self) -> &mut Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value in the `cdr` field.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value in the `cdr` field.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16396,"byte_end":16460,"line_start":72,"line_end":72,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16581,"byte_end":16588,"line_start":78,"line_end":78,"column_start":12,"column_end":19},"name":"set_cdr","qualname":"<Cons>::set_cdr","value":"pub fn set_cdr<impl Into<Value>: Into<Value>>(&mut Self, impl Into<Value>)","parent":null,"children":[],"decl_id":null,"docs":" Sets the `cdr` field.\n","sig":null,"attributes":[{"value":"/ Sets the `cdr` field.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16544,"byte_end":16569,"line_start":77,"line_end":77,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16925,"byte_end":16932,"line_start":89,"line_end":89,"column_start":12,"column_end":19},"name":"as_pair","qualname":"<Cons>::as_pair","value":"pub fn as_pair(&Self) -> (&Value, &Value)","parent":null,"children":[],"decl_id":null,"docs":" Returns references to the values in the `car` and `cdr` fields.","sig":null,"attributes":[{"value":"/ Returns references to the values in the `car` and `cdr` fields.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16670,"byte_end":16737,"line_start":82,"line_end":82,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16742,"byte_end":16745,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16750,"byte_end":16757,"line_start":84,"line_end":84,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{Cons, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16762,"byte_end":16793,"line_start":85,"line_end":85,"column_start":5,"column_end":36}},{"value":"/ let cell = Cons::new(1, 2);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16798,"byte_end":16829,"line_start":86,"line_end":86,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(cell.as_pair(), (&Value::from(1), &Value::from(2)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16834,"byte_end":16901,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":16906,"byte_end":16913,"line_start":88,"line_end":88,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17355,"byte_end":17364,"line_start":104,"line_end":104,"column_start":12,"column_end":21},"name":"into_pair","qualname":"<Cons>::into_pair","value":"pub fn into_pair(Self) -> (Value, Value)","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a pair of values without cloning.","sig":null,"attributes":[{"value":"/ Converts `self` into a pair of values without cloning.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17012,"byte_end":17070,"line_start":93,"line_end":93,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17075,"byte_end":17078,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17083,"byte_end":17090,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Cons;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17095,"byte_end":17117,"line_start":96,"line_end":96,"column_start":5,"column_end":27}},{"value":"/ let cell = Cons::new(\"a\", 42);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17122,"byte_end":17156,"line_start":97,"line_end":97,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(cell.car(), \"a\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17161,"byte_end":17193,"line_start":98,"line_end":98,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(cell.cdr(), 42);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17198,"byte_end":17229,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"/ let (car, cdr) = cell.into_pair();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17234,"byte_end":17272,"line_start":100,"line_end":100,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(car, \"a\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17277,"byte_end":17302,"line_start":101,"line_end":101,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(cdr, 42);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17307,"byte_end":17331,"line_start":102,"line_end":102,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17336,"byte_end":17343,"line_start":103,"line_end":103,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17745,"byte_end":17749,"line_start":117,"line_end":117,"column_start":12,"column_end":16},"name":"iter","qualname":"<Cons>::iter","value":"pub fn iter(&Self) -> Iter","parent":null,"children":[],"decl_id":null,"docs":" Obtains an iterator yielding references to all the cons cells in this\n linked list.","sig":null,"attributes":[{"value":"/ Obtains an iterator yielding references to all the cons cells in this","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17439,"byte_end":17512,"line_start":108,"line_end":108,"column_start":5,"column_end":78}},{"value":"/ linked list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17517,"byte_end":17533,"line_start":109,"line_end":109,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17538,"byte_end":17541,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17546,"byte_end":17553,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{Cons, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17558,"byte_end":17589,"line_start":112,"line_end":112,"column_start":5,"column_end":36}},{"value":"/ for cell in Cons::new(1, Cons::new(2, Value::Null)).iter() {","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17594,"byte_end":17658,"line_start":113,"line_end":113,"column_start":5,"column_end":69}},{"value":"/    println!(\"list element: {}\", cell.car());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17663,"byte_end":17711,"line_start":114,"line_end":114,"column_start":5,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17716,"byte_end":17721,"line_start":115,"line_end":115,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17726,"byte_end":17733,"line_start":116,"line_end":116,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18300,"byte_end":18308,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<Cons>::into_vec","value":"pub fn into_vec(Self) -> (Vec<Value>, Value)","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a vector without cloning the elements.","sig":null,"attributes":[{"value":"/ Converts `self` into a vector without cloning the elements.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17818,"byte_end":17881,"line_start":121,"line_end":121,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17886,"byte_end":17889,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ Returns the accumulated items of the list and the `cdr` of the last list","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17894,"byte_end":17970,"line_start":123,"line_end":123,"column_start":5,"column_end":81}},{"value":"/ element. For proper lists, this will always be `Value::Null`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":17975,"byte_end":18040,"line_start":124,"line_end":124,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18045,"byte_end":18048,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18053,"byte_end":18060,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{Cons, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18065,"byte_end":18096,"line_start":127,"line_end":127,"column_start":5,"column_end":36}},{"value":"/ let list = Cons::new(1, Cons::new(2, Cons::new(3, Value::Null)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18101,"byte_end":18170,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(list.into_vec(), (vec![Value::from(1), Value::from(2), Value::from(3)], Value::Null));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18175,"byte_end":18276,"line_start":129,"line_end":129,"column_start":5,"column_end":106}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18281,"byte_end":18288,"line_start":130,"line_end":130,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19042,"byte_end":19048,"line_start":152,"line_end":152,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<Cons>::to_vec","value":"pub fn to_vec(&Self) -> (Vec<Value>, Value)","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a vector, cloning the values.","sig":null,"attributes":[{"value":"/ Retrieves a vector, cloning the values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18582,"byte_end":18625,"line_start":142,"line_end":142,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18630,"byte_end":18633,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns the accumulated items of the list and the `cdr` of the last list","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18638,"byte_end":18714,"line_start":144,"line_end":144,"column_start":5,"column_end":81}},{"value":"/ element. For proper lists, this will always be `Value::Null`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18719,"byte_end":18784,"line_start":145,"line_end":145,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18789,"byte_end":18792,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18797,"byte_end":18804,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{Cons, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18809,"byte_end":18840,"line_start":148,"line_end":148,"column_start":5,"column_end":36}},{"value":"/ let list = Cons::new(1, Cons::new(2, Cons::new(3, Value::Null)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18845,"byte_end":18914,"line_start":149,"line_end":149,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(list.to_vec(), (vec![Value::from(1), Value::from(2), Value::from(3)], Value::Null));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":18919,"byte_end":19018,"line_start":150,"line_end":150,"column_start":5,"column_end":104}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19023,"byte_end":19030,"line_start":151,"line_end":151,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19819,"byte_end":19829,"line_start":173,"line_end":173,"column_start":12,"column_end":22},"name":"to_ref_vec","qualname":"<Cons>::to_ref_vec","value":"pub fn to_ref_vec(&Self) -> (Vec<&Value>, &Value)","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a vector, taking references to the values.","sig":null,"attributes":[{"value":"/ Retrieves a vector, taking references to the values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19338,"byte_end":19394,"line_start":163,"line_end":163,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19399,"byte_end":19402,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Returns the accumulated items of the list and the `cdr` of the last list","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19407,"byte_end":19483,"line_start":165,"line_end":165,"column_start":5,"column_end":81}},{"value":"/ element. For proper lists, this will always be `Value::Null`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19488,"byte_end":19553,"line_start":166,"line_end":166,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19558,"byte_end":19561,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19566,"byte_end":19573,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{Cons, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19578,"byte_end":19609,"line_start":169,"line_end":169,"column_start":5,"column_end":36}},{"value":"/ let list = Cons::new(1, Cons::new(2, Cons::new(3, Value::Null)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19614,"byte_end":19683,"line_start":170,"line_end":170,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(list.to_ref_vec(), (vec![&Value::from(1), &Value::from(2), &Value::from(3)], &Value::Null));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19688,"byte_end":19795,"line_start":171,"line_end":171,"column_start":5,"column_end":112}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":19800,"byte_end":19807,"line_start":172,"line_end":172,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20424,"byte_end":20433,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"list_iter","qualname":"<Cons>::list_iter","value":"pub fn list_iter(&Self) -> ListIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that returns each element (`car` field) of a singly-linked list.","sig":null,"attributes":[{"value":"/ Returns an iterator that returns each element (`car` field) of a singly-linked list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20105,"byte_end":20193,"line_start":184,"line_end":184,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20198,"byte_end":20201,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ The iterator returns `None` if a terminating value is encountered. For a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20206,"byte_end":20282,"line_start":186,"line_end":186,"column_start":5,"column_end":81}},{"value":"/ dotted list, the iterator is not yet exhausted at that point, and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20287,"byte_end":20356,"line_start":187,"line_end":187,"column_start":5,"column_end":74}},{"value":"/ produces the non-`Null` terminating value next.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20361,"byte_end":20412,"line_start":188,"line_end":188,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21652,"byte_end":21656,"line_start":229,"line_end":229,"column_start":12,"column_end":16},"name":"Iter","qualname":"::cons::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":49}],"decl_id":null,"docs":" An iterator over a chain of cons cells.","sig":null,"attributes":[{"value":"/ An iterator over a chain of cons cells.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21542,"byte_end":21585,"line_start":226,"line_end":226,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21586,"byte_end":21589,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ This is returned by the [`Cons::iter`] method.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21590,"byte_end":21640,"line_start":228,"line_end":228,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21798,"byte_end":21802,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"name":"peek","qualname":"<Iter>::peek","value":"pub fn peek(&Self) -> Option<&Cons>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current cons cell, without advancing the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the current cons cell, without advancing the iterator.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21720,"byte_end":21786,"line_start":234,"line_end":234,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":57},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22455,"byte_end":22463,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::cons::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":58}],"decl_id":null,"docs":" An iterator consuming a chain of cons cells.","sig":null,"attributes":[{"value":"/ An iterator consuming a chain of cons cells.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22272,"byte_end":22320,"line_start":257,"line_end":257,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22321,"byte_end":22324,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This is returned by the [`Cons::into_iter`] method.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22325,"byte_end":22380,"line_start":259,"line_end":259,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22381,"byte_end":22384,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ [`Cons::into_iter`]: struct.Cons.html#method.into_iter","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22385,"byte_end":22443,"line_start":261,"line_end":261,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22593,"byte_end":22597,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"peek","qualname":"<IntoIter>::peek","value":"pub fn peek(&Self) -> Option<&Cons>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current cons cell, without advancing the iterator.\n","sig":null,"attributes":[{"value":"/ Returns the current cons cell, without advancing the iterator.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22515,"byte_end":22581,"line_start":267,"line_end":267,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22773,"byte_end":22781,"line_start":274,"line_end":274,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<IntoIter>::peek_mut","value":"pub fn peek_mut(&mut Self) -> Option<&mut Cons>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the current cons cell, without advancing\n the iterator.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the current cons cell, without advancing","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22664,"byte_end":22739,"line_start":272,"line_end":272,"column_start":5,"column_end":80}},{"value":"/ the iterator.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22744,"byte_end":22761,"line_start":273,"line_end":273,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24259,"byte_end":24267,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"ListIter","qualname":"::cons::ListIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding the `car` field of a chain of cons cells.","sig":null,"attributes":[{"value":"/ An iterator yielding the `car` field of a chain of cons cells.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23487,"byte_end":23553,"line_start":302,"line_end":302,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23554,"byte_end":23557,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ # Improper lists","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23558,"byte_end":23578,"line_start":304,"line_end":304,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23579,"byte_end":23582,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ Since in Lisp, lists can be \"improper\", i.e., terminated by a value other than `Null`, this","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23583,"byte_end":23678,"line_start":306,"line_end":306,"column_start":1,"column_end":96}},{"value":"/ iterator type takes advantage of the fact that Rust's iterators can produce multiple sequences","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23679,"byte_end":23777,"line_start":307,"line_end":307,"column_start":1,"column_end":99}},{"value":"/ of values, each terminated by `None`. For an improper list, the terminating value is produced","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23778,"byte_end":23875,"line_start":308,"line_end":308,"column_start":1,"column_end":98}},{"value":"/ after the sequence of elements, as a singleton element, again followed by `None`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23876,"byte_end":23961,"line_start":309,"line_end":309,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23962,"byte_end":23965,"line_start":310,"line_end":310,"column_start":1,"column_end":4}},{"value":"/ For example, while the list `(1 2 3)` will produce the three expected `Some` values, followed by","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":23966,"byte_end":24066,"line_start":311,"line_end":311,"column_start":1,"column_end":101}},{"value":"/ `None`, the list `(1 2 . 3)` will produce `Some` values for `1` and `2`, then a `None`, followed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24067,"byte_end":24167,"line_start":312,"line_end":312,"column_start":1,"column_end":101}},{"value":"/ by a some value for `3`, and then the final `None`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24168,"byte_end":24223,"line_start":313,"line_end":313,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24634,"byte_end":24642,"line_start":330,"line_end":330,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ListIter>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true when the iterator is completely exhausted.","sig":null,"attributes":[{"value":"/ Returns true when the iterator is completely exhausted.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24443,"byte_end":24502,"line_start":326,"line_end":326,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24507,"byte_end":24510,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ For an improper list, true will only be returned after the terminating value has been","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24515,"byte_end":24604,"line_start":328,"line_end":328,"column_start":5,"column_end":94}},{"value":"/ consumed.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24609,"byte_end":24622,"line_start":329,"line_end":329,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":25030,"byte_end":25034,"line_start":341,"line_end":341,"column_start":12,"column_end":16},"name":"peek","qualname":"<ListIter>::peek","value":"pub fn peek(&Self) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Returns a peek at the value that would be returned by a call to `next`.","sig":null,"attributes":[{"value":"/ Returns a peek at the value that would be returned by a call to `next`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24772,"byte_end":24847,"line_start":337,"line_end":337,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24852,"byte_end":24855,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ For improper lists, this implies that after the last regular element, `None` will be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24860,"byte_end":24948,"line_start":339,"line_end":339,"column_start":5,"column_end":93}},{"value":"/ returned, while `is_empty` still returns false at that point.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24953,"byte_end":25018,"line_start":340,"line_end":340,"column_start":5,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":75},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"datum","qualname":"::datum","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":1373},{"krate":0,"index":1376},{"krate":0,"index":1378},{"krate":0,"index":1380},{"krate":0,"index":1381},{"krate":0,"index":109},{"krate":0,"index":121},{"krate":0,"index":1384},{"krate":0,"index":1388},{"krate":0,"index":1391},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1398},{"krate":0,"index":123},{"krate":0,"index":126},{"krate":0,"index":129},{"krate":0,"index":137},{"krate":0,"index":1402},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1410},{"krate":0,"index":1411},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1417},{"krate":0,"index":141},{"krate":0,"index":1420},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":146},{"krate":0,"index":1441},{"krate":0,"index":1445},{"krate":0,"index":1448},{"krate":0,"index":150},{"krate":0,"index":1451},{"krate":0,"index":1455},{"krate":0,"index":1458},{"krate":0,"index":155},{"krate":0,"index":1461},{"krate":0,"index":1478},{"krate":0,"index":1481},{"krate":0,"index":162},{"krate":0,"index":166},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180}],"decl_id":null,"docs":" S-expression values including source location.\n","sig":null,"attributes":[{"value":"/ S-expression values including source location.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26443,"byte_end":26493,"line_start":1,"line_end":1,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1373},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27240,"byte_end":27245,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Datum","qualname":"::datum::Datum","value":"Datum {  }","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375}],"decl_id":null,"docs":" Combines an S-expression value with location information.","sig":null,"attributes":[{"value":"/ Combines an S-expression value with location information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26612,"byte_end":26673,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26674,"byte_end":26677,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ A `Datum` keeps, along with a plain `Value`, information about the text","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26678,"byte_end":26753,"line_start":12,"line_end":12,"column_start":1,"column_end":76}},{"value":"/ location the value was parsed from. For compound values, such as lists and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26754,"byte_end":26832,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ vectors, that includes information for all contained values, recursively.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26833,"byte_end":26910,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26911,"byte_end":26914,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ A `Datum` can be obtained by using the [`next_datum`] and [`expect_datum`]","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26915,"byte_end":26993,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ methods on `Parser`, or via the iterator obtained with [`datum_iter`].","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":26994,"byte_end":27068,"line_start":17,"line_end":17,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27069,"byte_end":27072,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ [`next_datum`]: Parser::next_datum","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27073,"byte_end":27111,"line_start":19,"line_end":19,"column_start":1,"column_end":39}},{"value":"/ [`expect_datum`]: Parser::expect_datum","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27112,"byte_end":27154,"line_start":20,"line_end":20,"column_start":1,"column_end":43}},{"value":"/ [`datum_iter`]: Parser::datum_iter","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27155,"byte_end":27193,"line_start":21,"line_end":21,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27462,"byte_end":27467,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"value","qualname":"<Datum>::value","value":"pub fn value(&Self) -> &Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the contained value.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the contained value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27403,"byte_end":27450,"line_start":33,"line_end":33,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27575,"byte_end":27579,"line_start":39,"line_end":39,"column_start":12,"column_end":16},"name":"span","qualname":"<Datum>::span","value":"pub fn span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Returns the span for the compelete value.\n","sig":null,"attributes":[{"value":"/ Returns the span for the compelete value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27518,"byte_end":27563,"line_start":38,"line_end":38,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27682,"byte_end":27688,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<Datum>::as_ref","value":"pub fn as_ref(&Self) -> Ref","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the datum.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the datum.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27633,"byte_end":27670,"line_start":43,"line_end":43,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28674,"byte_end":28683,"line_start":73,"line_end":73,"column_start":12,"column_end":21},"name":"list_iter","qualname":"<Datum>::list_iter","value":"pub fn list_iter(&Self) -> Option<ListIter>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the elements of a list.","sig":null,"attributes":[{"value":"/ Returns an iterator over the elements of a list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27806,"byte_end":27858,"line_start":51,"line_end":51,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27863,"byte_end":27866,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ If the value contained in the datum is not either a cons cell or `Null`, `None` is","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27871,"byte_end":27957,"line_start":53,"line_end":53,"column_start":5,"column_end":91}},{"value":"/ returned.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27962,"byte_end":27975,"line_start":54,"line_end":54,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27980,"byte_end":27983,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Note that the returned iterator has special behavior for improper lists, yielding the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27988,"byte_end":28077,"line_start":56,"line_end":56,"column_start":5,"column_end":94}},{"value":"/ element after the dot after returning `None` the first time.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28082,"byte_end":28146,"line_start":57,"line_end":57,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28151,"byte_end":28154,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28159,"byte_end":28166,"line_start":59,"line_end":59,"column_start":5,"column_end":12}},{"value":"/ use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28171,"byte_end":28191,"line_start":60,"line_end":60,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28196,"byte_end":28199,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let datum = lexpr::datum::from_str(\"(1 2 . 3)\").unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28204,"byte_end":28265,"line_start":62,"line_end":62,"column_start":5,"column_end":66}},{"value":"/ let mut iter = datum.list_iter().unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28270,"byte_end":28316,"line_start":63,"line_end":63,"column_start":5,"column_end":51}},{"value":"/ let one = iter.next().unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28321,"byte_end":28356,"line_start":64,"line_end":64,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(one.value(), &sexp!(1));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28361,"byte_end":28400,"line_start":65,"line_end":65,"column_start":5,"column_end":44}},{"value":"/ let two = iter.next().unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28405,"byte_end":28440,"line_start":66,"line_end":66,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(two.value(), &sexp!(2));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28445,"byte_end":28484,"line_start":67,"line_end":67,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28489,"byte_end":28523,"line_start":68,"line_end":68,"column_start":5,"column_end":39}},{"value":"/ let three = iter.next().unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28528,"byte_end":28565,"line_start":69,"line_end":69,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(three.value(), &sexp!(3));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28570,"byte_end":28611,"line_start":70,"line_end":70,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28616,"byte_end":28650,"line_start":71,"line_end":71,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28655,"byte_end":28662,"line_start":72,"line_end":72,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28917,"byte_end":28928,"line_start":80,"line_end":80,"column_start":12,"column_end":23},"name":"vector_iter","qualname":"<Datum>::vector_iter","value":"pub fn vector_iter(&Self) -> Option<VectorIter>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the elements of a vector.","sig":null,"attributes":[{"value":"/ Returns an iterator over the elements of a vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28762,"byte_end":28816,"line_start":77,"line_end":77,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28821,"byte_end":28824,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ If the value contained in the datum is not a vector, `None` is returned.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":28829,"byte_end":28905,"line_start":79,"line_end":79,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1384},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30871,"byte_end":30874,"line_start":141,"line_end":141,"column_start":12,"column_end":15},"name":"Ref","qualname":"::datum::Ref","value":"Ref {  }","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1387}],"decl_id":null,"docs":" A reference to a value and corresponding location information.","sig":null,"attributes":[{"value":"/ A reference to a value and corresponding location information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30586,"byte_end":30652,"line_start":136,"line_end":136,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30653,"byte_end":30656,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ A `Ref` is the generalized version of `&Datum`; it can not only refer a top-level, owned `Datum`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30657,"byte_end":30757,"line_start":138,"line_end":138,"column_start":1,"column_end":101}},{"value":"/ value, but also to values recursively contained therein.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30758,"byte_end":30818,"line_start":139,"line_end":139,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31491,"byte_end":31495,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"span","qualname":"<Ref>::span","value":"pub fn span(&Self) -> Span","parent":null,"children":[],"decl_id":null,"docs":" Returns the span of the referenced value.\n","sig":null,"attributes":[{"value":"/ Returns the span of the referenced value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31434,"byte_end":31479,"line_start":168,"line_end":168,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31608,"byte_end":31613,"line_start":174,"line_end":174,"column_start":12,"column_end":17},"name":"value","qualname":"<Ref>::value","value":"pub fn value(&Self) -> &'a Value","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the contained value.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the contained value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31549,"byte_end":31596,"line_start":173,"line_end":173,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31982,"byte_end":31991,"line_start":183,"line_end":183,"column_start":12,"column_end":21},"name":"list_iter","qualname":"<Ref>::list_iter","value":"pub fn list_iter(&Self) -> Option<ListIter>","parent":null,"children":[],"decl_id":null,"docs":" If the value referenced is not either a cons cell or `Null`, `None` is returned.","sig":null,"attributes":[{"value":"/ If the value referenced is not either a cons cell or `Null`, `None` is returned.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31666,"byte_end":31750,"line_start":178,"line_end":178,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31755,"byte_end":31758,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Note that the returned iterator has special behavior for improper lists, yielding the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31763,"byte_end":31852,"line_start":180,"line_end":180,"column_start":5,"column_end":94}},{"value":"/ element after the dot after returning `None` the first time; see [`Datum::list_iter`] for an","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31857,"byte_end":31953,"line_start":181,"line_end":181,"column_start":5,"column_end":101}},{"value":"/ example.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31958,"byte_end":31970,"line_start":182,"line_end":182,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32403,"byte_end":32414,"line_start":194,"line_end":194,"column_start":12,"column_end":23},"name":"vector_iter","qualname":"<Ref>::vector_iter","value":"pub fn vector_iter(&Self) -> Option<VectorIter>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the elements of a vector.","sig":null,"attributes":[{"value":"/ Returns an iterator over the elements of a vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32260,"byte_end":32314,"line_start":191,"line_end":191,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32319,"byte_end":32322,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ If the value referenced is not a vector, `None` is returned.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32327,"byte_end":32391,"line_start":193,"line_end":193,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32845,"byte_end":32852,"line_start":206,"line_end":206,"column_start":12,"column_end":19},"name":"as_pair","qualname":"<Ref>::as_pair","value":"pub fn as_pair(&Self) -> Option<(Ref, Ref)>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pair of references to the fields of a cons cell.","sig":null,"attributes":[{"value":"/ Returns a pair of references to the fields of a cons cell.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32691,"byte_end":32753,"line_start":203,"line_end":203,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32758,"byte_end":32761,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ If the value referenced is not a cons cell, `None` is returned.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":32766,"byte_end":32833,"line_start":205,"line_end":205,"column_start":5,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":1402},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33442,"byte_end":33446,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"name":"Span","qualname":"::datum::Span","value":"Span {  }","parent":null,"children":[{"krate":0,"index":1403},{"krate":0,"index":1404}],"decl_id":null,"docs":" The start and end for a span of text.\n","sig":null,"attributes":[{"value":"/ The start and end for a span of text.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33338,"byte_end":33379,"line_start":225,"line_end":225,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33831,"byte_end":33836,"line_start":245,"line_end":245,"column_start":12,"column_end":17},"name":"start","qualname":"<Span>::start","value":"pub fn start(&Self) -> Position","parent":null,"children":[],"decl_id":null,"docs":" Get the starting line/column in the source file for this span.\n","sig":null,"attributes":[{"value":"/ Get the starting line/column in the source file for this span.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33753,"byte_end":33819,"line_start":244,"line_end":244,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33964,"byte_end":33967,"line_start":250,"line_end":250,"column_start":12,"column_end":15},"name":"end","qualname":"<Span>::end","value":"pub fn end(&Self) -> Position","parent":null,"children":[],"decl_id":null,"docs":" Get the ending line/column in the source file for this span.\n","sig":null,"attributes":[{"value":"/ Get the ending line/column in the source file for this span.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33888,"byte_end":33952,"line_start":249,"line_end":249,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1441},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34631,"byte_end":34641,"line_start":280,"line_end":280,"column_start":12,"column_end":22},"name":"VectorIter","qualname":"::datum::VectorIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the elements\n","sig":null,"attributes":[{"value":"/ An iterator over the elements","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34562,"byte_end":34595,"line_start":278,"line_end":278,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1451},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35666,"byte_end":35674,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"ListIter","qualname":"::datum::ListIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator yielding the `car` field of a chain of cons cells.","sig":null,"attributes":[{"value":"/ An iterator yielding the `car` field of a chain of cons cells.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34894,"byte_end":34960,"line_start":290,"line_end":290,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34961,"byte_end":34964,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ # Improper lists","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34965,"byte_end":34985,"line_start":292,"line_end":292,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34986,"byte_end":34989,"line_start":293,"line_end":293,"column_start":1,"column_end":4}},{"value":"/ Since in Lisp, lists can be \"improper\", i.e., terminated by a value other than `Null`, this","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34990,"byte_end":35085,"line_start":294,"line_end":294,"column_start":1,"column_end":96}},{"value":"/ iterator type takes advantage of the fact that Rust's iterators can produce multiple sequences","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35086,"byte_end":35184,"line_start":295,"line_end":295,"column_start":1,"column_end":99}},{"value":"/ of values, each terminated by `None`. For an improper list, the terminating value is produced","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35185,"byte_end":35282,"line_start":296,"line_end":296,"column_start":1,"column_end":98}},{"value":"/ after the sequence of elements, as a singleton element, again followed by `None`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35283,"byte_end":35368,"line_start":297,"line_end":297,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35369,"byte_end":35372,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ For example, while the list `(1 2 3)` will produce the three expected `Some` values, followed by","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35373,"byte_end":35473,"line_start":299,"line_end":299,"column_start":1,"column_end":101}},{"value":"/ `None`, the list `(1 2 . 3)` will produce `Some` values for `1` and `2`, then a `None`, followed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35474,"byte_end":35574,"line_start":300,"line_end":300,"column_start":1,"column_end":101}},{"value":"/ by a some value for `3`, and then the final `None`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35575,"byte_end":35630,"line_start":301,"line_end":301,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35916,"byte_end":35924,"line_start":310,"line_end":310,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ListIter>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true when the iterator is completely exhausted.","sig":null,"attributes":[{"value":"/ Returns true when the iterator is completely exhausted.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35725,"byte_end":35784,"line_start":306,"line_end":306,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35789,"byte_end":35792,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ For an improper list, true will only be returned after the terminating value has been","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35797,"byte_end":35886,"line_start":308,"line_end":308,"column_start":5,"column_end":94}},{"value":"/ consumed.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35891,"byte_end":35904,"line_start":309,"line_end":309,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":36312,"byte_end":36316,"line_start":321,"line_end":321,"column_start":12,"column_end":16},"name":"peek","qualname":"<ListIter>::peek","value":"pub fn peek(&Self) -> Option<Ref>","parent":null,"children":[],"decl_id":null,"docs":" Returns a peek at the value that would be returned by a call to `next`.","sig":null,"attributes":[{"value":"/ Returns a peek at the value that would be returned by a call to `next`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":36054,"byte_end":36129,"line_start":317,"line_end":317,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":36134,"byte_end":36137,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ For improper lists, this implies that after the last regular element, `None` will be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":36142,"byte_end":36230,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/ returned, while `is_empty` still returns false at that point.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":36235,"byte_end":36300,"line_start":320,"line_end":320,"column_start":5,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39852,"byte_end":39870,"line_start":434,"line_end":434,"column_start":8,"column_end":26},"name":"from_reader_custom","qualname":"::datum::from_reader_custom","value":"pub fn from_reader_custom<impl io::Read: io::Read>(impl io::Read, Options)\n-> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from an IO stream containing a single S-expression.","sig":null,"attributes":[{"value":"/ Parse a datum from an IO stream containing a single S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38636,"byte_end":38705,"line_start":401,"line_end":401,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38706,"byte_end":38709,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/ The content of the IO stream is parsed directly from the stream","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38710,"byte_end":38777,"line_start":403,"line_end":403,"column_start":1,"column_end":68}},{"value":"/ without being buffered in memory.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38778,"byte_end":38815,"line_start":404,"line_end":404,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38816,"byte_end":38819,"line_start":405,"line_end":405,"column_start":1,"column_end":4}},{"value":"/ When reading from a source against which short reads are not efficient, such","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38820,"byte_end":38900,"line_start":406,"line_end":406,"column_start":1,"column_end":81}},{"value":"/ as a [`File`], you will want to apply your own buffering, e.g. using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38901,"byte_end":38973,"line_start":407,"line_end":407,"column_start":1,"column_end":73}},{"value":"/ [`std::io::BufReader`].","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":38974,"byte_end":39001,"line_start":408,"line_end":408,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39002,"byte_end":39005,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39006,"byte_end":39019,"line_start":410,"line_end":410,"column_start":1,"column_end":14}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39020,"byte_end":39046,"line_start":411,"line_end":411,"column_start":1,"column_end":27}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39047,"byte_end":39069,"line_start":412,"line_end":412,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39070,"byte_end":39097,"line_start":413,"line_end":413,"column_start":1,"column_end":28}},{"value":"/ use std::path::Path;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39098,"byte_end":39122,"line_start":414,"line_end":414,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39123,"byte_end":39126,"line_start":415,"line_end":415,"column_start":1,"column_end":4}},{"value":"/ fn read_datum_from_file<P: AsRef<Path>>(path: P) -> Result<lexpr::Datum, Box<dyn Error>> {","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39127,"byte_end":39221,"line_start":416,"line_end":416,"column_start":1,"column_end":95}},{"value":"/     // Open the file in read-only mode with buffer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39222,"byte_end":39277,"line_start":417,"line_end":417,"column_start":1,"column_end":56}},{"value":"/     let file = File::open(path)?;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39278,"byte_end":39315,"line_start":418,"line_end":418,"column_start":1,"column_end":38}},{"value":"/     let reader = BufReader::new(file);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39316,"byte_end":39358,"line_start":419,"line_end":419,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39359,"byte_end":39362,"line_start":420,"line_end":420,"column_start":1,"column_end":4}},{"value":"/     // Read an arbitrary S-expression, using parser options suitable for Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39363,"byte_end":39451,"line_start":421,"line_end":421,"column_start":1,"column_end":89}},{"value":"/     let datum = lexpr::datum::from_reader_custom(reader, lexpr::parse::Options::elisp())?;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39452,"byte_end":39546,"line_start":422,"line_end":422,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39547,"byte_end":39550,"line_start":423,"line_end":423,"column_start":1,"column_end":4}},{"value":"/     // Return the datum.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39551,"byte_end":39579,"line_start":424,"line_end":424,"column_start":1,"column_end":29}},{"value":"/     Ok(datum)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39580,"byte_end":39597,"line_start":425,"line_end":425,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39598,"byte_end":39603,"line_start":426,"line_end":426,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39604,"byte_end":39607,"line_start":427,"line_end":427,"column_start":1,"column_end":4}},{"value":"/ let datum = read_datum_from_file(\"test.el\").unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39608,"byte_end":39665,"line_start":428,"line_end":428,"column_start":1,"column_end":58}},{"value":"/ println!(\"{:?}\", datum);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39666,"byte_end":39694,"line_start":429,"line_end":429,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39695,"byte_end":39702,"line_start":430,"line_end":430,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39703,"byte_end":39706,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ [`File`]: https://doc.rust-lang.org/std/fs/struct.File.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39707,"byte_end":39770,"line_start":432,"line_end":432,"column_start":1,"column_end":64}},{"value":"/ [`BufReader`]: https://doc.rust-lang.org/std/io/struct.BufReader.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39771,"byte_end":39844,"line_start":433,"line_end":433,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40194,"byte_end":40205,"line_start":444,"line_end":444,"column_start":8,"column_end":19},"name":"from_reader","qualname":"::datum::from_reader","value":"pub fn from_reader<impl io::Read: io::Read>(impl io::Read) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from an IO stream of S-expressions, using the default parser\n options.","sig":null,"attributes":[{"value":"/ Parse a datum from an IO stream of S-expressions, using the default parser","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":39979,"byte_end":40057,"line_start":438,"line_end":438,"column_start":1,"column_end":79}},{"value":"/ options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40058,"byte_end":40070,"line_start":439,"line_end":439,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40071,"byte_end":40074,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ See [`from_reader_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40075,"byte_end":40127,"line_start":441,"line_end":441,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40128,"byte_end":40131,"line_start":442,"line_end":442,"column_start":1,"column_end":4}},{"value":"/ [`from_reader_custom`]: fn.from_reader_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40132,"byte_end":40186,"line_start":443,"line_end":443,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":173},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40535,"byte_end":40552,"line_start":454,"line_end":454,"column_start":8,"column_end":25},"name":"from_reader_elisp","qualname":"::datum::from_reader_elisp","value":"pub fn from_reader_elisp<impl io::Read: io::Read>(impl io::Read)\n-> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from an IO stream of S-expressions, using the parser\n options suitable for parsing Emacs Lisp.","sig":null,"attributes":[{"value":"/ Parse a datum from an IO stream of S-expressions, using the parser","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40296,"byte_end":40366,"line_start":448,"line_end":448,"column_start":1,"column_end":71}},{"value":"/ options suitable for parsing Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40367,"byte_end":40411,"line_start":449,"line_end":449,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40412,"byte_end":40415,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ See [`from_reader_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40416,"byte_end":40468,"line_start":451,"line_end":451,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40469,"byte_end":40472,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ [`from_reader_custom`]: fn.from_reader_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40473,"byte_end":40527,"line_start":453,"line_end":453,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":175},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40856,"byte_end":40873,"line_start":464,"line_end":464,"column_start":8,"column_end":25},"name":"from_slice_custom","qualname":"::datum::from_slice_custom","value":"pub fn from_slice_custom(&[u8], Options) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from bytes representing a single S-expression.","sig":null,"attributes":[{"value":"/ Parse a datum from bytes representing a single S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40641,"byte_end":40705,"line_start":458,"line_end":458,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40706,"byte_end":40709,"line_start":459,"line_end":459,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40710,"byte_end":40717,"line_start":460,"line_end":460,"column_start":1,"column_end":8}},{"value":"/ let datum = lexpr::from_slice_custom(b\"(a (nested) list)\", lexpr::parse::Options::new());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40718,"byte_end":40811,"line_start":461,"line_end":461,"column_start":1,"column_end":94}},{"value":"/ println!(\"{:?}\", datum);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40812,"byte_end":40840,"line_start":462,"line_end":462,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":40841,"byte_end":40848,"line_start":463,"line_end":463,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41362,"byte_end":41372,"line_start":476,"line_end":476,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::datum::from_slice","value":"pub fn from_slice(&[u8]) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from bytes representing a single S-expressions, using the\n default parser options.","sig":null,"attributes":[{"value":"/ Parse a datum from bytes representing a single S-expressions, using the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41138,"byte_end":41213,"line_start":470,"line_end":470,"column_start":1,"column_end":76}},{"value":"/ default parser options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41214,"byte_end":41241,"line_start":471,"line_end":471,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41242,"byte_end":41245,"line_start":472,"line_end":472,"column_start":1,"column_end":4}},{"value":"/ See [`from_slice_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41246,"byte_end":41297,"line_start":473,"line_end":473,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41298,"byte_end":41301,"line_start":474,"line_end":474,"column_start":1,"column_end":4}},{"value":"/ [`from_slice_custom`]: fn.from_slice_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41302,"byte_end":41354,"line_start":475,"line_end":475,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41694,"byte_end":41710,"line_start":486,"line_end":486,"column_start":8,"column_end":24},"name":"from_slice_elisp","qualname":"::datum::from_slice_elisp","value":"pub fn from_slice_elisp(&[u8]) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from bytes representing a single S-expressions, using parser\n options suitable for Emacs Lisp.","sig":null,"attributes":[{"value":"/ Parse a datum from bytes representing a single S-expressions, using parser","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41458,"byte_end":41536,"line_start":480,"line_end":480,"column_start":1,"column_end":79}},{"value":"/ options suitable for Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41537,"byte_end":41573,"line_start":481,"line_end":481,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41574,"byte_end":41577,"line_start":482,"line_end":482,"column_start":1,"column_end":4}},{"value":"/ See [`from_slice_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41578,"byte_end":41629,"line_start":483,"line_end":483,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41630,"byte_end":41633,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ [`from_slice_custom`]: fn.from_slice_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41634,"byte_end":41686,"line_start":485,"line_end":485,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42015,"byte_end":42030,"line_start":496,"line_end":496,"column_start":8,"column_end":23},"name":"from_str_custom","qualname":"::datum::from_str_custom","value":"pub fn from_str_custom(&str, Options) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from a string slice representing a single S-expression.","sig":null,"attributes":[{"value":"/ Parse a datum from a string slice representing a single S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41794,"byte_end":41867,"line_start":490,"line_end":490,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41868,"byte_end":41871,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41872,"byte_end":41879,"line_start":492,"line_end":492,"column_start":1,"column_end":8}},{"value":"/ let datum = lexpr::from_str_custom(\"(a (nested) list)\", lexpr::parse::Options::new());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41880,"byte_end":41970,"line_start":493,"line_end":493,"column_start":1,"column_end":91}},{"value":"/ println!(\"{:?}\", datum);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":41971,"byte_end":41999,"line_start":494,"line_end":494,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42000,"byte_end":42007,"line_start":495,"line_end":495,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":179},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42540,"byte_end":42548,"line_start":508,"line_end":508,"column_start":8,"column_end":16},"name":"from_str","qualname":"::datum::from_str","value":"pub fn from_str(&str) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from a string slice representing a single S-expressions, using\n the default parser options.","sig":null,"attributes":[{"value":"/ Parse a datum from a string slice representing a single S-expressions, using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42313,"byte_end":42393,"line_start":502,"line_end":502,"column_start":1,"column_end":81}},{"value":"/ the default parser options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42394,"byte_end":42425,"line_start":503,"line_end":503,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42426,"byte_end":42429,"line_start":504,"line_end":504,"column_start":1,"column_end":4}},{"value":"/ See [`from_str_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42430,"byte_end":42479,"line_start":505,"line_end":505,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42480,"byte_end":42483,"line_start":506,"line_end":506,"column_start":1,"column_end":4}},{"value":"/ [`from_str_custom`]: fn.from_str_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42484,"byte_end":42532,"line_start":507,"line_end":507,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42861,"byte_end":42875,"line_start":518,"line_end":518,"column_start":8,"column_end":22},"name":"from_str_elisp","qualname":"::datum::from_str_elisp","value":"pub fn from_str_elisp(&str) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a datum from a string slice representing a single S-expression, using\n parser options suitable for Emacs Lisp.","sig":null,"attributes":[{"value":"/ Parse a datum from a string slice representing a single S-expression, using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42623,"byte_end":42702,"line_start":512,"line_end":512,"column_start":1,"column_end":80}},{"value":"/ parser options suitable for Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42703,"byte_end":42746,"line_start":513,"line_end":513,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42747,"byte_end":42750,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ See [`from_str_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42751,"byte_end":42800,"line_start":515,"line_end":515,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42801,"byte_end":42804,"line_start":516,"line_end":516,"column_start":1,"column_end":4}},{"value":"/ [`from_str_custom`]: fn.from_str_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":42805,"byte_end":42853,"line_start":517,"line_end":517,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":181},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"number","qualname":"::number","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":1484},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1490},{"krate":0,"index":1492},{"krate":0,"index":1502},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1508},{"krate":0,"index":192},{"krate":0,"index":202},{"krate":0,"index":1510},{"krate":0,"index":1512},{"krate":0,"index":1514},{"krate":0,"index":1516},{"krate":0,"index":1518},{"krate":0,"index":1520},{"krate":0,"index":1522},{"krate":0,"index":1524},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218}],"decl_id":null,"docs":" Dynamically typed number type.\n","sig":null,"attributes":[{"value":"/ Dynamically typed number type.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":42948,"byte_end":42982,"line_start":1,"line_end":1,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":1484},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43136,"byte_end":43142,"line_start":7,"line_end":7,"column_start":12,"column_end":18},"name":"Number","qualname":"::number::Number","value":"Number {  }","parent":null,"children":[{"krate":0,"index":1485}],"decl_id":null,"docs":" Represents an S-expression number, whether integer or floating point.\n","sig":null,"attributes":[{"value":"/ Represents an S-expression number, whether integer or floating point.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43023,"byte_end":43096,"line_start":5,"line_end":5,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43919,"byte_end":43925,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"is_i64","qualname":"<Number>::is_i64","value":"pub fn is_i64(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `Number` is an integer between `i64::MIN` and\n `i64::MAX`.","sig":null,"attributes":[{"value":"/ Returns true if the `Number` is an integer between `i64::MIN` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43273,"byte_end":43342,"line_start":19,"line_end":19,"column_start":5,"column_end":74}},{"value":"/ `i64::MAX`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43347,"byte_end":43362,"line_start":20,"line_end":20,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43367,"byte_end":43370,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ For any `Number` on which `is_i64` returns true, `as_i64` is","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43375,"byte_end":43439,"line_start":22,"line_end":22,"column_start":5,"column_end":69}},{"value":"/ guaranteed to return the integer value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43444,"byte_end":43487,"line_start":23,"line_end":23,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43492,"byte_end":43495,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43500,"byte_end":43507,"line_start":25,"line_end":25,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43512,"byte_end":43534,"line_start":26,"line_end":26,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43539,"byte_end":43544,"line_start":27,"line_end":27,"column_start":5,"column_end":10}},{"value":"/ let big = i64::max_value() as u64 + 10;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43549,"byte_end":43592,"line_start":28,"line_end":28,"column_start":5,"column_end":48}},{"value":"/ let v = sexp!(((a . 64) (b . ,big) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43597,"byte_end":43650,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43655,"byte_end":43658,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_i64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43663,"byte_end":43692,"line_start":31,"line_end":31,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43697,"byte_end":43700,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ // Greater than i64::MAX.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43705,"byte_end":43734,"line_start":33,"line_end":33,"column_start":5,"column_end":34}},{"value":"/ assert!(!v[\"b\"].is_i64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43739,"byte_end":43769,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43774,"byte_end":43777,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ // Numbers with a decimal point are not considered integers.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43782,"byte_end":43846,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/ assert!(!v[\"c\"].is_i64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43851,"byte_end":43881,"line_start":37,"line_end":37,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43886,"byte_end":43893,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43898,"byte_end":43907,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44689,"byte_end":44695,"line_start":67,"line_end":67,"column_start":12,"column_end":18},"name":"is_u64","qualname":"<Number>::is_u64","value":"pub fn is_u64(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `Number` is an integer between zero and `u64::MAX`.","sig":null,"attributes":[{"value":"/ Returns true if the `Number` is an integer between zero and `u64::MAX`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44113,"byte_end":44188,"line_start":48,"line_end":48,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44193,"byte_end":44196,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ For any Number on which `is_u64` returns true, `as_u64` is guaranteed to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44201,"byte_end":44277,"line_start":50,"line_end":50,"column_start":5,"column_end":81}},{"value":"/ return the integer value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44282,"byte_end":44311,"line_start":51,"line_end":51,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44316,"byte_end":44319,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44324,"byte_end":44331,"line_start":53,"line_end":53,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44336,"byte_end":44358,"line_start":54,"line_end":54,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44363,"byte_end":44368,"line_start":55,"line_end":55,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 64) (b . -64) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44373,"byte_end":44425,"line_start":56,"line_end":56,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44430,"byte_end":44433,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_u64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44438,"byte_end":44467,"line_start":58,"line_end":58,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44472,"byte_end":44475,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ // Negative integer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44480,"byte_end":44504,"line_start":60,"line_end":60,"column_start":5,"column_end":29}},{"value":"/ assert!(!v[\"b\"].is_u64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44509,"byte_end":44539,"line_start":61,"line_end":61,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44544,"byte_end":44547,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ // Numbers with a decimal point are not considered integers.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44552,"byte_end":44616,"line_start":63,"line_end":63,"column_start":5,"column_end":69}},{"value":"/ assert!(!v[\"c\"].is_u64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44621,"byte_end":44651,"line_start":64,"line_end":64,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44656,"byte_end":44663,"line_start":65,"line_end":65,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44668,"byte_end":44677,"line_start":66,"line_end":66,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45473,"byte_end":45479,"line_start":93,"line_end":93,"column_start":12,"column_end":18},"name":"is_f64","qualname":"<Number>::is_f64","value":"pub fn is_f64(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the `Number` can be represented by f64.","sig":null,"attributes":[{"value":"/ Returns true if the `Number` can be represented by f64.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44840,"byte_end":44899,"line_start":74,"line_end":74,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44904,"byte_end":44907,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ For any Number on which `is_f64` returns true, `as_f64` is guaranteed to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44912,"byte_end":44988,"line_start":76,"line_end":76,"column_start":5,"column_end":81}},{"value":"/ return the floating point value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":44993,"byte_end":45029,"line_start":77,"line_end":77,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45034,"byte_end":45037,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Currently this function returns true if and only if both `is_i64` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45042,"byte_end":45115,"line_start":79,"line_end":79,"column_start":5,"column_end":78}},{"value":"/ `is_u64` return false but this is not a guarantee in the future.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45120,"byte_end":45188,"line_start":80,"line_end":80,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45193,"byte_end":45196,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45201,"byte_end":45208,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45213,"byte_end":45235,"line_start":83,"line_end":83,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45240,"byte_end":45245,"line_start":84,"line_end":84,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 256.0) (b . 64) (c . -64)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45250,"byte_end":45302,"line_start":85,"line_end":85,"column_start":5,"column_end":57}},{"value":"/ assert!(v[\"a\"].is_f64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45307,"byte_end":45336,"line_start":86,"line_end":86,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45341,"byte_end":45344,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ // Integers.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45349,"byte_end":45365,"line_start":88,"line_end":88,"column_start":5,"column_end":21}},{"value":"/ assert!(!v[\"b\"].is_f64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45370,"byte_end":45400,"line_start":89,"line_end":89,"column_start":5,"column_end":35}},{"value":"/ assert!(!v[\"c\"].is_f64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45405,"byte_end":45435,"line_start":90,"line_end":90,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45440,"byte_end":45447,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45452,"byte_end":45461,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46065,"byte_end":46071,"line_start":114,"line_end":114,"column_start":12,"column_end":18},"name":"as_i64","qualname":"<Number>::as_i64","value":"pub fn as_i64(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" If the `Number` is an integer, represent it as i64 if possible. Returns\n None otherwise.","sig":null,"attributes":[{"value":"/ If the `Number` is an integer, represent it as i64 if possible. Returns","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45624,"byte_end":45699,"line_start":100,"line_end":100,"column_start":5,"column_end":80}},{"value":"/ None otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45704,"byte_end":45723,"line_start":101,"line_end":101,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45728,"byte_end":45731,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45736,"byte_end":45743,"line_start":103,"line_end":103,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45748,"byte_end":45770,"line_start":104,"line_end":104,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45775,"byte_end":45780,"line_start":105,"line_end":105,"column_start":5,"column_end":10}},{"value":"/ let big = i64::max_value() as u64 + 10;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45785,"byte_end":45828,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/ let v = sexp!(((a . 64) (b . ,big) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45833,"byte_end":45886,"line_start":107,"line_end":107,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45891,"byte_end":45894,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_i64(), Some(64));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45899,"byte_end":45941,"line_start":109,"line_end":109,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v[\"b\"].as_i64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45946,"byte_end":45984,"line_start":110,"line_end":110,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(v[\"c\"].as_i64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":45989,"byte_end":46027,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46032,"byte_end":46039,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46044,"byte_end":46053,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46799,"byte_end":46805,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"name":"as_u64","qualname":"<Number>::as_u64","value":"pub fn as_u64(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" If the `Number` is an integer, represent it as u64 if possible. Returns\n None otherwise.","sig":null,"attributes":[{"value":"/ If the `Number` is an integer, represent it as u64 if possible. Returns","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46407,"byte_end":46482,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ None otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46487,"byte_end":46506,"line_start":129,"line_end":129,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46511,"byte_end":46514,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46519,"byte_end":46526,"line_start":131,"line_end":131,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46531,"byte_end":46553,"line_start":132,"line_end":132,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46558,"byte_end":46563,"line_start":133,"line_end":133,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 64) (b . -64) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46568,"byte_end":46620,"line_start":134,"line_end":134,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46625,"byte_end":46628,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_u64(), Some(64));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46633,"byte_end":46675,"line_start":136,"line_end":136,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v[\"b\"].as_u64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46680,"byte_end":46718,"line_start":137,"line_end":137,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(v[\"c\"].as_u64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46723,"byte_end":46761,"line_start":138,"line_end":138,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46766,"byte_end":46773,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46778,"byte_end":46787,"line_start":140,"line_end":140,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47337,"byte_end":47343,"line_start":160,"line_end":160,"column_start":12,"column_end":18},"name":"as_f64","qualname":"<Number>::as_f64","value":"pub fn as_f64(&Self) -> Option<f64>","parent":null,"children":[],"decl_id":null,"docs":" Represents the number as f64 if possible. Returns None otherwise.","sig":null,"attributes":[{"value":"/ Represents the number as f64 if possible. Returns None otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":46959,"byte_end":47028,"line_start":148,"line_end":148,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47033,"byte_end":47036,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47041,"byte_end":47048,"line_start":150,"line_end":150,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47053,"byte_end":47075,"line_start":151,"line_end":151,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47080,"byte_end":47085,"line_start":152,"line_end":152,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 256.0) (b . 64) (c . -64)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47090,"byte_end":47142,"line_start":153,"line_end":153,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47147,"byte_end":47150,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_f64(), Some(256.0));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47155,"byte_end":47200,"line_start":155,"line_end":155,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(v[\"b\"].as_f64(), Some(64.0));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47205,"byte_end":47249,"line_start":156,"line_end":156,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v[\"c\"].as_f64(), Some(-64.0));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47254,"byte_end":47299,"line_start":157,"line_end":157,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47304,"byte_end":47311,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47316,"byte_end":47325,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47885,"byte_end":47893,"line_start":181,"line_end":181,"column_start":12,"column_end":20},"name":"from_f64","qualname":"<Number>::from_f64","value":"pub fn from_f64(f64) -> Option<Number>","parent":null,"children":[],"decl_id":null,"docs":" Converts a finite `f64` to a `Number`. Infinite or NaN values\n are not S-expression numbers.","sig":null,"attributes":[{"value":"/ Converts a finite `f64` to a `Number`. Infinite or NaN values","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47536,"byte_end":47601,"line_start":168,"line_end":168,"column_start":5,"column_end":70}},{"value":"/ are not S-expression numbers.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47606,"byte_end":47639,"line_start":169,"line_end":169,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47644,"byte_end":47647,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47652,"byte_end":47659,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ # use std::f64;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47664,"byte_end":47683,"line_start":172,"line_end":172,"column_start":5,"column_end":24}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47688,"byte_end":47693,"line_start":173,"line_end":173,"column_start":5,"column_end":10}},{"value":"/ # use lexpr::Number;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47698,"byte_end":47722,"line_start":174,"line_end":174,"column_start":5,"column_end":29}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47727,"byte_end":47732,"line_start":175,"line_end":175,"column_start":5,"column_end":10}},{"value":"/ assert!(Number::from_f64(256.0).is_some());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47737,"byte_end":47784,"line_start":176,"line_end":176,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47789,"byte_end":47792,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ assert!(Number::from_f64(f64::NAN).is_none());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47797,"byte_end":47847,"line_start":178,"line_end":178,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47852,"byte_end":47859,"line_start":179,"line_end":179,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":47864,"byte_end":47873,"line_start":180,"line_end":180,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48230,"byte_end":48235,"line_start":193,"line_end":193,"column_start":12,"column_end":17},"name":"visit","qualname":"<Number>::visit","value":"pub fn visit<V>(&Self, V) -> Result<V::Value, V::Error> where V: Visitor","parent":null,"children":[],"decl_id":null,"docs":" Dispatch based on the type of the contained value.","sig":null,"attributes":[{"value":"/ Dispatch based on the type of the contained value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48048,"byte_end":48102,"line_start":189,"line_end":189,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48107,"byte_end":48110,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Depending on the stored value, one of the functions of the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48115,"byte_end":48177,"line_start":191,"line_end":191,"column_start":5,"column_end":67}},{"value":"/ supplied visitor will be called.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48182,"byte_end":48218,"line_start":192,"line_end":192,"column_start":5,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":202},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48861,"byte_end":48868,"line_start":214,"line_end":214,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::number::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209}],"decl_id":null,"docs":" Trait to access the value stored in `Number`.","sig":null,"attributes":[{"value":"/ Trait to access the value stored in `Number`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48515,"byte_end":48564,"line_start":205,"line_end":205,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48565,"byte_end":48568,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ The `Number` type does not directly expose its internal","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48569,"byte_end":48628,"line_start":207,"line_end":207,"column_start":1,"column_end":60}},{"value":"/ structure to allow future changes without breaking the API.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48629,"byte_end":48692,"line_start":208,"line_end":208,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48693,"byte_end":48696,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ Instead, you can implement this trait and pass your implementation","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48697,"byte_end":48767,"line_start":210,"line_end":210,"column_start":1,"column_end":71}},{"value":"/ to `Number::visit`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48768,"byte_end":48791,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48792,"byte_end":48795,"line_start":212,"line_end":212,"column_start":1,"column_end":4}},{"value":"/ [`Number::visit`]: struct.Number.html#method.visit","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48796,"byte_end":48850,"line_start":213,"line_end":213,"column_start":1,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":203},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48928,"byte_end":48933,"line_start":216,"line_end":216,"column_start":10,"column_end":15},"name":"Value","qualname":"::number::Visitor::Value","value":"type Value;","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The return type of the visitor methods.\n","sig":null,"attributes":[{"value":"/ The return type of the visitor methods.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48875,"byte_end":48918,"line_start":215,"line_end":215,"column_start":5,"column_end":48}}]},{"kind":"Type","id":{"krate":0,"index":204},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48991,"byte_end":48996,"line_start":218,"line_end":218,"column_start":10,"column_end":15},"name":"Error","qualname":"::number::Visitor::Error","value":"type Error;","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The error type of the visitor methods.\n","sig":null,"attributes":[{"value":"/ The error type of the visitor methods.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":48939,"byte_end":48981,"line_start":217,"line_end":217,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49120,"byte_end":49125,"line_start":223,"line_end":223,"column_start":8,"column_end":13},"name":"error","qualname":"::number::Visitor::error","value":"pub fn error<T: Into<String>>(T) -> Self::Error","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" Construct an error given a message.","sig":null,"attributes":[{"value":"/ Construct an error given a message.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49003,"byte_end":49042,"line_start":220,"line_end":220,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49047,"byte_end":49050,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ This method is used by trait default implementations.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49055,"byte_end":49112,"line_start":222,"line_end":222,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49212,"byte_end":49221,"line_start":226,"line_end":226,"column_start":8,"column_end":17},"name":"visit_u64","qualname":"::number::Visitor::visit_u64","value":"pub fn visit_u64(Self, u64) -> Result<Self::Value, Self::Error>","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The stored value is a `u64`.\n","sig":null,"attributes":[{"value":"/ The stored value is a `u64`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49172,"byte_end":49204,"line_start":225,"line_end":225,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49318,"byte_end":49327,"line_start":228,"line_end":228,"column_start":8,"column_end":17},"name":"visit_i64","qualname":"::number::Visitor::visit_i64","value":"pub fn visit_i64(Self, i64) -> Result<Self::Value, Self::Error>","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The stored value is an `i64`.\n","sig":null,"attributes":[{"value":"/ The stored value is an `i64`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49277,"byte_end":49310,"line_start":227,"line_end":227,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49421,"byte_end":49430,"line_start":230,"line_end":230,"column_start":8,"column_end":17},"name":"visit_f64","qualname":"::number::Visitor::visit_f64","value":"pub fn visit_f64(Self, f64) -> Result<Self::Value, Self::Error>","parent":{"krate":0,"index":202},"children":[],"decl_id":null,"docs":" The stored value is `f64`.\n","sig":null,"attributes":[{"value":"/ The stored value is `f64`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":49383,"byte_end":49413,"line_start":229,"line_end":229,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":220},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"parse","qualname":"::parse","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","parent":null,"children":[{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":247},{"krate":0,"index":250},{"krate":0,"index":253},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":1526},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1545},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1550},{"krate":0,"index":1551},{"krate":0,"index":1553},{"krate":0,"index":1558},{"krate":0,"index":1560},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1564},{"krate":0,"index":1566},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":303},{"krate":0,"index":322},{"krate":0,"index":1579},{"krate":0,"index":1617},{"krate":0,"index":1619},{"krate":0,"index":324},{"krate":0,"index":329},{"krate":0,"index":333},{"krate":0,"index":337},{"krate":0,"index":342},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":1621},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":420},{"krate":0,"index":426},{"krate":0,"index":431},{"krate":0,"index":437},{"krate":0,"index":528},{"krate":0,"index":548}],"decl_id":null,"docs":" S-expression parser and options.","sig":null,"attributes":[{"value":"/ S-expression parser and options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51037,"byte_end":51073,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51074,"byte_end":51077,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Terminology","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51078,"byte_end":51095,"line_start":3,"line_end":3,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51096,"byte_end":51099,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The process of converting S-expressions from their textual representation to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51100,"byte_end":51180,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/ values is referred to \"reading\" in Lisp. To avoid confusion with Rust's","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51181,"byte_end":51256,"line_start":6,"line_end":6,"column_start":1,"column_end":76}},{"value":"/ `Write` trait, `lexpr` uses \"parsing\" instead.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51257,"byte_end":51307,"line_start":7,"line_end":7,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":297},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51961,"byte_end":51967,"line_start":36,"line_end":36,"column_start":12,"column_end":18},"name":"Parser","qualname":"::parse::Parser","value":"Parser {  }","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302}],"decl_id":null,"docs":" Parser for the S-expression text representation.","sig":null,"attributes":[{"value":"/ Parser for the S-expression text representation.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51695,"byte_end":51747,"line_start":29,"line_end":29,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51748,"byte_end":51751,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This type, given a input source, provides the [`parse`] method,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51752,"byte_end":51819,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/ which can be used to read a single S-expression from the input","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51820,"byte_end":51886,"line_start":32,"line_end":32,"column_start":1,"column_end":67}},{"value":"/ source.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51887,"byte_end":51898,"line_start":33,"line_end":33,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51899,"byte_end":51902,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ [`parse`]: struct.Parser.html#method.parse","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":51903,"byte_end":51949,"line_start":35,"line_end":35,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1526},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52149,"byte_end":52156,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Options","qualname":"::parse::Options","value":"Options {  }","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1528},{"krate":0,"index":1529},{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532}],"decl_id":null,"docs":" Various options to influence parser behavior.\n","sig":null,"attributes":[{"value":"/ Various options to influence parser behavior.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52058,"byte_end":52107,"line_start":43,"line_end":43,"column_start":1,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1539},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52713,"byte_end":52722,"line_start":63,"line_end":63,"column_start":5,"column_end":14},"name":"EmptyList","qualname":"::parse::NilSymbol::EmptyList","value":"NilSymbol::EmptyList","parent":{"krate":0,"index":1538},"children":[],"decl_id":null,"docs":" Parse `nil` like as the empty list. This the behavior of Emacs\n Lisp and Common Lisp.","sig":null,"attributes":[{"value":"/ Parse `nil` like as the empty list. This the behavior of Emacs","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52437,"byte_end":52503,"line_start":57,"line_end":57,"column_start":5,"column_end":71}},{"value":"/ Lisp and Common Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52508,"byte_end":52533,"line_start":58,"line_end":58,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52538,"byte_end":52541,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ In the parsed `Value`, the empty list, written as `()` and the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52546,"byte_end":52612,"line_start":60,"line_end":60,"column_start":5,"column_end":71}},{"value":"/ empty list, written as `nil` are both represented by the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52617,"byte_end":52677,"line_start":61,"line_end":61,"column_start":5,"column_end":65}},{"value":"/ `Value::Null` variant.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52682,"byte_end":52708,"line_start":62,"line_end":62,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1541},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52892,"byte_end":52899,"line_start":69,"line_end":69,"column_start":5,"column_end":12},"name":"Default","qualname":"::parse::NilSymbol::Default","value":"NilSymbol::Default","parent":{"krate":0,"index":1538},"children":[],"decl_id":null,"docs":" Parse `nil` as a regular symbol. This is the behavior found in\n Scheme.","sig":null,"attributes":[{"value":"/ Parse `nil` as a regular symbol. This is the behavior found in","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52729,"byte_end":52795,"line_start":65,"line_end":65,"column_start":5,"column_end":71}},{"value":"/ Scheme.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52800,"byte_end":52811,"line_start":66,"line_end":66,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52816,"byte_end":52819,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ The parsed `Value` will be equal to `Value::symbol(\"nil\")`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52824,"byte_end":52887,"line_start":68,"line_end":68,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1543},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53101,"byte_end":53108,"line_start":75,"line_end":75,"column_start":5,"column_end":12},"name":"Special","qualname":"::parse::NilSymbol::Special","value":"NilSymbol::Special","parent":{"krate":0,"index":1538},"children":[],"decl_id":null,"docs":" Parse `nil` as a special value. This allows treating the `nil`\n symbol specially when processing the parsed data.","sig":null,"attributes":[{"value":"/ Parse `nil` as a special value. This allows treating the `nil`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52906,"byte_end":52972,"line_start":71,"line_end":71,"column_start":5,"column_end":71}},{"value":"/ symbol specially when processing the parsed data.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52977,"byte_end":53030,"line_start":72,"line_end":72,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53035,"byte_end":53038,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The parsed `Value` will be equal to `Value::Nil`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53043,"byte_end":53096,"line_start":74,"line_end":74,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":1538},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52421,"byte_end":52430,"line_start":56,"line_end":56,"column_start":10,"column_end":19},"name":"NilSymbol","qualname":"::parse::NilSymbol","value":"pub enum NilSymbol { EmptyList, Default, Special, }","parent":null,"children":[{"krate":0,"index":1539},{"krate":0,"index":1541},{"krate":0,"index":1543}],"decl_id":null,"docs":" Defines the treatment of the symbol `nil`.\n","sig":null,"attributes":[{"value":"/ Defines the treatment of the symbol `nil`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":52324,"byte_end":52370,"line_start":54,"line_end":54,"column_start":1,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1554},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53267,"byte_end":53271,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"True","qualname":"::parse::TSymbol::True","value":"TSymbol::True","parent":{"krate":0,"index":1553},"children":[],"decl_id":null,"docs":" Parse `t` as the boolean true value.\n","sig":null,"attributes":[{"value":"/ Parse `t` as the boolean true value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53222,"byte_end":53262,"line_start":81,"line_end":81,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1556},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53317,"byte_end":53324,"line_start":85,"line_end":85,"column_start":5,"column_end":12},"name":"Default","qualname":"::parse::TSymbol::Default","value":"TSymbol::Default","parent":{"krate":0,"index":1553},"children":[],"decl_id":null,"docs":" Parse `t` as a regular symbol.\n","sig":null,"attributes":[{"value":"/ Parse `t` as a regular symbol.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53278,"byte_end":53312,"line_start":84,"line_end":84,"column_start":5,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":1553},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53208,"byte_end":53215,"line_start":80,"line_end":80,"column_start":10,"column_end":17},"name":"TSymbol","qualname":"::parse::TSymbol","value":"pub enum TSymbol { True, Default, }","parent":null,"children":[{"krate":0,"index":1554},{"krate":0,"index":1556}],"decl_id":null,"docs":" Defines the treatment of the symbol `t`.\n","sig":null,"attributes":[{"value":"/ Defines the treatment of the symbol `t`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53113,"byte_end":53157,"line_start":78,"line_end":78,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1567},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53539,"byte_end":53543,"line_start":93,"line_end":93,"column_start":5,"column_end":9},"name":"List","qualname":"::parse::Brackets::List","value":"Brackets::List","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":" Brackets are synonymous with regular parentheses, and indicate a list,\n as in R6RS Scheme.\n","sig":null,"attributes":[{"value":"/ Brackets are synonymous with regular parentheses, and indicate a list,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53433,"byte_end":53507,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ as in R6RS Scheme.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53512,"byte_end":53534,"line_start":92,"line_end":92,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1569},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53606,"byte_end":53612,"line_start":96,"line_end":96,"column_start":5,"column_end":11},"name":"Vector","qualname":"::parse::Brackets::Vector","value":"Brackets::Vector","parent":{"krate":0,"index":1566},"children":[],"decl_id":null,"docs":" Brackets indicate a vector, like in Emacs Lisp.\n","sig":null,"attributes":[{"value":"/ Brackets indicate a vector, like in Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53550,"byte_end":53601,"line_start":95,"line_end":95,"column_start":5,"column_end":56}}]},{"kind":"Enum","id":{"krate":0,"index":1566},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53418,"byte_end":53426,"line_start":90,"line_end":90,"column_start":10,"column_end":18},"name":"Brackets","qualname":"::parse::Brackets","value":"pub enum Brackets { List, Vector, }","parent":null,"children":[{"krate":0,"index":1567},{"krate":0,"index":1569}],"decl_id":null,"docs":" Defines the treatment of brackets.\n","sig":null,"attributes":[{"value":"/ Defines the treatment of brackets.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53329,"byte_end":53367,"line_start":88,"line_end":88,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53787,"byte_end":53790,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<Options>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an empty set of options.","sig":null,"attributes":[{"value":"/ Construct an empty set of options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53636,"byte_end":53674,"line_start":100,"line_end":100,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53679,"byte_end":53682,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ This will recognize no keywords, and parse `nil` and `t` as","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53687,"byte_end":53750,"line_start":102,"line_end":102,"column_start":5,"column_end":68}},{"value":"/ regular symbols.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53755,"byte_end":53775,"line_start":103,"line_end":103,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":54162,"byte_end":54167,"line_start":116,"line_end":116,"column_start":12,"column_end":17},"name":"elisp","qualname":"<Options>::elisp","value":"pub fn elisp() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a set of options suitable for parsing Emacs Lisp.\n","sig":null,"attributes":[{"value":"/ Construct a set of options suitable for parsing Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":54087,"byte_end":54150,"line_start":115,"line_end":115,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":54534,"byte_end":54553,"line_start":126,"line_end":126,"column_start":12,"column_end":31},"name":"with_keyword_syntax","qualname":"<Options>::with_keyword_syntax","value":"pub fn with_keyword_syntax(Self, KeywordSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Add `syntax` to the recognized keyword syntaxes.\n","sig":null,"attributes":[{"value":"/ Add `syntax` to the recognized keyword syntaxes.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":54470,"byte_end":54522,"line_start":125,"line_end":125,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":54724,"byte_end":54745,"line_start":132,"line_end":132,"column_start":12,"column_end":33},"name":"with_keyword_syntaxes","qualname":"<Options>::with_keyword_syntaxes","value":"pub fn with_keyword_syntaxes<I, T>(Self, I) -> Self where I: IntoIterator<Item\n= T>, T: Borrow<KeywordSyntax>","parent":null,"children":[],"decl_id":null,"docs":" Set the recognized keyword syntaxes.\n","sig":null,"attributes":[{"value":"/ Set the recognized keyword syntaxes.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":54672,"byte_end":54712,"line_start":131,"line_end":131,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55080,"byte_end":55095,"line_start":144,"line_end":144,"column_start":12,"column_end":27},"name":"with_nil_symbol","qualname":"<Options>::with_nil_symbol","value":"pub fn with_nil_symbol(Self, NilSymbol) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Choose how to parse the `nil` symbol.\n","sig":null,"attributes":[{"value":"/ Choose how to parse the `nil` symbol.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55027,"byte_end":55068,"line_start":143,"line_end":143,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55250,"byte_end":55263,"line_start":150,"line_end":150,"column_start":12,"column_end":25},"name":"with_t_symbol","qualname":"<Options>::with_t_symbol","value":"pub fn with_t_symbol(Self, TSymbol) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Choose how to parse the `t` symbol.\n","sig":null,"attributes":[{"value":"/ Choose how to parse the `t` symbol.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55199,"byte_end":55238,"line_start":149,"line_end":149,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55409,"byte_end":55422,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"with_brackets","qualname":"<Options>::with_brackets","value":"pub fn with_brackets(Self, Brackets) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Choose how to handle brackets.\n","sig":null,"attributes":[{"value":"/ Choose how to handle brackets.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55363,"byte_end":55397,"line_start":155,"line_end":155,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55573,"byte_end":55591,"line_start":162,"line_end":162,"column_start":12,"column_end":30},"name":"with_string_syntax","qualname":"<Options>::with_string_syntax","value":"pub fn with_string_syntax(Self, StringSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Choose the accepted string syntax.\n","sig":null,"attributes":[{"value":"/ Choose the accepted string syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55523,"byte_end":55561,"line_start":161,"line_end":161,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55748,"byte_end":55764,"line_start":168,"line_end":168,"column_start":12,"column_end":28},"name":"with_char_syntax","qualname":"<Options>::with_char_syntax","value":"pub fn with_char_syntax(Self, CharSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Choose the accepted character syntax.\n","sig":null,"attributes":[{"value":"/ Choose the accepted character syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55695,"byte_end":55736,"line_start":167,"line_end":167,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55935,"byte_end":55949,"line_start":175,"line_end":175,"column_start":12,"column_end":26},"name":"keyword_syntax","qualname":"<Options>::keyword_syntax","value":"pub fn keyword_syntax(Self, KeywordSyntax) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check wether a keyword syntax is enabled.\n","sig":null,"attributes":[{"value":"/ Check wether a keyword syntax is enabled.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55864,"byte_end":55909,"line_start":173,"line_end":173,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":55914,"byte_end":55923,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":317},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56114,"byte_end":56124,"line_start":180,"line_end":180,"column_start":12,"column_end":22},"name":"nil_symbol","qualname":"<Options>::nil_symbol","value":"pub fn nil_symbol(Self) -> NilSymbol","parent":null,"children":[],"decl_id":null,"docs":" Query the way the `nil` symbol is handled.\n","sig":null,"attributes":[{"value":"/ Query the way the `nil` symbol is handled.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56056,"byte_end":56102,"line_start":179,"line_end":179,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56237,"byte_end":56245,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"t_symbol","qualname":"<Options>::t_symbol","value":"pub fn t_symbol(Self) -> TSymbol","parent":null,"children":[],"decl_id":null,"docs":" Query the way the `t` symbol is handled.\n","sig":null,"attributes":[{"value":"/ Query the way the `t` symbol is handled.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56181,"byte_end":56225,"line_start":184,"line_end":184,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56349,"byte_end":56357,"line_start":190,"line_end":190,"column_start":12,"column_end":20},"name":"brackets","qualname":"<Options>::brackets","value":"pub fn brackets(Self) -> Brackets","parent":null,"children":[],"decl_id":null,"docs":" Query the way brackets are handled.\n","sig":null,"attributes":[{"value":"/ Query the way brackets are handled.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56298,"byte_end":56337,"line_start":189,"line_end":189,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56460,"byte_end":56473,"line_start":195,"line_end":195,"column_start":12,"column_end":25},"name":"string_syntax","qualname":"<Options>::string_syntax","value":"pub fn string_syntax(Self) -> StringSyntax","parent":null,"children":[],"decl_id":null,"docs":" Query the accepted string syntax.\n","sig":null,"attributes":[{"value":"/ Query the accepted string syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56411,"byte_end":56448,"line_start":194,"line_end":194,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56588,"byte_end":56599,"line_start":200,"line_end":200,"column_start":12,"column_end":23},"name":"char_syntax","qualname":"<Options>::char_syntax","value":"pub fn char_syntax(Self) -> CharSyntax","parent":null,"children":[],"decl_id":null,"docs":" Query the accepted character syntax.\n","sig":null,"attributes":[{"value":"/ Query the accepted character syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56536,"byte_end":56576,"line_start":199,"line_end":199,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57999,"byte_end":58002,"line_start":254,"line_end":254,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an S-expression parser from one of the possible sexpr\n input sources.","sig":null,"attributes":[{"value":"/ Create an S-expression parser from one of the possible sexpr","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57701,"byte_end":57765,"line_start":245,"line_end":245,"column_start":5,"column_end":69}},{"value":"/ input sources.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57770,"byte_end":57788,"line_start":246,"line_end":246,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57793,"byte_end":57796,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Typically it is more convenient to use one of these methods","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57801,"byte_end":57864,"line_start":248,"line_end":248,"column_start":5,"column_end":68}},{"value":"/ instead:","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57869,"byte_end":57881,"line_start":249,"line_end":249,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57886,"byte_end":57889,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/   - `Parser::from_str`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57894,"byte_end":57920,"line_start":251,"line_end":251,"column_start":5,"column_end":31}},{"value":"/   - `Parser::from_slice`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57925,"byte_end":57953,"line_start":252,"line_end":252,"column_start":5,"column_end":33}},{"value":"/   - `Parser::from_reader`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57958,"byte_end":57987,"line_start":253,"line_end":253,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58535,"byte_end":58547,"line_start":272,"line_end":272,"column_start":12,"column_end":24},"name":"with_options","qualname":"<Parser<R>>::with_options","value":"pub fn with_options(R, Options) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a customized S-expression parser parser from one of the possible sexpr\n input sources.","sig":null,"attributes":[{"value":"/ Create a customized S-expression parser parser from one of the possible sexpr","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58199,"byte_end":58280,"line_start":263,"line_end":263,"column_start":5,"column_end":86}},{"value":"/ input sources.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58285,"byte_end":58303,"line_start":264,"line_end":264,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58308,"byte_end":58311,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ Typically it is more convenient to use one of these methods","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58316,"byte_end":58379,"line_start":266,"line_end":266,"column_start":5,"column_end":68}},{"value":"/ instead:","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58384,"byte_end":58396,"line_start":267,"line_end":267,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58401,"byte_end":58404,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/   - `Parser::from_str_custom`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58409,"byte_end":58442,"line_start":269,"line_end":269,"column_start":5,"column_end":38}},{"value":"/   - `Parser::from_slice_custom`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58447,"byte_end":58482,"line_start":270,"line_end":270,"column_start":5,"column_end":40}},{"value":"/   - `Parser::from_reader_custom`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58487,"byte_end":58523,"line_start":271,"line_end":271,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58867,"byte_end":58878,"line_start":287,"line_end":287,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Parser<read::IoRead<R>>>::from_reader","value":"pub fn from_reader(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an S-expression parser from an `io::Read`.\n","sig":null,"attributes":[{"value":"/ Creates an S-expression parser from an `io::Read`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58801,"byte_end":58855,"line_start":286,"line_end":286,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59024,"byte_end":59042,"line_start":292,"line_end":292,"column_start":12,"column_end":30},"name":"from_reader_custom","qualname":"<Parser<read::IoRead<R>>>::from_reader_custom","value":"pub fn from_reader_custom(R, Options) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an S-expression parser from an `io::Read`.\n","sig":null,"attributes":[{"value":"/ Creates an S-expression parser from an `io::Read`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58958,"byte_end":59012,"line_start":291,"line_end":291,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59261,"byte_end":59271,"line_start":299,"line_end":299,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Parser<read::SliceRead>>::from_slice","value":"pub fn from_slice(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an S-expression parser from a `&[u8]`.\n","sig":null,"attributes":[{"value":"/ Creates an S-expression parser from a `&[u8]`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59199,"byte_end":59249,"line_start":298,"line_end":298,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59421,"byte_end":59438,"line_start":304,"line_end":304,"column_start":12,"column_end":29},"name":"from_slice_custom","qualname":"<Parser<read::SliceRead>>::from_slice_custom","value":"pub fn from_slice_custom(&'a [u8], Options) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an S-expression parser from a `&[u8]`.\n","sig":null,"attributes":[{"value":"/ Creates an S-expression parser from a `&[u8]`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59359,"byte_end":59409,"line_start":303,"line_end":303,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":339},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59706,"byte_end":59714,"line_start":312,"line_end":312,"column_start":12,"column_end":20},"name":"from_str","qualname":"<Parser<read::StrRead>>::from_str","value":"pub fn from_str(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a S-expression parser from a `&str`.\n","sig":null,"attributes":[{"value":"/ Creates a S-expression parser from a `&str`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59601,"byte_end":59649,"line_start":310,"line_end":310,"column_start":5,"column_end":53}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59654,"byte_end":59694,"line_start":311,"line_end":311,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":340},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59896,"byte_end":59911,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_str_custom","qualname":"<Parser<read::StrRead>>::from_str_custom","value":"pub fn from_str_custom(&'a str, Options) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a S-expression parser from a `&str`.\n","sig":null,"attributes":[{"value":"/ Creates a S-expression parser from a `&str`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59791,"byte_end":59839,"line_start":316,"line_end":316,"column_start":5,"column_end":53}},{"value":"allow(clippy :: should_implement_trait)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59844,"byte_end":59884,"line_start":317,"line_end":317,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60641,"byte_end":60651,"line_start":339,"line_end":339,"column_start":12,"column_end":22},"name":"expect_end","qualname":"<Parser<R>>::expect_end","value":"pub fn expect_end(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Expect the end of input.","sig":null,"attributes":[{"value":"/ Expect the end of input.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60351,"byte_end":60379,"line_start":333,"line_end":333,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60384,"byte_end":60387,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ The `Parser::expect_end` method should be called after the last","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60392,"byte_end":60459,"line_start":335,"line_end":335,"column_start":5,"column_end":72}},{"value":"/ S-expression has been consumed.  This allows the parser` to validate","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60464,"byte_end":60536,"line_start":336,"line_end":336,"column_start":5,"column_end":77}},{"value":"/ that the input stream is at the end or that it only has trailing","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60541,"byte_end":60609,"line_start":337,"line_end":337,"column_start":5,"column_end":73}},{"value":"/ whitespace.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60614,"byte_end":60629,"line_start":338,"line_end":338,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":346},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60973,"byte_end":60976,"line_start":348,"line_end":348,"column_start":12,"column_end":15},"name":"end","qualname":"<Parser<R>>::end","value":"pub fn end(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Expect the end of input.\n","sig":null,"attributes":[{"value":"/ Expect the end of input.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60845,"byte_end":60873,"line_start":346,"line_end":346,"column_start":5,"column_end":33}},{"value":"deprecated(since = \"0.2.5\", note =\n             \"Please use the `expect_end` method instead\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60878,"byte_end":60961,"line_start":347,"line_end":347,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":355},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62962,"byte_end":62972,"line_start":415,"line_end":415,"column_start":12,"column_end":22},"name":"value_iter","qualname":"<Parser<R>>::value_iter","value":"pub fn value_iter(&mut Self) -> ValueIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Obtain an iterator over the values produced by the parser.","sig":null,"attributes":[{"value":"/ Obtain an iterator over the values produced by the parser.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62621,"byte_end":62683,"line_start":406,"line_end":406,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62688,"byte_end":62691,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62696,"byte_end":62703,"line_start":408,"line_end":408,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Parser;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62708,"byte_end":62732,"line_start":409,"line_end":409,"column_start":5,"column_end":29}},{"value":"/ let mut parser = Parser::from_str(r#\"foo (\"bar\" . 3.14) #:baz (1 2 3)\"#);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62737,"byte_end":62814,"line_start":410,"line_end":410,"column_start":5,"column_end":82}},{"value":"/ for value in parser.value_iter() {","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62819,"byte_end":62857,"line_start":411,"line_end":411,"column_start":5,"column_end":43}},{"value":"/     println!(\"parsed value: {}\", value.expect(\"parse error\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62862,"byte_end":62928,"line_start":412,"line_end":412,"column_start":5,"column_end":71}},{"value":"/ }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62933,"byte_end":62938,"line_start":413,"line_end":413,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":62943,"byte_end":62950,"line_start":414,"line_end":414,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63676,"byte_end":63686,"line_start":434,"line_end":434,"column_start":12,"column_end":22},"name":"datum_iter","qualname":"<Parser<R>>::datum_iter","value":"pub fn datum_iter(&mut Self) -> DatumIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Obtain an iterator over the values produced by the parser, including location information.","sig":null,"attributes":[{"value":"/ Obtain an iterator over the values produced by the parser, including location information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63041,"byte_end":63135,"line_start":419,"line_end":419,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63140,"byte_end":63143,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63148,"byte_end":63155,"line_start":421,"line_end":421,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Parser;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63160,"byte_end":63184,"line_start":422,"line_end":422,"column_start":5,"column_end":29}},{"value":"/ let mut parser = Parser::from_str(r#\"foo (\"bar\" . 3.14) #:baz (1 2 3)\"#);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63189,"byte_end":63266,"line_start":423,"line_end":423,"column_start":5,"column_end":82}},{"value":"/ for datum in parser.datum_iter() {","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63271,"byte_end":63309,"line_start":424,"line_end":424,"column_start":5,"column_end":43}},{"value":"/     let datum = datum.expect(\"parse error\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63314,"byte_end":63362,"line_start":425,"line_end":425,"column_start":5,"column_end":53}},{"value":"/     let span = datum.span();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63367,"byte_end":63399,"line_start":426,"line_end":426,"column_start":5,"column_end":37}},{"value":"/     let start = span.start();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63404,"byte_end":63437,"line_start":427,"line_end":427,"column_start":5,"column_end":38}},{"value":"/     let end = span.end();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63442,"byte_end":63471,"line_start":428,"line_end":428,"column_start":5,"column_end":34}},{"value":"/     println!(\"parsed datum at {}:{}--{}:{}: {}\", start.line(), start.column(),","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63476,"byte_end":63558,"line_start":429,"line_end":429,"column_start":5,"column_end":87}},{"value":"/              end.line(), end.column(),","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63563,"byte_end":63605,"line_start":430,"line_end":430,"column_start":5,"column_end":47}},{"value":"/              datum.value());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63610,"byte_end":63642,"line_start":431,"line_end":431,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63647,"byte_end":63652,"line_start":432,"line_end":432,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63657,"byte_end":63664,"line_start":433,"line_end":433,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":357},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63911,"byte_end":63922,"line_start":440,"line_end":440,"column_start":12,"column_end":23},"name":"parse_value","qualname":"<Parser<R>>::parse_value","value":"pub fn parse_value(&mut Self) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single S-expression from the input source.\n","sig":null,"attributes":[{"value":"/ Parse a single S-expression from the input source.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63755,"byte_end":63809,"line_start":438,"line_end":438,"column_start":5,"column_end":59}},{"value":"deprecated(since = \"0.2.5\", note =\n             \"Please use the `expect_value` method instead\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63814,"byte_end":63899,"line_start":439,"line_end":439,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64754,"byte_end":64766,"line_start":459,"line_end":459,"column_start":12,"column_end":24},"name":"expect_value","qualname":"<Parser<R>>::expect_value","value":"pub fn expect_value(&mut Self) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single S-expression from the input source.","sig":null,"attributes":[{"value":"/ Parse a single S-expression from the input source.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":63992,"byte_end":64046,"line_start":444,"line_end":444,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64051,"byte_end":64054,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ This expects an S-expression value to be actually present, and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64059,"byte_end":64125,"line_start":446,"line_end":446,"column_start":5,"column_end":71}},{"value":"/ returns an `Err` when called at the end of input. Use","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64130,"byte_end":64187,"line_start":447,"line_end":447,"column_start":5,"column_end":62}},{"value":"/ `Parser::value_iter()` if you need to handle end of input gracefully.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64192,"byte_end":64265,"line_start":448,"line_end":448,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64270,"byte_end":64273,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64278,"byte_end":64285,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, parse, Parser};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64290,"byte_end":64329,"line_start":451,"line_end":451,"column_start":5,"column_end":44}},{"value":"/ let mut parser = Parser::from_str(r#\"foo (\"bar\" . 3.14) #:baz (1 2 3)\"#);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64334,"byte_end":64411,"line_start":452,"line_end":452,"column_start":5,"column_end":82}},{"value":"/ assert_eq!(parser.expect_value().unwrap(), sexp!(foo));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64416,"byte_end":64475,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(parser.expect_value().unwrap(), sexp!((\"bar\" . 3.14)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64480,"byte_end":64550,"line_start":454,"line_end":454,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(parser.expect_value().unwrap(), sexp!(#:baz));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64555,"byte_end":64616,"line_start":455,"line_end":455,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(parser.expect_value().unwrap(), sexp!((1 2 3)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64621,"byte_end":64684,"line_start":456,"line_end":456,"column_start":5,"column_end":68}},{"value":"/ assert!(parser.expect_end().is_ok());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64689,"byte_end":64730,"line_start":457,"line_end":457,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":64735,"byte_end":64742,"line_start":458,"line_end":458,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":71457,"byte_end":71467,"line_start":612,"line_end":612,"column_start":12,"column_end":22},"name":"next_value","qualname":"<Parser<R>>::next_value","value":"pub fn next_value(&mut Self) -> Result<Option<Value>>","parent":null,"children":[],"decl_id":null,"docs":" Parse an S-expression, returning `None` on end-of-input.","sig":null,"attributes":[{"value":"/ Parse an S-expression, returning `None` on end-of-input.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":71205,"byte_end":71265,"line_start":607,"line_end":607,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":71270,"byte_end":71273,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ For consuming the entire sequence of parsed S-expression values, the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":71278,"byte_end":71350,"line_start":609,"line_end":609,"column_start":5,"column_end":77}},{"value":"/ `value_iter` method may be more convenient than calling this method in a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":71355,"byte_end":71431,"line_start":610,"line_end":610,"column_start":5,"column_end":81}},{"value":"/ loop.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":71436,"byte_end":71445,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":73850,"byte_end":73855,"line_start":673,"line_end":673,"column_start":12,"column_end":17},"name":"parse","qualname":"<Parser<R>>::parse","value":"pub fn parse(&mut Self) -> Result<Option<Value>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single S-expression from the input source.\n","sig":null,"attributes":[{"value":"/ Parse a single S-expression from the input source.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":73695,"byte_end":73749,"line_start":671,"line_end":671,"column_start":5,"column_end":59}},{"value":"deprecated(since = \"0.2.5\", note =\n             \"Please use the  `next_value` method instead\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":73754,"byte_end":73838,"line_start":672,"line_end":672,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":365},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74050,"byte_end":74062,"line_start":679,"line_end":679,"column_start":12,"column_end":24},"name":"expect_datum","qualname":"<Parser<R>>::expect_datum","value":"pub fn expect_datum(&mut Self) -> Result<Datum>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single S-expression including location information, returning an\n error on end-of-input.\n","sig":null,"attributes":[{"value":"/ Parse a single S-expression including location information, returning an","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":73931,"byte_end":74007,"line_start":677,"line_end":677,"column_start":5,"column_end":81}},{"value":"/ error on end-of-input.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74012,"byte_end":74038,"line_start":678,"line_end":678,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74544,"byte_end":74554,"line_start":691,"line_end":691,"column_start":12,"column_end":22},"name":"next_datum","qualname":"<Parser<R>>::next_datum","value":"pub fn next_datum(&mut Self) -> Result<Option<Datum>>","parent":null,"children":[],"decl_id":null,"docs":" Parse a single S-expression including location information.","sig":null,"attributes":[{"value":"/ Parse a single S-expression including location information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74223,"byte_end":74286,"line_start":684,"line_end":684,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74291,"byte_end":74294,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ When end of input is reached, `None` is returned.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74299,"byte_end":74352,"line_start":686,"line_end":686,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74357,"byte_end":74360,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ For consuming the entire sequence of parsed S-expression datums, the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74365,"byte_end":74437,"line_start":688,"line_end":688,"column_start":5,"column_end":77}},{"value":"/ `datum_iter` method may be more convenient than calling this method in a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74442,"byte_end":74518,"line_start":689,"line_end":689,"column_start":5,"column_end":81}},{"value":"/ loop.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":74523,"byte_end":74532,"line_start":690,"line_end":690,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":403},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102971,"byte_end":102989,"line_start":1403,"line_end":1403,"column_start":8,"column_end":26},"name":"from_reader_custom","qualname":"::parse::from_reader_custom","value":"pub fn from_reader_custom<impl io::Read: io::Read>(impl io::Read, Options)\n-> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from an IO stream containing a single S-expression.","sig":null,"attributes":[{"value":"/ Parse a value from an IO stream containing a single S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101762,"byte_end":101831,"line_start":1370,"line_end":1370,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101832,"byte_end":101835,"line_start":1371,"line_end":1371,"column_start":1,"column_end":4}},{"value":"/ The content of the IO stream is parsed directly from the stream","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101836,"byte_end":101903,"line_start":1372,"line_end":1372,"column_start":1,"column_end":68}},{"value":"/ without being buffered in memory.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101904,"byte_end":101941,"line_start":1373,"line_end":1373,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101942,"byte_end":101945,"line_start":1374,"line_end":1374,"column_start":1,"column_end":4}},{"value":"/ When reading from a source against which short reads are not efficient, such","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101946,"byte_end":102026,"line_start":1375,"line_end":1375,"column_start":1,"column_end":81}},{"value":"/ as a [`File`], you will want to apply your own buffering, e.g. using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102027,"byte_end":102099,"line_start":1376,"line_end":1376,"column_start":1,"column_end":73}},{"value":"/ [`std::io::BufReader`].","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102100,"byte_end":102127,"line_start":1377,"line_end":1377,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102128,"byte_end":102131,"line_start":1378,"line_end":1378,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102132,"byte_end":102145,"line_start":1379,"line_end":1379,"column_start":1,"column_end":14}},{"value":"/ use std::error::Error;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102146,"byte_end":102172,"line_start":1380,"line_end":1380,"column_start":1,"column_end":27}},{"value":"/ use std::fs::File;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102173,"byte_end":102195,"line_start":1381,"line_end":1381,"column_start":1,"column_end":23}},{"value":"/ use std::io::BufReader;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102196,"byte_end":102223,"line_start":1382,"line_end":1382,"column_start":1,"column_end":28}},{"value":"/ use std::path::Path;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102224,"byte_end":102248,"line_start":1383,"line_end":1383,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102249,"byte_end":102252,"line_start":1384,"line_end":1384,"column_start":1,"column_end":4}},{"value":"/ fn read_value_from_file<P: AsRef<Path>>(path: P) -> Result<lexpr::Value, Box<dyn Error>> {","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102253,"byte_end":102347,"line_start":1385,"line_end":1385,"column_start":1,"column_end":95}},{"value":"/     // Open the file in read-only mode with buffer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102348,"byte_end":102403,"line_start":1386,"line_end":1386,"column_start":1,"column_end":56}},{"value":"/     let file = File::open(path)?;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102404,"byte_end":102441,"line_start":1387,"line_end":1387,"column_start":1,"column_end":38}},{"value":"/     let reader = BufReader::new(file);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102442,"byte_end":102484,"line_start":1388,"line_end":1388,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102485,"byte_end":102488,"line_start":1389,"line_end":1389,"column_start":1,"column_end":4}},{"value":"/     // Read an arbitrary S-expression, using parser options suitable for Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102489,"byte_end":102577,"line_start":1390,"line_end":1390,"column_start":1,"column_end":89}},{"value":"/     let value = lexpr::from_reader_custom(reader, lexpr::parse::Options::elisp())?;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102578,"byte_end":102665,"line_start":1391,"line_end":1391,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102666,"byte_end":102669,"line_start":1392,"line_end":1392,"column_start":1,"column_end":4}},{"value":"/     // Return the value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102670,"byte_end":102698,"line_start":1393,"line_end":1393,"column_start":1,"column_end":29}},{"value":"/     Ok(value)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102699,"byte_end":102716,"line_start":1394,"line_end":1394,"column_start":1,"column_end":18}},{"value":"/ }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102717,"byte_end":102722,"line_start":1395,"line_end":1395,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102723,"byte_end":102726,"line_start":1396,"line_end":1396,"column_start":1,"column_end":4}},{"value":"/ let value = read_value_from_file(\"test.el\").unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102727,"byte_end":102784,"line_start":1397,"line_end":1397,"column_start":1,"column_end":58}},{"value":"/ println!(\"{:?}\", value);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102785,"byte_end":102813,"line_start":1398,"line_end":1398,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102814,"byte_end":102821,"line_start":1399,"line_end":1399,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102822,"byte_end":102825,"line_start":1400,"line_end":1400,"column_start":1,"column_end":4}},{"value":"/ [`File`]: https://doc.rust-lang.org/std/fs/struct.File.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102826,"byte_end":102889,"line_start":1401,"line_end":1401,"column_start":1,"column_end":64}},{"value":"/ [`BufReader`]: https://doc.rust-lang.org/std/io/struct.BufReader.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":102890,"byte_end":102963,"line_start":1402,"line_end":1402,"column_start":1,"column_end":74}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103313,"byte_end":103324,"line_start":1413,"line_end":1413,"column_start":8,"column_end":19},"name":"from_reader","qualname":"::parse::from_reader","value":"pub fn from_reader<impl io::Read: io::Read>(impl io::Read) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from an IO stream of S-expressions, using the default parser\n options.","sig":null,"attributes":[{"value":"/ Parse a value from an IO stream of S-expressions, using the default parser","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103098,"byte_end":103176,"line_start":1407,"line_end":1407,"column_start":1,"column_end":79}},{"value":"/ options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103177,"byte_end":103189,"line_start":1408,"line_end":1408,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103190,"byte_end":103193,"line_start":1409,"line_end":1409,"column_start":1,"column_end":4}},{"value":"/ See [`from_reader_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103194,"byte_end":103246,"line_start":1410,"line_end":1410,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103247,"byte_end":103250,"line_start":1411,"line_end":1411,"column_start":1,"column_end":4}},{"value":"/ [`from_reader_custom`]: fn.from_reader_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103251,"byte_end":103305,"line_start":1412,"line_end":1412,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":407},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103654,"byte_end":103671,"line_start":1423,"line_end":1423,"column_start":8,"column_end":25},"name":"from_reader_elisp","qualname":"::parse::from_reader_elisp","value":"pub fn from_reader_elisp<impl io::Read: io::Read>(impl io::Read)\n-> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from an IO stream of S-expressions, using the parser\n options suitable for parsing Emacs Lisp.","sig":null,"attributes":[{"value":"/ Parse a value from an IO stream of S-expressions, using the parser","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103415,"byte_end":103485,"line_start":1417,"line_end":1417,"column_start":1,"column_end":71}},{"value":"/ options suitable for parsing Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103486,"byte_end":103530,"line_start":1418,"line_end":1418,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103531,"byte_end":103534,"line_start":1419,"line_end":1419,"column_start":1,"column_end":4}},{"value":"/ See [`from_reader_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103535,"byte_end":103587,"line_start":1420,"line_end":1420,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103588,"byte_end":103591,"line_start":1421,"line_end":1421,"column_start":1,"column_end":4}},{"value":"/ [`from_reader_custom`]: fn.from_reader_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103592,"byte_end":103646,"line_start":1422,"line_end":1422,"column_start":1,"column_end":55}}]},{"kind":"Function","id":{"krate":0,"index":409},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103975,"byte_end":103992,"line_start":1433,"line_end":1433,"column_start":8,"column_end":25},"name":"from_slice_custom","qualname":"::parse::from_slice_custom","value":"pub fn from_slice_custom(&[u8], Options) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from bytes representing a single S-expression.","sig":null,"attributes":[{"value":"/ Parse a value from bytes representing a single S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103760,"byte_end":103824,"line_start":1427,"line_end":1427,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103825,"byte_end":103828,"line_start":1428,"line_end":1428,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103829,"byte_end":103836,"line_start":1429,"line_end":1429,"column_start":1,"column_end":8}},{"value":"/ let value = lexpr::from_slice_custom(b\"(a (nested) list)\", lexpr::parse::Options::new());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103837,"byte_end":103930,"line_start":1430,"line_end":1430,"column_start":1,"column_end":94}},{"value":"/ println!(\"{:?}\", value);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103931,"byte_end":103959,"line_start":1431,"line_end":1431,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":103960,"byte_end":103967,"line_start":1432,"line_end":1432,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104324,"byte_end":104334,"line_start":1443,"line_end":1443,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::parse::from_slice","value":"pub fn from_slice(&[u8]) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from bytes representing a single S-expressions, using the\n default parser options.","sig":null,"attributes":[{"value":"/ Parse a value from bytes representing a single S-expressions, using the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104100,"byte_end":104175,"line_start":1437,"line_end":1437,"column_start":1,"column_end":76}},{"value":"/ default parser options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104176,"byte_end":104203,"line_start":1438,"line_end":1438,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104204,"byte_end":104207,"line_start":1439,"line_end":1439,"column_start":1,"column_end":4}},{"value":"/ See [`from_slice_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104208,"byte_end":104259,"line_start":1440,"line_end":1440,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104260,"byte_end":104263,"line_start":1441,"line_end":1441,"column_start":1,"column_end":4}},{"value":"/ [`from_slice_custom`]: fn.from_slice_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104264,"byte_end":104316,"line_start":1442,"line_end":1442,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":411},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104656,"byte_end":104672,"line_start":1453,"line_end":1453,"column_start":8,"column_end":24},"name":"from_slice_elisp","qualname":"::parse::from_slice_elisp","value":"pub fn from_slice_elisp(&[u8]) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from bytes representing a single S-expressions, using parser\n options suitable for Emacs Lisp.","sig":null,"attributes":[{"value":"/ Parse a value from bytes representing a single S-expressions, using parser","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104420,"byte_end":104498,"line_start":1447,"line_end":1447,"column_start":1,"column_end":79}},{"value":"/ options suitable for Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104499,"byte_end":104535,"line_start":1448,"line_end":1448,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104536,"byte_end":104539,"line_start":1449,"line_end":1449,"column_start":1,"column_end":4}},{"value":"/ See [`from_slice_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104540,"byte_end":104591,"line_start":1450,"line_end":1450,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104592,"byte_end":104595,"line_start":1451,"line_end":1451,"column_start":1,"column_end":4}},{"value":"/ [`from_slice_custom`]: fn.from_slice_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104596,"byte_end":104648,"line_start":1452,"line_end":1452,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104977,"byte_end":104992,"line_start":1463,"line_end":1463,"column_start":8,"column_end":23},"name":"from_str_custom","qualname":"::parse::from_str_custom","value":"pub fn from_str_custom(&str, Options) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from a string slice representing a single S-expression.","sig":null,"attributes":[{"value":"/ Parse a value from a string slice representing a single S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104756,"byte_end":104829,"line_start":1457,"line_end":1457,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104830,"byte_end":104833,"line_start":1458,"line_end":1458,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104834,"byte_end":104841,"line_start":1459,"line_end":1459,"column_start":1,"column_end":8}},{"value":"/ let value = lexpr::from_str_custom(\"(a (nested) list)\", lexpr::parse::Options::new());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104842,"byte_end":104932,"line_start":1460,"line_end":1460,"column_start":1,"column_end":91}},{"value":"/ println!(\"{:?}\", value);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104933,"byte_end":104961,"line_start":1461,"line_end":1461,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":104962,"byte_end":104969,"line_start":1462,"line_end":1462,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":413},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105316,"byte_end":105324,"line_start":1473,"line_end":1473,"column_start":8,"column_end":16},"name":"from_str","qualname":"::parse::from_str","value":"pub fn from_str(&str) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from a string slice representing a single S-expressions, using\n the default parser options.","sig":null,"attributes":[{"value":"/ Parse a value from a string slice representing a single S-expressions, using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105089,"byte_end":105169,"line_start":1467,"line_end":1467,"column_start":1,"column_end":81}},{"value":"/ the default parser options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105170,"byte_end":105201,"line_start":1468,"line_end":1468,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105202,"byte_end":105205,"line_start":1469,"line_end":1469,"column_start":1,"column_end":4}},{"value":"/ See [`from_str_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105206,"byte_end":105255,"line_start":1470,"line_end":1470,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105256,"byte_end":105259,"line_start":1471,"line_end":1471,"column_start":1,"column_end":4}},{"value":"/ [`from_str_custom`]: fn.from_str_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105260,"byte_end":105308,"line_start":1472,"line_end":1472,"column_start":1,"column_end":49}}]},{"kind":"Function","id":{"krate":0,"index":414},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105637,"byte_end":105651,"line_start":1483,"line_end":1483,"column_start":8,"column_end":22},"name":"from_str_elisp","qualname":"::parse::from_str_elisp","value":"pub fn from_str_elisp(&str) -> Result<Value>","parent":null,"children":[],"decl_id":null,"docs":" Parse a value from a string slice representing a single S-expression, using\n parser options suitable for Emacs Lisp.","sig":null,"attributes":[{"value":"/ Parse a value from a string slice representing a single S-expression, using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105399,"byte_end":105478,"line_start":1477,"line_end":1477,"column_start":1,"column_end":80}},{"value":"/ parser options suitable for Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105479,"byte_end":105522,"line_start":1478,"line_end":1478,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105523,"byte_end":105526,"line_start":1479,"line_end":1479,"column_start":1,"column_end":4}},{"value":"/ See [`from_str_custom`] for more information.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105527,"byte_end":105576,"line_start":1480,"line_end":1480,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105577,"byte_end":105580,"line_start":1481,"line_end":1481,"column_start":1,"column_end":4}},{"value":"/ [`from_str_custom`]: fn.from_str_custom.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105581,"byte_end":105629,"line_start":1482,"line_end":1482,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":415},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105787,"byte_end":105796,"line_start":1488,"line_end":1488,"column_start":12,"column_end":21},"name":"ValueIter","qualname":"::parse::ValueIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Iterator over the values producedd by a parser.\n","sig":null,"attributes":[{"value":"/ Iterator over the values producedd by a parser.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105724,"byte_end":105775,"line_start":1487,"line_end":1487,"column_start":1,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":426},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":106335,"byte_end":106344,"line_start":1508,"line_end":1508,"column_start":12,"column_end":21},"name":"DatumIter","qualname":"::parse::DatumIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Iterator over the datums producedd by a parser.\n","sig":null,"attributes":[{"value":"/ Iterator over the datums producedd by a parser.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":106272,"byte_end":106323,"line_start":1507,"line_end":1507,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":437},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::parse::error","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":1623},{"krate":0,"index":1626},{"krate":0,"index":1628},{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":461},{"krate":0,"index":464},{"krate":0,"index":1638},{"krate":0,"index":1645},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526}],"decl_id":null,"docs":" When parsing S-expressions goes wrong.\n","sig":null,"attributes":[{"value":"/ When parsing S-expressions goes wrong.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":106893,"byte_end":106935,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":457},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107114,"byte_end":107119,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Error","qualname":"::parse::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":458}],"decl_id":null,"docs":" This type represents the possible errors when parsing S-expression\n data.\n","sig":null,"attributes":[{"value":"/ This type represents the possible errors when parsing S-expression","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107022,"byte_end":107092,"line_start":8,"line_end":8,"column_start":1,"column_end":71}},{"value":"/ data.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107093,"byte_end":107102,"line_start":9,"line_end":9,"column_start":1,"column_end":10}}]},{"kind":"Type","id":{"krate":0,"index":459},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107424,"byte_end":107430,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Result","qualname":"::parse::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Alias for a `Result` with the error type `lexpr::Error`.\n","sig":null,"attributes":[{"value":"/ Alias for a `Result` with the error type `lexpr::Error`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107354,"byte_end":107414,"line_start":17,"line_end":17,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1623},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107550,"byte_end":107558,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"Location","qualname":"::parse::error::Location","value":"Location {  }","parent":null,"children":[{"krate":0,"index":1624},{"krate":0,"index":1625}],"decl_id":null,"docs":" Location of a parse error.\n","sig":null,"attributes":[{"value":"/ Location of a parse error.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107463,"byte_end":107493,"line_start":20,"line_end":20,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107808,"byte_end":107812,"line_start":32,"line_end":32,"column_start":12,"column_end":16},"name":"line","qualname":"<Location>::line","value":"pub fn line(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" One-based line number at which the error was detected.","sig":null,"attributes":[{"value":"/ One-based line number at which the error was detected.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107620,"byte_end":107678,"line_start":28,"line_end":28,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107683,"byte_end":107686,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ Characters in the first line of the input (before the first newline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107691,"byte_end":107762,"line_start":30,"line_end":30,"column_start":5,"column_end":76}},{"value":"/ character) are in line 1.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107767,"byte_end":107796,"line_start":31,"line_end":31,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108236,"byte_end":108242,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"column","qualname":"<Location>::column","value":"pub fn column(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" One-based column number at which the error was detected.","sig":null,"attributes":[{"value":"/ One-based column number at which the error was detected.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107860,"byte_end":107920,"line_start":36,"line_end":36,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107925,"byte_end":107928,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The first character in the input and any characters immediately","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107933,"byte_end":108000,"line_start":38,"line_end":38,"column_start":5,"column_end":72}},{"value":"/ following a newline character are in column 1.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108005,"byte_end":108055,"line_start":39,"line_end":39,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108060,"byte_end":108063,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Note that errors may occur in column 0, for example if a read from an IO","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108068,"byte_end":108144,"line_start":41,"line_end":41,"column_start":5,"column_end":81}},{"value":"/ stream fails immediately following a previously read newline character.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108149,"byte_end":108224,"line_start":42,"line_end":42,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108365,"byte_end":108373,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"location","qualname":"<Error>::location","value":"pub fn location(&Self) -> Option<Location>","parent":null,"children":[],"decl_id":null,"docs":" Location of the error in the input stream.\n","sig":null,"attributes":[{"value":"/ Location of the error in the input stream.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108307,"byte_end":108353,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108719,"byte_end":108727,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"classify","qualname":"<Error>::classify","value":"pub fn classify(&Self) -> Category","parent":null,"children":[],"decl_id":null,"docs":" Categorizes the cause of this error.","sig":null,"attributes":[{"value":"/ Categorizes the cause of this error.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108440,"byte_end":108480,"line_start":54,"line_end":54,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108485,"byte_end":108488,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ - `Category::Io` - failure to read or write bytes on an IO stream","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108493,"byte_end":108562,"line_start":56,"line_end":56,"column_start":5,"column_end":74}},{"value":"/ - `Category::Syntax` - input that is not a syntactically valid S-experssion","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108567,"byte_end":108646,"line_start":57,"line_end":57,"column_start":5,"column_end":84}},{"value":"/ - `Category::Eof` - unexpected end of the input data","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108651,"byte_end":108707,"line_start":58,"line_end":58,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":467},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":109800,"byte_end":109805,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"is_io","qualname":"<Error>::is_io","value":"pub fn is_io(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error was caused by a failure to read or write\n bytes on an IO stream.\n","sig":null,"attributes":[{"value":"/ Returns true if this error was caused by a failure to read or write","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":109686,"byte_end":109757,"line_start":83,"line_end":83,"column_start":5,"column_end":76}},{"value":"/ bytes on an IO stream.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":109762,"byte_end":109788,"line_start":84,"line_end":84,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":109993,"byte_end":110002,"line_start":91,"line_end":91,"column_start":12,"column_end":21},"name":"is_syntax","qualname":"<Error>::is_syntax","value":"pub fn is_syntax(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error was caused by input that was not\n a syntactically valid S-expression.\n","sig":null,"attributes":[{"value":"/ Returns true if this error was caused by input that was not","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":109874,"byte_end":109937,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"/ a syntactically valid S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":109942,"byte_end":109981,"line_start":90,"line_end":90,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":469},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110327,"byte_end":110333,"line_start":100,"line_end":100,"column_start":12,"column_end":18},"name":"is_eof","qualname":"<Error>::is_eof","value":"pub fn is_eof(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this error was caused by prematurely reaching the end of\n the input data.","sig":null,"attributes":[{"value":"/ Returns true if this error was caused by prematurely reaching the end of","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110075,"byte_end":110151,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/ the input data.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110156,"byte_end":110175,"line_start":96,"line_end":96,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110180,"byte_end":110183,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ Callers that process streaming input may be interested in retrying the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110188,"byte_end":110262,"line_start":98,"line_end":98,"column_start":5,"column_end":79}},{"value":"/ deserialization once more data is available.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110267,"byte_end":110315,"line_start":99,"line_end":99,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1639},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110605,"byte_end":110607,"line_start":109,"line_end":109,"column_start":5,"column_end":7},"name":"Io","qualname":"::parse::error::Category::Io","value":"Category::Io","parent":{"krate":0,"index":1638},"children":[],"decl_id":null,"docs":" The error was caused by a failure to read or bytes from an input source.\n","sig":null,"attributes":[{"value":"/ The error was caused by a failure to read or bytes from an input source.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110524,"byte_end":110600,"line_start":108,"line_end":108,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1641},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110709,"byte_end":110715,"line_start":113,"line_end":113,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::parse::error::Category::Syntax","value":"Category::Syntax","parent":{"krate":0,"index":1638},"children":[],"decl_id":null,"docs":" The error was caused by input that was not a syntactically valid\n S-expression.\n","sig":null,"attributes":[{"value":"/ The error was caused by input that was not a syntactically valid","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110614,"byte_end":110682,"line_start":111,"line_end":111,"column_start":5,"column_end":73}},{"value":"/ S-expression.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110687,"byte_end":110704,"line_start":112,"line_end":112,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1643},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110942,"byte_end":110945,"line_start":119,"line_end":119,"column_start":5,"column_end":8},"name":"Eof","qualname":"::parse::error::Category::Eof","value":"Category::Eof","parent":{"krate":0,"index":1638},"children":[],"decl_id":null,"docs":" The error was caused by prematurely reaching the end of the input data.","sig":null,"attributes":[{"value":"/ The error was caused by prematurely reaching the end of the input data.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110722,"byte_end":110797,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110802,"byte_end":110805,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Callers that process streaming input may be interested in retrying the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110810,"byte_end":110884,"line_start":117,"line_end":117,"column_start":5,"column_end":79}},{"value":"/ deserialization once more data is available.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110889,"byte_end":110937,"line_start":118,"line_end":118,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":1638},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110509,"byte_end":110517,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Category","qualname":"::parse::error::Category","value":"pub enum Category { Io, Syntax, Eof, }","parent":null,"children":[{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643}],"decl_id":null,"docs":" Categorizes the cause of a `lexpr::parse::Error`.\n","sig":null,"attributes":[{"value":"/ Categorizes the cause of a `lexpr::parse::Error`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110401,"byte_end":110454,"line_start":105,"line_end":105,"column_start":1,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":581},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119515,"byte_end":119519,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"Read","qualname":"::parse::read::Read","value":"Read<'de>: private::Sealed","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":596}],"decl_id":null,"docs":" Trait used by the parser for iterating over input.","sig":null,"attributes":[{"value":"/ Trait used by the parser for iterating over input.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119207,"byte_end":119261,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119262,"byte_end":119265,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This trait is manually \"specialized\" for iterating over","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119266,"byte_end":119325,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ `&[u8]`. Once feature(specialization) is stable we can use actual","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119326,"byte_end":119395,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ specialization.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119396,"byte_end":119415,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119416,"byte_end":119419,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented for types outside of","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119420,"byte_end":119491,"line_start":13,"line_end":13,"column_start":1,"column_end":72}},{"value":"/ `lexpr`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119492,"byte_end":119504,"line_start":14,"line_end":14,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119570,"byte_end":119574,"line_start":17,"line_end":17,"column_start":8,"column_end":12},"name":"next","qualname":"::parse::read::Read::next","value":"pub fn next(&mut Self) -> Result<Option<u8>>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119635,"byte_end":119639,"line_start":19,"line_end":19,"column_start":8,"column_end":12},"name":"peek","qualname":"::parse::read::Read::peek","value":"pub fn peek(&mut Self) -> Result<Option<u8>>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119770,"byte_end":119777,"line_start":23,"line_end":23,"column_start":8,"column_end":15},"name":"discard","qualname":"::parse::read::Read::discard","value":"pub fn discard(&mut Self)","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Only valid after a call to peek(). Discards the peeked byte.\n","sig":null,"attributes":[{"value":"/ Only valid after a call to peek(). Discards the peeked byte.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119679,"byte_end":119743,"line_start":21,"line_end":21,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120169,"byte_end":120177,"line_start":33,"line_end":33,"column_start":8,"column_end":16},"name":"position","qualname":"::parse::read::Read::position","value":"pub fn position(&Self) -> Position","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Position of the most recent call to next().","sig":null,"attributes":[{"value":"/ Position of the most recent call to next().","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119795,"byte_end":119842,"line_start":25,"line_end":25,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119847,"byte_end":119850,"line_start":26,"line_end":26,"column_start":5,"column_end":8}},{"value":"/ The most recent call was probably next() and not peek(), but this method","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119855,"byte_end":119931,"line_start":27,"line_end":27,"column_start":5,"column_end":81}},{"value":"/ should try to return a sensible result if the most recent call was","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119936,"byte_end":120006,"line_start":28,"line_end":28,"column_start":5,"column_end":75}},{"value":"/ actually peek() because we don't always know.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120011,"byte_end":120060,"line_start":29,"line_end":29,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120065,"byte_end":120068,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Only called in case of an error, so performance is not important.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120073,"byte_end":120142,"line_start":31,"line_end":31,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120577,"byte_end":120590,"line_start":43,"line_end":43,"column_start":8,"column_end":21},"name":"peek_position","qualname":"::parse::read::Read::peek_position","value":"pub fn peek_position(&Self) -> Position","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Position of the most recent call to peek().","sig":null,"attributes":[{"value":"/ Position of the most recent call to peek().","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120203,"byte_end":120250,"line_start":35,"line_end":35,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120255,"byte_end":120258,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The most recent call was probably peek() and not next(), but this method","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120263,"byte_end":120339,"line_start":37,"line_end":37,"column_start":5,"column_end":81}},{"value":"/ should try to return a sensible result if the most recent call was","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120344,"byte_end":120414,"line_start":38,"line_end":38,"column_start":5,"column_end":75}},{"value":"/ actually next() because we don't always know.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120419,"byte_end":120468,"line_start":39,"line_end":39,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120473,"byte_end":120476,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ Only called in case of an error, so performance is not important.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120481,"byte_end":120550,"line_start":41,"line_end":41,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120754,"byte_end":120765,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"byte_offset","qualname":"::parse::read::Read::byte_offset","value":"pub fn byte_offset(&Self) -> usize","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Offset from the beginning of the input to the next byte that would be\n returned by next() or peek().\n","sig":null,"attributes":[{"value":"/ Offset from the beginning of the input to the next byte that would be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120616,"byte_end":120689,"line_start":45,"line_end":45,"column_start":5,"column_end":78}},{"value":"/ returned by next() or peek().","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120694,"byte_end":120727,"line_start":46,"line_end":46,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121028,"byte_end":121042,"line_start":54,"line_end":54,"column_start":8,"column_end":22},"name":"parse_r6rs_str","qualname":"::parse::read::Read::parse_r6rs_str","value":"pub fn parse_r6rs_str<'s>(&'s mut Self, &'s mut Vec<u8>) -> Result<Reference>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Assumes the previous byte was a quotation mark. Parses a string with\n R6RS escapes until the next quotation mark using the given scratch space\n if necessary. The scratch space is initially empty.\n","sig":null,"attributes":[{"value":"/ Assumes the previous byte was a quotation mark. Parses a string with","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120788,"byte_end":120860,"line_start":50,"line_end":50,"column_start":5,"column_end":77}},{"value":"/ R6RS escapes until the next quotation mark using the given scratch space","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120865,"byte_end":120941,"line_start":51,"line_end":51,"column_start":5,"column_end":81}},{"value":"/ if necessary. The scratch space is initially empty.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":120946,"byte_end":121001,"line_start":52,"line_end":52,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121397,"byte_end":121412,"line_start":63,"line_end":63,"column_start":8,"column_end":23},"name":"parse_elisp_str","qualname":"::parse::read::Read::parse_elisp_str","value":"pub fn parse_elisp_str<'s>(&'s mut Self, &'s mut Vec<u8>)\n-> Result<ElispStrReference>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Assumes the previous byte was a quotation mark. Parses a string with\n Emacs Lisp escapes until the next quotation mark using the given scratch\n space if necessary. The scratch space is initially empty.\n","sig":null,"attributes":[{"value":"/ Assumes the previous byte was a quotation mark. Parses a string with","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121151,"byte_end":121223,"line_start":59,"line_end":59,"column_start":5,"column_end":77}},{"value":"/ Emacs Lisp escapes until the next quotation mark using the given scratch","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121228,"byte_end":121304,"line_start":60,"line_end":60,"column_start":5,"column_end":81}},{"value":"/ space if necessary. The scratch space is initially empty.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121309,"byte_end":121370,"line_start":61,"line_end":61,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121623,"byte_end":121635,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"parse_symbol","qualname":"::parse::read::Read::parse_symbol","value":"pub fn parse_symbol<'s>(&'s mut Self, &'s mut Vec<u8>) -> Result<Reference>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Parses an unescaped string until the next whitespace or list close..\n","sig":null,"attributes":[{"value":"/ Parses an unescaped string until the next whitespace or list close..","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121524,"byte_end":121596,"line_start":68,"line_end":68,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121785,"byte_end":121800,"line_start":74,"line_end":74,"column_start":8,"column_end":23},"name":"parse_r6rs_char","qualname":"::parse::read::Read::parse_r6rs_char","value":"pub fn parse_r6rs_char(&mut Self, &mut Vec<u8>) -> Result<char>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Parses a R6RS character constant.\n","sig":null,"attributes":[{"value":"/ Parses a R6RS character constant.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":121721,"byte_end":121758,"line_start":72,"line_end":72,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122074,"byte_end":122090,"line_start":81,"line_end":81,"column_start":8,"column_end":24},"name":"parse_elisp_char","qualname":"::parse::read::Read::parse_elisp_char","value":"pub fn parse_elisp_char(&mut Self, &mut Vec<u8>) -> Result<char>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":" Parses an Emacs Lisp character constant.\n","sig":null,"attributes":[{"value":"/ Parses an Emacs Lisp character constant.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122022,"byte_end":122066,"line_start":80,"line_end":80,"column_start":5,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":1656},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122425,"byte_end":122433,"line_start":90,"line_end":90,"column_start":12,"column_end":20},"name":"Position","qualname":"::parse::read::Position","value":"Position {  }","parent":null,"children":[{"krate":0,"index":1657},{"krate":0,"index":1658}],"decl_id":null,"docs":" A location in the parsed text.\n","sig":null,"attributes":[{"value":"/ A location in the parsed text.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122311,"byte_end":122345,"line_start":88,"line_end":88,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122644,"byte_end":122648,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"line","qualname":"<Position>::line","value":"pub fn line(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the 1-based line number.\n","sig":null,"attributes":[{"value":"/ Returns the 1-based line number.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122596,"byte_end":122632,"line_start":100,"line_end":100,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122832,"byte_end":122838,"line_start":108,"line_end":108,"column_start":12,"column_end":18},"name":"column","qualname":"<Position>::column","value":"pub fn column(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the column.","sig":null,"attributes":[{"value":"/ Returns the column.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122695,"byte_end":122718,"line_start":104,"line_end":104,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122723,"byte_end":122726,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Column numbers are 0-based byte offsets from the last line terminator","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122731,"byte_end":122804,"line_start":106,"line_end":106,"column_start":5,"column_end":78}},{"value":"/ (`\\n`).","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122809,"byte_end":122820,"line_start":107,"line_end":107,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":605},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122940,"byte_end":122948,"line_start":114,"line_end":114,"column_start":5,"column_end":13},"name":"Borrowed","qualname":"::parse::read::Reference::Borrowed","value":"Reference::Borrowed(&'b T)","parent":{"krate":0,"index":601},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":608},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122961,"byte_end":122967,"line_start":115,"line_end":115,"column_start":5,"column_end":11},"name":"Copied","qualname":"::parse::read::Reference::Copied","value":"Reference::Copied(&'c T)","parent":{"krate":0,"index":601},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":601},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122895,"byte_end":122904,"line_start":113,"line_end":113,"column_start":10,"column_end":19},"name":"Reference","qualname":"::parse::read::Reference","value":"pub enum Reference<'b, 'c, T: ?Sized + 'static> {\n    Borrowed(&'b T),\n    Copied(&'c T),\n}","parent":null,"children":[{"krate":0,"index":605},{"krate":0,"index":608}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1681},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123275,"byte_end":123282,"line_start":131,"line_end":131,"column_start":5,"column_end":12},"name":"Unibyte","qualname":"::parse::read::ElispStr::Unibyte","value":"ElispStr::Unibyte(U)","parent":{"krate":0,"index":1678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1684},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123291,"byte_end":123300,"line_start":132,"line_end":132,"column_start":5,"column_end":14},"name":"Multibyte","qualname":"::parse::read::ElispStr::Multibyte","value":"ElispStr::Multibyte(M)","parent":{"krate":0,"index":1678},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1678},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123254,"byte_end":123262,"line_start":130,"line_end":130,"column_start":10,"column_end":18},"name":"ElispStr","qualname":"::parse::read::ElispStr","value":"pub enum ElispStr<U, M> { Unibyte(U), Multibyte(M), }","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1684}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":620},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123572,"byte_end":123578,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"name":"IoRead","qualname":"::parse::read::IoRead","value":"IoRead {  }","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623}],"decl_id":null,"docs":" S-expression input source that reads from a std::io input stream.\n","sig":null,"attributes":[{"value":"/ S-expression input source that reads from a std::io input stream.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123491,"byte_end":123560,"line_start":144,"line_end":144,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":624},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123936,"byte_end":123945,"line_start":158,"line_end":158,"column_start":12,"column_end":21},"name":"SliceRead","qualname":"::parse::read::SliceRead","value":"SliceRead {  }","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"decl_id":null,"docs":" S-expression input source that reads from a slice of bytes.\n","sig":null,"attributes":[{"value":"/ S-expression input source that reads from a slice of bytes.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123713,"byte_end":123776,"line_start":154,"line_end":154,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":628},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124219,"byte_end":124226,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"StrRead","qualname":"::parse::read::StrRead","value":"StrRead {  }","parent":null,"children":[{"krate":0,"index":630}],"decl_id":null,"docs":" S-expression input source that reads from a UTF-8 string.\n","sig":null,"attributes":[{"value":"/ S-expression input source that reads from a UTF-8 string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124070,"byte_end":124131,"line_start":164,"line_end":164,"column_start":1,"column_end":62}}]},{"kind":"Trait","id":{"krate":0,"index":632},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124344,"byte_end":124350,"line_start":173,"line_end":173,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::parse::read::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124571,"byte_end":124574,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"new","qualname":"<IoRead<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a S-expression input source to read from a std::io input stream.\n","sig":null,"attributes":[{"value":"/ Create a S-expression input source to read from a std::io input stream.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124484,"byte_end":124559,"line_start":182,"line_end":182,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":129321,"byte_end":129324,"line_start":352,"line_end":352,"column_start":12,"column_end":15},"name":"new","qualname":"<SliceRead>::new","value":"pub fn new(&'a [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a S-expression input source to read from a slice of bytes.\n","sig":null,"attributes":[{"value":"/ Create a S-expression input source to read from a slice of bytes.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":129240,"byte_end":129309,"line_start":351,"line_end":351,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138191,"byte_end":138194,"line_start":603,"line_end":603,"column_start":12,"column_end":15},"name":"new","qualname":"<StrRead>::new","value":"pub fn new(&'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a S-expression input source to read from a UTF-8 string.\n","sig":null,"attributes":[{"value":"/ Create a S-expression input source to read from a UTF-8 string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138112,"byte_end":138179,"line_start":602,"line_end":602,"column_start":5,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":800},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"print","qualname":"::print","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":815},{"krate":0,"index":818},{"krate":0,"index":821},{"krate":0,"index":1700},{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":824},{"krate":0,"index":833},{"krate":0,"index":1713},{"krate":0,"index":1722},{"krate":0,"index":1724},{"krate":0,"index":1726},{"krate":0,"index":1727},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1742},{"krate":0,"index":1744},{"krate":0,"index":1746},{"krate":0,"index":1747},{"krate":0,"index":1754},{"krate":0,"index":1756},{"krate":0,"index":1758},{"krate":0,"index":835},{"krate":0,"index":853},{"krate":0,"index":855},{"krate":0,"index":860},{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":915},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":916},{"krate":0,"index":1771},{"krate":0,"index":1776},{"krate":0,"index":936},{"krate":0,"index":939},{"krate":0,"index":949},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":968},{"krate":0,"index":973},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001}],"decl_id":null,"docs":" Converting S-expression values into text.","sig":null,"attributes":[{"value":"/ Converting S-expression values into text.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159409,"byte_end":159454,"line_start":1,"line_end":1,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159455,"byte_end":159458,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Terminology","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159459,"byte_end":159476,"line_start":3,"line_end":3,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159477,"byte_end":159480,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The process of serializing S-expressions to their textual","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159481,"byte_end":159542,"line_start":5,"line_end":5,"column_start":1,"column_end":62}},{"value":"/ representation is referred to \"writing\" in Lisp. To avoid","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159543,"byte_end":159604,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ confusion with Rust's `Write` trait, `lexpr` uses \"printing\"","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159605,"byte_end":159669,"line_start":7,"line_end":7,"column_start":1,"column_end":65}},{"value":"/ instead.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159670,"byte_end":159682,"line_start":8,"line_end":8,"column_start":1,"column_end":13}}]},{"kind":"Struct","id":{"krate":0,"index":1700},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159899,"byte_end":159906,"line_start":18,"line_end":18,"column_start":12,"column_end":19},"name":"Options","qualname":"::print::Options","value":"Options {  }","parent":null,"children":[{"krate":0,"index":1701},{"krate":0,"index":1702},{"krate":0,"index":1703},{"krate":0,"index":1704},{"krate":0,"index":1705},{"krate":0,"index":1706},{"krate":0,"index":1707}],"decl_id":null,"docs":" Options for printing S-expressions.\n","sig":null,"attributes":[{"value":"/ Options for printing S-expressions.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":159818,"byte_end":159857,"line_start":16,"line_end":16,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160418,"byte_end":160423,"line_start":34,"line_end":34,"column_start":12,"column_end":17},"name":"elisp","qualname":"<Options>::elisp","value":"pub fn elisp() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct parser options suitable for printing Emacs Lisp.","sig":null,"attributes":[{"value":"/ Construct parser options suitable for printing Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160148,"byte_end":160210,"line_start":29,"line_end":29,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160215,"byte_end":160218,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Keywords will use prefix notation (i.e. `:some-keyword`), the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160223,"byte_end":160288,"line_start":31,"line_end":31,"column_start":5,"column_end":70}},{"value":"/ special nil value will be represented as a symbol, and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160293,"byte_end":160351,"line_start":32,"line_end":32,"column_start":5,"column_end":63}},{"value":"/ booleans will be represented by `nil` and `t`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160356,"byte_end":160406,"line_start":33,"line_end":33,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160868,"byte_end":160887,"line_start":47,"line_end":47,"column_start":12,"column_end":31},"name":"with_keyword_syntax","qualname":"<Options>::with_keyword_syntax","value":"pub fn with_keyword_syntax(Self, KeywordSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the syntax to use for printing keywords.\n","sig":null,"attributes":[{"value":"/ Set the syntax to use for printing keywords.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160808,"byte_end":160856,"line_start":46,"line_end":46,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":827},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161062,"byte_end":161077,"line_start":53,"line_end":53,"column_start":12,"column_end":27},"name":"with_nil_syntax","qualname":"<Options>::with_nil_syntax","value":"pub fn with_nil_syntax(Self, NilSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the syntax to use to print the special nil value.\n","sig":null,"attributes":[{"value":"/ Set the syntax to use to print the special nil value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160993,"byte_end":161050,"line_start":52,"line_end":52,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161237,"byte_end":161253,"line_start":59,"line_end":59,"column_start":12,"column_end":28},"name":"with_bool_syntax","qualname":"<Options>::with_bool_syntax","value":"pub fn with_bool_syntax(Self, BoolSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the syntax to use to print boolean values.\n","sig":null,"attributes":[{"value":"/ Set the syntax to use to print boolean values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161175,"byte_end":161225,"line_start":58,"line_end":58,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161405,"byte_end":161423,"line_start":65,"line_end":65,"column_start":12,"column_end":30},"name":"with_vector_syntax","qualname":"<Options>::with_vector_syntax","value":"pub fn with_vector_syntax(Self, VectorSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the syntax for printing vectors.\n","sig":null,"attributes":[{"value":"/ Set the syntax for printing vectors.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161353,"byte_end":161393,"line_start":64,"line_end":64,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161591,"byte_end":161608,"line_start":71,"line_end":71,"column_start":12,"column_end":29},"name":"with_bytes_syntax","qualname":"<Options>::with_bytes_syntax","value":"pub fn with_bytes_syntax(Self, BytesSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the syntax to use for printing byte vectors.\n","sig":null,"attributes":[{"value":"/ Set the syntax to use for printing byte vectors.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161527,"byte_end":161579,"line_start":70,"line_end":70,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161767,"byte_end":161785,"line_start":77,"line_end":77,"column_start":12,"column_end":30},"name":"with_string_syntax","qualname":"<Options>::with_string_syntax","value":"pub fn with_string_syntax(Self, StringSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the syntax used for printing strings.\n","sig":null,"attributes":[{"value":"/ Set the syntax used for printing strings.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161710,"byte_end":161755,"line_start":76,"line_end":76,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161949,"byte_end":161965,"line_start":83,"line_end":83,"column_start":12,"column_end":28},"name":"with_char_syntax","qualname":"<Options>::with_char_syntax","value":"pub fn with_char_syntax(Self, CharSyntax) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Set the syntax used for printing characters.\n","sig":null,"attributes":[{"value":"/ Set the syntax used for printing characters.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":161889,"byte_end":161937,"line_start":82,"line_end":82,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1714},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162609,"byte_end":162615,"line_start":107,"line_end":107,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::print::NilSyntax::Symbol","value":"NilSyntax::Symbol","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Output a `nil` symbol.\n","sig":null,"attributes":[{"value":"/ Output a `nil` symbol.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162578,"byte_end":162604,"line_start":106,"line_end":106,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1716},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162654,"byte_end":162659,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Token","qualname":"::print::NilSyntax::Token","value":"NilSyntax::Token","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Output the `#nil` token.\n","sig":null,"attributes":[{"value":"/ Output the `#nil` token.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162621,"byte_end":162649,"line_start":108,"line_end":108,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1718},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162696,"byte_end":162705,"line_start":111,"line_end":111,"column_start":5,"column_end":14},"name":"EmptyList","qualname":"::print::NilSyntax::EmptyList","value":"NilSyntax::EmptyList","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Output the empty list.\n","sig":null,"attributes":[{"value":"/ Output the empty list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162665,"byte_end":162691,"line_start":110,"line_end":110,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1720},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162749,"byte_end":162754,"line_start":113,"line_end":113,"column_start":5,"column_end":10},"name":"False","qualname":"::print::NilSyntax::False","value":"NilSyntax::False","parent":{"krate":0,"index":1713},"children":[],"decl_id":null,"docs":" Output a boolean false value.\n","sig":null,"attributes":[{"value":"/ Output a boolean false value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162711,"byte_end":162744,"line_start":112,"line_end":112,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":1713},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162562,"byte_end":162571,"line_start":105,"line_end":105,"column_start":10,"column_end":19},"name":"NilSyntax","qualname":"::print::NilSyntax","value":"pub enum NilSyntax { Symbol, Token, EmptyList, False, }","parent":null,"children":[{"krate":0,"index":1714},{"krate":0,"index":1716},{"krate":0,"index":1718},{"krate":0,"index":1720}],"decl_id":null,"docs":" How to print the special nil value.\n","sig":null,"attributes":[{"value":"/ How to print the special nil value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162483,"byte_end":162522,"line_start":103,"line_end":103,"column_start":1,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162892,"byte_end":162897,"line_start":120,"line_end":120,"column_start":5,"column_end":10},"name":"Token","qualname":"::print::BoolSyntax::Token","value":"BoolSyntax::Token","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Use the Scheme tokens `#t` and `#f`\n","sig":null,"attributes":[{"value":"/ Use the Scheme tokens `#t` and `#f`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162848,"byte_end":162887,"line_start":119,"line_end":119,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1730},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162938,"byte_end":162944,"line_start":122,"line_end":122,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::print::BoolSyntax::Symbol","value":"BoolSyntax::Symbol","parent":{"krate":0,"index":1727},"children":[],"decl_id":null,"docs":" Use symbols `nil` and `t`.\n","sig":null,"attributes":[{"value":"/ Use symbols `nil` and `t`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162903,"byte_end":162933,"line_start":121,"line_end":121,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162831,"byte_end":162841,"line_start":118,"line_end":118,"column_start":10,"column_end":20},"name":"BoolSyntax","qualname":"::print::BoolSyntax","value":"pub enum BoolSyntax { Token, Symbol, }","parent":null,"children":[{"krate":0,"index":1728},{"krate":0,"index":1730}],"decl_id":null,"docs":" How to print boolean values.\n","sig":null,"attributes":[{"value":"/ How to print boolean values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162759,"byte_end":162791,"line_start":116,"line_end":116,"column_start":1,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1738},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163077,"byte_end":163087,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"Octothorpe","qualname":"::print::VectorSyntax::Octothorpe","value":"VectorSyntax::Octothorpe","parent":{"krate":0,"index":1737},"children":[],"decl_id":null,"docs":" Use Scheme notation, i.e. `#(...)`.\n","sig":null,"attributes":[{"value":"/ Use Scheme notation, i.e. `#(...)`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163033,"byte_end":163072,"line_start":128,"line_end":128,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1740},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163138,"byte_end":163146,"line_start":131,"line_end":131,"column_start":5,"column_end":13},"name":"Brackets","qualname":"::print::VectorSyntax::Brackets","value":"VectorSyntax::Brackets","parent":{"krate":0,"index":1737},"children":[],"decl_id":null,"docs":" Use brackets, as used in Emacs Lisp.\n","sig":null,"attributes":[{"value":"/ Use brackets, as used in Emacs Lisp.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163093,"byte_end":163133,"line_start":130,"line_end":130,"column_start":5,"column_end":45}}]},{"kind":"Enum","id":{"krate":0,"index":1737},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163014,"byte_end":163026,"line_start":127,"line_end":127,"column_start":10,"column_end":22},"name":"VectorSyntax","qualname":"::print::VectorSyntax","value":"pub enum VectorSyntax { Octothorpe, Brackets, }","parent":null,"children":[{"krate":0,"index":1738},{"krate":0,"index":1740}],"decl_id":null,"docs":" How to print vectors.\n","sig":null,"attributes":[{"value":"/ How to print vectors.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162949,"byte_end":162974,"line_start":125,"line_end":125,"column_start":1,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1748},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163296,"byte_end":163300,"line_start":138,"line_end":138,"column_start":5,"column_end":9},"name":"R6RS","qualname":"::print::BytesSyntax::R6RS","value":"BytesSyntax::R6RS","parent":{"krate":0,"index":1747},"children":[],"decl_id":null,"docs":" Use R6RS byte vector syntax, e.g. `#vu8(1 2 3)`.\n","sig":null,"attributes":[{"value":"/ Use R6RS byte vector syntax, e.g. `#vu8(1 2 3)`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163239,"byte_end":163291,"line_start":137,"line_end":137,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1750},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163362,"byte_end":163366,"line_start":140,"line_end":140,"column_start":5,"column_end":9},"name":"R7RS","qualname":"::print::BytesSyntax::R7RS","value":"BytesSyntax::R7RS","parent":{"krate":0,"index":1747},"children":[],"decl_id":null,"docs":" Use R7RS byte vector syntax, e.g. `#u8(1 2 3)`.\n","sig":null,"attributes":[{"value":"/ Use R7RS byte vector syntax, e.g. `#u8(1 2 3)`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163306,"byte_end":163357,"line_start":139,"line_end":139,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1752},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163441,"byte_end":163446,"line_start":142,"line_end":142,"column_start":5,"column_end":10},"name":"Elisp","qualname":"::print::BytesSyntax::Elisp","value":"BytesSyntax::Elisp","parent":{"krate":0,"index":1747},"children":[],"decl_id":null,"docs":" Use Emacs Lisp unibyte string syntax, e.g. `\"\\001\\002\\003\"`.\n","sig":null,"attributes":[{"value":"/ Use Emacs Lisp unibyte string syntax, e.g. `\"\\001\\002\\003\"`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163372,"byte_end":163436,"line_start":141,"line_end":141,"column_start":5,"column_end":69}}]},{"kind":"Enum","id":{"krate":0,"index":1747},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163221,"byte_end":163232,"line_start":136,"line_end":136,"column_start":10,"column_end":21},"name":"BytesSyntax","qualname":"::print::BytesSyntax","value":"pub enum BytesSyntax { R6RS, R7RS, Elisp, }","parent":null,"children":[{"krate":0,"index":1748},{"krate":0,"index":1750},{"krate":0,"index":1752}],"decl_id":null,"docs":" How to print byte vectors.\n","sig":null,"attributes":[{"value":"/ How to print byte vectors.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163151,"byte_end":163181,"line_start":134,"line_end":134,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":836},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163568,"byte_end":163573,"line_start":148,"line_end":148,"column_start":5,"column_end":10},"name":"Quote","qualname":"::print::CharEscape::Quote","value":"CharEscape::Quote","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" An escaped quote `\"`\n","sig":null,"attributes":[{"value":"/ An escaped quote `\"`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163539,"byte_end":163563,"line_start":147,"line_end":147,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":838},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163618,"byte_end":163632,"line_start":150,"line_end":150,"column_start":5,"column_end":19},"name":"ReverseSolidus","qualname":"::print::CharEscape::ReverseSolidus","value":"CharEscape::ReverseSolidus","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" An escaped reverse solidus `\\`\n","sig":null,"attributes":[{"value":"/ An escaped reverse solidus `\\`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163579,"byte_end":163613,"line_start":149,"line_end":149,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":840},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163700,"byte_end":163705,"line_start":152,"line_end":152,"column_start":5,"column_end":10},"name":"Alert","qualname":"::print::CharEscape::Alert","value":"CharEscape::Alert","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" Alert, also known as \"bell\" (usually escaped as `\\a`)\n","sig":null,"attributes":[{"value":"/ Alert, also known as \"bell\" (usually escaped as `\\a`)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163638,"byte_end":163695,"line_start":151,"line_end":151,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":842},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163776,"byte_end":163785,"line_start":154,"line_end":154,"column_start":5,"column_end":14},"name":"Backspace","qualname":"::print::CharEscape::Backspace","value":"CharEscape::Backspace","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" An escaped backspace character (usually escaped as `\\b`)\n","sig":null,"attributes":[{"value":"/ An escaped backspace character (usually escaped as `\\b`)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163711,"byte_end":163771,"line_start":153,"line_end":153,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":844},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163856,"byte_end":163864,"line_start":156,"line_end":156,"column_start":5,"column_end":13},"name":"LineFeed","qualname":"::print::CharEscape::LineFeed","value":"CharEscape::LineFeed","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" An escaped line feed character (usually escaped as `\\n`)\n","sig":null,"attributes":[{"value":"/ An escaped line feed character (usually escaped as `\\n`)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163791,"byte_end":163851,"line_start":155,"line_end":155,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":846},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163941,"byte_end":163955,"line_start":158,"line_end":158,"column_start":5,"column_end":19},"name":"CarriageReturn","qualname":"::print::CharEscape::CarriageReturn","value":"CharEscape::CarriageReturn","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" An escaped carriage return character (usually escaped as `\\r`)\n","sig":null,"attributes":[{"value":"/ An escaped carriage return character (usually escaped as `\\r`)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163870,"byte_end":163936,"line_start":157,"line_end":157,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":848},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164020,"byte_end":164023,"line_start":160,"line_end":160,"column_start":5,"column_end":8},"name":"Tab","qualname":"::print::CharEscape::Tab","value":"CharEscape::Tab","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" An escaped tab character (usually escaped as `\\t`)\n","sig":null,"attributes":[{"value":"/ An escaped tab character (usually escaped as `\\t`)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163961,"byte_end":164015,"line_start":159,"line_end":159,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":850},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164150,"byte_end":164162,"line_start":163,"line_end":163,"column_start":5,"column_end":17},"name":"AsciiControl","qualname":"::print::CharEscape::AsciiControl","value":"CharEscape::AsciiControl(u8)","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" An escaped ASCII plane control character (usually escaped as\n `\\u00XX` where `XX` are two hex characters)\n","sig":null,"attributes":[{"value":"/ An escaped ASCII plane control character (usually escaped as","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164029,"byte_end":164093,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ `\\u00XX` where `XX` are two hex characters)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164098,"byte_end":164145,"line_start":162,"line_end":162,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":835},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163522,"byte_end":163532,"line_start":146,"line_end":146,"column_start":10,"column_end":20},"name":"CharEscape","qualname":"::print::CharEscape","value":"pub enum CharEscape {\n    Quote,\n    ReverseSolidus,\n    Alert,\n    Backspace,\n    LineFeed,\n    CarriageReturn,\n    Tab,\n    AsciiControl(u8),\n}","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848},{"krate":0,"index":850}],"decl_id":null,"docs":" Represents a character escape code in a type-safe manner.\n","sig":null,"attributes":[{"value":"/ Represents a character escape code in a type-safe manner.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":163451,"byte_end":163512,"line_start":145,"line_end":145,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":856},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164831,"byte_end":164838,"line_start":186,"line_end":186,"column_start":5,"column_end":12},"name":"Generic","qualname":"::print::VectorType::Generic","value":"VectorType::Generic","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Generic vector, containing elements of any type.\n","sig":null,"attributes":[{"value":"/ Generic vector, containing elements of any type.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164774,"byte_end":164826,"line_start":185,"line_end":185,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":858},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164902,"byte_end":164906,"line_start":188,"line_end":188,"column_start":5,"column_end":9},"name":"Byte","qualname":"::print::VectorType::Byte","value":"VectorType::Byte","parent":{"krate":0,"index":855},"children":[],"decl_id":null,"docs":" Byte vector, containing only byte (octet) values.\n","sig":null,"attributes":[{"value":"/ Byte vector, containing only byte (octet) values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164844,"byte_end":164897,"line_start":187,"line_end":187,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":855},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164757,"byte_end":164767,"line_start":184,"line_end":184,"column_start":10,"column_end":20},"name":"VectorType","qualname":"::print::VectorType","value":"pub enum VectorType { Generic, Byte, }","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":858}],"decl_id":null,"docs":" Different vector types\n","sig":null,"attributes":[{"value":"/ Different vector types","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164721,"byte_end":164747,"line_start":183,"line_end":183,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":860},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165244,"byte_end":165253,"line_start":198,"line_end":198,"column_start":11,"column_end":20},"name":"Formatter","qualname":"::print::Formatter","value":"Formatter","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":863},{"krate":0,"index":865},{"krate":0,"index":867},{"krate":0,"index":883},{"krate":0,"index":885},{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":901},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":907},{"krate":0,"index":909},{"krate":0,"index":911},{"krate":0,"index":913}],"decl_id":null,"docs":" This trait abstracts away serializing the S-expression pieces,\n which allows the implementer to optionally pretty print the\n S-expression output, as well as to allow customizing the printing\n for various S-expression \"dialects\".","sig":null,"attributes":[{"value":"/ This trait abstracts away serializing the S-expression pieces,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164911,"byte_end":164977,"line_start":191,"line_end":191,"column_start":1,"column_end":67}},{"value":"/ which allows the implementer to optionally pretty print the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164978,"byte_end":165041,"line_start":192,"line_end":192,"column_start":1,"column_end":64}},{"value":"/ S-expression output, as well as to allow customizing the printing","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165042,"byte_end":165111,"line_start":193,"line_end":193,"column_start":1,"column_end":70}},{"value":"/ for various S-expression \"dialects\".","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165112,"byte_end":165152,"line_start":194,"line_end":194,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165153,"byte_end":165156,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ The default implementation produces Scheme-syntax S-expression","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165157,"byte_end":165223,"line_start":196,"line_end":196,"column_start":1,"column_end":67}},{"value":"/ text.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165224,"byte_end":165233,"line_start":197,"line_end":197,"column_start":1,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165359,"byte_end":165368,"line_start":201,"line_end":201,"column_start":8,"column_end":17},"name":"write_nil","qualname":"::print::Formatter::write_nil","value":"pub fn write_nil<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a representation of the special nil value to the specified writer.\n","sig":null,"attributes":[{"value":"/ Writes a representation of the special nil value to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165260,"byte_end":165337,"line_start":199,"line_end":199,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165342,"byte_end":165351,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165607,"byte_end":165617,"line_start":210,"line_end":210,"column_start":8,"column_end":18},"name":"write_null","qualname":"::print::Formatter::write_null","value":"pub fn write_null<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a representation of the special nil value to the specified writer.\n","sig":null,"attributes":[{"value":"/ Writes a representation of the special nil value to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165508,"byte_end":165585,"line_start":208,"line_end":208,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165590,"byte_end":165599,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165959,"byte_end":165969,"line_start":222,"line_end":222,"column_start":8,"column_end":18},"name":"write_bool","qualname":"::print::Formatter::write_bool","value":"pub fn write_bool<W: ?Sized>(&mut Self, &mut W, bool) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a representation of a boolean value to the specified writer.","sig":null,"attributes":[{"value":"/ Writes a representation of a boolean value to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165755,"byte_end":165826,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165831,"byte_end":165834,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ The implementation provided by the trait will use the Scheme notation","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165839,"byte_end":165912,"line_start":219,"line_end":219,"column_start":5,"column_end":78}},{"value":"/ (`#t` and `#f`).","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165917,"byte_end":165937,"line_start":220,"line_end":220,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":165942,"byte_end":165951,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":166234,"byte_end":166246,"line_start":231,"line_end":231,"column_start":8,"column_end":20},"name":"write_number","qualname":"::print::Formatter::write_number","value":"pub fn write_number<W: ?Sized>(&mut Self, &mut W, &Number) -> io::Result<()>\nwhere W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes an integer value like `-123` to the specified writer.\n","sig":null,"attributes":[{"value":"/ Writes an integer value like `-123` to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":166148,"byte_end":166212,"line_start":229,"line_end":229,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":166217,"byte_end":166226,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167416,"byte_end":167426,"line_start":264,"line_end":264,"column_start":8,"column_end":18},"name":"write_char","qualname":"::print::Formatter::write_char","value":"pub fn write_char<W: ?Sized>(&mut Self, &mut W, char) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a charactor to the specified writer.","sig":null,"attributes":[{"value":"/ Writes a charactor to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167262,"byte_end":167309,"line_start":260,"line_end":260,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167314,"byte_end":167317,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The implementation provided by the trait will use Scheme notation","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167322,"byte_end":167391,"line_start":262,"line_end":262,"column_start":5,"column_end":74}},{"value":"/ (`#\\C`).","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167396,"byte_end":167408,"line_start":263,"line_end":263,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167728,"byte_end":167740,"line_start":274,"line_end":274,"column_start":8,"column_end":20},"name":"begin_string","qualname":"::print::Formatter::begin_string","value":"pub fn begin_string<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called before each series of `write_string_fragment` and\n `write_char_escape`.  Writes a `\"` to the specified writer.\n","sig":null,"attributes":[{"value":"/ Called before each series of `write_string_fragment` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167578,"byte_end":167638,"line_start":271,"line_end":271,"column_start":5,"column_end":65}},{"value":"/ `write_char_escape`.  Writes a `\"` to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167643,"byte_end":167706,"line_start":272,"line_end":272,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167711,"byte_end":167720,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168027,"byte_end":168037,"line_start":284,"line_end":284,"column_start":8,"column_end":18},"name":"end_string","qualname":"::print::Formatter::end_string","value":"pub fn end_string<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called after each series of `write_string_fragment` and\n `write_char_escape`.  Writes a `\"` to the specified writer.\n","sig":null,"attributes":[{"value":"/ Called after each series of `write_string_fragment` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167878,"byte_end":167937,"line_start":281,"line_end":281,"column_start":5,"column_end":64}},{"value":"/ `write_char_escape`.  Writes a `\"` to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":167942,"byte_end":168005,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168010,"byte_end":168019,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168289,"byte_end":168310,"line_start":294,"line_end":294,"column_start":8,"column_end":29},"name":"write_string_fragment","qualname":"::print::Formatter::write_string_fragment","value":"pub fn write_string_fragment<W: ?Sized>(&mut Self, &mut W, &str)\n-> io::Result<()> where W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a string fragment that doesn't need any escaping to the specified\n writer.\n","sig":null,"attributes":[{"value":"/ Writes a string fragment that doesn't need any escaping to the specified","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168175,"byte_end":168251,"line_start":291,"line_end":291,"column_start":5,"column_end":81}},{"value":"/ writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168256,"byte_end":168267,"line_start":292,"line_end":292,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168272,"byte_end":168281,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168559,"byte_end":168576,"line_start":303,"line_end":303,"column_start":8,"column_end":25},"name":"write_char_escape","qualname":"::print::Formatter::write_char_escape","value":"pub fn write_char_escape<W: ?Sized>(&mut Self, &mut W, CharEscape)\n-> io::Result<()> where W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a character escape code to the specified writer.\n","sig":null,"attributes":[{"value":"/ Writes a character escape code to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168478,"byte_end":168537,"line_start":301,"line_end":301,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168542,"byte_end":168551,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168856,"byte_end":168868,"line_start":316,"line_end":316,"column_start":8,"column_end":20},"name":"write_symbol","qualname":"::print::Formatter::write_symbol","value":"pub fn write_symbol<W: ?Sized>(&mut Self, &mut W, &str) -> io::Result<()>\nwhere W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a symbol to the specified writer.\n","sig":null,"attributes":[{"value":"/ Writes a symbol to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168790,"byte_end":168834,"line_start":314,"line_end":314,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":168839,"byte_end":168848,"line_start":315,"line_end":315,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169162,"byte_end":169175,"line_start":326,"line_end":326,"column_start":8,"column_end":21},"name":"write_keyword","qualname":"::print::Formatter::write_keyword","value":"pub fn write_keyword<W: ?Sized>(&mut Self, &mut W, &str) -> io::Result<()>\nwhere W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a keyword to the specified writer.\n","sig":null,"attributes":[{"value":"/ Writes a keyword to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169095,"byte_end":169140,"line_start":324,"line_end":324,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169145,"byte_end":169154,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169440,"byte_end":169451,"line_start":336,"line_end":336,"column_start":8,"column_end":19},"name":"write_bytes","qualname":"::print::Formatter::write_bytes","value":"pub fn write_bytes<W: ?Sized>(&mut Self, &mut W, &[u8]) -> io::Result<()>\nwhere W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Writes a byte vector to the specified writer.\n","sig":null,"attributes":[{"value":"/ Writes a byte vector to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169369,"byte_end":169418,"line_start":334,"line_end":334,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169423,"byte_end":169432,"line_start":335,"line_end":335,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169824,"byte_end":169834,"line_start":348,"line_end":348,"column_start":8,"column_end":18},"name":"begin_list","qualname":"::print::Formatter::begin_list","value":"pub fn begin_list<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called before any list elements.  Writes a `(` to the specified\n writer.\n","sig":null,"attributes":[{"value":"/ Called before any list elements.  Writes a `(` to the specified","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169719,"byte_end":169786,"line_start":345,"line_end":345,"column_start":5,"column_end":72}},{"value":"/ writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169791,"byte_end":169802,"line_start":346,"line_end":346,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169807,"byte_end":169816,"line_start":347,"line_end":347,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170093,"byte_end":170101,"line_start":358,"line_end":358,"column_start":8,"column_end":16},"name":"end_list","qualname":"::print::Formatter::end_list","value":"pub fn end_list<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called after all list elements have been written.  Writes a `)` to the\n specified writer.\n","sig":null,"attributes":[{"value":"/ Called after all list elements have been written.  Writes a `)` to the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":169971,"byte_end":170045,"line_start":355,"line_end":355,"column_start":5,"column_end":79}},{"value":"/ specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170050,"byte_end":170071,"line_start":356,"line_end":356,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170076,"byte_end":170085,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170380,"byte_end":170397,"line_start":368,"line_end":368,"column_start":8,"column_end":25},"name":"begin_seq_element","qualname":"::print::Formatter::begin_seq_element","value":"pub fn begin_seq_element<W: ?Sized>(&mut Self, &mut W, bool) -> io::Result<()>\nwhere W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called before starting to write a list or vector element. Writes a space\n to the specified writer, if needed.\n","sig":null,"attributes":[{"value":"/ Called before starting to write a list or vector element. Writes a space","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170238,"byte_end":170314,"line_start":365,"line_end":365,"column_start":5,"column_end":81}},{"value":"/ to the specified writer, if needed.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170319,"byte_end":170358,"line_start":366,"line_end":366,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170363,"byte_end":170372,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170684,"byte_end":170699,"line_start":381,"line_end":381,"column_start":8,"column_end":23},"name":"end_seq_element","qualname":"::print::Formatter::end_seq_element","value":"pub fn end_seq_element<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called after every list or vector element.\n","sig":null,"attributes":[{"value":"/ Called after every list or vector element.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170616,"byte_end":170662,"line_start":379,"line_end":379,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170667,"byte_end":170676,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170980,"byte_end":170992,"line_start":391,"line_end":391,"column_start":8,"column_end":20},"name":"begin_vector","qualname":"::print::Formatter::begin_vector","value":"pub fn begin_vector<W: ?Sized>(&mut Self, VectorType, &mut W)\n-> io::Result<()> where W: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called before any vector elements.  Will write `#(` for generic vectors,\n or `#u8(` for byte vectors, to the specified writer.\n","sig":null,"attributes":[{"value":"/ Called before any vector elements.  Will write `#(` for generic vectors,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170821,"byte_end":170897,"line_start":388,"line_end":388,"column_start":5,"column_end":81}},{"value":"/ or `#u8(` for byte vectors, to the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170902,"byte_end":170958,"line_start":389,"line_end":389,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":170963,"byte_end":170972,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":911},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171390,"byte_end":171400,"line_start":404,"line_end":404,"column_start":8,"column_end":18},"name":"end_vector","qualname":"::print::Formatter::end_vector","value":"pub fn end_vector<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called after all vector elements have been written.  Writes a `)` to the\n specified writer.\n","sig":null,"attributes":[{"value":"/ Called after all vector elements have been written.  Writes a `)` to the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171266,"byte_end":171342,"line_start":401,"line_end":401,"column_start":5,"column_end":81}},{"value":"/ specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171347,"byte_end":171368,"line_start":402,"line_end":402,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171373,"byte_end":171382,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171720,"byte_end":171729,"line_start":415,"line_end":415,"column_start":8,"column_end":17},"name":"write_dot","qualname":"::print::Formatter::write_dot","value":"pub fn write_dot<W: ?Sized>(&mut Self, &mut W) -> io::Result<()> where\nW: io::Write","parent":{"krate":0,"index":860},"children":[],"decl_id":null,"docs":" Called before writing the tail of an improper list, or more\n generally, the `cdr` field of a cons cell.  Writes a `.` to\n the specified writer.\n","sig":null,"attributes":[{"value":"/ Called before writing the tail of an improper list, or more","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171537,"byte_end":171600,"line_start":411,"line_end":411,"column_start":5,"column_end":68}},{"value":"/ generally, the `cdr` field of a cons cell.  Writes a `.` to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171605,"byte_end":171668,"line_start":412,"line_end":412,"column_start":5,"column_end":68}},{"value":"/ the specified writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171673,"byte_end":171698,"line_start":413,"line_end":413,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171703,"byte_end":171712,"line_start":414,"line_end":414,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1759},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":172032,"byte_end":172048,"line_start":426,"line_end":426,"column_start":12,"column_end":28},"name":"DefaultFormatter","qualname":"::print::DefaultFormatter","value":"","parent":null,"children":[],"decl_id":null,"docs":" This structure compacts a S-expression value on a single line,\n using the default representation, which is similar to Scheme.\n","sig":null,"attributes":[{"value":"/ This structure compacts a S-expression value on a single line,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171864,"byte_end":171930,"line_start":423,"line_end":423,"column_start":1,"column_end":67}},{"value":"/ using the default representation, which is similar to Scheme.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":171931,"byte_end":171996,"line_start":424,"line_end":424,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":172207,"byte_end":172226,"line_start":432,"line_end":432,"column_start":12,"column_end":31},"name":"CustomizedFormatter","qualname":"::print::CustomizedFormatter","value":"CustomizedFormatter {  }","parent":null,"children":[{"krate":0,"index":1766}],"decl_id":null,"docs":" A formatter which can be tuned with regards to S-expressions representation.\n","sig":null,"attributes":[{"value":"/ A formatter which can be tuned with regards to S-expressions representation.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":172091,"byte_end":172171,"line_start":430,"line_end":430,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1771},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":176607,"byte_end":176614,"line_start":564,"line_end":564,"column_start":12,"column_end":19},"name":"Printer","qualname":"::print::Printer","value":"Printer {  }","parent":null,"children":[{"krate":0,"index":1774},{"krate":0,"index":1775}],"decl_id":null,"docs":" A printer for S-expression values.\n","sig":null,"attributes":[{"value":"/ A printer for S-expression values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":176540,"byte_end":176578,"line_start":562,"line_end":562,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":176832,"byte_end":176844,"line_start":574,"line_end":574,"column_start":12,"column_end":24},"name":"with_options","qualname":"<Printer<W, CustomizedFormatter>>::with_options","value":"pub fn with_options(W, Options) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct an S-expression printer tuned given the specified options.\n","sig":null,"attributes":[{"value":"/ Construct an S-expression printer tuned given the specified options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":176748,"byte_end":176820,"line_start":573,"line_end":573,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177196,"byte_end":177210,"line_start":590,"line_end":590,"column_start":12,"column_end":26},"name":"with_formatter","qualname":"<Printer<W, F>>::with_formatter","value":"pub fn with_formatter(W, F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new S-expression printer whose output will be\n written to the writer specified.\n","sig":null,"attributes":[{"value":"/ Creates a new S-expression printer whose output will be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177070,"byte_end":177129,"line_start":587,"line_end":587,"column_start":5,"column_end":64}},{"value":"/ written to the writer specified.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177134,"byte_end":177170,"line_start":588,"line_end":588,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177175,"byte_end":177184,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177364,"byte_end":177374,"line_start":596,"line_end":596,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Printer<W, F>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the `Writer` from the `Printer`.\n","sig":null,"attributes":[{"value":"/ Unwrap the `Writer` from the `Printer`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177295,"byte_end":177338,"line_start":594,"line_end":594,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177343,"byte_end":177352,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":944},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177517,"byte_end":177522,"line_start":602,"line_end":602,"column_start":12,"column_end":17},"name":"print","qualname":"<Printer<W, F>>::print","value":"pub fn print(&mut Self, &Value) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Output the representation of the specified value to the underlying\n writer.\n","sig":null,"attributes":[{"value":"/ Output the representation of the specified value to the underlying","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177419,"byte_end":177489,"line_start":600,"line_end":600,"column_start":5,"column_end":75}},{"value":"/ writer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177494,"byte_end":177505,"line_start":601,"line_end":601,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":180865,"byte_end":180868,"line_start":684,"line_end":684,"column_start":12,"column_end":15},"name":"new","qualname":"<Printer<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new S-expression printer.\n","sig":null,"attributes":[{"value":"/ Creates a new S-expression printer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":180800,"byte_end":180839,"line_start":682,"line_end":682,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":180844,"byte_end":180853,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":994},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":186999,"byte_end":187008,"line_start":891,"line_end":891,"column_start":8,"column_end":17},"name":"to_writer","qualname":"::print::to_writer","value":"pub fn to_writer<W: io::Write>(W, &Value) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given value value as S-expression text into the IO stream,\n using the default printer options.\n","sig":null,"attributes":[{"value":"/ Serialize the given value value as S-expression text into the IO stream,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":186866,"byte_end":186942,"line_start":888,"line_end":888,"column_start":1,"column_end":77}},{"value":"/ using the default printer options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":186943,"byte_end":186981,"line_start":889,"line_end":889,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":186982,"byte_end":186991,"line_start":890,"line_end":890,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":996},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187248,"byte_end":187264,"line_start":899,"line_end":899,"column_start":8,"column_end":24},"name":"to_writer_custom","qualname":"::print::to_writer_custom","value":"pub fn to_writer_custom<W: io::Write>(W, &Value, Options) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given value value as S-expression text into the IO stream.\n","sig":null,"attributes":[{"value":"/ Serialize the given value value as S-expression text into the IO stream.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187154,"byte_end":187230,"line_start":897,"line_end":897,"column_start":1,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187231,"byte_end":187240,"line_start":898,"line_end":898,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":998},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187592,"byte_end":187598,"line_start":912,"line_end":912,"column_start":8,"column_end":14},"name":"to_vec","qualname":"::print::to_vec","value":"pub fn to_vec(&Value) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given value as byte vector containing S-expression text, using\n the default printer options.\n","sig":null,"attributes":[{"value":"/ Serialize the given value as byte vector containing S-expression text, using","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187461,"byte_end":187541,"line_start":909,"line_end":909,"column_start":1,"column_end":81}},{"value":"/ the default printer options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187542,"byte_end":187574,"line_start":910,"line_end":910,"column_start":1,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187575,"byte_end":187584,"line_start":911,"line_end":911,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":999},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187831,"byte_end":187844,"line_start":920,"line_end":920,"column_start":8,"column_end":21},"name":"to_vec_custom","qualname":"::print::to_vec_custom","value":"pub fn to_vec_custom(&Value, Options) -> io::Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given value as byte vector containing S-expression text.\n","sig":null,"attributes":[{"value":"/ Serialize the given value as byte vector containing S-expression text.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187739,"byte_end":187813,"line_start":918,"line_end":918,"column_start":1,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":187814,"byte_end":187823,"line_start":919,"line_end":919,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1000},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":188129,"byte_end":188138,"line_start":929,"line_end":929,"column_start":8,"column_end":17},"name":"to_string","qualname":"::print::to_string","value":"pub fn to_string(&Value) -> io::Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given value an S-expression string,\n using the default printer options.\n","sig":null,"attributes":[{"value":"/ Serialize the given value an S-expression string,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":188019,"byte_end":188072,"line_start":926,"line_end":926,"column_start":1,"column_end":54}},{"value":"/ using the default printer options.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":188073,"byte_end":188111,"line_start":927,"line_end":927,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":188112,"byte_end":188121,"line_start":928,"line_end":928,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1001},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":188412,"byte_end":188428,"line_start":940,"line_end":940,"column_start":8,"column_end":24},"name":"to_string_custom","qualname":"::print::to_string_custom","value":"pub fn to_string_custom(&Value, Options) -> io::Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Serialize the given value an S-expression string.\n","sig":null,"attributes":[{"value":"/ Serialize the given value an S-expression string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":188341,"byte_end":188394,"line_start":938,"line_end":938,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":188395,"byte_end":188404,"line_start":939,"line_end":939,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":1002},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"value","qualname":"::value","value":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","parent":null,"children":[{"krate":0,"index":1003},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1016},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1780},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1815},{"krate":0,"index":1818},{"krate":0,"index":1025},{"krate":0,"index":1085},{"krate":0,"index":1089},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1148},{"krate":0,"index":1199}],"decl_id":null,"docs":" The Value enum, a dynamically typed way of representing any valid S-expression value.","sig":null,"attributes":[{"value":"/ The Value enum, a dynamically typed way of representing any valid S-expression value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188690,"byte_end":188779,"line_start":1,"line_end":1,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188780,"byte_end":188783,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Constructing S-Expressions","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188784,"byte_end":188816,"line_start":3,"line_end":3,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188817,"byte_end":188820,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Lexpr provides a [`sexp!` macro][macro] to build `lexpr::Value`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188821,"byte_end":188888,"line_start":5,"line_end":5,"column_start":1,"column_end":68}},{"value":"/ objects with very natural S-expression syntax.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188889,"byte_end":188939,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188940,"byte_end":188943,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188944,"byte_end":188951,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/ use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188952,"byte_end":188972,"line_start":9,"line_end":9,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188973,"byte_end":188976,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ // The type of `john` is `lexpr::Value`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":188977,"byte_end":189020,"line_start":11,"line_end":11,"column_start":1,"column_end":44}},{"value":"/ let john = sexp!((","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189021,"byte_end":189043,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/     (name . \"John Doe\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189044,"byte_end":189071,"line_start":13,"line_end":13,"column_start":1,"column_end":28}},{"value":"/     (age . 43)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189072,"byte_end":189090,"line_start":14,"line_end":14,"column_start":1,"column_end":19}},{"value":"/     (phones \"+44 1234567\" \"+44 2345678\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189091,"byte_end":189135,"line_start":15,"line_end":15,"column_start":1,"column_end":45}},{"value":"/ ));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189136,"byte_end":189143,"line_start":16,"line_end":16,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189144,"byte_end":189147,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ println!(\"first phone number: {}\", john[\"phones\"][0]);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189148,"byte_end":189206,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189207,"byte_end":189210,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // Convert to a string of S-expression data and print it out","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189211,"byte_end":189275,"line_start":20,"line_end":20,"column_start":1,"column_end":65}},{"value":"/ println!(\"{}\", john.to_string());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189276,"byte_end":189313,"line_start":21,"line_end":21,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189314,"byte_end":189321,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189322,"byte_end":189325,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The `Value::to_string()` function converts a `lexpr::Value` into a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189326,"byte_end":189396,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/ `String` of S-expression text.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189397,"byte_end":189431,"line_start":25,"line_end":25,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189432,"byte_end":189435,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ One neat thing about the `sexp!` macro is that variables and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189436,"byte_end":189500,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/ expressions can be interpolated directly into the S-expression","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189501,"byte_end":189567,"line_start":28,"line_end":28,"column_start":1,"column_end":67}},{"value":"/ value as you are building it. The macro will check at compile time","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189568,"byte_end":189638,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ that the value you are interpolating is able to be represented as","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189639,"byte_end":189708,"line_start":30,"line_end":30,"column_start":1,"column_end":70}},{"value":"/ S-expression data.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189709,"byte_end":189731,"line_start":31,"line_end":31,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189732,"byte_end":189735,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ To interpolate, use the comma (`,`, also known as \"unqote\" in","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189736,"byte_end":189801,"line_start":33,"line_end":33,"column_start":1,"column_end":66}},{"value":"/ Lisp). The interpolated expression must either be a single token,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189802,"byte_end":189871,"line_start":34,"line_end":34,"column_start":1,"column_end":70}},{"value":"/ or surrounded by round or curly braces.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189872,"byte_end":189915,"line_start":35,"line_end":35,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189916,"byte_end":189919,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189920,"byte_end":189927,"line_start":37,"line_end":37,"column_start":1,"column_end":8}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189928,"byte_end":189950,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189951,"byte_end":189956,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ # fn random_phone() -> u16 { 0 }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189957,"byte_end":189993,"line_start":40,"line_end":40,"column_start":1,"column_end":37}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":189994,"byte_end":189999,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ let full_name = \"John Doe\";","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190000,"byte_end":190031,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ let age_last_year = 42;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190032,"byte_end":190059,"line_start":43,"line_end":43,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190060,"byte_end":190063,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ // The type of `john` is `lexpr::Value`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190064,"byte_end":190107,"line_start":45,"line_end":45,"column_start":1,"column_end":44}},{"value":"/ let john = sexp!((","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190108,"byte_end":190130,"line_start":46,"line_end":46,"column_start":1,"column_end":23}},{"value":"/     (name . ,full_name)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190131,"byte_end":190158,"line_start":47,"line_end":47,"column_start":1,"column_end":28}},{"value":"/     (age . ,(age_last_year + 1))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190159,"byte_end":190195,"line_start":48,"line_end":48,"column_start":1,"column_end":37}},{"value":"/     (phones ,{ format!(\"+44 {}\", random_phone()) })","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190196,"byte_end":190251,"line_start":49,"line_end":49,"column_start":1,"column_end":56}},{"value":"/ ));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190252,"byte_end":190259,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190260,"byte_end":190267,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190268,"byte_end":190271,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ A string of S-expression data can be parsed into a `lexpr::Value` by the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190272,"byte_end":190348,"line_start":53,"line_end":53,"column_start":1,"column_end":77}},{"value":"/ [`lexpr::from_str`][from_str] function. There is also","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190349,"byte_end":190406,"line_start":54,"line_end":54,"column_start":1,"column_end":58}},{"value":"/ [`from_slice`][from_slice] for parsing from a byte slice `&[u8]` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190407,"byte_end":190479,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ [`from_reader`][from_reader] for parsing from any `io::Read` like a file or","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190480,"byte_end":190559,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/ a TCP stream. For all these functions there also is a `_custom` variant","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190560,"byte_end":190635,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ which allows for specifying parser options, in case the input deviates from","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190636,"byte_end":190715,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/ the `lexpr` default behavior.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190716,"byte_end":190749,"line_start":59,"line_end":59,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190750,"byte_end":190753,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190754,"byte_end":190761,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use lexpr::{sexp, parse::Error, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190762,"byte_end":190805,"line_start":62,"line_end":62,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190806,"byte_end":190809,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # fn main() -> Result<(), Error> {","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190810,"byte_end":190848,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/ // Some S-expression input data as a &str. Maybe this comes from the user.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190849,"byte_end":190927,"line_start":65,"line_end":65,"column_start":1,"column_end":79}},{"value":"/ let data = r#\"(","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190928,"byte_end":190947,"line_start":66,"line_end":66,"column_start":1,"column_end":20}},{"value":"/         (name . \"John Doe\")","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190948,"byte_end":190979,"line_start":67,"line_end":67,"column_start":1,"column_end":32}},{"value":"/         (age . 43)","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":190980,"byte_end":191002,"line_start":68,"line_end":68,"column_start":1,"column_end":23}},{"value":"/         (phones . (","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191003,"byte_end":191026,"line_start":69,"line_end":69,"column_start":1,"column_end":24}},{"value":"/             \"+44 1234567\"","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191027,"byte_end":191056,"line_start":70,"line_end":70,"column_start":1,"column_end":30}},{"value":"/             \"+44 2345678\"","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191057,"byte_end":191086,"line_start":71,"line_end":71,"column_start":1,"column_end":30}},{"value":"/         ))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191087,"byte_end":191101,"line_start":72,"line_end":72,"column_start":1,"column_end":15}},{"value":"/     )\"#;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191102,"byte_end":191114,"line_start":73,"line_end":73,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191115,"byte_end":191118,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ // Parse the string of data into lexpr::Value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191119,"byte_end":191169,"line_start":75,"line_end":75,"column_start":1,"column_end":51}},{"value":"/ let v: Value = lexpr::from_str(data)?;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191170,"byte_end":191212,"line_start":76,"line_end":76,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191213,"byte_end":191216,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // Access parts of the data by indexing with square brackets.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191217,"byte_end":191282,"line_start":78,"line_end":78,"column_start":1,"column_end":66}},{"value":"/ println!(\"Please call {} at the number {}\", v[\"name\"], v[\"phones\"][0]);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191283,"byte_end":191358,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ # Ok(())","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191359,"byte_end":191371,"line_start":80,"line_end":80,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191372,"byte_end":191379,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191380,"byte_end":191387,"line_start":82,"line_end":82,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191388,"byte_end":191391,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ [macro]: ../macro.sexp.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191392,"byte_end":191423,"line_start":84,"line_end":84,"column_start":1,"column_end":32}},{"value":"/ [from_str]: ../parse/fn.from_str.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191424,"byte_end":191465,"line_start":85,"line_end":85,"column_start":1,"column_end":42}},{"value":"/ [from_slice]: ../parse/fn.from_slice.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191466,"byte_end":191511,"line_start":86,"line_end":86,"column_start":1,"column_end":46}},{"value":"/ [from_reader]: ../parse/fn.from_reader.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191512,"byte_end":191559,"line_start":87,"line_end":87,"column_start":1,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1781},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193028,"byte_end":193031,"line_start":124,"line_end":124,"column_start":5,"column_end":8},"name":"Nil","qualname":"::value::Value::Nil","value":"Value::Nil","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" The special \"nil\" value.","sig":null,"attributes":[{"value":"/ The special \"nil\" value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191896,"byte_end":191924,"line_start":105,"line_end":105,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191929,"byte_end":191932,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ This is kind of an oddball value. In traditional Lisps (e.g., Common","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191937,"byte_end":192009,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ Lisp or Emacs Lisp) the empty list can be written as the symbol `nil`,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192014,"byte_end":192088,"line_start":108,"line_end":108,"column_start":5,"column_end":79}},{"value":"/ while in Scheme, `nil` is just a regular symbol. Furthermore,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192093,"byte_end":192158,"line_start":109,"line_end":109,"column_start":5,"column_end":70}},{"value":"/ traditional Lisps don't have a separate boolean data type, and represent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192163,"byte_end":192239,"line_start":110,"line_end":110,"column_start":5,"column_end":81}},{"value":"/ true and false by the symbols `t` and `nil` instead. The `lexpr` parser","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192244,"byte_end":192319,"line_start":111,"line_end":111,"column_start":5,"column_end":80}},{"value":"/ can be instructed to parse the `nil` symbol as the `Nil` value (see","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192324,"byte_end":192395,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ [`NilSymbol::Special`]), allowing to choose its representation when","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192400,"byte_end":192471,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/ converting to text again (see [`NilSyntax`]). Note that the empty list,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192476,"byte_end":192551,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/ when written as `()` or implicitly constructed as a list terminator, is","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192556,"byte_end":192631,"line_start":115,"line_end":115,"column_start":5,"column_end":80}},{"value":"/ always parsed as [`Value::Null`], not `Value::Nil`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192636,"byte_end":192691,"line_start":116,"line_end":116,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192696,"byte_end":192699,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ In addition to being useful for conversions between S-expression","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192704,"byte_end":192772,"line_start":118,"line_end":118,"column_start":5,"column_end":73}},{"value":"/ variants, this value is also potentially returned when using the square","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192777,"byte_end":192852,"line_start":119,"line_end":119,"column_start":5,"column_end":80}},{"value":"/ bracket indexing operator on `Value`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192857,"byte_end":192898,"line_start":120,"line_end":120,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192903,"byte_end":192906,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ [`NilSymbol::Special`]: crate::parse::NilSymbol::Special","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192911,"byte_end":192971,"line_start":122,"line_end":122,"column_start":5,"column_end":65}},{"value":"/ [`NilSyntax`]: ../print/enum.NilSyntax.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":192976,"byte_end":193023,"line_start":123,"line_end":123,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1783},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193145,"byte_end":193149,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"Null","qualname":"::value::Value::Null","value":"Value::Null","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" The empty list.","sig":null,"attributes":[{"value":"/ The empty list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193038,"byte_end":193057,"line_start":126,"line_end":126,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193062,"byte_end":193065,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ This value terminates a chain of cons cells forming a proper list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193070,"byte_end":193140,"line_start":128,"line_end":128,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1785},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193181,"byte_end":193185,"line_start":132,"line_end":132,"column_start":5,"column_end":9},"name":"Bool","qualname":"::value::Value::Bool","value":"Value::Bool(bool)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A boolean value.\n","sig":null,"attributes":[{"value":"/ A boolean value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193156,"byte_end":193176,"line_start":131,"line_end":131,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193216,"byte_end":193222,"line_start":135,"line_end":135,"column_start":5,"column_end":11},"name":"Number","qualname":"::value::Value::Number","value":"Value::Number(Number)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A number.\n","sig":null,"attributes":[{"value":"/ A number.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193198,"byte_end":193211,"line_start":134,"line_end":134,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1791},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193258,"byte_end":193262,"line_start":138,"line_end":138,"column_start":5,"column_end":9},"name":"Char","qualname":"::value::Value::Char","value":"Value::Char(char)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A character.\n","sig":null,"attributes":[{"value":"/ A character.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193237,"byte_end":193253,"line_start":137,"line_end":137,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1794},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193293,"byte_end":193299,"line_start":141,"line_end":141,"column_start":5,"column_end":11},"name":"String","qualname":"::value::Value::String","value":"Value::String(Box<str>)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A string.\n","sig":null,"attributes":[{"value":"/ A string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193275,"byte_end":193288,"line_start":140,"line_end":140,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1797},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193334,"byte_end":193340,"line_start":144,"line_end":144,"column_start":5,"column_end":11},"name":"Symbol","qualname":"::value::Value::Symbol","value":"Value::Symbol(Box<str>)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A symbol.\n","sig":null,"attributes":[{"value":"/ A symbol.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193316,"byte_end":193329,"line_start":143,"line_end":143,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1800},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193376,"byte_end":193383,"line_start":147,"line_end":147,"column_start":5,"column_end":12},"name":"Keyword","qualname":"::value::Value::Keyword","value":"Value::Keyword(Box<str>)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A keyword.\n","sig":null,"attributes":[{"value":"/ A keyword.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193357,"byte_end":193371,"line_start":146,"line_end":146,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1803},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193423,"byte_end":193428,"line_start":150,"line_end":150,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::value::Value::Bytes","value":"Value::Bytes(Box<[u8]>)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A byte vector.\n","sig":null,"attributes":[{"value":"/ A byte vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193400,"byte_end":193418,"line_start":149,"line_end":149,"column_start":5,"column_end":23}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1806},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193712,"byte_end":193716,"line_start":161,"line_end":161,"column_start":5,"column_end":9},"name":"Cons","qualname":"::value::Value::Cons","value":"Value::Cons(Cons)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" Represents a Lisp \"cons cell\".","sig":null,"attributes":[{"value":"/ Represents a Lisp \"cons cell\".","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193446,"byte_end":193480,"line_start":152,"line_end":152,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193485,"byte_end":193488,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Cons cells are often used to form singly-linked lists.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193493,"byte_end":193551,"line_start":154,"line_end":154,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193556,"byte_end":193563,"line_start":155,"line_end":155,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193568,"byte_end":193590,"line_start":156,"line_end":156,"column_start":5,"column_end":27}},{"value":"/ let v = sexp!((a list 1 2 3));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193595,"byte_end":193629,"line_start":157,"line_end":157,"column_start":5,"column_end":39}},{"value":"/ assert!(v.is_cons());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193634,"byte_end":193659,"line_start":158,"line_end":158,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(v[4], sexp!(3));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193664,"byte_end":193695,"line_start":159,"line_end":159,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193700,"byte_end":193707,"line_start":160,"line_end":160,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1809},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193752,"byte_end":193758,"line_start":164,"line_end":164,"column_start":5,"column_end":11},"name":"Vector","qualname":"::value::Value::Vector","value":"Value::Vector(Box<[Value]>)","parent":{"krate":0,"index":1780},"children":[],"decl_id":null,"docs":" A Lisp vector.\n","sig":null,"attributes":[{"value":"/ A Lisp vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193729,"byte_end":193747,"line_start":163,"line_end":163,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1780},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191884,"byte_end":191889,"line_start":104,"line_end":104,"column_start":10,"column_end":15},"name":"Value","qualname":"::value::Value","value":"pub enum Value {\n    Nil,\n    Null,\n    Bool(bool),\n    Number(Number),\n    Char(char),\n    String(Box<str>),\n    Symbol(Box<str>),\n    Keyword(Box<str>),\n    Bytes(Box<[u8]>),\n    Cons(Cons),\n    Vector(Box<[Value]>),\n}","parent":null,"children":[{"krate":0,"index":1781},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1788},{"krate":0,"index":1791},{"krate":0,"index":1794},{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1803},{"krate":0,"index":1806},{"krate":0,"index":1809}],"decl_id":null,"docs":" Represents an S-expression value.","sig":null,"attributes":[{"value":"/ Represents an S-expression value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191691,"byte_end":191728,"line_start":98,"line_end":98,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191729,"byte_end":191732,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ See the [`lexpr::value`] module documentation for usage examples.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191733,"byte_end":191802,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191803,"byte_end":191806,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ [`lexpr::value`]: index.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":191807,"byte_end":191839,"line_start":102,"line_end":102,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193845,"byte_end":193851,"line_start":169,"line_end":169,"column_start":12,"column_end":18},"name":"symbol","qualname":"<Value>::symbol","value":"pub fn symbol<impl Into<Box<str>>: Into<Box<str>>>(impl Into<Box<str>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a symbol, given its name.\n","sig":null,"attributes":[{"value":"/ Construct a symbol, given its name.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193794,"byte_end":193833,"line_start":168,"line_end":168,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194183,"byte_end":194190,"line_start":181,"line_end":181,"column_start":12,"column_end":19},"name":"keyword","qualname":"<Value>::keyword","value":"pub fn keyword<impl Into<Box<str>>: Into<Box<str>>>(impl Into<Box<str>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a keyword, given its name.","sig":null,"attributes":[{"value":"/ Construct a keyword, given its name.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193935,"byte_end":193975,"line_start":173,"line_end":173,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193980,"byte_end":193983,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193988,"byte_end":193995,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Value;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194000,"byte_end":194023,"line_start":176,"line_end":176,"column_start":5,"column_end":28}},{"value":"/ let value = Value::keyword(\"foo\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194028,"byte_end":194066,"line_start":177,"line_end":177,"column_start":5,"column_end":43}},{"value":"/ assert!(value.is_keyword());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194071,"byte_end":194103,"line_start":178,"line_end":178,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(value.as_keyword().unwrap(), \"foo\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194108,"byte_end":194159,"line_start":179,"line_end":179,"column_start":5,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194164,"byte_end":194171,"line_start":180,"line_end":180,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194500,"byte_end":194506,"line_start":193,"line_end":193,"column_start":12,"column_end":18},"name":"string","qualname":"<Value>::string","value":"pub fn string<impl Into<Box<str>>: Into<Box<str>>>(impl Into<Box<str>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a string.","sig":null,"attributes":[{"value":"/ Construct a string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194275,"byte_end":194298,"line_start":185,"line_end":185,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194303,"byte_end":194306,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194311,"byte_end":194318,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Value;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194323,"byte_end":194346,"line_start":188,"line_end":188,"column_start":5,"column_end":28}},{"value":"/ let value = Value::string(\"foo\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194351,"byte_end":194388,"line_start":189,"line_end":189,"column_start":5,"column_end":42}},{"value":"/ assert!(value.is_string());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194393,"byte_end":194424,"line_start":190,"line_end":190,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(value.as_str().unwrap(), \"foo\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194429,"byte_end":194476,"line_start":191,"line_end":191,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194481,"byte_end":194488,"line_start":192,"line_end":192,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194825,"byte_end":194830,"line_start":205,"line_end":205,"column_start":12,"column_end":17},"name":"bytes","qualname":"<Value>::bytes","value":"pub fn bytes<impl Into<Box<[u8]>>: Into<Box<[u8]>>>(impl Into<Box<[u8]>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a byte vector.","sig":null,"attributes":[{"value":"/ Construct a byte vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194584,"byte_end":194612,"line_start":197,"line_end":197,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194617,"byte_end":194620,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194625,"byte_end":194632,"line_start":199,"line_end":199,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Value;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194637,"byte_end":194660,"line_start":200,"line_end":200,"column_start":5,"column_end":28}},{"value":"/ let value = Value::bytes(b\"foo\" as &[u8]);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194665,"byte_end":194711,"line_start":201,"line_end":201,"column_start":5,"column_end":51}},{"value":"/ assert!(value.is_bytes());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194716,"byte_end":194746,"line_start":202,"line_end":202,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(value.as_bytes().unwrap(), b\"foo\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194751,"byte_end":194801,"line_start":203,"line_end":203,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194806,"byte_end":194813,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195543,"byte_end":195547,"line_start":227,"line_end":227,"column_start":12,"column_end":16},"name":"cons","qualname":"<Value>::cons","value":"pub fn cons<T, U>(T, U) -> Self where T: Into<Value>, U: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a cons cell given its `car` and `cdr` fields.","sig":null,"attributes":[{"value":"/ Create a cons cell given its `car` and `cdr` fields.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194910,"byte_end":194966,"line_start":209,"line_end":209,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194971,"byte_end":194974,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194979,"byte_end":194986,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Value;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":194991,"byte_end":195014,"line_start":212,"line_end":212,"column_start":5,"column_end":28}},{"value":"/ let value = Value::cons(1, Value::Null);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195019,"byte_end":195063,"line_start":213,"line_end":213,"column_start":5,"column_end":49}},{"value":"/ assert!(value.is_cons());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195068,"byte_end":195097,"line_start":214,"line_end":214,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(value.as_pair().unwrap(), (&Value::from(1), &Value::Null));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195102,"byte_end":195176,"line_start":215,"line_end":215,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195181,"byte_end":195188,"line_start":216,"line_end":216,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195193,"byte_end":195196,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Note that you can also construct a cons cell from a Rust pair via the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195201,"byte_end":195274,"line_start":218,"line_end":218,"column_start":5,"column_end":78}},{"value":"/ `From` trait:","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195279,"byte_end":195296,"line_start":219,"line_end":219,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195301,"byte_end":195304,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195309,"byte_end":195316,"line_start":221,"line_end":221,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::Value;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195321,"byte_end":195344,"line_start":222,"line_end":222,"column_start":5,"column_end":28}},{"value":"/ let value = Value::from((42, \"answer\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195349,"byte_end":195393,"line_start":223,"line_end":223,"column_start":5,"column_end":49}},{"value":"/ assert!(value.is_cons());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195398,"byte_end":195427,"line_start":224,"line_end":224,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(value.as_pair().unwrap(), (&Value::from(42), &Value::string(\"answer\")));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195432,"byte_end":195519,"line_start":225,"line_end":225,"column_start":5,"column_end":92}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195524,"byte_end":195531,"line_start":226,"line_end":226,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195901,"byte_end":195905,"line_start":241,"line_end":241,"column_start":12,"column_end":16},"name":"list","qualname":"<Value>::list","value":"pub fn list<I>(I) -> Self where I: IntoIterator, I::Item: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a list value from elements convertible into `Value`.","sig":null,"attributes":[{"value":"/ Create a list value from elements convertible into `Value`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195694,"byte_end":195757,"line_start":235,"line_end":235,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195762,"byte_end":195765,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195770,"byte_end":195777,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195782,"byte_end":195813,"line_start":238,"line_end":238,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(Value::list(vec![1, 2, 3]), sexp!((1 2 3)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195818,"byte_end":195877,"line_start":239,"line_end":239,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":195882,"byte_end":195889,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196117,"byte_end":196124,"line_start":250,"line_end":250,"column_start":12,"column_end":19},"name":"is_list","qualname":"<Value>::is_list","value":"pub fn is_list(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a (proper) list.\n","sig":null,"attributes":[{"value":"/ Returns true if the value is a (proper) list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196056,"byte_end":196105,"line_start":249,"line_end":249,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196788,"byte_end":196802,"line_start":272,"line_end":272,"column_start":12,"column_end":26},"name":"is_dotted_list","qualname":"<Value>::is_dotted_list","value":"pub fn is_dotted_list(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a dotted (improper) list.","sig":null,"attributes":[{"value":"/ Returns true if the value is a dotted (improper) list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196408,"byte_end":196466,"line_start":261,"line_end":261,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196471,"byte_end":196474,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ Note that all values that are not pairs are considered dotted lists.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196479,"byte_end":196551,"line_start":263,"line_end":263,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196556,"byte_end":196559,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196564,"byte_end":196571,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196576,"byte_end":196607,"line_start":266,"line_end":266,"column_start":5,"column_end":36}},{"value":"/ let list = sexp!((1 2 3));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196612,"byte_end":196642,"line_start":267,"line_end":267,"column_start":5,"column_end":35}},{"value":"/ assert!(!list.is_dotted_list());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196647,"byte_end":196683,"line_start":268,"line_end":268,"column_start":5,"column_end":41}},{"value":"/ let dotted = sexp!((1 2 . 3));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196688,"byte_end":196722,"line_start":269,"line_end":269,"column_start":5,"column_end":39}},{"value":"/ assert!(dotted.is_dotted_list());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196727,"byte_end":196764,"line_start":270,"line_end":270,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":196769,"byte_end":196776,"line_start":271,"line_end":271,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197409,"byte_end":197415,"line_start":291,"line_end":291,"column_start":12,"column_end":18},"name":"append","qualname":"<Value>::append","value":"pub fn append<I, T>(I, T) -> Self where I: IntoIterator, I::Item: Into<Value>,\nT: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a list value from elements convertible into `Value`, using a\n given value as a tail.","sig":null,"attributes":[{"value":"/ Create a list value from elements convertible into `Value`, using a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197069,"byte_end":197140,"line_start":283,"line_end":283,"column_start":5,"column_end":76}},{"value":"/ given value as a tail.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197145,"byte_end":197171,"line_start":284,"line_end":284,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197176,"byte_end":197179,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197184,"byte_end":197191,"line_start":286,"line_end":286,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197196,"byte_end":197227,"line_start":287,"line_end":287,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(Value::append(vec![1u32, 2], 3), sexp!((1 2 . 3)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197232,"byte_end":197298,"line_start":288,"line_end":288,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(Value::append(vec![1u32, 2, 3], sexp!((4 5))), sexp!((1 2 3 4 5)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197303,"byte_end":197385,"line_start":289,"line_end":289,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":197390,"byte_end":197397,"line_start":290,"line_end":290,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198331,"byte_end":198337,"line_start":322,"line_end":322,"column_start":12,"column_end":18},"name":"vector","qualname":"<Value>::vector","value":"pub fn vector<I>(I) -> Self where I: IntoIterator, I::Item: Into<Value>","parent":null,"children":[],"decl_id":null,"docs":" Create a vector value from elements convertible into `Value`.","sig":null,"attributes":[{"value":"/ Create a vector value from elements convertible into `Value`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198116,"byte_end":198181,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198186,"byte_end":198189,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198194,"byte_end":198201,"line_start":318,"line_end":318,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198206,"byte_end":198237,"line_start":319,"line_end":319,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(Value::vector(vec![1u32, 2, 3]), sexp!(#(1 2 3)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198242,"byte_end":198307,"line_start":320,"line_end":320,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198312,"byte_end":198319,"line_start":321,"line_end":321,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199026,"byte_end":199035,"line_start":346,"line_end":346,"column_start":12,"column_end":21},"name":"is_string","qualname":"<Value>::is_string","value":"pub fn is_string(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a String. Returns false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if the value is a String. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198560,"byte_end":198627,"line_start":331,"line_end":331,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198632,"byte_end":198635,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_string` returns true, `as_str` is guaranteed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198640,"byte_end":198715,"line_start":333,"line_end":333,"column_start":5,"column_end":80}},{"value":"/ to return the string slice.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198720,"byte_end":198751,"line_start":334,"line_end":334,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198756,"byte_end":198759,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198764,"byte_end":198771,"line_start":336,"line_end":336,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198776,"byte_end":198798,"line_start":337,"line_end":337,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198803,"byte_end":198808,"line_start":338,"line_end":338,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . \"some string\") (b . #f)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198813,"byte_end":198863,"line_start":339,"line_end":339,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198868,"byte_end":198871,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_string());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198876,"byte_end":198908,"line_start":341,"line_end":341,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198913,"byte_end":198916,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ // The boolean `false` is not a string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198921,"byte_end":198964,"line_start":343,"line_end":343,"column_start":5,"column_end":48}},{"value":"/ assert!(!v[\"b\"].is_string());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":198969,"byte_end":199002,"line_start":344,"line_end":344,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199007,"byte_end":199014,"line_start":345,"line_end":345,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199871,"byte_end":199877,"line_start":373,"line_end":373,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Value>::as_str","value":"pub fn as_str(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a String, returns the associated str. Returns `None`\n otherwise.","sig":null,"attributes":[{"value":"/ If the value is a String, returns the associated str. Returns `None`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199096,"byte_end":199168,"line_start":350,"line_end":350,"column_start":5,"column_end":77}},{"value":"/ otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199173,"byte_end":199187,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199192,"byte_end":199195,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199200,"byte_end":199207,"line_start":353,"line_end":353,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199212,"byte_end":199234,"line_start":354,"line_end":354,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199239,"byte_end":199244,"line_start":355,"line_end":355,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . \"some string\") (b . #f)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199249,"byte_end":199299,"line_start":356,"line_end":356,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199304,"byte_end":199307,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_str(), Some(\"some string\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199312,"byte_end":199365,"line_start":358,"line_end":358,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199370,"byte_end":199373,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ // The boolean `false` is not a string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199378,"byte_end":199421,"line_start":360,"line_end":360,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(v[\"b\"].as_str(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199426,"byte_end":199464,"line_start":361,"line_end":361,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199469,"byte_end":199472,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ // S-expression values are printed in S-expression","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199477,"byte_end":199531,"line_start":363,"line_end":363,"column_start":5,"column_end":59}},{"value":"/ // representation, so strings are in quotes.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199536,"byte_end":199584,"line_start":364,"line_end":364,"column_start":5,"column_end":53}},{"value":"/ //    The value is: \"some string\"","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199589,"byte_end":199626,"line_start":365,"line_end":365,"column_start":5,"column_end":42}},{"value":"/ println!(\"The value is: {}\", v[\"a\"]);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199631,"byte_end":199672,"line_start":366,"line_end":366,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199677,"byte_end":199680,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ // Rust strings are printed without quotes.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199685,"byte_end":199732,"line_start":368,"line_end":368,"column_start":5,"column_end":52}},{"value":"/ //","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199737,"byte_end":199743,"line_start":369,"line_end":369,"column_start":5,"column_end":11}},{"value":"/ //    The value is: some string","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199748,"byte_end":199783,"line_start":370,"line_end":370,"column_start":5,"column_end":40}},{"value":"/ println!(\"The value is: {}\", v[\"a\"].as_str().unwrap());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199788,"byte_end":199847,"line_start":371,"line_end":371,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":199852,"byte_end":199859,"line_start":372,"line_end":372,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200498,"byte_end":200507,"line_start":396,"line_end":396,"column_start":12,"column_end":21},"name":"is_symbol","qualname":"<Value>::is_symbol","value":"pub fn is_symbol(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a symbol. Returns false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if the value is a symbol. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200009,"byte_end":200076,"line_start":380,"line_end":380,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200081,"byte_end":200084,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_symbol` returns true, `as_symbol` is guaranteed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200089,"byte_end":200167,"line_start":382,"line_end":382,"column_start":5,"column_end":83}},{"value":"/ to return the string slice.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200172,"byte_end":200203,"line_start":383,"line_end":383,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200208,"byte_end":200211,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200216,"byte_end":200223,"line_start":385,"line_end":385,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200228,"byte_end":200250,"line_start":386,"line_end":386,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200255,"byte_end":200260,"line_start":387,"line_end":387,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!((#:foo bar \"baz\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200265,"byte_end":200302,"line_start":388,"line_end":388,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200307,"byte_end":200310,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ assert!(v[1].is_symbol());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200315,"byte_end":200345,"line_start":390,"line_end":390,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200350,"byte_end":200353,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ // Keywords and strings are not symbols.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200358,"byte_end":200402,"line_start":392,"line_end":392,"column_start":5,"column_end":49}},{"value":"/ assert!(!v[0].is_symbol());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200407,"byte_end":200438,"line_start":393,"line_end":393,"column_start":5,"column_end":36}},{"value":"/ assert!(!v[2].is_symbol());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200443,"byte_end":200474,"line_start":394,"line_end":394,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200479,"byte_end":200486,"line_start":395,"line_end":395,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200827,"byte_end":200836,"line_start":410,"line_end":410,"column_start":12,"column_end":21},"name":"as_symbol","qualname":"<Value>::as_symbol","value":"pub fn as_symbol(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a symbol, returns the associated str. Returns `None`\n otherwise.","sig":null,"attributes":[{"value":"/ If the value is a symbol, returns the associated str. Returns `None`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200571,"byte_end":200643,"line_start":400,"line_end":400,"column_start":5,"column_end":77}},{"value":"/ otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200648,"byte_end":200662,"line_start":401,"line_end":401,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200667,"byte_end":200670,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200675,"byte_end":200682,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200687,"byte_end":200709,"line_start":404,"line_end":404,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200714,"byte_end":200719,"line_start":405,"line_end":405,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(foo);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200724,"byte_end":200747,"line_start":406,"line_end":406,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200752,"byte_end":200755,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.as_symbol(), Some(\"foo\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200760,"byte_end":200803,"line_start":408,"line_end":408,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200808,"byte_end":200815,"line_start":409,"line_end":409,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201463,"byte_end":201473,"line_start":433,"line_end":433,"column_start":12,"column_end":22},"name":"is_keyword","qualname":"<Value>::is_keyword","value":"pub fn is_keyword(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a keyword. Returns false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if the value is a keyword. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":200968,"byte_end":201036,"line_start":417,"line_end":417,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201041,"byte_end":201044,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_keyword` returns true, `as_keyword` is guaranteed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201049,"byte_end":201129,"line_start":419,"line_end":419,"column_start":5,"column_end":85}},{"value":"/ to return the string slice.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201134,"byte_end":201165,"line_start":420,"line_end":420,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201170,"byte_end":201173,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201178,"byte_end":201185,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201190,"byte_end":201212,"line_start":423,"line_end":423,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201217,"byte_end":201222,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!((#:foo bar \"baz\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201227,"byte_end":201264,"line_start":425,"line_end":425,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201269,"byte_end":201272,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ assert!(v[0].is_keyword());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201277,"byte_end":201308,"line_start":427,"line_end":427,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201313,"byte_end":201316,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ // Symbols and strings are not keywords.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201321,"byte_end":201365,"line_start":429,"line_end":429,"column_start":5,"column_end":49}},{"value":"/ assert!(!v[1].is_keyword());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201370,"byte_end":201402,"line_start":430,"line_end":430,"column_start":5,"column_end":37}},{"value":"/ assert!(!v[2].is_keyword());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201407,"byte_end":201439,"line_start":431,"line_end":431,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201444,"byte_end":201451,"line_start":432,"line_end":432,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201798,"byte_end":201808,"line_start":447,"line_end":447,"column_start":12,"column_end":22},"name":"as_keyword","qualname":"<Value>::as_keyword","value":"pub fn as_keyword(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a keyword, returns the associated str. Returns `None`\n otherwise.","sig":null,"attributes":[{"value":"/ If the value is a keyword, returns the associated str. Returns `None`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201538,"byte_end":201611,"line_start":437,"line_end":437,"column_start":5,"column_end":78}},{"value":"/ otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201616,"byte_end":201630,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201635,"byte_end":201638,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201643,"byte_end":201650,"line_start":440,"line_end":440,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201655,"byte_end":201677,"line_start":441,"line_end":441,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201682,"byte_end":201687,"line_start":442,"line_end":442,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(#:foo);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201692,"byte_end":201717,"line_start":443,"line_end":443,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201722,"byte_end":201725,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.as_keyword(), Some(\"foo\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201730,"byte_end":201774,"line_start":445,"line_end":445,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201779,"byte_end":201786,"line_start":446,"line_end":446,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202457,"byte_end":202464,"line_start":471,"line_end":471,"column_start":12,"column_end":19},"name":"as_name","qualname":"<Value>::as_name","value":"pub fn as_name(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get the name of a symbol or keyword, or the value of a string.","sig":null,"attributes":[{"value":"/ Get the name of a symbol or keyword, or the value of a string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":201941,"byte_end":202007,"line_start":454,"line_end":454,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202012,"byte_end":202015,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ This is useful if symbols, keywords and strings need to be treated","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202020,"byte_end":202090,"line_start":456,"line_end":456,"column_start":5,"column_end":75}},{"value":"/ equivalently in some context.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202095,"byte_end":202128,"line_start":457,"line_end":457,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202133,"byte_end":202136,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202141,"byte_end":202148,"line_start":459,"line_end":459,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202153,"byte_end":202175,"line_start":460,"line_end":460,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202180,"byte_end":202185,"line_start":461,"line_end":461,"column_start":5,"column_end":10}},{"value":"/ let kw = sexp!(#:foo);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202190,"byte_end":202216,"line_start":462,"line_end":462,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(kw.as_name(), Some(\"foo\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202221,"byte_end":202263,"line_start":463,"line_end":463,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202268,"byte_end":202271,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ let sym = sexp!(bar);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202276,"byte_end":202301,"line_start":465,"line_end":465,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(sym.as_name(), Some(\"bar\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202306,"byte_end":202349,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202354,"byte_end":202357,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ let s = sexp!(\"baz\");","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202362,"byte_end":202387,"line_start":468,"line_end":468,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.as_name(), Some(\"baz\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202392,"byte_end":202433,"line_start":469,"line_end":469,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202438,"byte_end":202445,"line_start":470,"line_end":470,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203159,"byte_end":203167,"line_start":495,"line_end":495,"column_start":12,"column_end":20},"name":"is_bytes","qualname":"<Value>::is_bytes","value":"pub fn is_bytes(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a byte vector. Returns false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if the value is a byte vector. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202679,"byte_end":202751,"line_start":480,"line_end":480,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202756,"byte_end":202759,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_bytes` returns true, `as_bytes` is guaranteed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202764,"byte_end":202840,"line_start":482,"line_end":482,"column_start":5,"column_end":81}},{"value":"/ to return the byte slice.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202845,"byte_end":202874,"line_start":483,"line_end":483,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202879,"byte_end":202882,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202887,"byte_end":202894,"line_start":485,"line_end":485,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202899,"byte_end":202921,"line_start":486,"line_end":486,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202926,"byte_end":202931,"line_start":487,"line_end":487,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . ,(b\"some bytes\" as &[u8])) (b . \"string\")));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":202936,"byte_end":203004,"line_start":488,"line_end":488,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203009,"byte_end":203012,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_bytes());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203017,"byte_end":203048,"line_start":490,"line_end":490,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203053,"byte_end":203056,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ // A string is not a byte vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203061,"byte_end":203098,"line_start":492,"line_end":492,"column_start":5,"column_end":42}},{"value":"/ assert!(!v[\"b\"].is_bytes());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203103,"byte_end":203135,"line_start":493,"line_end":493,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203140,"byte_end":203147,"line_start":494,"line_end":494,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203659,"byte_end":203667,"line_start":512,"line_end":512,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Value>::as_bytes","value":"pub fn as_bytes(&Self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a byte vector, returns the associated byte\n slice. Returns `None` otherwise.","sig":null,"attributes":[{"value":"/ If the value is a byte vector, returns the associated byte","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203230,"byte_end":203292,"line_start":499,"line_end":499,"column_start":5,"column_end":67}},{"value":"/ slice. Returns `None` otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203297,"byte_end":203333,"line_start":500,"line_end":500,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203338,"byte_end":203341,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203346,"byte_end":203353,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203358,"byte_end":203380,"line_start":503,"line_end":503,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203385,"byte_end":203390,"line_start":504,"line_end":504,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . ,(b\"some bytes\" as &[u8])) (b . \"string\")));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203395,"byte_end":203463,"line_start":505,"line_end":505,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203468,"byte_end":203471,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_bytes(), Some(b\"some bytes\" as &[u8]));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203476,"byte_end":203540,"line_start":507,"line_end":507,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203545,"byte_end":203548,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ // A string is not a byte vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203553,"byte_end":203590,"line_start":509,"line_end":509,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(v[\"b\"].as_bytes(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203595,"byte_end":203635,"line_start":510,"line_end":510,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203640,"byte_end":203647,"line_start":511,"line_end":511,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203854,"byte_end":203863,"line_start":520,"line_end":520,"column_start":12,"column_end":21},"name":"is_number","qualname":"<Value>::is_number","value":"pub fn is_number(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `true` if the value is a number.\n","sig":null,"attributes":[{"value":"/ Return `true` if the value is a number.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203799,"byte_end":203842,"line_start":519,"line_end":519,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204024,"byte_end":204033,"line_start":526,"line_end":526,"column_start":12,"column_end":21},"name":"as_number","qualname":"<Value>::as_number","value":"pub fn as_number(&Self) -> Option<&Number>","parent":null,"children":[],"decl_id":null,"docs":" For numbers, return a reference to them. For other values, return\n `None`.\n","sig":null,"attributes":[{"value":"/ For numbers, return a reference to them. For other values, return","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":203927,"byte_end":203996,"line_start":524,"line_end":524,"column_start":5,"column_end":74}},{"value":"/ `None`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204001,"byte_end":204012,"line_start":525,"line_end":525,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204794,"byte_end":204800,"line_start":553,"line_end":553,"column_start":12,"column_end":18},"name":"is_i64","qualname":"<Value>::is_i64","value":"pub fn is_i64(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is an integer between `i64::MIN` and\n `i64::MAX`.","sig":null,"attributes":[{"value":"/ Returns true if the value is an integer between `i64::MIN` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204168,"byte_end":204234,"line_start":533,"line_end":533,"column_start":5,"column_end":71}},{"value":"/ `i64::MAX`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204239,"byte_end":204254,"line_start":534,"line_end":534,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204259,"byte_end":204262,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_i64` returns true, `as_i64` is guaranteed to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204267,"byte_end":204342,"line_start":536,"line_end":536,"column_start":5,"column_end":80}},{"value":"/ return the integer value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204347,"byte_end":204376,"line_start":537,"line_end":537,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204381,"byte_end":204384,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204389,"byte_end":204396,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204401,"byte_end":204423,"line_start":540,"line_end":540,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204428,"byte_end":204433,"line_start":541,"line_end":541,"column_start":5,"column_end":10}},{"value":"/ let big = i64::max_value() as u64 + 10;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204438,"byte_end":204481,"line_start":542,"line_end":542,"column_start":5,"column_end":48}},{"value":"/ let v = sexp!(((a . 64) (b . ,big) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204486,"byte_end":204539,"line_start":543,"line_end":543,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204544,"byte_end":204547,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_i64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204552,"byte_end":204581,"line_start":545,"line_end":545,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204586,"byte_end":204589,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ // Greater than i64::MAX.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204594,"byte_end":204623,"line_start":547,"line_end":547,"column_start":5,"column_end":34}},{"value":"/ assert!(!v[\"b\"].is_i64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204628,"byte_end":204658,"line_start":548,"line_end":548,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204663,"byte_end":204666,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ // Numbers with a decimal point are not considered integers.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204671,"byte_end":204735,"line_start":550,"line_end":550,"column_start":5,"column_end":69}},{"value":"/ assert!(!v[\"c\"].is_i64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204740,"byte_end":204770,"line_start":551,"line_end":551,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204775,"byte_end":204782,"line_start":552,"line_end":552,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205489,"byte_end":205495,"line_start":578,"line_end":578,"column_start":12,"column_end":18},"name":"is_u64","qualname":"<Value>::is_u64","value":"pub fn is_u64(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is an integer between zero and `u64::MAX`.","sig":null,"attributes":[{"value":"/ Returns true if the value is an integer between zero and `u64::MAX`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":204931,"byte_end":205003,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205008,"byte_end":205011,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_u64` returns true, `as_u64` is guaranteed to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205016,"byte_end":205091,"line_start":562,"line_end":562,"column_start":5,"column_end":80}},{"value":"/ return the integer value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205096,"byte_end":205125,"line_start":563,"line_end":563,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205130,"byte_end":205133,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205138,"byte_end":205145,"line_start":565,"line_end":565,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205150,"byte_end":205172,"line_start":566,"line_end":566,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205177,"byte_end":205182,"line_start":567,"line_end":567,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 64) (b . -64) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205187,"byte_end":205239,"line_start":568,"line_end":568,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205244,"byte_end":205247,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_u64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205252,"byte_end":205281,"line_start":570,"line_end":570,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205286,"byte_end":205289,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ // Negative integer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205294,"byte_end":205318,"line_start":572,"line_end":572,"column_start":5,"column_end":29}},{"value":"/ assert!(!v[\"b\"].is_u64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205323,"byte_end":205353,"line_start":573,"line_end":573,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205358,"byte_end":205361,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ // Numbers with a decimal point are not considered integers.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205366,"byte_end":205430,"line_start":575,"line_end":575,"column_start":5,"column_end":69}},{"value":"/ assert!(!v[\"c\"].is_u64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205435,"byte_end":205465,"line_start":576,"line_end":576,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205470,"byte_end":205477,"line_start":577,"line_end":577,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206280,"byte_end":206286,"line_start":605,"line_end":605,"column_start":12,"column_end":18},"name":"is_f64","qualname":"<Value>::is_f64","value":"pub fn is_f64(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a number that can be represented by f64.","sig":null,"attributes":[{"value":"/ Returns true if the value is a number that can be represented by f64.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205626,"byte_end":205699,"line_start":585,"line_end":585,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205704,"byte_end":205707,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_f64` returns true, `as_f64` is guaranteed to","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205712,"byte_end":205787,"line_start":587,"line_end":587,"column_start":5,"column_end":80}},{"value":"/ return the floating point value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205792,"byte_end":205828,"line_start":588,"line_end":588,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205833,"byte_end":205836,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ Currently this function returns true if and only if both `is_i64` and","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205841,"byte_end":205914,"line_start":590,"line_end":590,"column_start":5,"column_end":78}},{"value":"/ `is_u64` return false but this is not a guarantee in the future.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205919,"byte_end":205987,"line_start":591,"line_end":591,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":205992,"byte_end":205995,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206000,"byte_end":206007,"line_start":593,"line_end":593,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206012,"byte_end":206034,"line_start":594,"line_end":594,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206039,"byte_end":206044,"line_start":595,"line_end":595,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 256.0) (b . 64) (c . -64)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206049,"byte_end":206101,"line_start":596,"line_end":596,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206106,"byte_end":206109,"line_start":597,"line_end":597,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_f64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206114,"byte_end":206143,"line_start":598,"line_end":598,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206148,"byte_end":206151,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ // Integers.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206156,"byte_end":206172,"line_start":600,"line_end":600,"column_start":5,"column_end":21}},{"value":"/ assert!(!v[\"b\"].is_f64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206177,"byte_end":206207,"line_start":601,"line_end":601,"column_start":5,"column_end":35}},{"value":"/ assert!(!v[\"c\"].is_f64());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206212,"byte_end":206242,"line_start":602,"line_end":602,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206247,"byte_end":206254,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206259,"byte_end":206268,"line_start":604,"line_end":604,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206855,"byte_end":206861,"line_start":626,"line_end":626,"column_start":12,"column_end":18},"name":"as_i64","qualname":"<Value>::as_i64","value":"pub fn as_i64(&Self) -> Option<i64>","parent":null,"children":[],"decl_id":null,"docs":" If the value is an integer, represent it as i64 if possible. Returns\n None otherwise.","sig":null,"attributes":[{"value":"/ If the value is an integer, represent it as i64 if possible. Returns","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206417,"byte_end":206489,"line_start":612,"line_end":612,"column_start":5,"column_end":77}},{"value":"/ None otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206494,"byte_end":206513,"line_start":613,"line_end":613,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206518,"byte_end":206521,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206526,"byte_end":206533,"line_start":615,"line_end":615,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206538,"byte_end":206560,"line_start":616,"line_end":616,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206565,"byte_end":206570,"line_start":617,"line_end":617,"column_start":5,"column_end":10}},{"value":"/ let big = i64::max_value() as u64 + 10;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206575,"byte_end":206618,"line_start":618,"line_end":618,"column_start":5,"column_end":48}},{"value":"/ let v = sexp!(((a . 64) (b . ,big) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206623,"byte_end":206676,"line_start":619,"line_end":619,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206681,"byte_end":206684,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_i64(), Some(64));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206689,"byte_end":206731,"line_start":621,"line_end":621,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v[\"b\"].as_i64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206736,"byte_end":206774,"line_start":622,"line_end":622,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(v[\"c\"].as_i64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206779,"byte_end":206817,"line_start":623,"line_end":623,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206822,"byte_end":206829,"line_start":624,"line_end":624,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206834,"byte_end":206843,"line_start":625,"line_end":625,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207322,"byte_end":207328,"line_start":642,"line_end":642,"column_start":12,"column_end":18},"name":"as_u64","qualname":"<Value>::as_u64","value":"pub fn as_u64(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" If the value is an integer, represent it as u64 if possible. Returns\n None otherwise.","sig":null,"attributes":[{"value":"/ If the value is an integer, represent it as u64 if possible. Returns","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":206947,"byte_end":207019,"line_start":630,"line_end":630,"column_start":5,"column_end":77}},{"value":"/ None otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207024,"byte_end":207043,"line_start":631,"line_end":631,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207048,"byte_end":207051,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207056,"byte_end":207063,"line_start":633,"line_end":633,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207068,"byte_end":207090,"line_start":634,"line_end":634,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207095,"byte_end":207100,"line_start":635,"line_end":635,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 64) (b . -64) (c . 256.0)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207105,"byte_end":207157,"line_start":636,"line_end":636,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207162,"byte_end":207165,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_u64(), Some(64));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207170,"byte_end":207212,"line_start":638,"line_end":638,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v[\"b\"].as_u64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207217,"byte_end":207255,"line_start":639,"line_end":639,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(v[\"c\"].as_u64(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207260,"byte_end":207298,"line_start":640,"line_end":640,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207303,"byte_end":207310,"line_start":641,"line_end":641,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207803,"byte_end":207809,"line_start":658,"line_end":658,"column_start":12,"column_end":18},"name":"as_f64","qualname":"<Value>::as_f64","value":"pub fn as_f64(&Self) -> Option<f64>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a number, represent it as f64 if possible. Returns\n None otherwise.","sig":null,"attributes":[{"value":"/ If the value is a number, represent it as f64 if possible. Returns","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207414,"byte_end":207484,"line_start":646,"line_end":646,"column_start":5,"column_end":75}},{"value":"/ None otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207489,"byte_end":207508,"line_start":647,"line_end":647,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207513,"byte_end":207516,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207521,"byte_end":207528,"line_start":649,"line_end":649,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207533,"byte_end":207555,"line_start":650,"line_end":650,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207560,"byte_end":207565,"line_start":651,"line_end":651,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 256.0) (b . 64) (c . -64)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207570,"byte_end":207622,"line_start":652,"line_end":652,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207627,"byte_end":207630,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_f64(), Some(256.0));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207635,"byte_end":207680,"line_start":654,"line_end":654,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(v[\"b\"].as_f64(), Some(64.0));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207685,"byte_end":207729,"line_start":655,"line_end":655,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(v[\"c\"].as_f64(), Some(-64.0));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207734,"byte_end":207779,"line_start":656,"line_end":656,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207784,"byte_end":207791,"line_start":657,"line_end":657,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208366,"byte_end":208376,"line_start":677,"line_end":677,"column_start":12,"column_end":22},"name":"is_boolean","qualname":"<Value>::is_boolean","value":"pub fn is_boolean(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a Boolean. Returns false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if the value is a Boolean. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207895,"byte_end":207963,"line_start":662,"line_end":662,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207968,"byte_end":207971,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_boolean` returns true, `as_bool` is","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":207976,"byte_end":208042,"line_start":664,"line_end":664,"column_start":5,"column_end":71}},{"value":"/ guaranteed to return the boolean value.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208047,"byte_end":208090,"line_start":665,"line_end":665,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208095,"byte_end":208098,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208103,"byte_end":208110,"line_start":667,"line_end":667,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208115,"byte_end":208137,"line_start":668,"line_end":668,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208142,"byte_end":208147,"line_start":669,"line_end":669,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . #f) (b . #nil)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208152,"byte_end":208193,"line_start":670,"line_end":670,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208198,"byte_end":208201,"line_start":671,"line_end":671,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_boolean());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208206,"byte_end":208239,"line_start":672,"line_end":672,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208244,"byte_end":208247,"line_start":673,"line_end":673,"column_start":5,"column_end":8}},{"value":"/ // The nil value is special, and not a boolean.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208252,"byte_end":208303,"line_start":674,"line_end":674,"column_start":5,"column_end":56}},{"value":"/ assert!(!v[\"b\"].is_boolean());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208308,"byte_end":208342,"line_start":675,"line_end":675,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208347,"byte_end":208354,"line_start":676,"line_end":676,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208832,"byte_end":208839,"line_start":694,"line_end":694,"column_start":12,"column_end":19},"name":"as_bool","qualname":"<Value>::as_bool","value":"pub fn as_bool(&Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a `Boolean`, returns the associated bool. Returns None\n otherwise.","sig":null,"attributes":[{"value":"/ If the value is a `Boolean`, returns the associated bool. Returns None","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208438,"byte_end":208512,"line_start":681,"line_end":681,"column_start":5,"column_end":79}},{"value":"/ otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208517,"byte_end":208531,"line_start":682,"line_end":682,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208536,"byte_end":208539,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208544,"byte_end":208551,"line_start":684,"line_end":684,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208556,"byte_end":208578,"line_start":685,"line_end":685,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208583,"byte_end":208588,"line_start":686,"line_end":686,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . #f) (b . \"false\")));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208593,"byte_end":208637,"line_start":687,"line_end":687,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208642,"byte_end":208645,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_bool(), Some(false));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208650,"byte_end":208696,"line_start":689,"line_end":689,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208701,"byte_end":208704,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ // The string `\"false\"` is a string, not a boolean.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208709,"byte_end":208764,"line_start":691,"line_end":691,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(v[\"b\"].as_bool(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208769,"byte_end":208808,"line_start":692,"line_end":692,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208813,"byte_end":208820,"line_start":693,"line_end":693,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209052,"byte_end":209059,"line_start":702,"line_end":702,"column_start":12,"column_end":19},"name":"is_char","qualname":"<Value>::is_char","value":"pub fn is_char(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a character. Returns false otherwise.\n","sig":null,"attributes":[{"value":"/ Returns true if the value is a character. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":208970,"byte_end":209040,"line_start":701,"line_end":701,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209527,"byte_end":209534,"line_start":719,"line_end":719,"column_start":12,"column_end":19},"name":"as_char","qualname":"<Value>::as_char","value":"pub fn as_char(&Self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a character, returns the associated `char`. Returns None\n otherwise.","sig":null,"attributes":[{"value":"/ If the value is a character, returns the associated `char`. Returns None","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209121,"byte_end":209197,"line_start":706,"line_end":706,"column_start":5,"column_end":81}},{"value":"/ otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209202,"byte_end":209216,"line_start":707,"line_end":707,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209221,"byte_end":209224,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209229,"byte_end":209236,"line_start":709,"line_end":709,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209241,"byte_end":209263,"line_start":710,"line_end":710,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209268,"byte_end":209273,"line_start":711,"line_end":711,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . 'c') (b . \"c\")));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209278,"byte_end":209319,"line_start":712,"line_end":712,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209324,"byte_end":209327,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_char(), Some('c'));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209332,"byte_end":209376,"line_start":714,"line_end":714,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209381,"byte_end":209384,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ // The string `\"c\"` is a single-character string, not a character.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209389,"byte_end":209459,"line_start":716,"line_end":716,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(v[\"b\"].as_char(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209464,"byte_end":209503,"line_start":717,"line_end":717,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209508,"byte_end":209515,"line_start":718,"line_end":718,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210099,"byte_end":210105,"line_start":741,"line_end":741,"column_start":12,"column_end":18},"name":"is_nil","qualname":"<Value>::is_nil","value":"pub fn is_nil(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is `Nil`. Returns false otherwise.","sig":null,"attributes":[{"value":"/ Returns true if the value is `Nil`. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209665,"byte_end":209729,"line_start":726,"line_end":726,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209734,"byte_end":209737,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ For any Value on which `is_nil` returns true, `as_nil` is guaranteed","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209742,"byte_end":209814,"line_start":728,"line_end":728,"column_start":5,"column_end":77}},{"value":"/ to return `Some(())`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209819,"byte_end":209844,"line_start":729,"line_end":729,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209849,"byte_end":209852,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209857,"byte_end":209864,"line_start":731,"line_end":731,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209869,"byte_end":209891,"line_start":732,"line_end":732,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209896,"byte_end":209901,"line_start":733,"line_end":733,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . #nil) (b . #f)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209906,"byte_end":209947,"line_start":734,"line_end":734,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209952,"byte_end":209955,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ assert!(v[\"a\"].is_nil());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209960,"byte_end":209989,"line_start":736,"line_end":736,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":209994,"byte_end":209997,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ // The boolean `false` is not nil.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210002,"byte_end":210040,"line_start":738,"line_end":738,"column_start":5,"column_end":43}},{"value":"/ assert!(!v[\"b\"].is_nil());","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210045,"byte_end":210075,"line_start":739,"line_end":739,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210080,"byte_end":210087,"line_start":740,"line_end":740,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1070},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210598,"byte_end":210604,"line_start":759,"line_end":759,"column_start":12,"column_end":18},"name":"as_nil","qualname":"<Value>::as_nil","value":"pub fn as_nil(&Self) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" If the value is `Nil`, returns `()`. Returns `None` otherwise.","sig":null,"attributes":[{"value":"/ If the value is `Nil`, returns `()`. Returns `None` otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210166,"byte_end":210232,"line_start":745,"line_end":745,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210237,"byte_end":210240,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210245,"byte_end":210252,"line_start":747,"line_end":747,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210257,"byte_end":210279,"line_start":748,"line_end":748,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210284,"byte_end":210289,"line_start":749,"line_end":749,"column_start":5,"column_end":10}},{"value":"/ let v = sexp!(((a . #nil) (b . #f) (c . ())));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210294,"byte_end":210344,"line_start":750,"line_end":750,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210349,"byte_end":210352,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v[\"a\"].as_nil(), Some(()));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210357,"byte_end":210399,"line_start":752,"line_end":752,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210404,"byte_end":210407,"line_start":753,"line_end":753,"column_start":5,"column_end":8}},{"value":"/ // The boolean `false` is not nil.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210412,"byte_end":210450,"line_start":754,"line_end":754,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(v[\"b\"].as_nil(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210455,"byte_end":210493,"line_start":755,"line_end":755,"column_start":5,"column_end":43}},{"value":"/ // Neither is the empty list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210498,"byte_end":210531,"line_start":756,"line_end":756,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(v[\"c\"].as_nil(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210536,"byte_end":210574,"line_start":757,"line_end":757,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210579,"byte_end":210586,"line_start":758,"line_end":758,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210806,"byte_end":210813,"line_start":767,"line_end":767,"column_start":12,"column_end":19},"name":"is_null","qualname":"<Value>::is_null","value":"pub fn is_null(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is `Null`. Returns false otherwise.\n","sig":null,"attributes":[{"value":"/ Returns true if the value is `Null`. Returns false otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210729,"byte_end":210794,"line_start":766,"line_end":766,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210954,"byte_end":210961,"line_start":772,"line_end":772,"column_start":12,"column_end":19},"name":"as_null","qualname":"<Value>::as_null","value":"pub fn as_null(&Self) -> Option<()>","parent":null,"children":[],"decl_id":null,"docs":" If the value is `Null`, returns `()`. Returns `None` otherwise.\n","sig":null,"attributes":[{"value":"/ If the value is `Null`, returns `()`. Returns `None` otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":210875,"byte_end":210942,"line_start":771,"line_end":771,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211171,"byte_end":211178,"line_start":780,"line_end":780,"column_start":12,"column_end":19},"name":"is_cons","qualname":"<Value>::is_cons","value":"pub fn is_cons(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a cons cell. Returns `False` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns true if the value is a cons cell. Returns `False` otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211087,"byte_end":211159,"line_start":779,"line_end":779,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211403,"byte_end":211410,"line_start":789,"line_end":789,"column_start":12,"column_end":19},"name":"as_cons","qualname":"<Value>::as_cons","value":"pub fn as_cons(&Self) -> Option<&Cons>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a cons cell, returns a reference to it. Returns `None`\n otherwise.\n","sig":null,"attributes":[{"value":"/ If the value is a cons cell, returns a reference to it. Returns `None`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211298,"byte_end":211372,"line_start":787,"line_end":787,"column_start":5,"column_end":79}},{"value":"/ otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211377,"byte_end":211391,"line_start":788,"line_end":788,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211660,"byte_end":211671,"line_start":798,"line_end":798,"column_start":12,"column_end":23},"name":"as_cons_mut","qualname":"<Value>::as_cons_mut","value":"pub fn as_cons_mut(&mut Self) -> Option<&mut Cons>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a cons cell, returns a mutable reference to it. Returns\n `None` otherwise.\n","sig":null,"attributes":[{"value":"/ If the value is a cons cell, returns a mutable reference to it. Returns","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211547,"byte_end":211622,"line_start":796,"line_end":796,"column_start":5,"column_end":80}},{"value":"/ `None` otherwise.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211627,"byte_end":211648,"line_start":797,"line_end":797,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212142,"byte_end":212149,"line_start":814,"line_end":814,"column_start":12,"column_end":19},"name":"as_pair","qualname":"<Value>::as_pair","value":"pub fn as_pair(&Self) -> Option<(&Value, &Value)>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a cons cell, return references to its `car` and `cdr`\n fields.","sig":null,"attributes":[{"value":"/ If the value is a cons cell, return references to its `car` and `cdr`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211816,"byte_end":211889,"line_start":805,"line_end":805,"column_start":5,"column_end":78}},{"value":"/ fields.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211894,"byte_end":211905,"line_start":806,"line_end":806,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211910,"byte_end":211913,"line_start":807,"line_end":807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211918,"byte_end":211925,"line_start":808,"line_end":808,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211930,"byte_end":211952,"line_start":809,"line_end":809,"column_start":5,"column_end":27}},{"value":"/ let cell = sexp!((foo . bar));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211957,"byte_end":211991,"line_start":810,"line_end":810,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(cell.as_pair(), Some((&sexp!(foo), &sexp!(bar))));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":211996,"byte_end":212061,"line_start":811,"line_end":811,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(sexp!(\"not-a-pair\").as_pair(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212066,"byte_end":212118,"line_start":812,"line_end":812,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212123,"byte_end":212130,"line_start":813,"line_end":813,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212294,"byte_end":212303,"line_start":819,"line_end":819,"column_start":12,"column_end":21},"name":"is_vector","qualname":"<Value>::is_vector","value":"pub fn is_vector(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the value is a vector.\n","sig":null,"attributes":[{"value":"/ Returns true if the value is a vector.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212240,"byte_end":212282,"line_start":818,"line_end":818,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212725,"byte_end":212733,"line_start":834,"line_end":834,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Value>::as_slice","value":"pub fn as_slice(&Self) -> Option<&[Value]>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a vector, return a reference to its elements.","sig":null,"attributes":[{"value":"/ If the value is a vector, return a reference to its elements.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212425,"byte_end":212490,"line_start":826,"line_end":826,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212495,"byte_end":212498,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212503,"byte_end":212510,"line_start":828,"line_end":828,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212515,"byte_end":212546,"line_start":829,"line_end":829,"column_start":5,"column_end":36}},{"value":"/ let v = sexp!(#(1 2 \"three\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212551,"byte_end":212585,"line_start":830,"line_end":830,"column_start":5,"column_end":39}},{"value":"/ let slice: &[Value] = &[sexp!(1), sexp!(2), sexp!(\"three\")];","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212590,"byte_end":212654,"line_start":831,"line_end":831,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(v.as_slice(), Some(slice));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212659,"byte_end":212701,"line_start":832,"line_end":832,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212706,"byte_end":212713,"line_start":833,"line_end":833,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213238,"byte_end":213250,"line_start":850,"line_end":850,"column_start":12,"column_end":24},"name":"as_slice_mut","qualname":"<Value>::as_slice_mut","value":"pub fn as_slice_mut(&mut Self) -> Option<&mut [Value]>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a vector, return a mutable reference to its elements.","sig":null,"attributes":[{"value":"/ If the value is a vector, return a mutable reference to its elements.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212883,"byte_end":212956,"line_start":841,"line_end":841,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212961,"byte_end":212964,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212969,"byte_end":212976,"line_start":843,"line_end":843,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":212981,"byte_end":213012,"line_start":844,"line_end":844,"column_start":5,"column_end":36}},{"value":"/ let mut v = sexp!(#(1 2 \"three\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213017,"byte_end":213055,"line_start":845,"line_end":845,"column_start":5,"column_end":43}},{"value":"/ v.as_slice_mut().unwrap()[2] = sexp!(3);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213060,"byte_end":213104,"line_start":846,"line_end":846,"column_start":5,"column_end":49}},{"value":"/ let slice: &[Value] = &[sexp!(1), sexp!(2), sexp!(3)];","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213109,"byte_end":213167,"line_start":847,"line_end":847,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(v.as_slice(), Some(slice));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213172,"byte_end":213214,"line_start":848,"line_end":848,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213219,"byte_end":213226,"line_start":849,"line_end":849,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214151,"byte_end":214160,"line_start":875,"line_end":875,"column_start":12,"column_end":21},"name":"list_iter","qualname":"<Value>::list_iter","value":"pub fn list_iter(&Self) -> Option<cons::ListIter>","parent":null,"children":[],"decl_id":null,"docs":" If the value is a list, return an iterator over the list elements.","sig":null,"attributes":[{"value":"/ If the value is a list, return an iterator over the list elements.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213408,"byte_end":213478,"line_start":857,"line_end":857,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213483,"byte_end":213486,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ If the value is not either a cons cell or `Null`, `None` is returned.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213491,"byte_end":213564,"line_start":859,"line_end":859,"column_start":5,"column_end":78}},{"value":"/ Note that the returned iterator has special behavior for improper lists, yielding the","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213578,"byte_end":213667,"line_start":861,"line_end":861,"column_start":5,"column_end":94}},{"value":"/ element after the dot after returning `None` the first time.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213672,"byte_end":213736,"line_start":862,"line_end":862,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213741,"byte_end":213744,"line_start":863,"line_end":863,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213749,"byte_end":213756,"line_start":864,"line_end":864,"column_start":5,"column_end":12}},{"value":"/ use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213761,"byte_end":213781,"line_start":865,"line_end":865,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213786,"byte_end":213789,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ let value = lexpr::from_str(\"(1 2 . 3)\").unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213794,"byte_end":213848,"line_start":867,"line_end":867,"column_start":5,"column_end":59}},{"value":"/ let mut iter = value.list_iter().unwrap();","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213853,"byte_end":213899,"line_start":868,"line_end":868,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(iter.next(), Some(&sexp!(1)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213904,"byte_end":213949,"line_start":869,"line_end":869,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(iter.next(), Some(&sexp!(2)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":213954,"byte_end":213999,"line_start":870,"line_end":870,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214004,"byte_end":214038,"line_start":871,"line_end":871,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(iter.next(), Some(&sexp!(3)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214043,"byte_end":214088,"line_start":872,"line_end":872,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214093,"byte_end":214127,"line_start":873,"line_end":873,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214132,"byte_end":214139,"line_start":874,"line_end":874,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214972,"byte_end":214978,"line_start":896,"line_end":896,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<Value>::to_vec","value":"pub fn to_vec(&Self) -> Option<Vec<Value>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts conversion to a vector, cloning the values.","sig":null,"attributes":[{"value":"/ Attempts conversion to a vector, cloning the values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214390,"byte_end":214446,"line_start":883,"line_end":883,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214451,"byte_end":214454,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ For proper lists (including `Value::Null`), this returns a vector of","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214459,"byte_end":214531,"line_start":885,"line_end":885,"column_start":5,"column_end":77}},{"value":"/ values. If you want to handle improper list in a similar way, combine","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214536,"byte_end":214609,"line_start":886,"line_end":886,"column_start":5,"column_end":78}},{"value":"/ [`as_cons`] and the [`Cons::to_vec`] method.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214614,"byte_end":214662,"line_start":887,"line_end":887,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214667,"byte_end":214670,"line_start":888,"line_end":888,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214675,"byte_end":214682,"line_start":889,"line_end":889,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214687,"byte_end":214718,"line_start":890,"line_end":890,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(sexp!((1 2 3)).to_vec(), Some(vec![sexp!(1), sexp!(2), sexp!(3)]));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214723,"byte_end":214805,"line_start":891,"line_end":891,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(sexp!(()).to_vec(), Some(vec![]));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214810,"byte_end":214859,"line_start":892,"line_end":892,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(sexp!((1 2 . 3)).to_vec(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214864,"byte_end":214912,"line_start":893,"line_end":893,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214917,"byte_end":214924,"line_start":894,"line_end":894,"column_start":5,"column_end":12}},{"value":"/ [`as_cons`]: Value::as_cons","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":214929,"byte_end":214960,"line_start":895,"line_end":895,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216019,"byte_end":216029,"line_start":925,"line_end":925,"column_start":12,"column_end":22},"name":"to_ref_vec","qualname":"<Value>::to_ref_vec","value":"pub fn to_ref_vec(&Self) -> Option<Vec<&Value>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts conversion to a vector, taking references to the values.","sig":null,"attributes":[{"value":"/ Attempts conversion to a vector, taking references to the values.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215387,"byte_end":215456,"line_start":911,"line_end":911,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215461,"byte_end":215464,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ For proper lists (including `Value::Null`), this returns a vector of","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215469,"byte_end":215541,"line_start":913,"line_end":913,"column_start":5,"column_end":77}},{"value":"/ value references. If you want to handle improper list in a similar way,","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215546,"byte_end":215621,"line_start":914,"line_end":914,"column_start":5,"column_end":80}},{"value":"/ combine [`as_cons`] and the [`Cons::to_ref_vec`] method.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215626,"byte_end":215686,"line_start":915,"line_end":915,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215691,"byte_end":215694,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215699,"byte_end":215706,"line_start":917,"line_end":917,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::{sexp, Value};","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215711,"byte_end":215742,"line_start":918,"line_end":918,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(sexp!((1 2 3)).to_ref_vec(), Some(vec![&sexp!(1), &sexp!(2), &sexp!(3)]));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215747,"byte_end":215836,"line_start":919,"line_end":919,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(sexp!(()).to_ref_vec(), Some(vec![]));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215841,"byte_end":215894,"line_start":920,"line_end":920,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(sexp!((1 2 . 3)).to_ref_vec(), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215899,"byte_end":215951,"line_start":921,"line_end":921,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215956,"byte_end":215963,"line_start":922,"line_end":922,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215968,"byte_end":215971,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ [`as_cons`]: Value::as_cons","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":215976,"byte_end":216007,"line_start":924,"line_end":924,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218648,"byte_end":218651,"line_start":994,"line_end":994,"column_start":12,"column_end":15},"name":"get","qualname":"<Value>::get","value":"pub fn get<I: Index>(&Self, I) -> Option<&Value>","parent":null,"children":[],"decl_id":null,"docs":" Index into a S-expression list. A string or `Value` value can\n be used to access a value in an association list, and a usize\n index can be used to access the n-th element of a list.","sig":null,"attributes":[{"value":"/ Index into a S-expression list. A string or `Value` value can","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216408,"byte_end":216473,"line_start":940,"line_end":940,"column_start":5,"column_end":70}},{"value":"/ be used to access a value in an association list, and a usize","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216478,"byte_end":216543,"line_start":941,"line_end":941,"column_start":5,"column_end":70}},{"value":"/ index can be used to access the n-th element of a list.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216548,"byte_end":216607,"line_start":942,"line_end":942,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216612,"byte_end":216615,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ For indexing into association lists, the given string will","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216620,"byte_end":216682,"line_start":944,"line_end":944,"column_start":5,"column_end":67}},{"value":"/ match strings, symbols and keywords.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216687,"byte_end":216727,"line_start":945,"line_end":945,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216732,"byte_end":216735,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the type of `self` does not match the type","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216740,"byte_end":216804,"line_start":947,"line_end":947,"column_start":5,"column_end":69}},{"value":"/ of the index, for example if the index is a string and `self`","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216809,"byte_end":216874,"line_start":948,"line_end":948,"column_start":5,"column_end":70}},{"value":"/ is not an association list. Also returns `None` if the given","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216879,"byte_end":216943,"line_start":949,"line_end":949,"column_start":5,"column_end":69}},{"value":"/ key does not exist in the map or the given index is not within","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":216948,"byte_end":217014,"line_start":950,"line_end":950,"column_start":5,"column_end":71}},{"value":"/ the bounds of the list; note that the tail of an improper list","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217019,"byte_end":217085,"line_start":951,"line_end":951,"column_start":5,"column_end":71}},{"value":"/ is also considered out-of-bounds.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217090,"byte_end":217127,"line_start":952,"line_end":952,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217132,"byte_end":217135,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ In Scheme terms, this method can be thought of a combination","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217140,"byte_end":217204,"line_start":954,"line_end":954,"column_start":5,"column_end":69}},{"value":"/ of `assoc-ref` and `list-ref`, depending on the argument type. If","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217209,"byte_end":217278,"line_start":955,"line_end":955,"column_start":5,"column_end":74}},{"value":"/ you want to look up a number in an association list, use an","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217283,"byte_end":217346,"line_start":956,"line_end":956,"column_start":5,"column_end":68}},{"value":"/ `Value` value containing that number.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217351,"byte_end":217392,"line_start":957,"line_end":957,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217397,"byte_end":217400,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217405,"byte_end":217412,"line_start":959,"line_end":959,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217417,"byte_end":217439,"line_start":960,"line_end":960,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217444,"byte_end":217449,"line_start":961,"line_end":961,"column_start":5,"column_end":10}},{"value":"/ let alist = sexp!(((\"A\" . 65) (B . 66) (#:C . 67) (42 . \"The answer\")));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217454,"byte_end":217530,"line_start":962,"line_end":962,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(alist.get(\"A\").unwrap(), &sexp!(65));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217535,"byte_end":217587,"line_start":963,"line_end":963,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(alist.get(\"B\").unwrap(), &sexp!(66));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217592,"byte_end":217644,"line_start":964,"line_end":964,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(alist.get(\"C\").unwrap(), &sexp!(67));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217649,"byte_end":217701,"line_start":965,"line_end":965,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(alist.get(sexp!(42)).unwrap(), &sexp!(\"The answer\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217706,"byte_end":217774,"line_start":966,"line_end":966,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217779,"byte_end":217782,"line_start":967,"line_end":967,"column_start":5,"column_end":8}},{"value":"/ let list = sexp!((\"A\" \"B\" \"C\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217787,"byte_end":217823,"line_start":968,"line_end":968,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(*list.get(2).unwrap(), sexp!(\"C\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217828,"byte_end":217878,"line_start":969,"line_end":969,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217883,"byte_end":217886,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(list.get(\"A\"), None);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217891,"byte_end":217927,"line_start":971,"line_end":971,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217932,"byte_end":217939,"line_start":972,"line_end":972,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217944,"byte_end":217947,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ Square brackets can also be used to index into a value in a","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":217952,"byte_end":218015,"line_start":974,"line_end":974,"column_start":5,"column_end":68}},{"value":"/ more concise way. This returns the nil value in cases where","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218020,"byte_end":218083,"line_start":975,"line_end":975,"column_start":5,"column_end":68}},{"value":"/ `get` would have returned `None`. See [`Index`] for details.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218088,"byte_end":218152,"line_start":976,"line_end":976,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218157,"byte_end":218160,"line_start":977,"line_end":977,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218165,"byte_end":218172,"line_start":978,"line_end":978,"column_start":5,"column_end":12}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218177,"byte_end":218199,"line_start":979,"line_end":979,"column_start":5,"column_end":27}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218204,"byte_end":218209,"line_start":980,"line_end":980,"column_start":5,"column_end":10}},{"value":"/ let alist = sexp!((","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218214,"byte_end":218237,"line_start":981,"line_end":981,"column_start":5,"column_end":28}},{"value":"/     (\"A\" . (\"a\" \"á\" \"à\"))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218242,"byte_end":218273,"line_start":982,"line_end":982,"column_start":5,"column_end":34}},{"value":"/     (\"B\" . ((b . 42) (c . 23)))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218278,"byte_end":218313,"line_start":983,"line_end":983,"column_start":5,"column_end":40}},{"value":"/     (\"C\" . (\"c\" \"ć\" \"ć̣\" \"ḉ\"))","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218318,"byte_end":218357,"line_start":984,"line_end":984,"column_start":5,"column_end":39}},{"value":"/ ));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218362,"byte_end":218369,"line_start":985,"line_end":985,"column_start":5,"column_end":12}},{"value":"/ assert_eq!(alist[\"B\"][0], sexp!((b . 42)));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218374,"byte_end":218421,"line_start":986,"line_end":986,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(alist[\"C\"][1], sexp!(\"ć\"));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218426,"byte_end":218469,"line_start":987,"line_end":987,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218474,"byte_end":218477,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(alist[\"D\"], sexp!(#nil));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218482,"byte_end":218522,"line_start":989,"line_end":989,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(alist[0][\"x\"][\"y\"][\"z\"], sexp!(#nil));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218527,"byte_end":218580,"line_start":990,"line_end":990,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218585,"byte_end":218592,"line_start":991,"line_end":991,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218597,"byte_end":218600,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ [`Index`]: trait.Index.html","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218605,"byte_end":218636,"line_start":993,"line_end":993,"column_start":5,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":1159},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223484,"byte_end":223489,"line_start":37,"line_end":37,"column_start":11,"column_end":16},"name":"Index","qualname":"::value::index::Index","value":"Index: private::Sealed","parent":null,"children":[{"krate":0,"index":1160}],"decl_id":null,"docs":" A type that can be used to index into a `lexpr::Value`.","sig":null,"attributes":[{"value":"/ A type that can be used to index into a `lexpr::Value`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222458,"byte_end":222517,"line_start":5,"line_end":5,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222518,"byte_end":222521,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The [`get`] method of `Value` accept any type that implements","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222522,"byte_end":222587,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ `Index`, as does the [square-bracket indexing operator]. This","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222588,"byte_end":222653,"line_start":8,"line_end":8,"column_start":1,"column_end":66}},{"value":"/ trait is implemented for strings and `Value`, both of which can be","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222654,"byte_end":222724,"line_start":9,"line_end":9,"column_start":1,"column_end":71}},{"value":"/ used to index into association lists, and for `usize` which is","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222725,"byte_end":222791,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/ used to index into to lists by element index.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222792,"byte_end":222841,"line_start":11,"line_end":11,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222842,"byte_end":222845,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Note that improper lists are only indexable by `usize`, not by","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222846,"byte_end":222912,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ strings.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222913,"byte_end":222925,"line_start":14,"line_end":14,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222926,"byte_end":222929,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ [`get`]: enum.Value.html#method.get","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222930,"byte_end":222969,"line_start":16,"line_end":16,"column_start":1,"column_end":40}},{"value":"/ [square-bracket indexing operator]: enum.Value.html#impl-Index%3CI%3E","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":222970,"byte_end":223043,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223044,"byte_end":223047,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This trait is sealed and cannot be implemented for types outside","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223048,"byte_end":223116,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/ of `lexpr`.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223117,"byte_end":223132,"line_start":20,"line_end":20,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223133,"byte_end":223136,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223137,"byte_end":223151,"line_start":22,"line_end":22,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223152,"byte_end":223155,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223156,"byte_end":223163,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/ # use lexpr::sexp;","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223164,"byte_end":223186,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/ #","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223187,"byte_end":223192,"line_start":26,"line_end":26,"column_start":1,"column_end":6}},{"value":"/ let data = sexp!(((foo 42) (bar . (1 2 3))));","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223193,"byte_end":223242,"line_start":27,"line_end":27,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223243,"byte_end":223246,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Data is an association list so it can be indexed with a string.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223247,"byte_end":223317,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/ let bar = &data[\"bar\"];","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223318,"byte_end":223345,"line_start":30,"line_end":30,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223346,"byte_end":223349,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Bar is a list so it can be indexed with an integer.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223350,"byte_end":223408,"line_start":32,"line_end":32,"column_start":1,"column_end":59}},{"value":"/ let second = &bar[1];","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223409,"byte_end":223434,"line_start":33,"line_end":33,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223435,"byte_end":223438,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(second, 2);","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223439,"byte_end":223465,"line_start":35,"line_end":35,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223466,"byte_end":223473,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223605,"byte_end":223615,"line_start":40,"line_end":40,"column_start":8,"column_end":18},"name":"index_into","qualname":"::value::index::Index::index_into","value":"pub fn index_into<'v>(&Self, &'v Value) -> Option<&'v Value>","parent":{"krate":0,"index":1159},"children":[],"decl_id":null,"docs":" Return None if the key is not already in the array or object.\n","sig":null,"attributes":[{"value":"/ Return None if the key is not already in the array or object.","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223513,"byte_end":223578,"line_start":38,"line_end":38,"column_start":5,"column_end":70}}]},{"kind":"Trait","id":{"krate":0,"index":1163},"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223746,"byte_end":223752,"line_start":45,"line_end":45,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::value::index::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13095,"byte_end":13108,"line_start":25,"line_end":25,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":8}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15468,"byte_end":15472,"line_start":34,"line_end":34,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":18}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15615,"byte_end":15619,"line_start":40,"line_end":40,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20519,"byte_end":20523,"line_start":194,"line_end":194,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21705,"byte_end":21709,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21880,"byte_end":21884,"line_start":240,"line_end":240,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":55},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22500,"byte_end":22508,"line_start":266,"line_end":266,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22872,"byte_end":22880,"line_start":279,"line_end":279,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24424,"byte_end":24432,"line_start":325,"line_end":325,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":25498,"byte_end":25506,"line_start":359,"line_end":359,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27294,"byte_end":27299,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30513,"byte_end":30518,"line_start":130,"line_end":130,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30956,"byte_end":30959,"line_start":146,"line_end":146,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31055,"byte_end":31060,"line_start":152,"line_end":152,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31326,"byte_end":31329,"line_start":163,"line_end":163,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33235,"byte_end":33238,"line_start":217,"line_end":217,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33497,"byte_end":33501,"line_start":232,"line_end":232,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34167,"byte_end":34175,"line_start":262,"line_end":262,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34732,"byte_end":34742,"line_start":282,"line_end":282,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35706,"byte_end":35714,"line_start":305,"line_end":305,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":37067,"byte_end":37075,"line_start":350,"line_end":350,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43260,"byte_end":43266,"line_start":18,"line_end":18,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50342,"byte_end":50348,"line_start":271,"line_end":271,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":213}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50489,"byte_end":50495,"line_start":280,"line_end":280,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50602,"byte_end":50608,"line_start":287,"line_end":287,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50909,"byte_end":50915,"line_start":297,"line_end":297,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":219}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53622,"byte_end":53629,"line_start":99,"line_end":99,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56673,"byte_end":56680,"line_start":205,"line_end":205,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57655,"byte_end":57661,"line_start":241,"line_end":241,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58748,"byte_end":58754,"line_start":282,"line_end":282,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59165,"byte_end":59171,"line_start":297,"line_end":297,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59569,"byte_end":59575,"line_start":309,"line_end":309,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60335,"byte_end":60341,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":386},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101629,"byte_end":101635,"line_start":1362,"line_end":1362,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105854,"byte_end":105863,"line_start":1490,"line_end":1490,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":106402,"byte_end":106411,"line_start":1510,"line_end":1510,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":435},{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107605,"byte_end":107613,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":462},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108295,"byte_end":108300,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110975,"byte_end":110980,"line_start":122,"line_end":122,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":112234,"byte_end":112239,"line_start":163,"line_end":163,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":114222,"byte_end":114231,"line_start":247,"line_end":247,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":115954,"byte_end":115959,"line_start":275,"line_end":275,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":116164,"byte_end":116169,"line_start":284,"line_end":284,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":116297,"byte_end":116306,"line_start":290,"line_end":290,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":116800,"byte_end":116805,"line_start":306,"line_end":306,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/iter.rs","byte_start":118030,"byte_end":118045,"line_start":22,"line_end":22,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/iter.rs","byte_start":118502,"byte_end":118517,"line_start":48,"line_end":48,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":546},{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122480,"byte_end":122488,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123023,"byte_end":123032,"line_start":118,"line_end":118,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124445,"byte_end":124451,"line_start":178,"line_end":178,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124738,"byte_end":124744,"line_start":191,"line_end":191,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124778,"byte_end":124784,"line_start":193,"line_end":193,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":640},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":126149,"byte_end":126155,"line_start":245,"line_end":245,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":659},{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":129220,"byte_end":129229,"line_start":350,"line_end":350,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":679}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":136281,"byte_end":136290,"line_start":534,"line_end":534,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":136321,"byte_end":136330,"line_start":536,"line_end":536,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138094,"byte_end":138101,"line_start":601,"line_end":601,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138335,"byte_end":138342,"line_start":610,"line_end":610,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138373,"byte_end":138380,"line_start":612,"line_end":612,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":712},{"krate":0,"index":713},{"krate":0,"index":716},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160134,"byte_end":160141,"line_start":28,"line_end":28,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162080,"byte_end":162087,"line_start":89,"line_end":89,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":834}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164176,"byte_end":164186,"line_start":166,"line_end":166,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":166508,"byte_end":166513,"line_start":238,"line_end":238,"column_start":61,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":172070,"byte_end":172086,"line_start":428,"line_end":428,"column_start":20,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":172273,"byte_end":172292,"line_start":436,"line_end":436,"column_start":20,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":919},{"krate":0,"index":921},{"krate":0,"index":923},{"krate":0,"index":925},{"krate":0,"index":927},{"krate":0,"index":929},{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":176686,"byte_end":176693,"line_start":569,"line_end":569,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177008,"byte_end":177015,"line_start":582,"line_end":582,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":180759,"byte_end":180766,"line_start":678,"line_end":678,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":180982,"byte_end":180989,"line_start":689,"line_end":689,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":960},{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193782,"byte_end":193787,"line_start":167,"line_end":167,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218841,"byte_end":218856,"line_start":1003,"line_end":1003,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":219394,"byte_end":219399,"line_start":1020,"line_end":1020,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1097}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":220055,"byte_end":220060,"line_start":1041,"line_end":1041,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1100},{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":220748,"byte_end":220753,"line_start":22,"line_end":22,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1118}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":220853,"byte_end":220858,"line_start":29,"line_end":29,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1120}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":220979,"byte_end":220984,"line_start":36,"line_end":36,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221105,"byte_end":221110,"line_start":43,"line_end":43,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1125}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221218,"byte_end":221223,"line_start":50,"line_end":50,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221344,"byte_end":221349,"line_start":57,"line_end":57,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1129}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221450,"byte_end":221455,"line_start":64,"line_end":64,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221577,"byte_end":221582,"line_start":71,"line_end":71,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221699,"byte_end":221704,"line_start":78,"line_end":78,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221837,"byte_end":221842,"line_start":85,"line_end":85,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1137}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221940,"byte_end":221945,"line_start":91,"line_end":91,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":222106,"byte_end":222111,"line_start":101,"line_end":101,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1143}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":222209,"byte_end":222214,"line_start":107,"line_end":107,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1145}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":222329,"byte_end":222334,"line_start":113,"line_end":113,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223832,"byte_end":223838,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223929,"byte_end":223934,"line_start":50,"line_end":50,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":224952,"byte_end":224958,"line_start":88,"line_end":88,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1181}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":225446,"byte_end":225451,"line_start":110,"line_end":110,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1191}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":226940,"byte_end":226945,"line_start":138,"line_end":138,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1196},{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":228815,"byte_end":228820,"line_start":23,"line_end":23,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":228932,"byte_end":228937,"line_start":29,"line_end":29,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1217}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":229277,"byte_end":229282,"line_start":47,"line_end":47,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1224}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":229400,"byte_end":229406,"line_start":53,"line_end":53,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1226}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11814,"byte_end":11818,"line_start":350,"line_end":350,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11828,"byte_end":11833,"line_start":351,"line_end":351,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":75}},{"kind":"Mod","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11843,"byte_end":11849,"line_start":352,"line_end":352,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":181}},{"kind":"Mod","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11859,"byte_end":11864,"line_start":353,"line_end":353,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":220}},{"kind":"Mod","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":106829,"byte_end":106834,"line_start":1527,"line_end":1527,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":437}},{"kind":"Mod","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11874,"byte_end":11879,"line_start":354,"line_end":354,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":800}},{"kind":"Mod","span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/lib.rs","byte_start":11889,"byte_end":11894,"line_start":355,"line_end":355,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1002}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/syntax.rs","byte_start":13095,"byte_end":13108,"line_start":25,"line_end":25,"column_start":6,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1295},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15468,"byte_end":15472,"line_start":34,"line_end":34,"column_start":21,"column_end":25},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1336},"to":{"krate":2,"index":8805}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":15615,"byte_end":15619,"line_start":40,"line_end":40,"column_start":6,"column_end":10},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1336},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":20519,"byte_end":20523,"line_start":194,"line_end":194,"column_start":23,"column_end":27},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1336},"to":{"krate":2,"index":7070}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21705,"byte_end":21709,"line_start":233,"line_end":233,"column_start":10,"column_end":14},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":21880,"byte_end":21884,"line_start":240,"line_end":240,"column_start":23,"column_end":27},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":47},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22500,"byte_end":22508,"line_start":266,"line_end":266,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":57},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":22872,"byte_end":22880,"line_start":279,"line_end":279,"column_start":19,"column_end":27},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":57},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":24424,"byte_end":24432,"line_start":325,"line_end":325,"column_start":10,"column_end":18},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/cons.rs","byte_start":25498,"byte_end":25506,"line_start":359,"line_end":359,"column_start":23,"column_end":31},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1344},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":27294,"byte_end":27299,"line_start":28,"line_end":28,"column_start":6,"column_end":11},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1373},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30513,"byte_end":30518,"line_start":130,"line_end":130,"column_start":22,"column_end":27},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":30956,"byte_end":30959,"line_start":146,"line_end":146,"column_start":27,"column_end":30},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1384},"to":{"krate":2,"index":2729}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31055,"byte_end":31060,"line_start":152,"line_end":152,"column_start":28,"column_end":33},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1373},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":31326,"byte_end":31329,"line_start":163,"line_end":163,"column_start":10,"column_end":13},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33235,"byte_end":33238,"line_start":217,"line_end":217,"column_start":30,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1384},"to":{"krate":2,"index":3054}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":33497,"byte_end":33501,"line_start":232,"line_end":232,"column_start":6,"column_end":10},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1402},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34167,"byte_end":34175,"line_start":262,"line_end":262,"column_start":6,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1420},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":34732,"byte_end":34742,"line_start":282,"line_end":282,"column_start":23,"column_end":33},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1441},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":35706,"byte_end":35714,"line_start":305,"line_end":305,"column_start":10,"column_end":18},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1451},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/datum.rs","byte_start":37067,"byte_end":37075,"line_start":350,"line_end":350,"column_start":23,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1451},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":43260,"byte_end":43266,"line_start":18,"line_end":18,"column_start":6,"column_end":12},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1484},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50342,"byte_end":50348,"line_start":271,"line_end":271,"column_start":20,"column_end":26},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50489,"byte_end":50495,"line_start":280,"line_end":280,"column_start":20,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50602,"byte_end":50608,"line_start":287,"line_end":287,"column_start":18,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/number.rs","byte_start":50909,"byte_end":50915,"line_start":297,"line_end":297,"column_start":16,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1484},"to":{"krate":2,"index":8805}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":53622,"byte_end":53629,"line_start":99,"line_end":99,"column_start":6,"column_end":13},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1526},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":56673,"byte_end":56680,"line_start":205,"line_end":205,"column_start":18,"column_end":25},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1526},"to":{"krate":2,"index":2810}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":57655,"byte_end":57661,"line_start":241,"line_end":241,"column_start":14,"column_end":20},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":58748,"byte_end":58754,"line_start":282,"line_end":282,"column_start":9,"column_end":15},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59165,"byte_end":59171,"line_start":297,"line_end":297,"column_start":10,"column_end":16},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":59569,"byte_end":59575,"line_start":309,"line_end":309,"column_start":10,"column_end":16},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":60335,"byte_end":60341,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":297},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":101629,"byte_end":101635,"line_start":1362,"line_end":1362,"column_start":38,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":297},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":105854,"byte_end":105863,"line_start":1490,"line_end":1490,"column_start":30,"column_end":39},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":415},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/mod.rs","byte_start":106402,"byte_end":106411,"line_start":1510,"line_end":1510,"column_start":30,"column_end":39},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":426},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":107605,"byte_end":107613,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":108295,"byte_end":108300,"line_start":48,"line_end":48,"column_start":6,"column_end":11},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":110975,"byte_end":110980,"line_start":122,"line_end":122,"column_start":26,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":3740},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":112234,"byte_end":112239,"line_start":163,"line_end":163,"column_start":6,"column_end":11},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":457},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":114222,"byte_end":114231,"line_start":247,"line_end":247,"column_start":18,"column_end":27},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":478},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":115954,"byte_end":115959,"line_start":275,"line_end":275,"column_start":23,"column_end":28},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":457},"to":{"krate":1,"index":2326}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":116164,"byte_end":116169,"line_start":284,"line_end":284,"column_start":18,"column_end":23},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":457},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":116297,"byte_end":116306,"line_start":290,"line_end":290,"column_start":18,"column_end":27},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":475},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/error.rs","byte_start":116800,"byte_end":116805,"line_start":306,"line_end":306,"column_start":16,"column_end":21},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":457},"to":{"krate":2,"index":8805}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/iter.rs","byte_start":118030,"byte_end":118045,"line_start":22,"line_end":22,"column_start":9,"column_end":24},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/iter.rs","byte_start":118502,"byte_end":118517,"line_start":48,"line_end":48,"column_start":22,"column_end":37},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":532},"to":{"krate":2,"index":7233}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":119535,"byte_end":119541,"line_start":15,"line_end":15,"column_start":31,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":632},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":122480,"byte_end":122488,"line_start":95,"line_end":95,"column_start":6,"column_end":14},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1656},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":123023,"byte_end":123032,"line_start":118,"line_end":118,"column_start":45,"column_end":54},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":601},"to":{"krate":2,"index":3054}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124445,"byte_end":124451,"line_start":178,"line_end":178,"column_start":9,"column_end":15},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124738,"byte_end":124744,"line_start":191,"line_end":191,"column_start":29,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":620},"to":{"krate":0,"index":632}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":124778,"byte_end":124784,"line_start":193,"line_end":193,"column_start":9,"column_end":15},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":620},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":126149,"byte_end":126155,"line_start":245,"line_end":245,"column_start":28,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":620},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":129220,"byte_end":129229,"line_start":350,"line_end":350,"column_start":10,"column_end":19},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":624},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":136281,"byte_end":136290,"line_start":534,"line_end":534,"column_start":30,"column_end":39},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":624},"to":{"krate":0,"index":632}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":136321,"byte_end":136330,"line_start":536,"line_end":536,"column_start":23,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":624},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138094,"byte_end":138101,"line_start":601,"line_end":601,"column_start":10,"column_end":17},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":628},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138335,"byte_end":138342,"line_start":610,"line_end":610,"column_start":30,"column_end":37},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":628},"to":{"krate":0,"index":632}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/parse/read.rs","byte_start":138373,"byte_end":138380,"line_start":612,"line_end":612,"column_start":23,"column_end":30},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":628},"to":{"krate":0,"index":581}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":160134,"byte_end":160141,"line_start":28,"line_end":28,"column_start":6,"column_end":13},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1700},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":162080,"byte_end":162087,"line_start":89,"line_end":89,"column_start":18,"column_end":25},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1700},"to":{"krate":2,"index":2810}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":164176,"byte_end":164186,"line_start":166,"line_end":166,"column_start":6,"column_end":16},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":835},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":166508,"byte_end":166513,"line_start":238,"line_end":238,"column_start":61,"column_end":66},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":869},"to":{"krate":0,"index":202}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":172070,"byte_end":172086,"line_start":428,"line_end":428,"column_start":20,"column_end":36},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1759},"to":{"krate":0,"index":860}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":172273,"byte_end":172292,"line_start":436,"line_end":436,"column_start":20,"column_end":39},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1765},"to":{"krate":0,"index":860}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":176686,"byte_end":176693,"line_start":569,"line_end":569,"column_start":9,"column_end":16},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":177008,"byte_end":177015,"line_start":582,"line_end":582,"column_start":12,"column_end":19},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":180759,"byte_end":180766,"line_start":678,"line_end":678,"column_start":9,"column_end":16},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/print.rs","byte_start":180982,"byte_end":180989,"line_start":689,"line_end":689,"column_start":26,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1771},"to":{"krate":1,"index":4317}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":193782,"byte_end":193787,"line_start":167,"line_end":167,"column_start":6,"column_end":11},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1780},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":218841,"byte_end":218856,"line_start":1003,"line_end":1003,"column_start":28,"column_end":43},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1085},"to":{"krate":1,"index":4317}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":219394,"byte_end":219399,"line_start":1020,"line_end":1020,"column_start":23,"column_end":28},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":8812}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/mod.rs","byte_start":220055,"byte_end":220060,"line_start":1041,"line_end":1041,"column_start":23,"column_end":28},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":11288}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":220748,"byte_end":220753,"line_start":22,"line_end":22,"column_start":21,"column_end":26},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":220853,"byte_end":220858,"line_start":29,"line_end":29,"column_start":21,"column_end":26},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":220979,"byte_end":220984,"line_start":36,"line_end":36,"column_start":33,"column_end":38},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221105,"byte_end":221110,"line_start":43,"line_end":43,"column_start":25,"column_end":30},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221218,"byte_end":221223,"line_start":50,"line_end":50,"column_start":23,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221344,"byte_end":221349,"line_start":57,"line_end":57,"column_start":21,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221450,"byte_end":221455,"line_start":64,"line_end":64,"column_start":22,"column_end":27},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221577,"byte_end":221582,"line_start":71,"line_end":71,"column_start":26,"column_end":31},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221699,"byte_end":221704,"line_start":78,"line_end":78,"column_start":24,"column_end":29},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221837,"byte_end":221842,"line_start":85,"line_end":85,"column_start":23,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":221940,"byte_end":221945,"line_start":91,"line_end":91,"column_start":29,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":222106,"byte_end":222111,"line_start":101,"line_end":101,"column_start":21,"column_end":26},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":222209,"byte_end":222214,"line_start":107,"line_end":107,"column_start":27,"column_end":32},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/from.rs","byte_start":222329,"byte_end":222334,"line_start":113,"line_end":113,"column_start":29,"column_end":34},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2738}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223500,"byte_end":223506,"line_start":37,"line_end":37,"column_start":27,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1163},"to":{"krate":0,"index":1159}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223832,"byte_end":223838,"line_start":48,"line_end":48,"column_start":21,"column_end":27},"kind":{"Impl":{"id":89}},"from":{"krate":5,"index":7285},"to":{"krate":0,"index":1163}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":223929,"byte_end":223934,"line_start":50,"line_end":50,"column_start":28,"column_end":33},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1780},"to":{"krate":0,"index":1163}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":224952,"byte_end":224958,"line_start":88,"line_end":88,"column_start":16,"column_end":22},"kind":{"Impl":{"id":93}},"from":{"krate":5,"index":7285},"to":{"krate":0,"index":1159}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":225446,"byte_end":225451,"line_start":110,"line_end":110,"column_start":16,"column_end":21},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1780},"to":{"krate":0,"index":1159}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/index.rs","byte_start":226940,"byte_end":226945,"line_start":138,"line_end":138,"column_start":27,"column_end":32},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":3139}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":228815,"byte_end":228820,"line_start":23,"line_end":23,"column_start":25,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2487}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":228932,"byte_end":228937,"line_start":29,"line_end":29,"column_start":33,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2487}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":229277,"byte_end":229282,"line_start":47,"line_end":47,"column_start":28,"column_end":33},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1780},"to":{"krate":2,"index":2487}},{"span":{"file_name":"/Users/wandang/.cargo/registry/src/github.com-1ecc6299db9ec823/lexpr-0.2.6/src/value/partial_eq.rs","byte_start":229400,"byte_end":229406,"line_start":53,"line_end":53,"column_start":27,"column_end":33},"kind":{"Impl":{"id":100}},"from":{"krate":5,"index":7285},"to":{"krate":2,"index":2487}}]}