; ModuleID = 'aa.ll'
source_filename = "llvm-tests/load_reuse.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

@__const.main.mat_in = private unnamed_addr constant [2 x [2 x float]] [[2 x float] [float 1.000000e+00, float 2.000000e+00], [2 x float] [float 3.000000e+00, float 4.000000e+00]], align 16
@__const.main.f_in = private unnamed_addr constant [2 x [2 x float]] [[2 x float] [float 1.000000e+00, float 1.000000e+00], [2 x float] [float 1.000000e+00, float 1.000000e+00]], align 16
@.str = private unnamed_addr constant [12 x i8] c"output: %f\0A\00", align 1

; Function Attrs: noinline nounwind ssp uwtable
define void @load_use_twice([2 x float]* %0, [2 x float]* %1, [3 x float]* %2, [3 x float]* %3) #0 {
.preheader7:
  %4 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %5 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  %6 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %7 = load float, float* %6, align 4
  %8 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %9 = load float, float* %8, align 4
  %10 = fmul float %7, %9
  %11 = fmul float %10, 3.000000e+00
  %12 = fadd float %11, -4.000000e+00
  %13 = load float, float* %4, align 4
  %14 = fadd float %13, %12
  %15 = fmul float %10, 2.000000e+00
  %16 = fadd float %15, 1.000000e+00
  %17 = load float, float* %5, align 4
  %18 = fadd float %17, %16
  %19 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %20 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  %21 = load float, float* %6, align 4
  %22 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %23 = load float, float* %22, align 4
  %24 = fmul float %21, %23
  %25 = fmul float %24, 3.000000e+00
  %26 = fadd float %25, -4.000000e+00
  %27 = load float, float* %19, align 4
  %28 = fadd float %27, %26
  %29 = fmul float %24, 2.000000e+00
  %30 = fadd float %29, 1.000000e+00
  %31 = load float, float* %20, align 4
  %32 = fadd float %31, %30
  %33 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %34 = load float, float* %33, align 4
  %35 = load float, float* %8, align 4
  %36 = fmul float %34, %35
  %37 = fmul float %36, 3.000000e+00
  %38 = fadd float %37, -4.000000e+00
  %39 = load float, float* %19, align 4
  %40 = fadd float %39, %38
  %41 = fmul float %36, 2.000000e+00
  %42 = fadd float %41, 1.000000e+00
  %43 = load float, float* %20, align 4
  %44 = fadd float %43, %42
  %45 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %46 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 2
  %47 = load float, float* %33, align 4
  %48 = load float, float* %22, align 4
  %49 = fmul float %47, %48
  %50 = fmul float %49, 3.000000e+00
  %51 = fadd float %50, -4.000000e+00
  %52 = load float, float* %45, align 4
  %53 = fadd float %52, %51
  %54 = fmul float %49, 2.000000e+00
  %55 = fadd float %54, 1.000000e+00
  %56 = load float, float* %46, align 4
  %57 = fadd float %56, %55
  %58 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  %59 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  %60 = load float, float* %6, align 4
  %61 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %62 = load float, float* %61, align 4
  %63 = fmul float %60, %62
  %64 = fmul float %63, 3.000000e+00
  %65 = fadd float %64, -4.000000e+00
  %66 = load float, float* %58, align 4
  %67 = fadd float %66, %65
  %68 = fmul float %63, 2.000000e+00
  %69 = fadd float %68, 1.000000e+00
  %70 = load float, float* %59, align 4
  %71 = fadd float %70, %69
  %72 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %73 = load float, float* %72, align 4
  %74 = load float, float* %8, align 4
  %75 = fmul float %73, %74
  %76 = fmul float %75, 3.000000e+00
  %77 = fadd float %76, -4.000000e+00
  %78 = load float, float* %58, align 4
  %79 = fadd float %78, %77
  %80 = fmul float %75, 2.000000e+00
  %81 = fadd float %80, 1.000000e+00
  %82 = load float, float* %59, align 4
  %83 = fadd float %82, %81
  %84 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %85 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %86 = load float, float* %6, align 4
  %87 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %88 = load float, float* %87, align 4
  %89 = fmul float %86, %88
  %90 = fmul float %89, 3.000000e+00
  %91 = fadd float %90, -4.000000e+00
  %92 = load float, float* %84, align 4
  %93 = fadd float %92, %91
  %94 = fmul float %89, 2.000000e+00
  %95 = fadd float %94, 1.000000e+00
  %96 = load float, float* %85, align 4
  %97 = fadd float %96, %95
  %98 = load float, float* %33, align 4
  %99 = load float, float* %61, align 4
  %100 = fmul float %98, %99
  %101 = fmul float %100, 3.000000e+00
  %102 = fadd float %101, -4.000000e+00
  %103 = load float, float* %84, align 4
  %104 = fadd float %103, %102
  %105 = fmul float %100, 2.000000e+00
  %106 = fadd float %105, 1.000000e+00
  %107 = load float, float* %85, align 4
  %108 = fadd float %107, %106
  %109 = load float, float* %72, align 4
  %110 = load float, float* %22, align 4
  %111 = fmul float %109, %110
  %112 = fmul float %111, 3.000000e+00
  %113 = fadd float %112, -4.000000e+00
  %114 = load float, float* %84, align 4
  %115 = fadd float %114, %113
  %116 = fmul float %111, 2.000000e+00
  %117 = fadd float %116, 1.000000e+00
  %118 = load float, float* %85, align 4
  %119 = fadd float %118, %117
  %120 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %121 = load float, float* %120, align 4
  %122 = load float, float* %8, align 4
  %123 = fmul float %121, %122
  %124 = fmul float %123, 3.000000e+00
  %125 = fadd float %124, -4.000000e+00
  %126 = load float, float* %84, align 4
  %127 = fadd float %126, %125
  %128 = fmul float %123, 2.000000e+00
  %129 = fadd float %128, 1.000000e+00
  %130 = load float, float* %85, align 4
  %131 = fadd float %130, %129
  %132 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  %133 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  %134 = load float, float* %33, align 4
  %135 = load float, float* %87, align 4
  %136 = fmul float %134, %135
  %137 = fmul float %136, 3.000000e+00
  %138 = fadd float %137, -4.000000e+00
  %139 = load float, float* %132, align 4
  %140 = fadd float %139, %138
  %141 = fmul float %136, 2.000000e+00
  %142 = fadd float %141, 1.000000e+00
  %143 = load float, float* %133, align 4
  %144 = fadd float %143, %142
  %145 = load float, float* %120, align 4
  %146 = load float, float* %22, align 4
  %147 = fmul float %145, %146
  %148 = fmul float %147, 3.000000e+00
  %149 = fadd float %148, -4.000000e+00
  %150 = load float, float* %132, align 4
  %151 = fadd float %150, %149
  %152 = fmul float %147, 2.000000e+00
  %153 = fadd float %152, 1.000000e+00
  %154 = load float, float* %133, align 4
  %155 = fadd float %154, %153
  %156 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 0
  %157 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 0
  %158 = load float, float* %72, align 4
  %159 = load float, float* %61, align 4
  %160 = fmul float %158, %159
  %161 = fmul float %160, 3.000000e+00
  %162 = fadd float %161, -4.000000e+00
  %163 = load float, float* %156, align 4
  %164 = fadd float %163, %162
  %165 = fmul float %160, 2.000000e+00
  %166 = fadd float %165, 1.000000e+00
  %167 = load float, float* %157, align 4
  %168 = fadd float %167, %166
  %169 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  %170 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  %171 = load float, float* %72, align 4
  %172 = load float, float* %87, align 4
  %173 = fmul float %171, %172
  %174 = fmul float %173, 3.000000e+00
  %175 = fadd float %174, -4.000000e+00
  %176 = load float, float* %169, align 4
  %177 = fadd float %176, %175
  %178 = fmul float %173, 2.000000e+00
  %179 = fadd float %178, 1.000000e+00
  %180 = load float, float* %170, align 4
  %181 = fadd float %180, %179
  %182 = load float, float* %120, align 4
  %183 = load float, float* %61, align 4
  %184 = fmul float %182, %183
  %185 = fmul float %184, 3.000000e+00
  %186 = fadd float %185, -4.000000e+00
  %187 = load float, float* %169, align 4
  %188 = fadd float %187, %186
  %189 = fmul float %184, 2.000000e+00
  %190 = fadd float %189, 1.000000e+00
  %191 = load float, float* %170, align 4
  %192 = fadd float %191, %190
  %193 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 2
  %194 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 2
  %195 = load float, float* %120, align 4
  %196 = load float, float* %87, align 4
  %197 = fmul float %195, %196
  %198 = fmul float %197, 3.000000e+00
  %199 = fadd float %198, -4.000000e+00
  %200 = load float, float* %193, align 4
  %201 = fadd float %200, %199
  %202 = fmul float %197, 2.000000e+00
  %203 = fadd float %202, 1.000000e+00
  %204 = load float, float* %194, align 4
  %205 = fadd float %204, %203
  %206 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  %207 = load float, float* %206, align 4
  %208 = insertelement <4 x float> zeroinitializer, float %207, i32 0
  %209 = insertelement <4 x float> %208, float 0.000000e+00, i32 1
  %210 = insertelement <4 x float> %209, float 0.000000e+00, i32 2
  %211 = insertelement <4 x float> %210, float 0.000000e+00, i32 3
  %212 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %213 = load float, float* %212, align 4
  %214 = insertelement <4 x float> zeroinitializer, float %213, i32 0
  %215 = insertelement <4 x float> %214, float 1.000000e+00, i32 1
  %216 = insertelement <4 x float> %215, float 1.000000e+00, i32 2
  %217 = insertelement <4 x float> %216, float 1.000000e+00, i32 3
  %218 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %219 = load float, float* %218, align 4
  %220 = insertelement <4 x float> zeroinitializer, float %219, i32 0
  %221 = insertelement <4 x float> %220, float 1.000000e+00, i32 1
  %222 = insertelement <4 x float> %221, float 1.000000e+00, i32 2
  %223 = insertelement <4 x float> %222, float 1.000000e+00, i32 3
  %224 = fmul <4 x float> %217, %223
  %225 = fmul <4 x float> %224, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %226 = fadd <4 x float> %225, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %227 = fadd <4 x float> %211, %226
  %228 = extractelement <4 x float> %227, i32 0
  %229 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 0
  store float %228, float* %229, align 4
  %230 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  %231 = load float, float* %230, align 4
  %232 = insertelement <4 x float> zeroinitializer, float %231, i32 0
  %233 = insertelement <4 x float> %232, float 0.000000e+00, i32 1
  %234 = insertelement <4 x float> %233, float 0.000000e+00, i32 2
  %235 = insertelement <4 x float> %234, float 0.000000e+00, i32 3
  %236 = insertelement <4 x float> zeroinitializer, float %213, i32 0
  %237 = insertelement <4 x float> %236, float 1.000000e+00, i32 1
  %238 = insertelement <4 x float> %237, float 1.000000e+00, i32 2
  %239 = insertelement <4 x float> %238, float 1.000000e+00, i32 3
  %240 = insertelement <4 x float> zeroinitializer, float %219, i32 0
  %241 = insertelement <4 x float> %240, float 1.000000e+00, i32 1
  %242 = insertelement <4 x float> %241, float 1.000000e+00, i32 2
  %243 = insertelement <4 x float> %242, float 1.000000e+00, i32 3
  %244 = fmul <4 x float> %239, %243
  %245 = fmul <4 x float> %244, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %246 = fadd <4 x float> %245, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %247 = fadd <4 x float> %235, %246
  %248 = extractelement <4 x float> %247, i32 0
  %249 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  store float %248, float* %249, align 4
  %250 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %251 = load float, float* %250, align 4
  %252 = insertelement <4 x float> zeroinitializer, float %251, i32 0
  %253 = insertelement <4 x float> %252, float 0.000000e+00, i32 1
  %254 = insertelement <4 x float> %253, float 0.000000e+00, i32 2
  %255 = insertelement <4 x float> %254, float 0.000000e+00, i32 3
  %256 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %257 = load float, float* %256, align 4
  %258 = insertelement <4 x float> zeroinitializer, float %257, i32 0
  %259 = insertelement <4 x float> %258, float 1.000000e+00, i32 1
  %260 = insertelement <4 x float> %259, float 1.000000e+00, i32 2
  %261 = insertelement <4 x float> %260, float 1.000000e+00, i32 3
  %262 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %263 = load float, float* %262, align 4
  %264 = insertelement <4 x float> zeroinitializer, float %263, i32 0
  %265 = insertelement <4 x float> %264, float 1.000000e+00, i32 1
  %266 = insertelement <4 x float> %265, float 1.000000e+00, i32 2
  %267 = insertelement <4 x float> %266, float 1.000000e+00, i32 3
  %268 = fmul <4 x float> %261, %267
  %269 = fmul <4 x float> %268, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %270 = fadd <4 x float> %269, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %271 = fadd <4 x float> %255, %270
  %272 = extractelement <4 x float> %271, i32 0
  %273 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float %272, float* %273, align 4
  %274 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  %275 = load float, float* %274, align 4
  %276 = insertelement <4 x float> zeroinitializer, float %275, i32 0
  %277 = insertelement <4 x float> %276, float 0.000000e+00, i32 1
  %278 = insertelement <4 x float> %277, float 0.000000e+00, i32 2
  %279 = insertelement <4 x float> %278, float 0.000000e+00, i32 3
  %280 = insertelement <4 x float> zeroinitializer, float %257, i32 0
  %281 = insertelement <4 x float> %280, float 1.000000e+00, i32 1
  %282 = insertelement <4 x float> %281, float 1.000000e+00, i32 2
  %283 = insertelement <4 x float> %282, float 1.000000e+00, i32 3
  %284 = insertelement <4 x float> zeroinitializer, float %263, i32 0
  %285 = insertelement <4 x float> %284, float 1.000000e+00, i32 1
  %286 = insertelement <4 x float> %285, float 1.000000e+00, i32 2
  %287 = insertelement <4 x float> %286, float 1.000000e+00, i32 3
  %288 = fmul <4 x float> %283, %287
  %289 = fmul <4 x float> %288, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %290 = fadd <4 x float> %289, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %291 = fadd <4 x float> %279, %290
  %292 = extractelement <4 x float> %291, i32 0
  %293 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  store float %292, float* %293, align 4
  %294 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  %295 = load float, float* %294, align 4
  %296 = insertelement <4 x float> zeroinitializer, float %295, i32 0
  %297 = insertelement <4 x float> %296, float 0.000000e+00, i32 1
  %298 = insertelement <4 x float> %297, float 0.000000e+00, i32 2
  %299 = insertelement <4 x float> %298, float 0.000000e+00, i32 3
  %300 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %301 = load float, float* %300, align 4
  %302 = insertelement <4 x float> zeroinitializer, float %301, i32 0
  %303 = insertelement <4 x float> %302, float 1.000000e+00, i32 1
  %304 = insertelement <4 x float> %303, float 1.000000e+00, i32 2
  %305 = insertelement <4 x float> %304, float 1.000000e+00, i32 3
  %306 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %307 = load float, float* %306, align 4
  %308 = insertelement <4 x float> zeroinitializer, float %307, i32 0
  %309 = insertelement <4 x float> %308, float 1.000000e+00, i32 1
  %310 = insertelement <4 x float> %309, float 1.000000e+00, i32 2
  %311 = insertelement <4 x float> %310, float 1.000000e+00, i32 3
  %312 = fmul <4 x float> %305, %311
  %313 = fmul <4 x float> %312, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %314 = fadd <4 x float> %313, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %315 = fadd <4 x float> %299, %314
  %316 = extractelement <4 x float> %315, i32 0
  %317 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 1
  store float %316, float* %317, align 4
  %318 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  %319 = load float, float* %318, align 4
  %320 = insertelement <4 x float> zeroinitializer, float %319, i32 0
  %321 = insertelement <4 x float> %320, float 0.000000e+00, i32 1
  %322 = insertelement <4 x float> %321, float 0.000000e+00, i32 2
  %323 = insertelement <4 x float> %322, float 0.000000e+00, i32 3
  %324 = insertelement <4 x float> zeroinitializer, float %301, i32 0
  %325 = insertelement <4 x float> %324, float 1.000000e+00, i32 1
  %326 = insertelement <4 x float> %325, float 1.000000e+00, i32 2
  %327 = insertelement <4 x float> %326, float 1.000000e+00, i32 3
  %328 = insertelement <4 x float> zeroinitializer, float %307, i32 0
  %329 = insertelement <4 x float> %328, float 1.000000e+00, i32 1
  %330 = insertelement <4 x float> %329, float 1.000000e+00, i32 2
  %331 = insertelement <4 x float> %330, float 1.000000e+00, i32 3
  %332 = fmul <4 x float> %327, %331
  %333 = fmul <4 x float> %332, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %334 = fadd <4 x float> %333, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %335 = fadd <4 x float> %323, %334
  %336 = extractelement <4 x float> %335, i32 0
  %337 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  store float %336, float* %337, align 4
  %338 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  %339 = load float, float* %338, align 4
  %340 = insertelement <4 x float> zeroinitializer, float %339, i32 0
  %341 = insertelement <4 x float> %340, float 0.000000e+00, i32 1
  %342 = insertelement <4 x float> %341, float 0.000000e+00, i32 2
  %343 = insertelement <4 x float> %342, float 0.000000e+00, i32 3
  %344 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %345 = load float, float* %344, align 4
  %346 = insertelement <4 x float> zeroinitializer, float %345, i32 0
  %347 = insertelement <4 x float> %346, float 1.000000e+00, i32 1
  %348 = insertelement <4 x float> %347, float 1.000000e+00, i32 2
  %349 = insertelement <4 x float> %348, float 1.000000e+00, i32 3
  %350 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %351 = load float, float* %350, align 4
  %352 = insertelement <4 x float> zeroinitializer, float %351, i32 0
  %353 = insertelement <4 x float> %352, float 1.000000e+00, i32 1
  %354 = insertelement <4 x float> %353, float 1.000000e+00, i32 2
  %355 = insertelement <4 x float> %354, float 1.000000e+00, i32 3
  %356 = fmul <4 x float> %349, %355
  %357 = fmul <4 x float> %356, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %358 = fadd <4 x float> %357, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %359 = fadd <4 x float> %343, %358
  %360 = extractelement <4 x float> %359, i32 0
  %361 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 0, i64 2
  store float %360, float* %361, align 4
  %362 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 2
  %363 = load float, float* %362, align 4
  %364 = insertelement <4 x float> zeroinitializer, float %363, i32 0
  %365 = insertelement <4 x float> %364, float 0.000000e+00, i32 1
  %366 = insertelement <4 x float> %365, float 0.000000e+00, i32 2
  %367 = insertelement <4 x float> %366, float 0.000000e+00, i32 3
  %368 = insertelement <4 x float> zeroinitializer, float %345, i32 0
  %369 = insertelement <4 x float> %368, float 1.000000e+00, i32 1
  %370 = insertelement <4 x float> %369, float 1.000000e+00, i32 2
  %371 = insertelement <4 x float> %370, float 1.000000e+00, i32 3
  %372 = insertelement <4 x float> zeroinitializer, float %351, i32 0
  %373 = insertelement <4 x float> %372, float 1.000000e+00, i32 1
  %374 = insertelement <4 x float> %373, float 1.000000e+00, i32 2
  %375 = insertelement <4 x float> %374, float 1.000000e+00, i32 3
  %376 = fmul <4 x float> %371, %375
  %377 = fmul <4 x float> %376, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %378 = fadd <4 x float> %377, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %379 = fadd <4 x float> %367, %378
  %380 = extractelement <4 x float> %379, i32 0
  %381 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 2
  store float %380, float* %381, align 4
  %382 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  %383 = load float, float* %382, align 4
  %384 = insertelement <4 x float> zeroinitializer, float %383, i32 0
  %385 = insertelement <4 x float> %384, float 0.000000e+00, i32 1
  %386 = insertelement <4 x float> %385, float 0.000000e+00, i32 2
  %387 = insertelement <4 x float> %386, float 0.000000e+00, i32 3
  %388 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %389 = load float, float* %388, align 4
  %390 = insertelement <4 x float> zeroinitializer, float %389, i32 0
  %391 = insertelement <4 x float> %390, float 1.000000e+00, i32 1
  %392 = insertelement <4 x float> %391, float 1.000000e+00, i32 2
  %393 = insertelement <4 x float> %392, float 1.000000e+00, i32 3
  %394 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %395 = load float, float* %394, align 4
  %396 = insertelement <4 x float> zeroinitializer, float %395, i32 0
  %397 = insertelement <4 x float> %396, float 1.000000e+00, i32 1
  %398 = insertelement <4 x float> %397, float 1.000000e+00, i32 2
  %399 = insertelement <4 x float> %398, float 1.000000e+00, i32 3
  %400 = fmul <4 x float> %393, %399
  %401 = fmul <4 x float> %400, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %402 = fadd <4 x float> %401, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %403 = fadd <4 x float> %387, %402
  %404 = extractelement <4 x float> %403, i32 0
  %405 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  store float %404, float* %405, align 4
  %406 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  %407 = load float, float* %406, align 4
  %408 = insertelement <4 x float> zeroinitializer, float %407, i32 0
  %409 = insertelement <4 x float> %408, float 0.000000e+00, i32 1
  %410 = insertelement <4 x float> %409, float 0.000000e+00, i32 2
  %411 = insertelement <4 x float> %410, float 0.000000e+00, i32 3
  %412 = insertelement <4 x float> zeroinitializer, float %389, i32 0
  %413 = insertelement <4 x float> %412, float 1.000000e+00, i32 1
  %414 = insertelement <4 x float> %413, float 1.000000e+00, i32 2
  %415 = insertelement <4 x float> %414, float 1.000000e+00, i32 3
  %416 = insertelement <4 x float> zeroinitializer, float %395, i32 0
  %417 = insertelement <4 x float> %416, float 1.000000e+00, i32 1
  %418 = insertelement <4 x float> %417, float 1.000000e+00, i32 2
  %419 = insertelement <4 x float> %418, float 1.000000e+00, i32 3
  %420 = fmul <4 x float> %415, %419
  %421 = fmul <4 x float> %420, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %422 = fadd <4 x float> %421, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %423 = fadd <4 x float> %411, %422
  %424 = extractelement <4 x float> %423, i32 0
  %425 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  store float %424, float* %425, align 4
  %426 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  %427 = load float, float* %426, align 4
  %428 = insertelement <4 x float> zeroinitializer, float %427, i32 0
  %429 = insertelement <4 x float> %428, float 0.000000e+00, i32 1
  %430 = insertelement <4 x float> %429, float 0.000000e+00, i32 2
  %431 = insertelement <4 x float> %430, float 0.000000e+00, i32 3
  %432 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %433 = load float, float* %432, align 4
  %434 = insertelement <4 x float> zeroinitializer, float %433, i32 0
  %435 = insertelement <4 x float> %434, float 1.000000e+00, i32 1
  %436 = insertelement <4 x float> %435, float 1.000000e+00, i32 2
  %437 = insertelement <4 x float> %436, float 1.000000e+00, i32 3
  %438 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %439 = load float, float* %438, align 4
  %440 = insertelement <4 x float> zeroinitializer, float %439, i32 0
  %441 = insertelement <4 x float> %440, float 1.000000e+00, i32 1
  %442 = insertelement <4 x float> %441, float 1.000000e+00, i32 2
  %443 = insertelement <4 x float> %442, float 1.000000e+00, i32 3
  %444 = fmul <4 x float> %437, %443
  %445 = fmul <4 x float> %444, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %446 = fadd <4 x float> %445, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %447 = fadd <4 x float> %431, %446
  %448 = extractelement <4 x float> %447, i32 0
  %449 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 0
  store float %448, float* %449, align 4
  %450 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  %451 = load float, float* %450, align 4
  %452 = insertelement <4 x float> zeroinitializer, float %451, i32 0
  %453 = insertelement <4 x float> %452, float 0.000000e+00, i32 1
  %454 = insertelement <4 x float> %453, float 0.000000e+00, i32 2
  %455 = insertelement <4 x float> %454, float 0.000000e+00, i32 3
  %456 = insertelement <4 x float> zeroinitializer, float %433, i32 0
  %457 = insertelement <4 x float> %456, float 1.000000e+00, i32 1
  %458 = insertelement <4 x float> %457, float 1.000000e+00, i32 2
  %459 = insertelement <4 x float> %458, float 1.000000e+00, i32 3
  %460 = insertelement <4 x float> zeroinitializer, float %439, i32 0
  %461 = insertelement <4 x float> %460, float 1.000000e+00, i32 1
  %462 = insertelement <4 x float> %461, float 1.000000e+00, i32 2
  %463 = insertelement <4 x float> %462, float 1.000000e+00, i32 3
  %464 = fmul <4 x float> %459, %463
  %465 = fmul <4 x float> %464, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %466 = fadd <4 x float> %465, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %467 = fadd <4 x float> %455, %466
  %468 = extractelement <4 x float> %467, i32 0
  %469 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 0
  store float %468, float* %469, align 4
  %470 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %471 = load float, float* %470, align 4
  %472 = insertelement <4 x float> zeroinitializer, float %471, i32 0
  %473 = insertelement <4 x float> %472, float 0.000000e+00, i32 1
  %474 = insertelement <4 x float> %473, float 0.000000e+00, i32 2
  %475 = insertelement <4 x float> %474, float 0.000000e+00, i32 3
  %476 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 0
  %477 = load float, float* %476, align 4
  %478 = insertelement <4 x float> zeroinitializer, float %477, i32 0
  %479 = insertelement <4 x float> %478, float 1.000000e+00, i32 1
  %480 = insertelement <4 x float> %479, float 1.000000e+00, i32 2
  %481 = insertelement <4 x float> %480, float 1.000000e+00, i32 3
  %482 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %483 = load float, float* %482, align 4
  %484 = insertelement <4 x float> zeroinitializer, float %483, i32 0
  %485 = insertelement <4 x float> %484, float 1.000000e+00, i32 1
  %486 = insertelement <4 x float> %485, float 1.000000e+00, i32 2
  %487 = insertelement <4 x float> %486, float 1.000000e+00, i32 3
  %488 = fmul <4 x float> %481, %487
  %489 = fmul <4 x float> %488, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %490 = fadd <4 x float> %489, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %491 = fadd <4 x float> %475, %490
  %492 = extractelement <4 x float> %491, i32 0
  %493 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %492, float* %493, align 4
  %494 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %495 = load float, float* %494, align 4
  %496 = insertelement <4 x float> zeroinitializer, float %495, i32 0
  %497 = insertelement <4 x float> %496, float 0.000000e+00, i32 1
  %498 = insertelement <4 x float> %497, float 0.000000e+00, i32 2
  %499 = insertelement <4 x float> %498, float 0.000000e+00, i32 3
  %500 = insertelement <4 x float> zeroinitializer, float %477, i32 0
  %501 = insertelement <4 x float> %500, float 1.000000e+00, i32 1
  %502 = insertelement <4 x float> %501, float 1.000000e+00, i32 2
  %503 = insertelement <4 x float> %502, float 1.000000e+00, i32 3
  %504 = insertelement <4 x float> zeroinitializer, float %483, i32 0
  %505 = insertelement <4 x float> %504, float 1.000000e+00, i32 1
  %506 = insertelement <4 x float> %505, float 1.000000e+00, i32 2
  %507 = insertelement <4 x float> %506, float 1.000000e+00, i32 3
  %508 = fmul <4 x float> %503, %507
  %509 = fmul <4 x float> %508, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %510 = fadd <4 x float> %509, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %511 = fadd <4 x float> %499, %510
  %512 = extractelement <4 x float> %511, i32 0
  %513 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %512, float* %513, align 4
  %514 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %515 = load float, float* %514, align 4
  %516 = insertelement <4 x float> zeroinitializer, float %515, i32 0
  %517 = insertelement <4 x float> %516, float 0.000000e+00, i32 1
  %518 = insertelement <4 x float> %517, float 0.000000e+00, i32 2
  %519 = insertelement <4 x float> %518, float 0.000000e+00, i32 3
  %520 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %521 = load float, float* %520, align 4
  %522 = insertelement <4 x float> zeroinitializer, float %521, i32 0
  %523 = insertelement <4 x float> %522, float 1.000000e+00, i32 1
  %524 = insertelement <4 x float> %523, float 1.000000e+00, i32 2
  %525 = insertelement <4 x float> %524, float 1.000000e+00, i32 3
  %526 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %527 = load float, float* %526, align 4
  %528 = insertelement <4 x float> zeroinitializer, float %527, i32 0
  %529 = insertelement <4 x float> %528, float 1.000000e+00, i32 1
  %530 = insertelement <4 x float> %529, float 1.000000e+00, i32 2
  %531 = insertelement <4 x float> %530, float 1.000000e+00, i32 3
  %532 = fmul <4 x float> %525, %531
  %533 = fmul <4 x float> %532, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %534 = fadd <4 x float> %533, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %535 = fadd <4 x float> %519, %534
  %536 = extractelement <4 x float> %535, i32 0
  %537 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %536, float* %537, align 4
  %538 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %539 = load float, float* %538, align 4
  %540 = insertelement <4 x float> zeroinitializer, float %539, i32 0
  %541 = insertelement <4 x float> %540, float 0.000000e+00, i32 1
  %542 = insertelement <4 x float> %541, float 0.000000e+00, i32 2
  %543 = insertelement <4 x float> %542, float 0.000000e+00, i32 3
  %544 = insertelement <4 x float> zeroinitializer, float %521, i32 0
  %545 = insertelement <4 x float> %544, float 1.000000e+00, i32 1
  %546 = insertelement <4 x float> %545, float 1.000000e+00, i32 2
  %547 = insertelement <4 x float> %546, float 1.000000e+00, i32 3
  %548 = insertelement <4 x float> zeroinitializer, float %527, i32 0
  %549 = insertelement <4 x float> %548, float 1.000000e+00, i32 1
  %550 = insertelement <4 x float> %549, float 1.000000e+00, i32 2
  %551 = insertelement <4 x float> %550, float 1.000000e+00, i32 3
  %552 = fmul <4 x float> %547, %551
  %553 = fmul <4 x float> %552, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %554 = fadd <4 x float> %553, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %555 = fadd <4 x float> %543, %554
  %556 = extractelement <4 x float> %555, i32 0
  %557 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %556, float* %557, align 4
  %558 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %559 = load float, float* %558, align 4
  %560 = insertelement <4 x float> zeroinitializer, float %559, i32 0
  %561 = insertelement <4 x float> %560, float 0.000000e+00, i32 1
  %562 = insertelement <4 x float> %561, float 0.000000e+00, i32 2
  %563 = insertelement <4 x float> %562, float 0.000000e+00, i32 3
  %564 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %565 = load float, float* %564, align 4
  %566 = insertelement <4 x float> zeroinitializer, float %565, i32 0
  %567 = insertelement <4 x float> %566, float 1.000000e+00, i32 1
  %568 = insertelement <4 x float> %567, float 1.000000e+00, i32 2
  %569 = insertelement <4 x float> %568, float 1.000000e+00, i32 3
  %570 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %571 = load float, float* %570, align 4
  %572 = insertelement <4 x float> zeroinitializer, float %571, i32 0
  %573 = insertelement <4 x float> %572, float 1.000000e+00, i32 1
  %574 = insertelement <4 x float> %573, float 1.000000e+00, i32 2
  %575 = insertelement <4 x float> %574, float 1.000000e+00, i32 3
  %576 = fmul <4 x float> %569, %575
  %577 = fmul <4 x float> %576, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %578 = fadd <4 x float> %577, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %579 = fadd <4 x float> %563, %578
  %580 = extractelement <4 x float> %579, i32 0
  %581 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %580, float* %581, align 4
  %582 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %583 = load float, float* %582, align 4
  %584 = insertelement <4 x float> zeroinitializer, float %583, i32 0
  %585 = insertelement <4 x float> %584, float 0.000000e+00, i32 1
  %586 = insertelement <4 x float> %585, float 0.000000e+00, i32 2
  %587 = insertelement <4 x float> %586, float 0.000000e+00, i32 3
  %588 = insertelement <4 x float> zeroinitializer, float %565, i32 0
  %589 = insertelement <4 x float> %588, float 1.000000e+00, i32 1
  %590 = insertelement <4 x float> %589, float 1.000000e+00, i32 2
  %591 = insertelement <4 x float> %590, float 1.000000e+00, i32 3
  %592 = insertelement <4 x float> zeroinitializer, float %571, i32 0
  %593 = insertelement <4 x float> %592, float 1.000000e+00, i32 1
  %594 = insertelement <4 x float> %593, float 1.000000e+00, i32 2
  %595 = insertelement <4 x float> %594, float 1.000000e+00, i32 3
  %596 = fmul <4 x float> %591, %595
  %597 = fmul <4 x float> %596, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %598 = fadd <4 x float> %597, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %599 = fadd <4 x float> %587, %598
  %600 = extractelement <4 x float> %599, i32 0
  %601 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %600, float* %601, align 4
  %602 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  %603 = load float, float* %602, align 4
  %604 = insertelement <4 x float> zeroinitializer, float %603, i32 0
  %605 = insertelement <4 x float> %604, float 0.000000e+00, i32 1
  %606 = insertelement <4 x float> %605, float 0.000000e+00, i32 2
  %607 = insertelement <4 x float> %606, float 0.000000e+00, i32 3
  %608 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %609 = load float, float* %608, align 4
  %610 = insertelement <4 x float> zeroinitializer, float %609, i32 0
  %611 = insertelement <4 x float> %610, float 1.000000e+00, i32 1
  %612 = insertelement <4 x float> %611, float 1.000000e+00, i32 2
  %613 = insertelement <4 x float> %612, float 1.000000e+00, i32 3
  %614 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 0
  %615 = load float, float* %614, align 4
  %616 = insertelement <4 x float> zeroinitializer, float %615, i32 0
  %617 = insertelement <4 x float> %616, float 1.000000e+00, i32 1
  %618 = insertelement <4 x float> %617, float 1.000000e+00, i32 2
  %619 = insertelement <4 x float> %618, float 1.000000e+00, i32 3
  %620 = fmul <4 x float> %613, %619
  %621 = fmul <4 x float> %620, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %622 = fadd <4 x float> %621, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %623 = fadd <4 x float> %607, %622
  %624 = extractelement <4 x float> %623, i32 0
  %625 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 1
  store float %624, float* %625, align 4
  %626 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  %627 = load float, float* %626, align 4
  %628 = insertelement <4 x float> zeroinitializer, float %627, i32 0
  %629 = insertelement <4 x float> %628, float 0.000000e+00, i32 1
  %630 = insertelement <4 x float> %629, float 0.000000e+00, i32 2
  %631 = insertelement <4 x float> %630, float 0.000000e+00, i32 3
  %632 = insertelement <4 x float> zeroinitializer, float %609, i32 0
  %633 = insertelement <4 x float> %632, float 1.000000e+00, i32 1
  %634 = insertelement <4 x float> %633, float 1.000000e+00, i32 2
  %635 = insertelement <4 x float> %634, float 1.000000e+00, i32 3
  %636 = insertelement <4 x float> zeroinitializer, float %615, i32 0
  %637 = insertelement <4 x float> %636, float 1.000000e+00, i32 1
  %638 = insertelement <4 x float> %637, float 1.000000e+00, i32 2
  %639 = insertelement <4 x float> %638, float 1.000000e+00, i32 3
  %640 = fmul <4 x float> %635, %639
  %641 = fmul <4 x float> %640, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %642 = fadd <4 x float> %641, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %643 = fadd <4 x float> %631, %642
  %644 = extractelement <4 x float> %643, i32 0
  %645 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 1
  store float %644, float* %645, align 4
  %646 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  %647 = load float, float* %646, align 4
  %648 = insertelement <4 x float> zeroinitializer, float %647, i32 0
  %649 = insertelement <4 x float> %648, float 0.000000e+00, i32 1
  %650 = insertelement <4 x float> %649, float 0.000000e+00, i32 2
  %651 = insertelement <4 x float> %650, float 0.000000e+00, i32 3
  %652 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 0, i64 1
  %653 = load float, float* %652, align 4
  %654 = insertelement <4 x float> zeroinitializer, float %653, i32 0
  %655 = insertelement <4 x float> %654, float 1.000000e+00, i32 1
  %656 = insertelement <4 x float> %655, float 1.000000e+00, i32 2
  %657 = insertelement <4 x float> %656, float 1.000000e+00, i32 3
  %658 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %659 = load float, float* %658, align 4
  %660 = insertelement <4 x float> zeroinitializer, float %659, i32 0
  %661 = insertelement <4 x float> %660, float 1.000000e+00, i32 1
  %662 = insertelement <4 x float> %661, float 1.000000e+00, i32 2
  %663 = insertelement <4 x float> %662, float 1.000000e+00, i32 3
  %664 = fmul <4 x float> %657, %663
  %665 = fmul <4 x float> %664, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %666 = fadd <4 x float> %665, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %667 = fadd <4 x float> %651, %666
  %668 = extractelement <4 x float> %667, i32 0
  %669 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  store float %668, float* %669, align 4
  %670 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  %671 = load float, float* %670, align 4
  %672 = insertelement <4 x float> zeroinitializer, float %671, i32 0
  %673 = insertelement <4 x float> %672, float 0.000000e+00, i32 1
  %674 = insertelement <4 x float> %673, float 0.000000e+00, i32 2
  %675 = insertelement <4 x float> %674, float 0.000000e+00, i32 3
  %676 = insertelement <4 x float> zeroinitializer, float %653, i32 0
  %677 = insertelement <4 x float> %676, float 1.000000e+00, i32 1
  %678 = insertelement <4 x float> %677, float 1.000000e+00, i32 2
  %679 = insertelement <4 x float> %678, float 1.000000e+00, i32 3
  %680 = insertelement <4 x float> zeroinitializer, float %659, i32 0
  %681 = insertelement <4 x float> %680, float 1.000000e+00, i32 1
  %682 = insertelement <4 x float> %681, float 1.000000e+00, i32 2
  %683 = insertelement <4 x float> %682, float 1.000000e+00, i32 3
  %684 = fmul <4 x float> %679, %683
  %685 = fmul <4 x float> %684, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %686 = fadd <4 x float> %685, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %687 = fadd <4 x float> %675, %686
  %688 = extractelement <4 x float> %687, i32 0
  %689 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  store float %688, float* %689, align 4
  %690 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  %691 = load float, float* %690, align 4
  %692 = insertelement <4 x float> zeroinitializer, float %691, i32 0
  %693 = insertelement <4 x float> %692, float 0.000000e+00, i32 1
  %694 = insertelement <4 x float> %693, float 0.000000e+00, i32 2
  %695 = insertelement <4 x float> %694, float 0.000000e+00, i32 3
  %696 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %697 = load float, float* %696, align 4
  %698 = insertelement <4 x float> zeroinitializer, float %697, i32 0
  %699 = insertelement <4 x float> %698, float 1.000000e+00, i32 1
  %700 = insertelement <4 x float> %699, float 1.000000e+00, i32 2
  %701 = insertelement <4 x float> %700, float 1.000000e+00, i32 3
  %702 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 0, i64 1
  %703 = load float, float* %702, align 4
  %704 = insertelement <4 x float> zeroinitializer, float %703, i32 0
  %705 = insertelement <4 x float> %704, float 1.000000e+00, i32 1
  %706 = insertelement <4 x float> %705, float 1.000000e+00, i32 2
  %707 = insertelement <4 x float> %706, float 1.000000e+00, i32 3
  %708 = fmul <4 x float> %701, %707
  %709 = fmul <4 x float> %708, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %710 = fadd <4 x float> %709, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %711 = fadd <4 x float> %695, %710
  %712 = extractelement <4 x float> %711, i32 0
  %713 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 1, i64 2
  store float %712, float* %713, align 4
  %714 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  %715 = load float, float* %714, align 4
  %716 = insertelement <4 x float> zeroinitializer, float %715, i32 0
  %717 = insertelement <4 x float> %716, float 0.000000e+00, i32 1
  %718 = insertelement <4 x float> %717, float 0.000000e+00, i32 2
  %719 = insertelement <4 x float> %718, float 0.000000e+00, i32 3
  %720 = insertelement <4 x float> zeroinitializer, float %697, i32 0
  %721 = insertelement <4 x float> %720, float 1.000000e+00, i32 1
  %722 = insertelement <4 x float> %721, float 1.000000e+00, i32 2
  %723 = insertelement <4 x float> %722, float 1.000000e+00, i32 3
  %724 = insertelement <4 x float> zeroinitializer, float %703, i32 0
  %725 = insertelement <4 x float> %724, float 1.000000e+00, i32 1
  %726 = insertelement <4 x float> %725, float 1.000000e+00, i32 2
  %727 = insertelement <4 x float> %726, float 1.000000e+00, i32 3
  %728 = fmul <4 x float> %723, %727
  %729 = fmul <4 x float> %728, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %730 = fadd <4 x float> %729, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %731 = fadd <4 x float> %719, %730
  %732 = extractelement <4 x float> %731, i32 0
  %733 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 1, i64 2
  store float %732, float* %733, align 4
  %734 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 0
  %735 = load float, float* %734, align 4
  %736 = insertelement <4 x float> zeroinitializer, float %735, i32 0
  %737 = insertelement <4 x float> %736, float 0.000000e+00, i32 1
  %738 = insertelement <4 x float> %737, float 0.000000e+00, i32 2
  %739 = insertelement <4 x float> %738, float 0.000000e+00, i32 3
  %740 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %741 = load float, float* %740, align 4
  %742 = insertelement <4 x float> zeroinitializer, float %741, i32 0
  %743 = insertelement <4 x float> %742, float 1.000000e+00, i32 1
  %744 = insertelement <4 x float> %743, float 1.000000e+00, i32 2
  %745 = insertelement <4 x float> %744, float 1.000000e+00, i32 3
  %746 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %747 = load float, float* %746, align 4
  %748 = insertelement <4 x float> zeroinitializer, float %747, i32 0
  %749 = insertelement <4 x float> %748, float 1.000000e+00, i32 1
  %750 = insertelement <4 x float> %749, float 1.000000e+00, i32 2
  %751 = insertelement <4 x float> %750, float 1.000000e+00, i32 3
  %752 = fmul <4 x float> %745, %751
  %753 = fmul <4 x float> %752, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %754 = fadd <4 x float> %753, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %755 = fadd <4 x float> %739, %754
  %756 = extractelement <4 x float> %755, i32 0
  %757 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 0
  store float %756, float* %757, align 4
  %758 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 0
  %759 = load float, float* %758, align 4
  %760 = insertelement <4 x float> zeroinitializer, float %759, i32 0
  %761 = insertelement <4 x float> %760, float 0.000000e+00, i32 1
  %762 = insertelement <4 x float> %761, float 0.000000e+00, i32 2
  %763 = insertelement <4 x float> %762, float 0.000000e+00, i32 3
  %764 = insertelement <4 x float> zeroinitializer, float %741, i32 0
  %765 = insertelement <4 x float> %764, float 1.000000e+00, i32 1
  %766 = insertelement <4 x float> %765, float 1.000000e+00, i32 2
  %767 = insertelement <4 x float> %766, float 1.000000e+00, i32 3
  %768 = insertelement <4 x float> zeroinitializer, float %747, i32 0
  %769 = insertelement <4 x float> %768, float 1.000000e+00, i32 1
  %770 = insertelement <4 x float> %769, float 1.000000e+00, i32 2
  %771 = insertelement <4 x float> %770, float 1.000000e+00, i32 3
  %772 = fmul <4 x float> %767, %771
  %773 = fmul <4 x float> %772, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %774 = fadd <4 x float> %773, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %775 = fadd <4 x float> %763, %774
  %776 = extractelement <4 x float> %775, i32 0
  %777 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 0
  store float %776, float* %777, align 4
  %778 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  %779 = load float, float* %778, align 4
  %780 = insertelement <4 x float> zeroinitializer, float %779, i32 0
  %781 = insertelement <4 x float> %780, float 0.000000e+00, i32 1
  %782 = insertelement <4 x float> %781, float 0.000000e+00, i32 2
  %783 = insertelement <4 x float> %782, float 0.000000e+00, i32 3
  %784 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 0
  %785 = load float, float* %784, align 4
  %786 = insertelement <4 x float> zeroinitializer, float %785, i32 0
  %787 = insertelement <4 x float> %786, float 1.000000e+00, i32 1
  %788 = insertelement <4 x float> %787, float 1.000000e+00, i32 2
  %789 = insertelement <4 x float> %788, float 1.000000e+00, i32 3
  %790 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %791 = load float, float* %790, align 4
  %792 = insertelement <4 x float> zeroinitializer, float %791, i32 0
  %793 = insertelement <4 x float> %792, float 1.000000e+00, i32 1
  %794 = insertelement <4 x float> %793, float 1.000000e+00, i32 2
  %795 = insertelement <4 x float> %794, float 1.000000e+00, i32 3
  %796 = fmul <4 x float> %789, %795
  %797 = fmul <4 x float> %796, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %798 = fadd <4 x float> %797, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %799 = fadd <4 x float> %783, %798
  %800 = extractelement <4 x float> %799, i32 0
  %801 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  store float %800, float* %801, align 4
  %802 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  %803 = load float, float* %802, align 4
  %804 = insertelement <4 x float> zeroinitializer, float %803, i32 0
  %805 = insertelement <4 x float> %804, float 0.000000e+00, i32 1
  %806 = insertelement <4 x float> %805, float 0.000000e+00, i32 2
  %807 = insertelement <4 x float> %806, float 0.000000e+00, i32 3
  %808 = insertelement <4 x float> zeroinitializer, float %785, i32 0
  %809 = insertelement <4 x float> %808, float 1.000000e+00, i32 1
  %810 = insertelement <4 x float> %809, float 1.000000e+00, i32 2
  %811 = insertelement <4 x float> %810, float 1.000000e+00, i32 3
  %812 = insertelement <4 x float> zeroinitializer, float %791, i32 0
  %813 = insertelement <4 x float> %812, float 1.000000e+00, i32 1
  %814 = insertelement <4 x float> %813, float 1.000000e+00, i32 2
  %815 = insertelement <4 x float> %814, float 1.000000e+00, i32 3
  %816 = fmul <4 x float> %811, %815
  %817 = fmul <4 x float> %816, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %818 = fadd <4 x float> %817, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %819 = fadd <4 x float> %807, %818
  %820 = extractelement <4 x float> %819, i32 0
  %821 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  store float %820, float* %821, align 4
  %822 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  %823 = load float, float* %822, align 4
  %824 = insertelement <4 x float> zeroinitializer, float %823, i32 0
  %825 = insertelement <4 x float> %824, float 0.000000e+00, i32 1
  %826 = insertelement <4 x float> %825, float 0.000000e+00, i32 2
  %827 = insertelement <4 x float> %826, float 0.000000e+00, i32 3
  %828 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %829 = load float, float* %828, align 4
  %830 = insertelement <4 x float> zeroinitializer, float %829, i32 0
  %831 = insertelement <4 x float> %830, float 1.000000e+00, i32 1
  %832 = insertelement <4 x float> %831, float 1.000000e+00, i32 2
  %833 = insertelement <4 x float> %832, float 1.000000e+00, i32 3
  %834 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 0
  %835 = load float, float* %834, align 4
  %836 = insertelement <4 x float> zeroinitializer, float %835, i32 0
  %837 = insertelement <4 x float> %836, float 1.000000e+00, i32 1
  %838 = insertelement <4 x float> %837, float 1.000000e+00, i32 2
  %839 = insertelement <4 x float> %838, float 1.000000e+00, i32 3
  %840 = fmul <4 x float> %833, %839
  %841 = fmul <4 x float> %840, <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %842 = fadd <4 x float> %841, <float -4.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %843 = fadd <4 x float> %827, %842
  %844 = extractelement <4 x float> %843, i32 0
  %845 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 1
  store float %844, float* %845, align 4
  %846 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  %847 = load float, float* %846, align 4
  %848 = insertelement <4 x float> zeroinitializer, float %847, i32 0
  %849 = insertelement <4 x float> %848, float 0.000000e+00, i32 1
  %850 = insertelement <4 x float> %849, float 0.000000e+00, i32 2
  %851 = insertelement <4 x float> %850, float 0.000000e+00, i32 3
  %852 = insertelement <4 x float> zeroinitializer, float %829, i32 0
  %853 = insertelement <4 x float> %852, float 1.000000e+00, i32 1
  %854 = insertelement <4 x float> %853, float 1.000000e+00, i32 2
  %855 = insertelement <4 x float> %854, float 1.000000e+00, i32 3
  %856 = insertelement <4 x float> zeroinitializer, float %835, i32 0
  %857 = insertelement <4 x float> %856, float 1.000000e+00, i32 1
  %858 = insertelement <4 x float> %857, float 1.000000e+00, i32 2
  %859 = insertelement <4 x float> %858, float 1.000000e+00, i32 3
  %860 = fmul <4 x float> %855, %859
  %861 = fmul <4 x float> %860, <float 2.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %862 = fadd <4 x float> %861, <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %863 = fadd <4 x float> %851, %862
  %864 = extractelement <4 x float> %863, i32 0
  %865 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 1
  store float %864, float* %865, align 4
  %866 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 2
  %867 = load float, float* %866, align 4
  %868 = insertelement <4 x float> zeroinitializer, float %867, i32 0
  %869 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 2
  %870 = load float, float* %869, align 4
  %871 = insertelement <4 x float> %868, float %870, i32 1
  %872 = insertelement <4 x float> %871, float 0.000000e+00, i32 2
  %873 = insertelement <4 x float> %872, float 0.000000e+00, i32 3
  %874 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %875 = load float, float* %874, align 4
  %876 = insertelement <4 x float> zeroinitializer, float %875, i32 0
  %877 = getelementptr inbounds [2 x float], [2 x float]* %0, i64 1, i64 1
  %878 = load float, float* %877, align 4
  %879 = insertelement <4 x float> %876, float %878, i32 1
  %880 = insertelement <4 x float> %879, float 1.000000e+00, i32 2
  %881 = insertelement <4 x float> %880, float 1.000000e+00, i32 3
  %882 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %883 = load float, float* %882, align 4
  %884 = insertelement <4 x float> zeroinitializer, float %883, i32 0
  %885 = getelementptr inbounds [2 x float], [2 x float]* %1, i64 1, i64 1
  %886 = load float, float* %885, align 4
  %887 = insertelement <4 x float> %884, float %886, i32 1
  %888 = insertelement <4 x float> %887, float 1.000000e+00, i32 2
  %889 = insertelement <4 x float> %888, float 1.000000e+00, i32 3
  %890 = fmul <4 x float> %881, %889
  %891 = fmul <4 x float> %890, <float 3.000000e+00, float 2.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %892 = fadd <4 x float> %891, <float -4.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>
  %893 = fadd <4 x float> %873, %892
  %894 = extractelement <4 x float> %893, i32 0
  %895 = getelementptr inbounds [3 x float], [3 x float]* %2, i64 2, i64 2
  store float %894, float* %895, align 4
  %896 = extractelement <4 x float> %893, i32 1
  %897 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 2, i64 2
  store float %896, float* %897, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #0 {
.preheader:
  %0 = alloca [2 x [2 x float]], align 16
  %1 = alloca [2 x [2 x float]], align 16
  %2 = alloca [3 x [3 x float]], align 16
  %3 = alloca [3 x [3 x float]], align 16
  %4 = bitcast [2 x [2 x float]]* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %4, i8* nonnull align 16 dereferenceable(16) bitcast ([2 x [2 x float]]* @__const.main.mat_in to i8*), i64 16, i1 false)
  %5 = bitcast [2 x [2 x float]]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %5, i8* nonnull align 16 dereferenceable(16) bitcast ([2 x [2 x float]]* @__const.main.f_in to i8*), i64 16, i1 false)
  %6 = bitcast [3 x [3 x float]]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(36) %6, i8 0, i64 36, i1 false)
  %7 = bitcast [3 x [3 x float]]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(36) %7, i8 0, i64 36, i1 false)
  %8 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %0, i64 0, i64 0
  %9 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %1, i64 0, i64 0
  %10 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0
  %11 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0
  call void @load_use_twice([2 x float]* nonnull %8, [2 x float]* nonnull %9, [3 x float]* nonnull %10, [3 x float]* nonnull %11)
  %12 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 0
  %13 = load float, float* %12, align 16
  %14 = fpext float %13 to double
  %15 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %14) #4
  %16 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0, i64 0
  %17 = load float, float* %16, align 16
  %18 = fpext float %17 to double
  %19 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %18) #4
  %20 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 1
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %22) #4
  %24 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0, i64 1
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %26) #4
  %28 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 0, i64 2
  %29 = load float, float* %28, align 8
  %30 = fpext float %29 to double
  %31 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %30) #4
  %32 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 0, i64 2
  %33 = load float, float* %32, align 8
  %34 = fpext float %33 to double
  %35 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %34) #4
  %36 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 0
  %37 = load float, float* %36, align 4
  %38 = fpext float %37 to double
  %39 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %38) #4
  %40 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 1, i64 0
  %41 = load float, float* %40, align 4
  %42 = fpext float %41 to double
  %43 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %42) #4
  %44 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 1
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %46) #4
  %48 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 1, i64 1
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  %51 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %50) #4
  %52 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 1, i64 2
  %53 = load float, float* %52, align 4
  %54 = fpext float %53 to double
  %55 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %54) #4
  %56 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 1, i64 2
  %57 = load float, float* %56, align 4
  %58 = fpext float %57 to double
  %59 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %58) #4
  %60 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 0
  %61 = load float, float* %60, align 8
  %62 = fpext float %61 to double
  %63 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %62) #4
  %64 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 2, i64 0
  %65 = load float, float* %64, align 8
  %66 = fpext float %65 to double
  %67 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %66) #4
  %68 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 1
  %69 = load float, float* %68, align 4
  %70 = fpext float %69 to double
  %71 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %70) #4
  %72 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 2, i64 1
  %73 = load float, float* %72, align 4
  %74 = fpext float %73 to double
  %75 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %74) #4
  %76 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %2, i64 0, i64 2, i64 2
  %77 = load float, float* %76, align 8
  %78 = fpext float %77 to double
  %79 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %78) #4
  %80 = getelementptr inbounds [3 x [3 x float]], [3 x [3 x float]]* %3, i64 0, i64 2, i64 2
  %81 = load float, float* %80, align 8
  %82 = fpext float %81 to double
  %83 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %82) #4
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @printf(i8*, ...) #3

attributes #0 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { argmemonly nounwind willreturn writeonly }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 11.0.1"}
