; ModuleID = 'build/diospyros.ll'
source_filename = "fail-tests/qr-decomp-local-arrays.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

@.str = private unnamed_addr constant [14 x i8] c"Q Output: %f\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Expected Q Output: %f\0A\00", align 1
@__func__.main = private unnamed_addr constant [5 x i8] c"main\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"fail-tests/qr-decomp-local-arrays.c\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"fabs(expectedQ[i] - Q[i]) < DELTA\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"R Output: %f\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"Expected R Output: %f\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"fabs(expectedR[i] - R[i]) < DELTA\00", align 1

; Function Attrs: alwaysinline nounwind ssp uwtable
define float @sgn(float %0) #0 {
  %2 = fcmp ogt float %0, 0.000000e+00
  %3 = zext i1 %2 to i32
  %4 = fcmp olt float %0, 0.000000e+00
  %.neg = sext i1 %4 to i32
  %5 = add nsw i32 %.neg, %3
  %6 = sitofp i32 %5 to float
  ret float %6
}

; Function Attrs: noinline nounwind ssp uwtable
define float @no_opt_sgn(float %0) #1 {
  %2 = fcmp ogt float %0, 0.000000e+00
  %3 = zext i1 %2 to i32
  %4 = fcmp olt float %0, 0.000000e+00
  %.neg = sext i1 %4 to i32
  %5 = add nsw i32 %.neg, %3
  %6 = sitofp i32 %5 to float
  ret float %6
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define float @naive_norm(float* %0, i32 %1) #0 {
  %3 = icmp sgt i32 %1, 0
  %smax = select i1 %3, i32 %1, i32 0
  %wide.trip.count = zext i32 %smax to i64
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %4 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %wide.trip.count, 3
  %5 = icmp ult i64 %4, 3
  br i1 %5, label %._crit_edge.unr-lcssa, label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 2147483644
  br label %6

6:                                                ; preds = %6, %.lr.ph.new
  %.013 = phi float [ 0.000000e+00, %.lr.ph.new ], [ %22, %6 ]
  %indvars.iv2 = phi i64 [ 0, %.lr.ph.new ], [ %indvars.iv.next.3, %6 ]
  %niter = phi i64 [ %unroll_iter, %.lr.ph.new ], [ %niter.nsub.3, %6 ]
  %7 = getelementptr inbounds float, float* %0, i64 %indvars.iv2
  %8 = load float, float* %7, align 4
  %9 = fmul float %8, %8
  %10 = fadd float %.013, %9
  %indvars.iv.next = or i64 %indvars.iv2, 1
  %11 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %12
  %14 = fadd float %10, %13
  %indvars.iv.next.1 = or i64 %indvars.iv2, 2
  %15 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, %16
  %18 = fadd float %14, %17
  %indvars.iv.next.2 = or i64 %indvars.iv2, 3
  %19 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %20
  %22 = fadd float %18, %21
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv2, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3.not = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3.not, label %._crit_edge.unr-lcssa, label %6

._crit_edge.unr-lcssa:                            ; preds = %6, %.lr.ph
  %split.ph = phi float [ undef, %.lr.ph ], [ %22, %6 ]
  %.013.unr = phi float [ 0.000000e+00, %.lr.ph ], [ %22, %6 ]
  %indvars.iv2.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next.3, %6 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %._crit_edge, label %.epil.preheader

.epil.preheader:                                  ; preds = %.epil.preheader, %._crit_edge.unr-lcssa
  %.013.epil = phi float [ %26, %.epil.preheader ], [ %.013.unr, %._crit_edge.unr-lcssa ]
  %indvars.iv2.epil = phi i64 [ %indvars.iv.next.epil, %.epil.preheader ], [ %indvars.iv2.unr, %._crit_edge.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %.epil.preheader ], [ %xtraiter, %._crit_edge.unr-lcssa ]
  %23 = getelementptr inbounds float, float* %0, i64 %indvars.iv2.epil
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %24
  %26 = fadd float %.013.epil, %25
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv2.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %._crit_edge, label %.epil.preheader, !llvm.loop !3

._crit_edge:                                      ; preds = %.epil.preheader, %._crit_edge.unr-lcssa, %2
  %.01.lcssa = phi float [ 0.000000e+00, %2 ], [ %split.ph, %._crit_edge.unr-lcssa ], [ %26, %.epil.preheader ]
  %27 = call float @llvm.sqrt.f32(float %.01.lcssa)
  ret float %27
}

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #2

; Function Attrs: noinline nounwind ssp uwtable
define float @no_opt_naive_norm(float* %0, i32 %1) #1 {
  %3 = icmp sgt i32 %1, 0
  %smax = select i1 %3, i32 %1, i32 0
  %wide.trip.count = zext i32 %smax to i64
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %4 = add nsw i64 %wide.trip.count, -1
  %xtraiter = and i64 %wide.trip.count, 3
  %5 = icmp ult i64 %4, 3
  br i1 %5, label %._crit_edge.unr-lcssa, label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 2147483644
  br label %6

6:                                                ; preds = %6, %.lr.ph.new
  %.013 = phi float [ 0.000000e+00, %.lr.ph.new ], [ %22, %6 ]
  %indvars.iv2 = phi i64 [ 0, %.lr.ph.new ], [ %indvars.iv.next.3, %6 ]
  %niter = phi i64 [ %unroll_iter, %.lr.ph.new ], [ %niter.nsub.3, %6 ]
  %7 = getelementptr inbounds float, float* %0, i64 %indvars.iv2
  %8 = load float, float* %7, align 4
  %9 = fmul float %8, %8
  %10 = fadd float %.013, %9
  %indvars.iv.next = or i64 %indvars.iv2, 1
  %11 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %12 = load float, float* %11, align 4
  %13 = fmul float %12, %12
  %14 = fadd float %10, %13
  %indvars.iv.next.1 = or i64 %indvars.iv2, 2
  %15 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.1
  %16 = load float, float* %15, align 4
  %17 = fmul float %16, %16
  %18 = fadd float %14, %17
  %indvars.iv.next.2 = or i64 %indvars.iv2, 3
  %19 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next.2
  %20 = load float, float* %19, align 4
  %21 = fmul float %20, %20
  %22 = fadd float %18, %21
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv2, 4
  %niter.nsub.3 = add i64 %niter, -4
  %niter.ncmp.3.not = icmp eq i64 %niter.nsub.3, 0
  br i1 %niter.ncmp.3.not, label %._crit_edge.unr-lcssa, label %6

._crit_edge.unr-lcssa:                            ; preds = %6, %.lr.ph
  %split.ph = phi float [ undef, %.lr.ph ], [ %22, %6 ]
  %.013.unr = phi float [ 0.000000e+00, %.lr.ph ], [ %22, %6 ]
  %indvars.iv2.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next.3, %6 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %._crit_edge, label %.epil.preheader

.epil.preheader:                                  ; preds = %.epil.preheader, %._crit_edge.unr-lcssa
  %.013.epil = phi float [ %26, %.epil.preheader ], [ %.013.unr, %._crit_edge.unr-lcssa ]
  %indvars.iv2.epil = phi i64 [ %indvars.iv.next.epil, %.epil.preheader ], [ %indvars.iv2.unr, %._crit_edge.unr-lcssa ]
  %epil.iter = phi i64 [ %epil.iter.sub, %.epil.preheader ], [ %xtraiter, %._crit_edge.unr-lcssa ]
  %23 = getelementptr inbounds float, float* %0, i64 %indvars.iv2.epil
  %24 = load float, float* %23, align 4
  %25 = fmul float %24, %24
  %26 = fadd float %.013.epil, %25
  %indvars.iv.next.epil = add nuw nsw i64 %indvars.iv2.epil, 1
  %epil.iter.sub = add i64 %epil.iter, -1
  %epil.iter.cmp.not = icmp eq i64 %epil.iter.sub, 0
  br i1 %epil.iter.cmp.not, label %._crit_edge, label %.epil.preheader, !llvm.loop !5

._crit_edge:                                      ; preds = %.epil.preheader, %._crit_edge.unr-lcssa, %2
  %.01.lcssa = phi float [ 0.000000e+00, %2 ], [ %split.ph, %._crit_edge.unr-lcssa ], [ %26, %.epil.preheader ]
  %27 = call float @llvm.sqrt.f32(float %.01.lcssa)
  ret float %27
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define void @naive_fixed_transpose(float* %0) #0 {
.lr.ph:
  %1 = getelementptr inbounds float, float* %0, i64 1
  %2 = bitcast float* %1 to i32*
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds float, float* %0, i64 2
  %5 = bitcast float* %4 to i32*
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  store i32 %3, i32* %5, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @no_opt_naive_fixed_transpose(float* %0) #1 {
.lr.ph:
  %1 = getelementptr inbounds float, float* %0, i64 1
  %2 = bitcast float* %1 to i32*
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds float, float* %0, i64 2
  %5 = bitcast float* %4 to i32*
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %2, align 4
  store i32 %3, i32* %5, align 4
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define void @naive_fixed_matrix_multiply(float* %0, float* %1, float* %2) #0 {
.preheader:
  store float 0.000000e+00, float* %2, align 4
  %3 = getelementptr float, float* %0, i32 0
  %4 = load float, float* %3, align 4
  %5 = insertelement <4 x float> zeroinitializer, float %4, i32 0
  %6 = insertelement <4 x float> %5, float 0.000000e+00, i32 1
  %7 = insertelement <4 x float> %6, float 0.000000e+00, i32 2
  %8 = insertelement <4 x float> %7, float 0.000000e+00, i32 3
  %9 = getelementptr float, float* %1, i32 0
  %10 = load float, float* %9, align 4
  %11 = insertelement <4 x float> zeroinitializer, float %10, i32 0
  %12 = insertelement <4 x float> %11, float 0.000000e+00, i32 1
  %13 = insertelement <4 x float> %12, float 0.000000e+00, i32 2
  %14 = insertelement <4 x float> %13, float 0.000000e+00, i32 3
  %15 = call <4 x float> @llvm.fma.v4f32(<4 x float> %8, <4 x float> %14, <4 x float> zeroinitializer)
  %16 = extractelement <4 x float> %15, i32 0
  store float %16, float* %2, align 4
  %17 = insertelement <4 x float> zeroinitializer, float %4, i32 0
  %18 = insertelement <4 x float> %17, float 1.000000e+00, i32 1
  %19 = insertelement <4 x float> %18, float 1.000000e+00, i32 2
  %20 = insertelement <4 x float> %19, float 1.000000e+00, i32 3
  %21 = getelementptr float, float* %1, i32 0
  %22 = load float, float* %21, align 4
  %23 = insertelement <4 x float> zeroinitializer, float %22, i32 0
  %24 = insertelement <4 x float> %23, float 0.000000e+00, i32 1
  %25 = insertelement <4 x float> %24, float 0.000000e+00, i32 2
  %26 = insertelement <4 x float> %25, float 0.000000e+00, i32 3
  %27 = fmul <4 x float> %20, %26
  %28 = fadd <4 x float> %27, zeroinitializer
  %29 = getelementptr float, float* %0, i32 0
  %30 = getelementptr inbounds float, float* %29, i64 1
  %31 = load float, float* %30, align 4
  %32 = insertelement <4 x float> zeroinitializer, float %31, i32 0
  %33 = insertelement <4 x float> %32, float 0.000000e+00, i32 1
  %34 = insertelement <4 x float> %33, float 0.000000e+00, i32 2
  %35 = insertelement <4 x float> %34, float 0.000000e+00, i32 3
  %36 = getelementptr float, float* %1, i32 0
  %37 = getelementptr inbounds float, float* %36, i64 2
  %38 = load float, float* %37, align 4
  %39 = insertelement <4 x float> zeroinitializer, float %38, i32 0
  %40 = insertelement <4 x float> %39, float 0.000000e+00, i32 1
  %41 = insertelement <4 x float> %40, float 0.000000e+00, i32 2
  %42 = insertelement <4 x float> %41, float 0.000000e+00, i32 3
  %43 = call <4 x float> @llvm.fma.v4f32(<4 x float> %35, <4 x float> %42, <4 x float> %28)
  %44 = extractelement <4 x float> %43, i32 0
  store float %44, float* %2, align 4
  %45 = extractelement <4 x float> %43, i32 1
  %46 = getelementptr float, float* %2, i32 0
  %47 = getelementptr inbounds float, float* %46, i64 1
  store float %45, float* %47, align 4
  %48 = getelementptr float, float* %0, i32 0
  %49 = load float, float* %48, align 4
  %50 = insertelement <4 x float> zeroinitializer, float %49, i32 0
  %51 = insertelement <4 x float> %50, float 0.000000e+00, i32 1
  %52 = insertelement <4 x float> %51, float 0.000000e+00, i32 2
  %53 = insertelement <4 x float> %52, float 0.000000e+00, i32 3
  %54 = getelementptr float, float* %1, i32 0
  %55 = getelementptr inbounds float, float* %54, i64 1
  %56 = load float, float* %55, align 4
  %57 = insertelement <4 x float> zeroinitializer, float %56, i32 0
  %58 = insertelement <4 x float> %57, float 0.000000e+00, i32 1
  %59 = insertelement <4 x float> %58, float 0.000000e+00, i32 2
  %60 = insertelement <4 x float> %59, float 0.000000e+00, i32 3
  %61 = call <4 x float> @llvm.fma.v4f32(<4 x float> %53, <4 x float> %60, <4 x float> zeroinitializer)
  %62 = extractelement <4 x float> %61, i32 0
  %63 = getelementptr float, float* %2, i32 0
  %64 = getelementptr inbounds float, float* %63, i64 1
  store float %62, float* %64, align 4
  %65 = insertelement <4 x float> zeroinitializer, float %49, i32 0
  %66 = insertelement <4 x float> %65, float 1.000000e+00, i32 1
  %67 = insertelement <4 x float> %66, float 1.000000e+00, i32 2
  %68 = insertelement <4 x float> %67, float 1.000000e+00, i32 3
  %69 = load float, float* %55, align 4
  %70 = insertelement <4 x float> zeroinitializer, float %69, i32 0
  %71 = insertelement <4 x float> %70, float 0.000000e+00, i32 1
  %72 = insertelement <4 x float> %71, float 0.000000e+00, i32 2
  %73 = insertelement <4 x float> %72, float 0.000000e+00, i32 3
  %74 = fmul <4 x float> %68, %73
  %75 = fadd <4 x float> %74, zeroinitializer
  %76 = getelementptr float, float* %0, i32 0
  %77 = getelementptr inbounds float, float* %76, i64 1
  %78 = load float, float* %77, align 4
  %79 = insertelement <4 x float> zeroinitializer, float %78, i32 0
  %80 = insertelement <4 x float> %79, float 0.000000e+00, i32 1
  %81 = insertelement <4 x float> %80, float 0.000000e+00, i32 2
  %82 = insertelement <4 x float> %81, float 0.000000e+00, i32 3
  %83 = getelementptr float, float* %1, i32 0
  %84 = getelementptr inbounds float, float* %83, i64 3
  %85 = load float, float* %84, align 4
  %86 = insertelement <4 x float> zeroinitializer, float %85, i32 0
  %87 = insertelement <4 x float> %86, float 0.000000e+00, i32 1
  %88 = insertelement <4 x float> %87, float 0.000000e+00, i32 2
  %89 = insertelement <4 x float> %88, float 0.000000e+00, i32 3
  %90 = call <4 x float> @llvm.fma.v4f32(<4 x float> %82, <4 x float> %89, <4 x float> %75)
  %91 = extractelement <4 x float> %90, i32 0
  %92 = getelementptr float, float* %2, i32 0
  %93 = getelementptr inbounds float, float* %92, i64 1
  store float %91, float* %93, align 4
  %94 = extractelement <4 x float> %90, i32 1
  %95 = getelementptr float, float* %2, i32 0
  %96 = getelementptr inbounds float, float* %95, i64 2
  store float %94, float* %96, align 4
  %97 = getelementptr float, float* %0, i32 0
  %98 = getelementptr inbounds float, float* %97, i64 2
  %99 = load float, float* %98, align 4
  %100 = insertelement <4 x float> zeroinitializer, float %99, i32 0
  %101 = insertelement <4 x float> %100, float 0.000000e+00, i32 1
  %102 = insertelement <4 x float> %101, float 0.000000e+00, i32 2
  %103 = insertelement <4 x float> %102, float 0.000000e+00, i32 3
  %104 = getelementptr float, float* %1, i32 0
  %105 = load float, float* %104, align 4
  %106 = insertelement <4 x float> zeroinitializer, float %105, i32 0
  %107 = insertelement <4 x float> %106, float 0.000000e+00, i32 1
  %108 = insertelement <4 x float> %107, float 0.000000e+00, i32 2
  %109 = insertelement <4 x float> %108, float 0.000000e+00, i32 3
  %110 = call <4 x float> @llvm.fma.v4f32(<4 x float> %103, <4 x float> %109, <4 x float> zeroinitializer)
  %111 = extractelement <4 x float> %110, i32 0
  %112 = getelementptr float, float* %2, i32 0
  %113 = getelementptr inbounds float, float* %112, i64 2
  store float %111, float* %113, align 4
  %114 = insertelement <4 x float> zeroinitializer, float %99, i32 0
  %115 = insertelement <4 x float> %114, float 1.000000e+00, i32 1
  %116 = insertelement <4 x float> %115, float 1.000000e+00, i32 2
  %117 = insertelement <4 x float> %116, float 1.000000e+00, i32 3
  %118 = insertelement <4 x float> zeroinitializer, float %105, i32 0
  %119 = insertelement <4 x float> %118, float 0.000000e+00, i32 1
  %120 = insertelement <4 x float> %119, float 0.000000e+00, i32 2
  %121 = insertelement <4 x float> %120, float 0.000000e+00, i32 3
  %122 = fmul <4 x float> %117, %121
  %123 = fadd <4 x float> %122, zeroinitializer
  %124 = getelementptr float, float* %0, i32 0
  %125 = getelementptr inbounds float, float* %124, i64 3
  %126 = load float, float* %125, align 4
  %127 = insertelement <4 x float> zeroinitializer, float %126, i32 0
  %128 = insertelement <4 x float> %127, float 0.000000e+00, i32 1
  %129 = insertelement <4 x float> %128, float 0.000000e+00, i32 2
  %130 = insertelement <4 x float> %129, float 0.000000e+00, i32 3
  %131 = load float, float* %37, align 4
  %132 = insertelement <4 x float> zeroinitializer, float %131, i32 0
  %133 = insertelement <4 x float> %132, float 0.000000e+00, i32 1
  %134 = insertelement <4 x float> %133, float 0.000000e+00, i32 2
  %135 = insertelement <4 x float> %134, float 0.000000e+00, i32 3
  %136 = call <4 x float> @llvm.fma.v4f32(<4 x float> %130, <4 x float> %135, <4 x float> %123)
  %137 = extractelement <4 x float> %136, i32 0
  store float %137, float* %113, align 4
  %138 = extractelement <4 x float> %136, i32 1
  %139 = getelementptr float, float* %2, i32 0
  %140 = getelementptr inbounds float, float* %139, i64 3
  store float %138, float* %140, align 4
  %141 = load float, float* %98, align 4
  %142 = insertelement <4 x float> zeroinitializer, float %141, i32 0
  %143 = insertelement <4 x float> %142, float 0.000000e+00, i32 1
  %144 = insertelement <4 x float> %143, float 0.000000e+00, i32 2
  %145 = insertelement <4 x float> %144, float 0.000000e+00, i32 3
  %146 = load float, float* %55, align 4
  %147 = insertelement <4 x float> zeroinitializer, float %146, i32 0
  %148 = insertelement <4 x float> %147, float 0.000000e+00, i32 1
  %149 = insertelement <4 x float> %148, float 0.000000e+00, i32 2
  %150 = insertelement <4 x float> %149, float 0.000000e+00, i32 3
  %151 = call <4 x float> @llvm.fma.v4f32(<4 x float> %145, <4 x float> %150, <4 x float> zeroinitializer)
  %152 = extractelement <4 x float> %151, i32 0
  store float %152, float* %140, align 4
  %153 = insertelement <4 x float> zeroinitializer, float %141, i32 0
  %154 = insertelement <4 x float> %153, float 1.000000e+00, i32 1
  %155 = insertelement <4 x float> %154, float 1.000000e+00, i32 2
  %156 = insertelement <4 x float> %155, float 1.000000e+00, i32 3
  %157 = insertelement <4 x float> zeroinitializer, float %146, i32 0
  %158 = insertelement <4 x float> %157, float 0.000000e+00, i32 1
  %159 = insertelement <4 x float> %158, float 0.000000e+00, i32 2
  %160 = insertelement <4 x float> %159, float 0.000000e+00, i32 3
  %161 = fmul <4 x float> %156, %160
  %162 = fadd <4 x float> %161, zeroinitializer
  %163 = getelementptr float, float* %0, i32 0
  %164 = getelementptr inbounds float, float* %163, i64 3
  %165 = load float, float* %164, align 4
  %166 = insertelement <4 x float> zeroinitializer, float %165, i32 0
  %167 = insertelement <4 x float> %166, float 0.000000e+00, i32 1
  %168 = insertelement <4 x float> %167, float 0.000000e+00, i32 2
  %169 = insertelement <4 x float> %168, float 0.000000e+00, i32 3
  %170 = load float, float* %84, align 4
  %171 = insertelement <4 x float> zeroinitializer, float %170, i32 0
  %172 = insertelement <4 x float> %171, float 0.000000e+00, i32 1
  %173 = insertelement <4 x float> %172, float 0.000000e+00, i32 2
  %174 = insertelement <4 x float> %173, float 0.000000e+00, i32 3
  %175 = call <4 x float> @llvm.fma.v4f32(<4 x float> %169, <4 x float> %174, <4 x float> %162)
  %176 = extractelement <4 x float> %175, i32 0
  store float %176, float* %140, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @no_opt_naive_fixed_matrix_multiply(float* %0, float* %1, float* %2) #1 {
.preheader:
  store float 0.000000e+00, float* %2, align 4
  %3 = load float, float* %0, align 4
  %4 = load float, float* %1, align 4
  %5 = fmul float %3, %4
  %6 = fadd float %5, 0.000000e+00
  store float %6, float* %2, align 4
  %7 = getelementptr inbounds float, float* %0, i64 1
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds float, float* %1, i64 2
  %10 = load float, float* %9, align 4
  %11 = fmul float %8, %10
  %12 = fadd float %6, %11
  store float %12, float* %2, align 4
  %13 = getelementptr inbounds float, float* %2, i64 1
  store float 0.000000e+00, float* %13, align 4
  %14 = load float, float* %0, align 4
  %15 = getelementptr inbounds float, float* %1, i64 1
  %16 = load float, float* %15, align 4
  %17 = fmul float %14, %16
  %18 = fadd float %17, 0.000000e+00
  store float %18, float* %13, align 4
  %19 = load float, float* %7, align 4
  %20 = getelementptr inbounds float, float* %1, i64 3
  %21 = load float, float* %20, align 4
  %22 = fmul float %19, %21
  %23 = fadd float %18, %22
  store float %23, float* %13, align 4
  %24 = getelementptr inbounds float, float* %0, i64 2
  %25 = getelementptr inbounds float, float* %2, i64 2
  store float 0.000000e+00, float* %25, align 4
  %26 = load float, float* %24, align 4
  %27 = load float, float* %1, align 4
  %28 = fmul float %26, %27
  %29 = fadd float %28, 0.000000e+00
  store float %29, float* %25, align 4
  %30 = getelementptr inbounds float, float* %0, i64 3
  %31 = load float, float* %30, align 4
  %32 = load float, float* %9, align 4
  %33 = fmul float %31, %32
  %34 = fadd float %29, %33
  store float %34, float* %25, align 4
  %35 = getelementptr inbounds float, float* %2, i64 3
  store float 0.000000e+00, float* %35, align 4
  %36 = load float, float* %24, align 4
  %37 = load float, float* %15, align 4
  %38 = fmul float %36, %37
  %39 = fadd float %38, 0.000000e+00
  store float %39, float* %35, align 4
  %40 = load float, float* %30, align 4
  %41 = load float, float* %20, align 4
  %42 = fmul float %40, %41
  %43 = fadd float %39, %42
  store float %43, float* %35, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @naive_fixed_qr_decomp(float* %0, float* %1, float* %2) #1 {
.preheader49:
  %3 = getelementptr float, float* %0, i32 0
  %4 = bitcast float* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = bitcast i32 %5 to float
  %7 = insertelement <4 x float> zeroinitializer, float %6, i32 0
  %8 = insertelement <4 x float> %7, float 0.000000e+00, i32 1
  %9 = insertelement <4 x float> %8, float 0.000000e+00, i32 2
  %10 = insertelement <4 x float> %9, float 0.000000e+00, i32 3
  %11 = extractelement <4 x float> %10, i32 0
  %12 = getelementptr float, float* %2, i32 0
  %13 = bitcast float* %12 to i32*
  %14 = bitcast i32* %13 to float*
  store float %11, float* %14, align 4
  %15 = getelementptr float, float* %0, i32 0
  %16 = getelementptr inbounds float, float* %15, i64 1
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = bitcast i32 %18 to float
  %20 = insertelement <4 x float> zeroinitializer, float %19, i32 0
  %21 = insertelement <4 x float> %20, float 0.000000e+00, i32 1
  %22 = insertelement <4 x float> %21, float 0.000000e+00, i32 2
  %23 = insertelement <4 x float> %22, float 0.000000e+00, i32 3
  %24 = extractelement <4 x float> %23, i32 0
  %25 = getelementptr float, float* %2, i32 0
  %26 = getelementptr inbounds float, float* %25, i64 1
  %27 = bitcast float* %26 to i32*
  %28 = bitcast i32* %27 to float*
  store float %24, float* %28, align 4
  %29 = getelementptr float, float* %0, i32 0
  %30 = getelementptr inbounds float, float* %29, i64 2
  %31 = bitcast float* %30 to i32*
  %32 = load i32, i32* %31, align 4
  %33 = bitcast i32 %32 to float
  %34 = insertelement <4 x float> zeroinitializer, float %33, i32 0
  %35 = insertelement <4 x float> %34, float 0.000000e+00, i32 1
  %36 = insertelement <4 x float> %35, float 0.000000e+00, i32 2
  %37 = insertelement <4 x float> %36, float 0.000000e+00, i32 3
  %38 = extractelement <4 x float> %37, i32 0
  %39 = getelementptr float, float* %2, i32 0
  %40 = getelementptr inbounds float, float* %39, i64 2
  %41 = bitcast float* %40 to i32*
  %42 = bitcast i32* %41 to float*
  store float %38, float* %42, align 4
  %43 = getelementptr float, float* %0, i32 0
  %44 = getelementptr inbounds float, float* %43, i64 3
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = bitcast i32 %46 to float
  %48 = fneg float %47
  %49 = insertelement <4 x float> zeroinitializer, float %48, i32 0
  %50 = getelementptr float, float* %0, i32 0
  %51 = bitcast float* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = bitcast i32 %52 to float
  %54 = bitcast i32 %52 to float
  %55 = fmul float %53, %54
  %56 = fadd float %55, 0.000000e+00
  %57 = bitcast i32 %32 to float
  %58 = bitcast i32 %32 to float
  %59 = fmul float %57, %58
  %60 = fadd float %56, %59
  %61 = call float @llvm.sqrt.f32(float %60)
  %62 = bitcast i32 %52 to float
  %63 = fcmp olt float %62, 0.000000e+00
  %64 = sext i1 %63 to i32
  %65 = fcmp ogt float %62, 0.000000e+00
  %66 = zext i1 %65 to i32
  %67 = add nsw i32 %64, %66
  %68 = sitofp i32 %67 to float
  %69 = fneg float %68
  %70 = fmul float %61, %69
  %71 = bitcast i32 %52 to float
  %72 = fadd float %71, %70
  %73 = bitcast i32 %52 to float
  %74 = bitcast i32 %52 to float
  %75 = fmul float %73, %74
  %76 = fadd float %75, 0.000000e+00
  %77 = bitcast i32 %32 to float
  %78 = bitcast i32 %32 to float
  %79 = fmul float %77, %78
  %80 = fadd float %76, %79
  %81 = call float @llvm.sqrt.f32(float %80)
  %82 = fneg float %68
  %83 = fmul float %81, %82
  %84 = bitcast i32 %52 to float
  %85 = fadd float %84, %83
  %86 = bitcast i32 %52 to float
  %87 = bitcast i32 %52 to float
  %88 = fmul float %86, %87
  %89 = fadd float %88, 0.000000e+00
  %90 = bitcast i32 %32 to float
  %91 = bitcast i32 %32 to float
  %92 = fmul float %90, %91
  %93 = fadd float %89, %92
  %94 = call float @llvm.sqrt.f32(float %93)
  %95 = fneg float %68
  %96 = fmul float %94, %95
  %97 = bitcast i32 %52 to float
  %98 = fadd float %97, %96
  %99 = fmul float %85, %98
  %100 = fadd float %99, 0.000000e+00
  %101 = bitcast i32 %52 to float
  %102 = bitcast i32 %52 to float
  %103 = fmul float %101, %102
  %104 = fadd float %103, 0.000000e+00
  %105 = bitcast i32 %32 to float
  %106 = bitcast i32 %32 to float
  %107 = fmul float %105, %106
  %108 = fadd float %104, %107
  %109 = call float @llvm.sqrt.f32(float %108)
  %110 = fneg float %68
  %111 = fmul float %109, %110
  %112 = fmul float %111, 0.000000e+00
  %113 = bitcast i32 %32 to float
  %114 = fadd float %113, %112
  %115 = bitcast i32 %52 to float
  %116 = bitcast i32 %52 to float
  %117 = fmul float %115, %116
  %118 = fadd float %117, 0.000000e+00
  %119 = bitcast i32 %32 to float
  %120 = bitcast i32 %32 to float
  %121 = fmul float %119, %120
  %122 = fadd float %118, %121
  %123 = call float @llvm.sqrt.f32(float %122)
  %124 = fneg float %68
  %125 = fmul float %123, %124
  %126 = fmul float %125, 0.000000e+00
  %127 = bitcast i32 %32 to float
  %128 = fadd float %127, %126
  %129 = fmul float %114, %128
  %130 = fadd float %100, %129
  %131 = call float @llvm.sqrt.f32(float %130)
  %132 = fadd float %131, 0.000000e+00
  %133 = fdiv float %72, %132
  %134 = fmul float %133, 2.000000e+00
  %135 = bitcast i32 %52 to float
  %136 = bitcast i32 %52 to float
  %137 = fmul float %135, %136
  %138 = fadd float %137, 0.000000e+00
  %139 = bitcast i32 %32 to float
  %140 = bitcast i32 %32 to float
  %141 = fmul float %139, %140
  %142 = fadd float %138, %141
  %143 = call float @llvm.sqrt.f32(float %142)
  %144 = fneg float %68
  %145 = fmul float %143, %144
  %146 = bitcast i32 %52 to float
  %147 = fadd float %146, %145
  %148 = bitcast i32 %52 to float
  %149 = bitcast i32 %52 to float
  %150 = fmul float %148, %149
  %151 = fadd float %150, 0.000000e+00
  %152 = bitcast i32 %32 to float
  %153 = bitcast i32 %32 to float
  %154 = fmul float %152, %153
  %155 = fadd float %151, %154
  %156 = call float @llvm.sqrt.f32(float %155)
  %157 = fneg float %68
  %158 = fmul float %156, %157
  %159 = bitcast i32 %52 to float
  %160 = fadd float %159, %158
  %161 = bitcast i32 %52 to float
  %162 = bitcast i32 %52 to float
  %163 = fmul float %161, %162
  %164 = fadd float %163, 0.000000e+00
  %165 = bitcast i32 %32 to float
  %166 = bitcast i32 %32 to float
  %167 = fmul float %165, %166
  %168 = fadd float %164, %167
  %169 = call float @llvm.sqrt.f32(float %168)
  %170 = fneg float %68
  %171 = fmul float %169, %170
  %172 = bitcast i32 %52 to float
  %173 = fadd float %172, %171
  %174 = fmul float %160, %173
  %175 = fadd float %174, 0.000000e+00
  %176 = bitcast i32 %52 to float
  %177 = bitcast i32 %52 to float
  %178 = fmul float %176, %177
  %179 = fadd float %178, 0.000000e+00
  %180 = bitcast i32 %32 to float
  %181 = bitcast i32 %32 to float
  %182 = fmul float %180, %181
  %183 = fadd float %179, %182
  %184 = call float @llvm.sqrt.f32(float %183)
  %185 = fneg float %68
  %186 = fmul float %184, %185
  %187 = fmul float %186, 0.000000e+00
  %188 = bitcast i32 %32 to float
  %189 = fadd float %188, %187
  %190 = bitcast i32 %52 to float
  %191 = bitcast i32 %52 to float
  %192 = fmul float %190, %191
  %193 = fadd float %192, 0.000000e+00
  %194 = bitcast i32 %32 to float
  %195 = bitcast i32 %32 to float
  %196 = fmul float %194, %195
  %197 = fadd float %193, %196
  %198 = call float @llvm.sqrt.f32(float %197)
  %199 = fneg float %68
  %200 = fmul float %198, %199
  %201 = fmul float %200, 0.000000e+00
  %202 = bitcast i32 %32 to float
  %203 = fadd float %202, %201
  %204 = fmul float %189, %203
  %205 = fadd float %175, %204
  %206 = call float @llvm.sqrt.f32(float %205)
  %207 = fadd float %206, 0.000000e+00
  %208 = fdiv float %147, %207
  %209 = fmul float %134, %208
  %210 = insertelement <4 x float> %49, float %209, i32 1
  %211 = bitcast i32 %52 to float
  %212 = bitcast i32 %52 to float
  %213 = fmul float %211, %212
  %214 = fadd float %213, 0.000000e+00
  %215 = bitcast i32 %32 to float
  %216 = bitcast i32 %32 to float
  %217 = fmul float %215, %216
  %218 = fadd float %214, %217
  %219 = call float @llvm.sqrt.f32(float %218)
  %220 = fneg float %68
  %221 = fmul float %219, %220
  %222 = bitcast i32 %52 to float
  %223 = fadd float %222, %221
  %224 = bitcast i32 %52 to float
  %225 = bitcast i32 %52 to float
  %226 = fmul float %224, %225
  %227 = fadd float %226, 0.000000e+00
  %228 = bitcast i32 %32 to float
  %229 = bitcast i32 %32 to float
  %230 = fmul float %228, %229
  %231 = fadd float %227, %230
  %232 = call float @llvm.sqrt.f32(float %231)
  %233 = fneg float %68
  %234 = fmul float %232, %233
  %235 = bitcast i32 %52 to float
  %236 = fadd float %235, %234
  %237 = bitcast i32 %52 to float
  %238 = bitcast i32 %52 to float
  %239 = fmul float %237, %238
  %240 = fadd float %239, 0.000000e+00
  %241 = bitcast i32 %32 to float
  %242 = bitcast i32 %32 to float
  %243 = fmul float %241, %242
  %244 = fadd float %240, %243
  %245 = call float @llvm.sqrt.f32(float %244)
  %246 = fneg float %68
  %247 = fmul float %245, %246
  %248 = bitcast i32 %52 to float
  %249 = fadd float %248, %247
  %250 = fmul float %236, %249
  %251 = fadd float %250, 0.000000e+00
  %252 = bitcast i32 %52 to float
  %253 = bitcast i32 %52 to float
  %254 = fmul float %252, %253
  %255 = fadd float %254, 0.000000e+00
  %256 = bitcast i32 %32 to float
  %257 = bitcast i32 %32 to float
  %258 = fmul float %256, %257
  %259 = fadd float %255, %258
  %260 = call float @llvm.sqrt.f32(float %259)
  %261 = fneg float %68
  %262 = fmul float %260, %261
  %263 = fmul float %262, 0.000000e+00
  %264 = bitcast i32 %32 to float
  %265 = fadd float %264, %263
  %266 = bitcast i32 %52 to float
  %267 = bitcast i32 %52 to float
  %268 = fmul float %266, %267
  %269 = fadd float %268, 0.000000e+00
  %270 = bitcast i32 %32 to float
  %271 = bitcast i32 %32 to float
  %272 = fmul float %270, %271
  %273 = fadd float %269, %272
  %274 = call float @llvm.sqrt.f32(float %273)
  %275 = fneg float %68
  %276 = fmul float %274, %275
  %277 = fmul float %276, 0.000000e+00
  %278 = bitcast i32 %32 to float
  %279 = fadd float %278, %277
  %280 = fmul float %265, %279
  %281 = fadd float %251, %280
  %282 = call float @llvm.sqrt.f32(float %281)
  %283 = fadd float %282, 0.000000e+00
  %284 = fdiv float %223, %283
  %285 = fmul float %284, 2.000000e+00
  %286 = bitcast i32 %52 to float
  %287 = bitcast i32 %52 to float
  %288 = fmul float %286, %287
  %289 = fadd float %288, 0.000000e+00
  %290 = bitcast i32 %32 to float
  %291 = bitcast i32 %32 to float
  %292 = fmul float %290, %291
  %293 = fadd float %289, %292
  %294 = call float @llvm.sqrt.f32(float %293)
  %295 = fneg float %68
  %296 = fmul float %294, %295
  %297 = fmul float %296, 0.000000e+00
  %298 = bitcast i32 %32 to float
  %299 = fadd float %298, %297
  %300 = bitcast i32 %52 to float
  %301 = bitcast i32 %52 to float
  %302 = fmul float %300, %301
  %303 = fadd float %302, 0.000000e+00
  %304 = bitcast i32 %32 to float
  %305 = bitcast i32 %32 to float
  %306 = fmul float %304, %305
  %307 = fadd float %303, %306
  %308 = call float @llvm.sqrt.f32(float %307)
  %309 = fneg float %68
  %310 = fmul float %308, %309
  %311 = bitcast i32 %52 to float
  %312 = fadd float %311, %310
  %313 = bitcast i32 %52 to float
  %314 = bitcast i32 %52 to float
  %315 = fmul float %313, %314
  %316 = fadd float %315, 0.000000e+00
  %317 = bitcast i32 %32 to float
  %318 = bitcast i32 %32 to float
  %319 = fmul float %317, %318
  %320 = fadd float %316, %319
  %321 = call float @llvm.sqrt.f32(float %320)
  %322 = fneg float %68
  %323 = fmul float %321, %322
  %324 = bitcast i32 %52 to float
  %325 = fadd float %324, %323
  %326 = fmul float %312, %325
  %327 = fadd float %326, 0.000000e+00
  %328 = bitcast i32 %52 to float
  %329 = bitcast i32 %52 to float
  %330 = fmul float %328, %329
  %331 = fadd float %330, 0.000000e+00
  %332 = bitcast i32 %32 to float
  %333 = bitcast i32 %32 to float
  %334 = fmul float %332, %333
  %335 = fadd float %331, %334
  %336 = call float @llvm.sqrt.f32(float %335)
  %337 = fneg float %68
  %338 = fmul float %336, %337
  %339 = fmul float %338, 0.000000e+00
  %340 = bitcast i32 %32 to float
  %341 = fadd float %340, %339
  %342 = bitcast i32 %52 to float
  %343 = bitcast i32 %52 to float
  %344 = fmul float %342, %343
  %345 = fadd float %344, 0.000000e+00
  %346 = bitcast i32 %32 to float
  %347 = bitcast i32 %32 to float
  %348 = fmul float %346, %347
  %349 = fadd float %345, %348
  %350 = call float @llvm.sqrt.f32(float %349)
  %351 = fneg float %68
  %352 = fmul float %350, %351
  %353 = fmul float %352, 0.000000e+00
  %354 = bitcast i32 %32 to float
  %355 = fadd float %354, %353
  %356 = fmul float %341, %355
  %357 = fadd float %327, %356
  %358 = call float @llvm.sqrt.f32(float %357)
  %359 = fadd float %358, 0.000000e+00
  %360 = fdiv float %299, %359
  %361 = fmul float %285, %360
  %362 = insertelement <4 x float> %210, float %361, i32 2
  %363 = bitcast i32 %52 to float
  %364 = bitcast i32 %52 to float
  %365 = fmul float %363, %364
  %366 = fadd float %365, 0.000000e+00
  %367 = bitcast i32 %32 to float
  %368 = bitcast i32 %32 to float
  %369 = fmul float %367, %368
  %370 = fadd float %366, %369
  %371 = call float @llvm.sqrt.f32(float %370)
  %372 = fneg float %68
  %373 = fmul float %371, %372
  %374 = fmul float %373, 0.000000e+00
  %375 = bitcast i32 %32 to float
  %376 = fadd float %375, %374
  %377 = bitcast i32 %52 to float
  %378 = bitcast i32 %52 to float
  %379 = fmul float %377, %378
  %380 = fadd float %379, 0.000000e+00
  %381 = bitcast i32 %32 to float
  %382 = bitcast i32 %32 to float
  %383 = fmul float %381, %382
  %384 = fadd float %380, %383
  %385 = call float @llvm.sqrt.f32(float %384)
  %386 = fneg float %68
  %387 = fmul float %385, %386
  %388 = bitcast i32 %52 to float
  %389 = fadd float %388, %387
  %390 = bitcast i32 %52 to float
  %391 = bitcast i32 %52 to float
  %392 = fmul float %390, %391
  %393 = fadd float %392, 0.000000e+00
  %394 = bitcast i32 %32 to float
  %395 = bitcast i32 %32 to float
  %396 = fmul float %394, %395
  %397 = fadd float %393, %396
  %398 = call float @llvm.sqrt.f32(float %397)
  %399 = fneg float %68
  %400 = fmul float %398, %399
  %401 = bitcast i32 %52 to float
  %402 = fadd float %401, %400
  %403 = fmul float %389, %402
  %404 = fadd float %403, 0.000000e+00
  %405 = bitcast i32 %52 to float
  %406 = bitcast i32 %52 to float
  %407 = fmul float %405, %406
  %408 = fadd float %407, 0.000000e+00
  %409 = bitcast i32 %32 to float
  %410 = bitcast i32 %32 to float
  %411 = fmul float %409, %410
  %412 = fadd float %408, %411
  %413 = call float @llvm.sqrt.f32(float %412)
  %414 = fneg float %68
  %415 = fmul float %413, %414
  %416 = fmul float %415, 0.000000e+00
  %417 = bitcast i32 %32 to float
  %418 = fadd float %417, %416
  %419 = bitcast i32 %52 to float
  %420 = bitcast i32 %52 to float
  %421 = fmul float %419, %420
  %422 = fadd float %421, 0.000000e+00
  %423 = bitcast i32 %32 to float
  %424 = bitcast i32 %32 to float
  %425 = fmul float %423, %424
  %426 = fadd float %422, %425
  %427 = call float @llvm.sqrt.f32(float %426)
  %428 = fneg float %68
  %429 = fmul float %427, %428
  %430 = fmul float %429, 0.000000e+00
  %431 = bitcast i32 %32 to float
  %432 = fadd float %431, %430
  %433 = fmul float %418, %432
  %434 = fadd float %404, %433
  %435 = call float @llvm.sqrt.f32(float %434)
  %436 = fadd float %435, 0.000000e+00
  %437 = fdiv float %376, %436
  %438 = fmul float %437, 2.000000e+00
  %439 = bitcast i32 %52 to float
  %440 = bitcast i32 %52 to float
  %441 = fmul float %439, %440
  %442 = fadd float %441, 0.000000e+00
  %443 = bitcast i32 %32 to float
  %444 = bitcast i32 %32 to float
  %445 = fmul float %443, %444
  %446 = fadd float %442, %445
  %447 = call float @llvm.sqrt.f32(float %446)
  %448 = fneg float %68
  %449 = fmul float %447, %448
  %450 = bitcast i32 %52 to float
  %451 = fadd float %450, %449
  %452 = bitcast i32 %52 to float
  %453 = bitcast i32 %52 to float
  %454 = fmul float %452, %453
  %455 = fadd float %454, 0.000000e+00
  %456 = bitcast i32 %32 to float
  %457 = bitcast i32 %32 to float
  %458 = fmul float %456, %457
  %459 = fadd float %455, %458
  %460 = call float @llvm.sqrt.f32(float %459)
  %461 = fneg float %68
  %462 = fmul float %460, %461
  %463 = bitcast i32 %52 to float
  %464 = fadd float %463, %462
  %465 = bitcast i32 %52 to float
  %466 = bitcast i32 %52 to float
  %467 = fmul float %465, %466
  %468 = fadd float %467, 0.000000e+00
  %469 = bitcast i32 %32 to float
  %470 = bitcast i32 %32 to float
  %471 = fmul float %469, %470
  %472 = fadd float %468, %471
  %473 = call float @llvm.sqrt.f32(float %472)
  %474 = fneg float %68
  %475 = fmul float %473, %474
  %476 = bitcast i32 %52 to float
  %477 = fadd float %476, %475
  %478 = fmul float %464, %477
  %479 = fadd float %478, 0.000000e+00
  %480 = bitcast i32 %52 to float
  %481 = bitcast i32 %52 to float
  %482 = fmul float %480, %481
  %483 = fadd float %482, 0.000000e+00
  %484 = bitcast i32 %32 to float
  %485 = bitcast i32 %32 to float
  %486 = fmul float %484, %485
  %487 = fadd float %483, %486
  %488 = call float @llvm.sqrt.f32(float %487)
  %489 = fneg float %68
  %490 = fmul float %488, %489
  %491 = fmul float %490, 0.000000e+00
  %492 = bitcast i32 %32 to float
  %493 = fadd float %492, %491
  %494 = bitcast i32 %52 to float
  %495 = bitcast i32 %52 to float
  %496 = fmul float %494, %495
  %497 = fadd float %496, 0.000000e+00
  %498 = bitcast i32 %32 to float
  %499 = bitcast i32 %32 to float
  %500 = fmul float %498, %499
  %501 = fadd float %497, %500
  %502 = call float @llvm.sqrt.f32(float %501)
  %503 = fneg float %68
  %504 = fmul float %502, %503
  %505 = fmul float %504, 0.000000e+00
  %506 = bitcast i32 %32 to float
  %507 = fadd float %506, %505
  %508 = fmul float %493, %507
  %509 = fadd float %479, %508
  %510 = call float @llvm.sqrt.f32(float %509)
  %511 = fadd float %510, 0.000000e+00
  %512 = fdiv float %451, %511
  %513 = fmul float %438, %512
  %514 = insertelement <4 x float> %362, float %513, i32 3
  %515 = fsub <4 x float> <float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, %514
  %516 = bitcast i32 %52 to float
  %517 = bitcast i32 %52 to float
  %518 = fmul float %516, %517
  %519 = fadd float %518, 0.000000e+00
  %520 = bitcast i32 %32 to float
  %521 = bitcast i32 %32 to float
  %522 = fmul float %520, %521
  %523 = fadd float %519, %522
  %524 = call float @llvm.sqrt.f32(float %523)
  %525 = fneg float %68
  %526 = fmul float %524, %525
  %527 = fmul float %526, 0.000000e+00
  %528 = bitcast i32 %32 to float
  %529 = fadd float %528, %527
  %530 = bitcast i32 %52 to float
  %531 = bitcast i32 %52 to float
  %532 = fmul float %530, %531
  %533 = fadd float %532, 0.000000e+00
  %534 = bitcast i32 %32 to float
  %535 = bitcast i32 %32 to float
  %536 = fmul float %534, %535
  %537 = fadd float %533, %536
  %538 = call float @llvm.sqrt.f32(float %537)
  %539 = fneg float %68
  %540 = fmul float %538, %539
  %541 = bitcast i32 %52 to float
  %542 = fadd float %541, %540
  %543 = bitcast i32 %52 to float
  %544 = bitcast i32 %52 to float
  %545 = fmul float %543, %544
  %546 = fadd float %545, 0.000000e+00
  %547 = bitcast i32 %32 to float
  %548 = bitcast i32 %32 to float
  %549 = fmul float %547, %548
  %550 = fadd float %546, %549
  %551 = call float @llvm.sqrt.f32(float %550)
  %552 = fneg float %68
  %553 = fmul float %551, %552
  %554 = bitcast i32 %52 to float
  %555 = fadd float %554, %553
  %556 = fmul float %542, %555
  %557 = fadd float %556, 0.000000e+00
  %558 = bitcast i32 %52 to float
  %559 = bitcast i32 %52 to float
  %560 = fmul float %558, %559
  %561 = fadd float %560, 0.000000e+00
  %562 = bitcast i32 %32 to float
  %563 = bitcast i32 %32 to float
  %564 = fmul float %562, %563
  %565 = fadd float %561, %564
  %566 = call float @llvm.sqrt.f32(float %565)
  %567 = fneg float %68
  %568 = fmul float %566, %567
  %569 = fmul float %568, 0.000000e+00
  %570 = bitcast i32 %32 to float
  %571 = fadd float %570, %569
  %572 = bitcast i32 %52 to float
  %573 = bitcast i32 %52 to float
  %574 = fmul float %572, %573
  %575 = fadd float %574, 0.000000e+00
  %576 = bitcast i32 %32 to float
  %577 = bitcast i32 %32 to float
  %578 = fmul float %576, %577
  %579 = fadd float %575, %578
  %580 = call float @llvm.sqrt.f32(float %579)
  %581 = fneg float %68
  %582 = fmul float %580, %581
  %583 = fmul float %582, 0.000000e+00
  %584 = bitcast i32 %32 to float
  %585 = fadd float %584, %583
  %586 = fmul float %571, %585
  %587 = fadd float %557, %586
  %588 = call float @llvm.sqrt.f32(float %587)
  %589 = fadd float %588, 0.000000e+00
  %590 = fdiv float %529, %589
  %591 = fmul float %590, 2.000000e+00
  %592 = bitcast i32 %52 to float
  %593 = bitcast i32 %52 to float
  %594 = fmul float %592, %593
  %595 = fadd float %594, 0.000000e+00
  %596 = bitcast i32 %32 to float
  %597 = bitcast i32 %32 to float
  %598 = fmul float %596, %597
  %599 = fadd float %595, %598
  %600 = call float @llvm.sqrt.f32(float %599)
  %601 = fneg float %68
  %602 = fmul float %600, %601
  %603 = fmul float %602, 0.000000e+00
  %604 = bitcast i32 %32 to float
  %605 = fadd float %604, %603
  %606 = bitcast i32 %52 to float
  %607 = bitcast i32 %52 to float
  %608 = fmul float %606, %607
  %609 = fadd float %608, 0.000000e+00
  %610 = bitcast i32 %32 to float
  %611 = bitcast i32 %32 to float
  %612 = fmul float %610, %611
  %613 = fadd float %609, %612
  %614 = call float @llvm.sqrt.f32(float %613)
  %615 = fneg float %68
  %616 = fmul float %614, %615
  %617 = bitcast i32 %52 to float
  %618 = fadd float %617, %616
  %619 = bitcast i32 %52 to float
  %620 = bitcast i32 %52 to float
  %621 = fmul float %619, %620
  %622 = fadd float %621, 0.000000e+00
  %623 = bitcast i32 %32 to float
  %624 = bitcast i32 %32 to float
  %625 = fmul float %623, %624
  %626 = fadd float %622, %625
  %627 = call float @llvm.sqrt.f32(float %626)
  %628 = fneg float %68
  %629 = fmul float %627, %628
  %630 = bitcast i32 %52 to float
  %631 = fadd float %630, %629
  %632 = fmul float %618, %631
  %633 = fadd float %632, 0.000000e+00
  %634 = bitcast i32 %52 to float
  %635 = bitcast i32 %52 to float
  %636 = fmul float %634, %635
  %637 = fadd float %636, 0.000000e+00
  %638 = bitcast i32 %32 to float
  %639 = bitcast i32 %32 to float
  %640 = fmul float %638, %639
  %641 = fadd float %637, %640
  %642 = call float @llvm.sqrt.f32(float %641)
  %643 = fneg float %68
  %644 = fmul float %642, %643
  %645 = fmul float %644, 0.000000e+00
  %646 = bitcast i32 %32 to float
  %647 = fadd float %646, %645
  %648 = bitcast i32 %52 to float
  %649 = bitcast i32 %52 to float
  %650 = fmul float %648, %649
  %651 = fadd float %650, 0.000000e+00
  %652 = bitcast i32 %32 to float
  %653 = bitcast i32 %32 to float
  %654 = fmul float %652, %653
  %655 = fadd float %651, %654
  %656 = call float @llvm.sqrt.f32(float %655)
  %657 = fneg float %68
  %658 = fmul float %656, %657
  %659 = fmul float %658, 0.000000e+00
  %660 = bitcast i32 %32 to float
  %661 = fadd float %660, %659
  %662 = fmul float %647, %661
  %663 = fadd float %633, %662
  %664 = call float @llvm.sqrt.f32(float %663)
  %665 = fadd float %664, 0.000000e+00
  %666 = fdiv float %605, %665
  %667 = fmul float %591, %666
  %668 = fsub float 1.000000e+00, %667
  %669 = insertelement <4 x float> zeroinitializer, float %668, i32 0
  %670 = insertelement <4 x float> %669, float 0.000000e+00, i32 1
  %671 = insertelement <4 x float> %670, float 0.000000e+00, i32 2
  %672 = insertelement <4 x float> %671, float 0.000000e+00, i32 3
  %673 = shufflevector <4 x float> %515, <4 x float> %672, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %674 = extractelement <8 x float> %673, i32 0
  %675 = getelementptr float, float* %2, i32 0
  %676 = getelementptr inbounds float, float* %675, i64 3
  %677 = bitcast float* %676 to i32*
  %678 = bitcast i32* %677 to float*
  store float %674, float* %678, align 4
  %679 = bitcast float* %1 to i8*
  %680 = alloca [4 x float], align 16
  %681 = bitcast [4 x float]* %680 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %679, i8* nonnull align 16 dereferenceable(16) %681, i64 16, i1 false)
  store float 0.000000e+00, float* %2, align 4
  %682 = bitcast i32 %52 to float
  %683 = bitcast i32 %52 to float
  %684 = fmul float %682, %683
  %685 = fadd float %684, 0.000000e+00
  %686 = load i32, i32* %31, align 4
  %687 = bitcast i32 %686 to float
  %688 = bitcast i32 %686 to float
  %689 = fmul float %687, %688
  %690 = fadd float %685, %689
  %691 = call float @llvm.sqrt.f32(float %690)
  %692 = sitofp i32 %67 to float
  %693 = fneg float %692
  %694 = fmul float %691, %693
  %695 = bitcast i32 %52 to float
  %696 = fadd float %695, %694
  %697 = bitcast i32 %52 to float
  %698 = bitcast i32 %52 to float
  %699 = fmul float %697, %698
  %700 = fadd float %699, 0.000000e+00
  %701 = bitcast i32 %686 to float
  %702 = bitcast i32 %686 to float
  %703 = fmul float %701, %702
  %704 = fadd float %700, %703
  %705 = call float @llvm.sqrt.f32(float %704)
  %706 = fneg float %692
  %707 = fmul float %705, %706
  %708 = bitcast i32 %52 to float
  %709 = fadd float %708, %707
  %710 = bitcast i32 %52 to float
  %711 = bitcast i32 %52 to float
  %712 = fmul float %710, %711
  %713 = fadd float %712, 0.000000e+00
  %714 = bitcast i32 %686 to float
  %715 = bitcast i32 %686 to float
  %716 = fmul float %714, %715
  %717 = fadd float %713, %716
  %718 = call float @llvm.sqrt.f32(float %717)
  %719 = fneg float %692
  %720 = fmul float %718, %719
  %721 = bitcast i32 %52 to float
  %722 = fadd float %721, %720
  %723 = fmul float %709, %722
  %724 = fadd float %723, 0.000000e+00
  %725 = bitcast i32 %52 to float
  %726 = bitcast i32 %52 to float
  %727 = fmul float %725, %726
  %728 = fadd float %727, 0.000000e+00
  %729 = bitcast i32 %686 to float
  %730 = bitcast i32 %686 to float
  %731 = fmul float %729, %730
  %732 = fadd float %728, %731
  %733 = call float @llvm.sqrt.f32(float %732)
  %734 = fneg float %692
  %735 = fmul float %733, %734
  %736 = fmul float %735, 0.000000e+00
  %737 = bitcast i32 %686 to float
  %738 = fadd float %737, %736
  %739 = bitcast i32 %52 to float
  %740 = bitcast i32 %52 to float
  %741 = fmul float %739, %740
  %742 = fadd float %741, 0.000000e+00
  %743 = bitcast i32 %686 to float
  %744 = bitcast i32 %686 to float
  %745 = fmul float %743, %744
  %746 = fadd float %742, %745
  %747 = call float @llvm.sqrt.f32(float %746)
  %748 = fneg float %692
  %749 = fmul float %747, %748
  %750 = fmul float %749, 0.000000e+00
  %751 = bitcast i32 %686 to float
  %752 = fadd float %751, %750
  %753 = fmul float %738, %752
  %754 = fadd float %724, %753
  %755 = call float @llvm.sqrt.f32(float %754)
  %756 = fadd float %755, 0.000000e+00
  %757 = fdiv float %696, %756
  %758 = fmul float %757, 2.000000e+00
  %759 = bitcast i32 %52 to float
  %760 = bitcast i32 %52 to float
  %761 = fmul float %759, %760
  %762 = fadd float %761, 0.000000e+00
  %763 = bitcast i32 %686 to float
  %764 = bitcast i32 %686 to float
  %765 = fmul float %763, %764
  %766 = fadd float %762, %765
  %767 = call float @llvm.sqrt.f32(float %766)
  %768 = fneg float %692
  %769 = fmul float %767, %768
  %770 = bitcast i32 %52 to float
  %771 = fadd float %770, %769
  %772 = bitcast i32 %52 to float
  %773 = bitcast i32 %52 to float
  %774 = fmul float %772, %773
  %775 = fadd float %774, 0.000000e+00
  %776 = bitcast i32 %686 to float
  %777 = bitcast i32 %686 to float
  %778 = fmul float %776, %777
  %779 = fadd float %775, %778
  %780 = call float @llvm.sqrt.f32(float %779)
  %781 = fneg float %692
  %782 = fmul float %780, %781
  %783 = bitcast i32 %52 to float
  %784 = fadd float %783, %782
  %785 = bitcast i32 %52 to float
  %786 = bitcast i32 %52 to float
  %787 = fmul float %785, %786
  %788 = fadd float %787, 0.000000e+00
  %789 = bitcast i32 %686 to float
  %790 = bitcast i32 %686 to float
  %791 = fmul float %789, %790
  %792 = fadd float %788, %791
  %793 = call float @llvm.sqrt.f32(float %792)
  %794 = fneg float %692
  %795 = fmul float %793, %794
  %796 = bitcast i32 %52 to float
  %797 = fadd float %796, %795
  %798 = fmul float %784, %797
  %799 = fadd float %798, 0.000000e+00
  %800 = bitcast i32 %52 to float
  %801 = bitcast i32 %52 to float
  %802 = fmul float %800, %801
  %803 = fadd float %802, 0.000000e+00
  %804 = bitcast i32 %686 to float
  %805 = bitcast i32 %686 to float
  %806 = fmul float %804, %805
  %807 = fadd float %803, %806
  %808 = call float @llvm.sqrt.f32(float %807)
  %809 = fneg float %692
  %810 = fmul float %808, %809
  %811 = fmul float %810, 0.000000e+00
  %812 = bitcast i32 %686 to float
  %813 = fadd float %812, %811
  %814 = bitcast i32 %52 to float
  %815 = bitcast i32 %52 to float
  %816 = fmul float %814, %815
  %817 = fadd float %816, 0.000000e+00
  %818 = bitcast i32 %686 to float
  %819 = bitcast i32 %686 to float
  %820 = fmul float %818, %819
  %821 = fadd float %817, %820
  %822 = call float @llvm.sqrt.f32(float %821)
  %823 = fneg float %692
  %824 = fmul float %822, %823
  %825 = fmul float %824, 0.000000e+00
  %826 = bitcast i32 %686 to float
  %827 = fadd float %826, %825
  %828 = fmul float %813, %827
  %829 = fadd float %799, %828
  %830 = call float @llvm.sqrt.f32(float %829)
  %831 = fadd float %830, 0.000000e+00
  %832 = fdiv float %771, %831
  %833 = fmul float %758, %832
  %834 = fsub float 1.000000e+00, %833
  %835 = insertelement <4 x float> zeroinitializer, float %834, i32 0
  %836 = insertelement <4 x float> %835, float 0.000000e+00, i32 1
  %837 = insertelement <4 x float> %836, float 0.000000e+00, i32 2
  %838 = insertelement <4 x float> %837, float 0.000000e+00, i32 3
  %839 = getelementptr float, float* %0, i32 0
  %840 = load float, float* %839, align 4
  %841 = insertelement <4 x float> zeroinitializer, float %840, i32 0
  %842 = insertelement <4 x float> %841, float 0.000000e+00, i32 1
  %843 = insertelement <4 x float> %842, float 0.000000e+00, i32 2
  %844 = insertelement <4 x float> %843, float 0.000000e+00, i32 3
  %845 = call <4 x float> @llvm.fma.v4f32(<4 x float> %838, <4 x float> %844, <4 x float> zeroinitializer)
  %846 = extractelement <4 x float> %845, i32 0
  store float %846, float* %2, align 4
  %847 = bitcast i32 %52 to float
  %848 = bitcast i32 %52 to float
  %849 = fmul float %847, %848
  %850 = fadd float %849, 0.000000e+00
  %851 = bitcast i32 %686 to float
  %852 = bitcast i32 %686 to float
  %853 = fmul float %851, %852
  %854 = fadd float %850, %853
  %855 = call float @llvm.sqrt.f32(float %854)
  %856 = fneg float %692
  %857 = fmul float %855, %856
  %858 = bitcast i32 %52 to float
  %859 = fadd float %858, %857
  %860 = bitcast i32 %52 to float
  %861 = bitcast i32 %52 to float
  %862 = fmul float %860, %861
  %863 = fadd float %862, 0.000000e+00
  %864 = bitcast i32 %686 to float
  %865 = bitcast i32 %686 to float
  %866 = fmul float %864, %865
  %867 = fadd float %863, %866
  %868 = call float @llvm.sqrt.f32(float %867)
  %869 = fneg float %692
  %870 = fmul float %868, %869
  %871 = bitcast i32 %52 to float
  %872 = fadd float %871, %870
  %873 = bitcast i32 %52 to float
  %874 = bitcast i32 %52 to float
  %875 = fmul float %873, %874
  %876 = fadd float %875, 0.000000e+00
  %877 = bitcast i32 %686 to float
  %878 = bitcast i32 %686 to float
  %879 = fmul float %877, %878
  %880 = fadd float %876, %879
  %881 = call float @llvm.sqrt.f32(float %880)
  %882 = fneg float %692
  %883 = fmul float %881, %882
  %884 = bitcast i32 %52 to float
  %885 = fadd float %884, %883
  %886 = fmul float %872, %885
  %887 = fadd float %886, 0.000000e+00
  %888 = bitcast i32 %52 to float
  %889 = bitcast i32 %52 to float
  %890 = fmul float %888, %889
  %891 = fadd float %890, 0.000000e+00
  %892 = bitcast i32 %686 to float
  %893 = bitcast i32 %686 to float
  %894 = fmul float %892, %893
  %895 = fadd float %891, %894
  %896 = call float @llvm.sqrt.f32(float %895)
  %897 = fneg float %692
  %898 = fmul float %896, %897
  %899 = fmul float %898, 0.000000e+00
  %900 = bitcast i32 %686 to float
  %901 = fadd float %900, %899
  %902 = bitcast i32 %52 to float
  %903 = bitcast i32 %52 to float
  %904 = fmul float %902, %903
  %905 = fadd float %904, 0.000000e+00
  %906 = bitcast i32 %686 to float
  %907 = bitcast i32 %686 to float
  %908 = fmul float %906, %907
  %909 = fadd float %905, %908
  %910 = call float @llvm.sqrt.f32(float %909)
  %911 = fneg float %692
  %912 = fmul float %910, %911
  %913 = fmul float %912, 0.000000e+00
  %914 = bitcast i32 %686 to float
  %915 = fadd float %914, %913
  %916 = fmul float %901, %915
  %917 = fadd float %887, %916
  %918 = call float @llvm.sqrt.f32(float %917)
  %919 = fadd float %918, 0.000000e+00
  %920 = fdiv float %859, %919
  %921 = fmul float %920, 2.000000e+00
  %922 = bitcast i32 %52 to float
  %923 = bitcast i32 %52 to float
  %924 = fmul float %922, %923
  %925 = fadd float %924, 0.000000e+00
  %926 = bitcast i32 %686 to float
  %927 = bitcast i32 %686 to float
  %928 = fmul float %926, %927
  %929 = fadd float %925, %928
  %930 = call float @llvm.sqrt.f32(float %929)
  %931 = fneg float %692
  %932 = fmul float %930, %931
  %933 = bitcast i32 %52 to float
  %934 = fadd float %933, %932
  %935 = bitcast i32 %52 to float
  %936 = bitcast i32 %52 to float
  %937 = fmul float %935, %936
  %938 = fadd float %937, 0.000000e+00
  %939 = bitcast i32 %686 to float
  %940 = bitcast i32 %686 to float
  %941 = fmul float %939, %940
  %942 = fadd float %938, %941
  %943 = call float @llvm.sqrt.f32(float %942)
  %944 = fneg float %692
  %945 = fmul float %943, %944
  %946 = bitcast i32 %52 to float
  %947 = fadd float %946, %945
  %948 = bitcast i32 %52 to float
  %949 = bitcast i32 %52 to float
  %950 = fmul float %948, %949
  %951 = fadd float %950, 0.000000e+00
  %952 = bitcast i32 %686 to float
  %953 = bitcast i32 %686 to float
  %954 = fmul float %952, %953
  %955 = fadd float %951, %954
  %956 = call float @llvm.sqrt.f32(float %955)
  %957 = fneg float %692
  %958 = fmul float %956, %957
  %959 = bitcast i32 %52 to float
  %960 = fadd float %959, %958
  %961 = fmul float %947, %960
  %962 = fadd float %961, 0.000000e+00
  %963 = bitcast i32 %52 to float
  %964 = bitcast i32 %52 to float
  %965 = fmul float %963, %964
  %966 = fadd float %965, 0.000000e+00
  %967 = bitcast i32 %686 to float
  %968 = bitcast i32 %686 to float
  %969 = fmul float %967, %968
  %970 = fadd float %966, %969
  %971 = call float @llvm.sqrt.f32(float %970)
  %972 = fneg float %692
  %973 = fmul float %971, %972
  %974 = fmul float %973, 0.000000e+00
  %975 = bitcast i32 %686 to float
  %976 = fadd float %975, %974
  %977 = bitcast i32 %52 to float
  %978 = bitcast i32 %52 to float
  %979 = fmul float %977, %978
  %980 = fadd float %979, 0.000000e+00
  %981 = bitcast i32 %686 to float
  %982 = bitcast i32 %686 to float
  %983 = fmul float %981, %982
  %984 = fadd float %980, %983
  %985 = call float @llvm.sqrt.f32(float %984)
  %986 = fneg float %692
  %987 = fmul float %985, %986
  %988 = fmul float %987, 0.000000e+00
  %989 = bitcast i32 %686 to float
  %990 = fadd float %989, %988
  %991 = fmul float %976, %990
  %992 = fadd float %962, %991
  %993 = call float @llvm.sqrt.f32(float %992)
  %994 = fadd float %993, 0.000000e+00
  %995 = fdiv float %934, %994
  %996 = fmul float %921, %995
  %997 = fsub float 1.000000e+00, %996
  %998 = fmul float %997, %840
  %999 = fadd float %998, 0.000000e+00
  %1000 = bitcast i32 %52 to float
  %1001 = bitcast i32 %52 to float
  %1002 = fmul float %1000, %1001
  %1003 = fadd float %1002, 0.000000e+00
  %1004 = bitcast i32 %686 to float
  %1005 = bitcast i32 %686 to float
  %1006 = fmul float %1004, %1005
  %1007 = fadd float %1003, %1006
  %1008 = call float @llvm.sqrt.f32(float %1007)
  %1009 = fneg float %692
  %1010 = fmul float %1008, %1009
  %1011 = bitcast i32 %52 to float
  %1012 = fadd float %1011, %1010
  %1013 = bitcast i32 %52 to float
  %1014 = bitcast i32 %52 to float
  %1015 = fmul float %1013, %1014
  %1016 = fadd float %1015, 0.000000e+00
  %1017 = bitcast i32 %686 to float
  %1018 = bitcast i32 %686 to float
  %1019 = fmul float %1017, %1018
  %1020 = fadd float %1016, %1019
  %1021 = call float @llvm.sqrt.f32(float %1020)
  %1022 = fneg float %692
  %1023 = fmul float %1021, %1022
  %1024 = bitcast i32 %52 to float
  %1025 = fadd float %1024, %1023
  %1026 = bitcast i32 %52 to float
  %1027 = bitcast i32 %52 to float
  %1028 = fmul float %1026, %1027
  %1029 = fadd float %1028, 0.000000e+00
  %1030 = bitcast i32 %686 to float
  %1031 = bitcast i32 %686 to float
  %1032 = fmul float %1030, %1031
  %1033 = fadd float %1029, %1032
  %1034 = call float @llvm.sqrt.f32(float %1033)
  %1035 = fneg float %692
  %1036 = fmul float %1034, %1035
  %1037 = bitcast i32 %52 to float
  %1038 = fadd float %1037, %1036
  %1039 = fmul float %1025, %1038
  %1040 = fadd float %1039, 0.000000e+00
  %1041 = bitcast i32 %52 to float
  %1042 = bitcast i32 %52 to float
  %1043 = fmul float %1041, %1042
  %1044 = fadd float %1043, 0.000000e+00
  %1045 = bitcast i32 %686 to float
  %1046 = bitcast i32 %686 to float
  %1047 = fmul float %1045, %1046
  %1048 = fadd float %1044, %1047
  %1049 = call float @llvm.sqrt.f32(float %1048)
  %1050 = fneg float %692
  %1051 = fmul float %1049, %1050
  %1052 = fmul float %1051, 0.000000e+00
  %1053 = bitcast i32 %686 to float
  %1054 = fadd float %1053, %1052
  %1055 = bitcast i32 %52 to float
  %1056 = bitcast i32 %52 to float
  %1057 = fmul float %1055, %1056
  %1058 = fadd float %1057, 0.000000e+00
  %1059 = bitcast i32 %686 to float
  %1060 = bitcast i32 %686 to float
  %1061 = fmul float %1059, %1060
  %1062 = fadd float %1058, %1061
  %1063 = call float @llvm.sqrt.f32(float %1062)
  %1064 = fneg float %692
  %1065 = fmul float %1063, %1064
  %1066 = fmul float %1065, 0.000000e+00
  %1067 = bitcast i32 %686 to float
  %1068 = fadd float %1067, %1066
  %1069 = fmul float %1054, %1068
  %1070 = fadd float %1040, %1069
  %1071 = call float @llvm.sqrt.f32(float %1070)
  %1072 = fadd float %1071, 0.000000e+00
  %1073 = fdiv float %1012, %1072
  %1074 = fmul float %1073, 2.000000e+00
  %1075 = bitcast i32 %52 to float
  %1076 = bitcast i32 %52 to float
  %1077 = fmul float %1075, %1076
  %1078 = fadd float %1077, 0.000000e+00
  %1079 = bitcast i32 %686 to float
  %1080 = bitcast i32 %686 to float
  %1081 = fmul float %1079, %1080
  %1082 = fadd float %1078, %1081
  %1083 = call float @llvm.sqrt.f32(float %1082)
  %1084 = fneg float %692
  %1085 = fmul float %1083, %1084
  %1086 = fmul float %1085, 0.000000e+00
  %1087 = bitcast i32 %686 to float
  %1088 = fadd float %1087, %1086
  %1089 = bitcast i32 %52 to float
  %1090 = bitcast i32 %52 to float
  %1091 = fmul float %1089, %1090
  %1092 = fadd float %1091, 0.000000e+00
  %1093 = bitcast i32 %686 to float
  %1094 = bitcast i32 %686 to float
  %1095 = fmul float %1093, %1094
  %1096 = fadd float %1092, %1095
  %1097 = call float @llvm.sqrt.f32(float %1096)
  %1098 = fneg float %692
  %1099 = fmul float %1097, %1098
  %1100 = bitcast i32 %52 to float
  %1101 = fadd float %1100, %1099
  %1102 = bitcast i32 %52 to float
  %1103 = bitcast i32 %52 to float
  %1104 = fmul float %1102, %1103
  %1105 = fadd float %1104, 0.000000e+00
  %1106 = bitcast i32 %686 to float
  %1107 = bitcast i32 %686 to float
  %1108 = fmul float %1106, %1107
  %1109 = fadd float %1105, %1108
  %1110 = call float @llvm.sqrt.f32(float %1109)
  %1111 = fneg float %692
  %1112 = fmul float %1110, %1111
  %1113 = bitcast i32 %52 to float
  %1114 = fadd float %1113, %1112
  %1115 = fmul float %1101, %1114
  %1116 = fadd float %1115, 0.000000e+00
  %1117 = bitcast i32 %52 to float
  %1118 = bitcast i32 %52 to float
  %1119 = fmul float %1117, %1118
  %1120 = fadd float %1119, 0.000000e+00
  %1121 = bitcast i32 %686 to float
  %1122 = bitcast i32 %686 to float
  %1123 = fmul float %1121, %1122
  %1124 = fadd float %1120, %1123
  %1125 = call float @llvm.sqrt.f32(float %1124)
  %1126 = fneg float %692
  %1127 = fmul float %1125, %1126
  %1128 = fmul float %1127, 0.000000e+00
  %1129 = bitcast i32 %686 to float
  %1130 = fadd float %1129, %1128
  %1131 = bitcast i32 %52 to float
  %1132 = bitcast i32 %52 to float
  %1133 = fmul float %1131, %1132
  %1134 = fadd float %1133, 0.000000e+00
  %1135 = bitcast i32 %686 to float
  %1136 = bitcast i32 %686 to float
  %1137 = fmul float %1135, %1136
  %1138 = fadd float %1134, %1137
  %1139 = call float @llvm.sqrt.f32(float %1138)
  %1140 = fneg float %692
  %1141 = fmul float %1139, %1140
  %1142 = fmul float %1141, 0.000000e+00
  %1143 = bitcast i32 %686 to float
  %1144 = fadd float %1143, %1142
  %1145 = fmul float %1130, %1144
  %1146 = fadd float %1116, %1145
  %1147 = call float @llvm.sqrt.f32(float %1146)
  %1148 = fadd float %1147, 0.000000e+00
  %1149 = fdiv float %1088, %1148
  %1150 = fmul float %1074, %1149
  %1151 = fneg float %1150
  %1152 = getelementptr float, float* %0, i32 0
  %1153 = getelementptr inbounds float, float* %1152, i64 2
  %1154 = load float, float* %1153, align 4
  %1155 = fmul float %1151, %1154
  %1156 = fadd float %999, %1155
  %1157 = insertelement <4 x float> zeroinitializer, float %1156, i32 0
  %1158 = insertelement <4 x float> %1157, float 0.000000e+00, i32 1
  %1159 = insertelement <4 x float> %1158, float 0.000000e+00, i32 2
  %1160 = insertelement <4 x float> %1159, float 0.000000e+00, i32 3
  %1161 = extractelement <4 x float> %1160, i32 0
  store float %1161, float* %2, align 4
  %1162 = extractelement <4 x float> %1160, i32 1
  %1163 = getelementptr float, float* %2, i32 0
  %1164 = getelementptr inbounds float, float* %1163, i64 1
  store float %1162, float* %1164, align 4
  %1165 = bitcast i32 %52 to float
  %1166 = bitcast i32 %52 to float
  %1167 = fmul float %1165, %1166
  %1168 = fadd float %1167, 0.000000e+00
  %1169 = bitcast i32 %686 to float
  %1170 = bitcast i32 %686 to float
  %1171 = fmul float %1169, %1170
  %1172 = fadd float %1168, %1171
  %1173 = call float @llvm.sqrt.f32(float %1172)
  %1174 = fneg float %692
  %1175 = fmul float %1173, %1174
  %1176 = bitcast i32 %52 to float
  %1177 = fadd float %1176, %1175
  %1178 = bitcast i32 %52 to float
  %1179 = bitcast i32 %52 to float
  %1180 = fmul float %1178, %1179
  %1181 = fadd float %1180, 0.000000e+00
  %1182 = bitcast i32 %686 to float
  %1183 = bitcast i32 %686 to float
  %1184 = fmul float %1182, %1183
  %1185 = fadd float %1181, %1184
  %1186 = call float @llvm.sqrt.f32(float %1185)
  %1187 = fneg float %692
  %1188 = fmul float %1186, %1187
  %1189 = bitcast i32 %52 to float
  %1190 = fadd float %1189, %1188
  %1191 = bitcast i32 %52 to float
  %1192 = bitcast i32 %52 to float
  %1193 = fmul float %1191, %1192
  %1194 = fadd float %1193, 0.000000e+00
  %1195 = bitcast i32 %686 to float
  %1196 = bitcast i32 %686 to float
  %1197 = fmul float %1195, %1196
  %1198 = fadd float %1194, %1197
  %1199 = call float @llvm.sqrt.f32(float %1198)
  %1200 = fneg float %692
  %1201 = fmul float %1199, %1200
  %1202 = bitcast i32 %52 to float
  %1203 = fadd float %1202, %1201
  %1204 = fmul float %1190, %1203
  %1205 = fadd float %1204, 0.000000e+00
  %1206 = bitcast i32 %52 to float
  %1207 = bitcast i32 %52 to float
  %1208 = fmul float %1206, %1207
  %1209 = fadd float %1208, 0.000000e+00
  %1210 = bitcast i32 %686 to float
  %1211 = bitcast i32 %686 to float
  %1212 = fmul float %1210, %1211
  %1213 = fadd float %1209, %1212
  %1214 = call float @llvm.sqrt.f32(float %1213)
  %1215 = fneg float %692
  %1216 = fmul float %1214, %1215
  %1217 = fmul float %1216, 0.000000e+00
  %1218 = bitcast i32 %686 to float
  %1219 = fadd float %1218, %1217
  %1220 = bitcast i32 %52 to float
  %1221 = bitcast i32 %52 to float
  %1222 = fmul float %1220, %1221
  %1223 = fadd float %1222, 0.000000e+00
  %1224 = bitcast i32 %686 to float
  %1225 = bitcast i32 %686 to float
  %1226 = fmul float %1224, %1225
  %1227 = fadd float %1223, %1226
  %1228 = call float @llvm.sqrt.f32(float %1227)
  %1229 = fneg float %692
  %1230 = fmul float %1228, %1229
  %1231 = fmul float %1230, 0.000000e+00
  %1232 = bitcast i32 %686 to float
  %1233 = fadd float %1232, %1231
  %1234 = fmul float %1219, %1233
  %1235 = fadd float %1205, %1234
  %1236 = call float @llvm.sqrt.f32(float %1235)
  %1237 = fadd float %1236, 0.000000e+00
  %1238 = fdiv float %1177, %1237
  %1239 = fmul float %1238, 2.000000e+00
  %1240 = bitcast i32 %52 to float
  %1241 = bitcast i32 %52 to float
  %1242 = fmul float %1240, %1241
  %1243 = fadd float %1242, 0.000000e+00
  %1244 = bitcast i32 %686 to float
  %1245 = bitcast i32 %686 to float
  %1246 = fmul float %1244, %1245
  %1247 = fadd float %1243, %1246
  %1248 = call float @llvm.sqrt.f32(float %1247)
  %1249 = fneg float %692
  %1250 = fmul float %1248, %1249
  %1251 = bitcast i32 %52 to float
  %1252 = fadd float %1251, %1250
  %1253 = bitcast i32 %52 to float
  %1254 = bitcast i32 %52 to float
  %1255 = fmul float %1253, %1254
  %1256 = fadd float %1255, 0.000000e+00
  %1257 = bitcast i32 %686 to float
  %1258 = bitcast i32 %686 to float
  %1259 = fmul float %1257, %1258
  %1260 = fadd float %1256, %1259
  %1261 = call float @llvm.sqrt.f32(float %1260)
  %1262 = fneg float %692
  %1263 = fmul float %1261, %1262
  %1264 = bitcast i32 %52 to float
  %1265 = fadd float %1264, %1263
  %1266 = bitcast i32 %52 to float
  %1267 = bitcast i32 %52 to float
  %1268 = fmul float %1266, %1267
  %1269 = fadd float %1268, 0.000000e+00
  %1270 = bitcast i32 %686 to float
  %1271 = bitcast i32 %686 to float
  %1272 = fmul float %1270, %1271
  %1273 = fadd float %1269, %1272
  %1274 = call float @llvm.sqrt.f32(float %1273)
  %1275 = fneg float %692
  %1276 = fmul float %1274, %1275
  %1277 = bitcast i32 %52 to float
  %1278 = fadd float %1277, %1276
  %1279 = fmul float %1265, %1278
  %1280 = fadd float %1279, 0.000000e+00
  %1281 = bitcast i32 %52 to float
  %1282 = bitcast i32 %52 to float
  %1283 = fmul float %1281, %1282
  %1284 = fadd float %1283, 0.000000e+00
  %1285 = bitcast i32 %686 to float
  %1286 = bitcast i32 %686 to float
  %1287 = fmul float %1285, %1286
  %1288 = fadd float %1284, %1287
  %1289 = call float @llvm.sqrt.f32(float %1288)
  %1290 = fneg float %692
  %1291 = fmul float %1289, %1290
  %1292 = fmul float %1291, 0.000000e+00
  %1293 = bitcast i32 %686 to float
  %1294 = fadd float %1293, %1292
  %1295 = bitcast i32 %52 to float
  %1296 = bitcast i32 %52 to float
  %1297 = fmul float %1295, %1296
  %1298 = fadd float %1297, 0.000000e+00
  %1299 = bitcast i32 %686 to float
  %1300 = bitcast i32 %686 to float
  %1301 = fmul float %1299, %1300
  %1302 = fadd float %1298, %1301
  %1303 = call float @llvm.sqrt.f32(float %1302)
  %1304 = fneg float %692
  %1305 = fmul float %1303, %1304
  %1306 = fmul float %1305, 0.000000e+00
  %1307 = bitcast i32 %686 to float
  %1308 = fadd float %1307, %1306
  %1309 = fmul float %1294, %1308
  %1310 = fadd float %1280, %1309
  %1311 = call float @llvm.sqrt.f32(float %1310)
  %1312 = fadd float %1311, 0.000000e+00
  %1313 = fdiv float %1252, %1312
  %1314 = fmul float %1239, %1313
  %1315 = fsub float 1.000000e+00, %1314
  %1316 = insertelement <4 x float> zeroinitializer, float %1315, i32 0
  %1317 = insertelement <4 x float> %1316, float 0.000000e+00, i32 1
  %1318 = insertelement <4 x float> %1317, float 0.000000e+00, i32 2
  %1319 = insertelement <4 x float> %1318, float 0.000000e+00, i32 3
  %1320 = getelementptr float, float* %0, i32 0
  %1321 = getelementptr inbounds float, float* %1320, i64 1
  %1322 = load float, float* %1321, align 4
  %1323 = insertelement <4 x float> zeroinitializer, float %1322, i32 0
  %1324 = insertelement <4 x float> %1323, float 0.000000e+00, i32 1
  %1325 = insertelement <4 x float> %1324, float 0.000000e+00, i32 2
  %1326 = insertelement <4 x float> %1325, float 0.000000e+00, i32 3
  %1327 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1319, <4 x float> %1326, <4 x float> zeroinitializer)
  %1328 = extractelement <4 x float> %1327, i32 0
  store float %1328, float* %1164, align 4
  %1329 = bitcast i32 %52 to float
  %1330 = bitcast i32 %52 to float
  %1331 = fmul float %1329, %1330
  %1332 = fadd float %1331, 0.000000e+00
  %1333 = bitcast i32 %686 to float
  %1334 = bitcast i32 %686 to float
  %1335 = fmul float %1333, %1334
  %1336 = fadd float %1332, %1335
  %1337 = call float @llvm.sqrt.f32(float %1336)
  %1338 = fneg float %692
  %1339 = fmul float %1337, %1338
  %1340 = bitcast i32 %52 to float
  %1341 = fadd float %1340, %1339
  %1342 = bitcast i32 %52 to float
  %1343 = bitcast i32 %52 to float
  %1344 = fmul float %1342, %1343
  %1345 = fadd float %1344, 0.000000e+00
  %1346 = bitcast i32 %686 to float
  %1347 = bitcast i32 %686 to float
  %1348 = fmul float %1346, %1347
  %1349 = fadd float %1345, %1348
  %1350 = call float @llvm.sqrt.f32(float %1349)
  %1351 = fneg float %692
  %1352 = fmul float %1350, %1351
  %1353 = bitcast i32 %52 to float
  %1354 = fadd float %1353, %1352
  %1355 = bitcast i32 %52 to float
  %1356 = bitcast i32 %52 to float
  %1357 = fmul float %1355, %1356
  %1358 = fadd float %1357, 0.000000e+00
  %1359 = bitcast i32 %686 to float
  %1360 = bitcast i32 %686 to float
  %1361 = fmul float %1359, %1360
  %1362 = fadd float %1358, %1361
  %1363 = call float @llvm.sqrt.f32(float %1362)
  %1364 = fneg float %692
  %1365 = fmul float %1363, %1364
  %1366 = bitcast i32 %52 to float
  %1367 = fadd float %1366, %1365
  %1368 = fmul float %1354, %1367
  %1369 = fadd float %1368, 0.000000e+00
  %1370 = bitcast i32 %52 to float
  %1371 = bitcast i32 %52 to float
  %1372 = fmul float %1370, %1371
  %1373 = fadd float %1372, 0.000000e+00
  %1374 = bitcast i32 %686 to float
  %1375 = bitcast i32 %686 to float
  %1376 = fmul float %1374, %1375
  %1377 = fadd float %1373, %1376
  %1378 = call float @llvm.sqrt.f32(float %1377)
  %1379 = fneg float %692
  %1380 = fmul float %1378, %1379
  %1381 = fmul float %1380, 0.000000e+00
  %1382 = bitcast i32 %686 to float
  %1383 = fadd float %1382, %1381
  %1384 = bitcast i32 %52 to float
  %1385 = bitcast i32 %52 to float
  %1386 = fmul float %1384, %1385
  %1387 = fadd float %1386, 0.000000e+00
  %1388 = bitcast i32 %686 to float
  %1389 = bitcast i32 %686 to float
  %1390 = fmul float %1388, %1389
  %1391 = fadd float %1387, %1390
  %1392 = call float @llvm.sqrt.f32(float %1391)
  %1393 = fneg float %692
  %1394 = fmul float %1392, %1393
  %1395 = fmul float %1394, 0.000000e+00
  %1396 = bitcast i32 %686 to float
  %1397 = fadd float %1396, %1395
  %1398 = fmul float %1383, %1397
  %1399 = fadd float %1369, %1398
  %1400 = call float @llvm.sqrt.f32(float %1399)
  %1401 = fadd float %1400, 0.000000e+00
  %1402 = fdiv float %1341, %1401
  %1403 = fmul float %1402, 2.000000e+00
  %1404 = bitcast i32 %52 to float
  %1405 = bitcast i32 %52 to float
  %1406 = fmul float %1404, %1405
  %1407 = fadd float %1406, 0.000000e+00
  %1408 = bitcast i32 %686 to float
  %1409 = bitcast i32 %686 to float
  %1410 = fmul float %1408, %1409
  %1411 = fadd float %1407, %1410
  %1412 = call float @llvm.sqrt.f32(float %1411)
  %1413 = fneg float %692
  %1414 = fmul float %1412, %1413
  %1415 = bitcast i32 %52 to float
  %1416 = fadd float %1415, %1414
  %1417 = bitcast i32 %52 to float
  %1418 = bitcast i32 %52 to float
  %1419 = fmul float %1417, %1418
  %1420 = fadd float %1419, 0.000000e+00
  %1421 = bitcast i32 %686 to float
  %1422 = bitcast i32 %686 to float
  %1423 = fmul float %1421, %1422
  %1424 = fadd float %1420, %1423
  %1425 = call float @llvm.sqrt.f32(float %1424)
  %1426 = fneg float %692
  %1427 = fmul float %1425, %1426
  %1428 = bitcast i32 %52 to float
  %1429 = fadd float %1428, %1427
  %1430 = bitcast i32 %52 to float
  %1431 = bitcast i32 %52 to float
  %1432 = fmul float %1430, %1431
  %1433 = fadd float %1432, 0.000000e+00
  %1434 = bitcast i32 %686 to float
  %1435 = bitcast i32 %686 to float
  %1436 = fmul float %1434, %1435
  %1437 = fadd float %1433, %1436
  %1438 = call float @llvm.sqrt.f32(float %1437)
  %1439 = fneg float %692
  %1440 = fmul float %1438, %1439
  %1441 = bitcast i32 %52 to float
  %1442 = fadd float %1441, %1440
  %1443 = fmul float %1429, %1442
  %1444 = fadd float %1443, 0.000000e+00
  %1445 = bitcast i32 %52 to float
  %1446 = bitcast i32 %52 to float
  %1447 = fmul float %1445, %1446
  %1448 = fadd float %1447, 0.000000e+00
  %1449 = bitcast i32 %686 to float
  %1450 = bitcast i32 %686 to float
  %1451 = fmul float %1449, %1450
  %1452 = fadd float %1448, %1451
  %1453 = call float @llvm.sqrt.f32(float %1452)
  %1454 = fneg float %692
  %1455 = fmul float %1453, %1454
  %1456 = fmul float %1455, 0.000000e+00
  %1457 = bitcast i32 %686 to float
  %1458 = fadd float %1457, %1456
  %1459 = bitcast i32 %52 to float
  %1460 = bitcast i32 %52 to float
  %1461 = fmul float %1459, %1460
  %1462 = fadd float %1461, 0.000000e+00
  %1463 = bitcast i32 %686 to float
  %1464 = bitcast i32 %686 to float
  %1465 = fmul float %1463, %1464
  %1466 = fadd float %1462, %1465
  %1467 = call float @llvm.sqrt.f32(float %1466)
  %1468 = fneg float %692
  %1469 = fmul float %1467, %1468
  %1470 = fmul float %1469, 0.000000e+00
  %1471 = bitcast i32 %686 to float
  %1472 = fadd float %1471, %1470
  %1473 = fmul float %1458, %1472
  %1474 = fadd float %1444, %1473
  %1475 = call float @llvm.sqrt.f32(float %1474)
  %1476 = fadd float %1475, 0.000000e+00
  %1477 = fdiv float %1416, %1476
  %1478 = fmul float %1403, %1477
  %1479 = fsub float 1.000000e+00, %1478
  %1480 = fmul float %1479, %1322
  %1481 = fadd float %1480, 0.000000e+00
  %1482 = bitcast i32 %52 to float
  %1483 = bitcast i32 %52 to float
  %1484 = fmul float %1482, %1483
  %1485 = fadd float %1484, 0.000000e+00
  %1486 = bitcast i32 %686 to float
  %1487 = bitcast i32 %686 to float
  %1488 = fmul float %1486, %1487
  %1489 = fadd float %1485, %1488
  %1490 = call float @llvm.sqrt.f32(float %1489)
  %1491 = fneg float %692
  %1492 = fmul float %1490, %1491
  %1493 = bitcast i32 %52 to float
  %1494 = fadd float %1493, %1492
  %1495 = bitcast i32 %52 to float
  %1496 = bitcast i32 %52 to float
  %1497 = fmul float %1495, %1496
  %1498 = fadd float %1497, 0.000000e+00
  %1499 = bitcast i32 %686 to float
  %1500 = bitcast i32 %686 to float
  %1501 = fmul float %1499, %1500
  %1502 = fadd float %1498, %1501
  %1503 = call float @llvm.sqrt.f32(float %1502)
  %1504 = fneg float %692
  %1505 = fmul float %1503, %1504
  %1506 = bitcast i32 %52 to float
  %1507 = fadd float %1506, %1505
  %1508 = bitcast i32 %52 to float
  %1509 = bitcast i32 %52 to float
  %1510 = fmul float %1508, %1509
  %1511 = fadd float %1510, 0.000000e+00
  %1512 = bitcast i32 %686 to float
  %1513 = bitcast i32 %686 to float
  %1514 = fmul float %1512, %1513
  %1515 = fadd float %1511, %1514
  %1516 = call float @llvm.sqrt.f32(float %1515)
  %1517 = fneg float %692
  %1518 = fmul float %1516, %1517
  %1519 = bitcast i32 %52 to float
  %1520 = fadd float %1519, %1518
  %1521 = fmul float %1507, %1520
  %1522 = fadd float %1521, 0.000000e+00
  %1523 = bitcast i32 %52 to float
  %1524 = bitcast i32 %52 to float
  %1525 = fmul float %1523, %1524
  %1526 = fadd float %1525, 0.000000e+00
  %1527 = bitcast i32 %686 to float
  %1528 = bitcast i32 %686 to float
  %1529 = fmul float %1527, %1528
  %1530 = fadd float %1526, %1529
  %1531 = call float @llvm.sqrt.f32(float %1530)
  %1532 = fneg float %692
  %1533 = fmul float %1531, %1532
  %1534 = fmul float %1533, 0.000000e+00
  %1535 = bitcast i32 %686 to float
  %1536 = fadd float %1535, %1534
  %1537 = bitcast i32 %52 to float
  %1538 = bitcast i32 %52 to float
  %1539 = fmul float %1537, %1538
  %1540 = fadd float %1539, 0.000000e+00
  %1541 = bitcast i32 %686 to float
  %1542 = bitcast i32 %686 to float
  %1543 = fmul float %1541, %1542
  %1544 = fadd float %1540, %1543
  %1545 = call float @llvm.sqrt.f32(float %1544)
  %1546 = fneg float %692
  %1547 = fmul float %1545, %1546
  %1548 = fmul float %1547, 0.000000e+00
  %1549 = bitcast i32 %686 to float
  %1550 = fadd float %1549, %1548
  %1551 = fmul float %1536, %1550
  %1552 = fadd float %1522, %1551
  %1553 = call float @llvm.sqrt.f32(float %1552)
  %1554 = fadd float %1553, 0.000000e+00
  %1555 = fdiv float %1494, %1554
  %1556 = fmul float %1555, 2.000000e+00
  %1557 = bitcast i32 %52 to float
  %1558 = bitcast i32 %52 to float
  %1559 = fmul float %1557, %1558
  %1560 = fadd float %1559, 0.000000e+00
  %1561 = bitcast i32 %686 to float
  %1562 = bitcast i32 %686 to float
  %1563 = fmul float %1561, %1562
  %1564 = fadd float %1560, %1563
  %1565 = call float @llvm.sqrt.f32(float %1564)
  %1566 = fneg float %692
  %1567 = fmul float %1565, %1566
  %1568 = fmul float %1567, 0.000000e+00
  %1569 = bitcast i32 %686 to float
  %1570 = fadd float %1569, %1568
  %1571 = bitcast i32 %52 to float
  %1572 = bitcast i32 %52 to float
  %1573 = fmul float %1571, %1572
  %1574 = fadd float %1573, 0.000000e+00
  %1575 = bitcast i32 %686 to float
  %1576 = bitcast i32 %686 to float
  %1577 = fmul float %1575, %1576
  %1578 = fadd float %1574, %1577
  %1579 = call float @llvm.sqrt.f32(float %1578)
  %1580 = fneg float %692
  %1581 = fmul float %1579, %1580
  %1582 = bitcast i32 %52 to float
  %1583 = fadd float %1582, %1581
  %1584 = bitcast i32 %52 to float
  %1585 = bitcast i32 %52 to float
  %1586 = fmul float %1584, %1585
  %1587 = fadd float %1586, 0.000000e+00
  %1588 = bitcast i32 %686 to float
  %1589 = bitcast i32 %686 to float
  %1590 = fmul float %1588, %1589
  %1591 = fadd float %1587, %1590
  %1592 = call float @llvm.sqrt.f32(float %1591)
  %1593 = fneg float %692
  %1594 = fmul float %1592, %1593
  %1595 = bitcast i32 %52 to float
  %1596 = fadd float %1595, %1594
  %1597 = fmul float %1583, %1596
  %1598 = fadd float %1597, 0.000000e+00
  %1599 = bitcast i32 %52 to float
  %1600 = bitcast i32 %52 to float
  %1601 = fmul float %1599, %1600
  %1602 = fadd float %1601, 0.000000e+00
  %1603 = bitcast i32 %686 to float
  %1604 = bitcast i32 %686 to float
  %1605 = fmul float %1603, %1604
  %1606 = fadd float %1602, %1605
  %1607 = call float @llvm.sqrt.f32(float %1606)
  %1608 = fneg float %692
  %1609 = fmul float %1607, %1608
  %1610 = fmul float %1609, 0.000000e+00
  %1611 = bitcast i32 %686 to float
  %1612 = fadd float %1611, %1610
  %1613 = bitcast i32 %52 to float
  %1614 = bitcast i32 %52 to float
  %1615 = fmul float %1613, %1614
  %1616 = fadd float %1615, 0.000000e+00
  %1617 = bitcast i32 %686 to float
  %1618 = bitcast i32 %686 to float
  %1619 = fmul float %1617, %1618
  %1620 = fadd float %1616, %1619
  %1621 = call float @llvm.sqrt.f32(float %1620)
  %1622 = fneg float %692
  %1623 = fmul float %1621, %1622
  %1624 = fmul float %1623, 0.000000e+00
  %1625 = bitcast i32 %686 to float
  %1626 = fadd float %1625, %1624
  %1627 = fmul float %1612, %1626
  %1628 = fadd float %1598, %1627
  %1629 = call float @llvm.sqrt.f32(float %1628)
  %1630 = fadd float %1629, 0.000000e+00
  %1631 = fdiv float %1570, %1630
  %1632 = fmul float %1556, %1631
  %1633 = fneg float %1632
  %1634 = load float, float* %44, align 4
  %1635 = fmul float %1633, %1634
  %1636 = fadd float %1481, %1635
  %1637 = insertelement <4 x float> zeroinitializer, float %1636, i32 0
  %1638 = insertelement <4 x float> %1637, float 0.000000e+00, i32 1
  %1639 = insertelement <4 x float> %1638, float 0.000000e+00, i32 2
  %1640 = insertelement <4 x float> %1639, float 0.000000e+00, i32 3
  %1641 = extractelement <4 x float> %1640, i32 0
  store float %1641, float* %1164, align 4
  %1642 = extractelement <4 x float> %1640, i32 1
  %1643 = getelementptr float, float* %2, i32 0
  %1644 = getelementptr inbounds float, float* %1643, i64 2
  store float %1642, float* %1644, align 4
  %1645 = bitcast i32 %52 to float
  %1646 = bitcast i32 %52 to float
  %1647 = fmul float %1645, %1646
  %1648 = fadd float %1647, 0.000000e+00
  %1649 = bitcast i32 %686 to float
  %1650 = bitcast i32 %686 to float
  %1651 = fmul float %1649, %1650
  %1652 = fadd float %1648, %1651
  %1653 = call float @llvm.sqrt.f32(float %1652)
  %1654 = fneg float %692
  %1655 = fmul float %1653, %1654
  %1656 = fmul float %1655, 0.000000e+00
  %1657 = bitcast i32 %686 to float
  %1658 = fadd float %1657, %1656
  %1659 = bitcast i32 %52 to float
  %1660 = bitcast i32 %52 to float
  %1661 = fmul float %1659, %1660
  %1662 = fadd float %1661, 0.000000e+00
  %1663 = bitcast i32 %686 to float
  %1664 = bitcast i32 %686 to float
  %1665 = fmul float %1663, %1664
  %1666 = fadd float %1662, %1665
  %1667 = call float @llvm.sqrt.f32(float %1666)
  %1668 = fneg float %692
  %1669 = fmul float %1667, %1668
  %1670 = bitcast i32 %52 to float
  %1671 = fadd float %1670, %1669
  %1672 = bitcast i32 %52 to float
  %1673 = bitcast i32 %52 to float
  %1674 = fmul float %1672, %1673
  %1675 = fadd float %1674, 0.000000e+00
  %1676 = bitcast i32 %686 to float
  %1677 = bitcast i32 %686 to float
  %1678 = fmul float %1676, %1677
  %1679 = fadd float %1675, %1678
  %1680 = call float @llvm.sqrt.f32(float %1679)
  %1681 = fneg float %692
  %1682 = fmul float %1680, %1681
  %1683 = bitcast i32 %52 to float
  %1684 = fadd float %1683, %1682
  %1685 = fmul float %1671, %1684
  %1686 = fadd float %1685, 0.000000e+00
  %1687 = bitcast i32 %52 to float
  %1688 = bitcast i32 %52 to float
  %1689 = fmul float %1687, %1688
  %1690 = fadd float %1689, 0.000000e+00
  %1691 = bitcast i32 %686 to float
  %1692 = bitcast i32 %686 to float
  %1693 = fmul float %1691, %1692
  %1694 = fadd float %1690, %1693
  %1695 = call float @llvm.sqrt.f32(float %1694)
  %1696 = fneg float %692
  %1697 = fmul float %1695, %1696
  %1698 = fmul float %1697, 0.000000e+00
  %1699 = bitcast i32 %686 to float
  %1700 = fadd float %1699, %1698
  %1701 = bitcast i32 %52 to float
  %1702 = bitcast i32 %52 to float
  %1703 = fmul float %1701, %1702
  %1704 = fadd float %1703, 0.000000e+00
  %1705 = bitcast i32 %686 to float
  %1706 = bitcast i32 %686 to float
  %1707 = fmul float %1705, %1706
  %1708 = fadd float %1704, %1707
  %1709 = call float @llvm.sqrt.f32(float %1708)
  %1710 = fneg float %692
  %1711 = fmul float %1709, %1710
  %1712 = fmul float %1711, 0.000000e+00
  %1713 = bitcast i32 %686 to float
  %1714 = fadd float %1713, %1712
  %1715 = fmul float %1700, %1714
  %1716 = fadd float %1686, %1715
  %1717 = call float @llvm.sqrt.f32(float %1716)
  %1718 = fadd float %1717, 0.000000e+00
  %1719 = fdiv float %1658, %1718
  %1720 = fmul float %1719, 2.000000e+00
  %1721 = bitcast i32 %52 to float
  %1722 = bitcast i32 %52 to float
  %1723 = fmul float %1721, %1722
  %1724 = fadd float %1723, 0.000000e+00
  %1725 = bitcast i32 %686 to float
  %1726 = bitcast i32 %686 to float
  %1727 = fmul float %1725, %1726
  %1728 = fadd float %1724, %1727
  %1729 = call float @llvm.sqrt.f32(float %1728)
  %1730 = fneg float %692
  %1731 = fmul float %1729, %1730
  %1732 = bitcast i32 %52 to float
  %1733 = fadd float %1732, %1731
  %1734 = bitcast i32 %52 to float
  %1735 = bitcast i32 %52 to float
  %1736 = fmul float %1734, %1735
  %1737 = fadd float %1736, 0.000000e+00
  %1738 = bitcast i32 %686 to float
  %1739 = bitcast i32 %686 to float
  %1740 = fmul float %1738, %1739
  %1741 = fadd float %1737, %1740
  %1742 = call float @llvm.sqrt.f32(float %1741)
  %1743 = fneg float %692
  %1744 = fmul float %1742, %1743
  %1745 = bitcast i32 %52 to float
  %1746 = fadd float %1745, %1744
  %1747 = bitcast i32 %52 to float
  %1748 = bitcast i32 %52 to float
  %1749 = fmul float %1747, %1748
  %1750 = fadd float %1749, 0.000000e+00
  %1751 = bitcast i32 %686 to float
  %1752 = bitcast i32 %686 to float
  %1753 = fmul float %1751, %1752
  %1754 = fadd float %1750, %1753
  %1755 = call float @llvm.sqrt.f32(float %1754)
  %1756 = fneg float %692
  %1757 = fmul float %1755, %1756
  %1758 = bitcast i32 %52 to float
  %1759 = fadd float %1758, %1757
  %1760 = fmul float %1746, %1759
  %1761 = fadd float %1760, 0.000000e+00
  %1762 = bitcast i32 %52 to float
  %1763 = bitcast i32 %52 to float
  %1764 = fmul float %1762, %1763
  %1765 = fadd float %1764, 0.000000e+00
  %1766 = bitcast i32 %686 to float
  %1767 = bitcast i32 %686 to float
  %1768 = fmul float %1766, %1767
  %1769 = fadd float %1765, %1768
  %1770 = call float @llvm.sqrt.f32(float %1769)
  %1771 = fneg float %692
  %1772 = fmul float %1770, %1771
  %1773 = fmul float %1772, 0.000000e+00
  %1774 = bitcast i32 %686 to float
  %1775 = fadd float %1774, %1773
  %1776 = bitcast i32 %52 to float
  %1777 = bitcast i32 %52 to float
  %1778 = fmul float %1776, %1777
  %1779 = fadd float %1778, 0.000000e+00
  %1780 = bitcast i32 %686 to float
  %1781 = bitcast i32 %686 to float
  %1782 = fmul float %1780, %1781
  %1783 = fadd float %1779, %1782
  %1784 = call float @llvm.sqrt.f32(float %1783)
  %1785 = fneg float %692
  %1786 = fmul float %1784, %1785
  %1787 = fmul float %1786, 0.000000e+00
  %1788 = bitcast i32 %686 to float
  %1789 = fadd float %1788, %1787
  %1790 = fmul float %1775, %1789
  %1791 = fadd float %1761, %1790
  %1792 = call float @llvm.sqrt.f32(float %1791)
  %1793 = fadd float %1792, 0.000000e+00
  %1794 = fdiv float %1733, %1793
  %1795 = fmul float %1720, %1794
  %1796 = fneg float %1795
  %1797 = insertelement <4 x float> zeroinitializer, float %1796, i32 0
  %1798 = insertelement <4 x float> %1797, float 0.000000e+00, i32 1
  %1799 = insertelement <4 x float> %1798, float 0.000000e+00, i32 2
  %1800 = insertelement <4 x float> %1799, float 0.000000e+00, i32 3
  %1801 = getelementptr float, float* %0, i32 0
  %1802 = load float, float* %1801, align 4
  %1803 = insertelement <4 x float> zeroinitializer, float %1802, i32 0
  %1804 = insertelement <4 x float> %1803, float 0.000000e+00, i32 1
  %1805 = insertelement <4 x float> %1804, float 0.000000e+00, i32 2
  %1806 = insertelement <4 x float> %1805, float 0.000000e+00, i32 3
  %1807 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1800, <4 x float> %1806, <4 x float> zeroinitializer)
  %1808 = extractelement <4 x float> %1807, i32 0
  store float %1808, float* %1644, align 4
  %1809 = bitcast i32 %52 to float
  %1810 = bitcast i32 %52 to float
  %1811 = fmul float %1809, %1810
  %1812 = fadd float %1811, 0.000000e+00
  %1813 = bitcast i32 %686 to float
  %1814 = bitcast i32 %686 to float
  %1815 = fmul float %1813, %1814
  %1816 = fadd float %1812, %1815
  %1817 = call float @llvm.sqrt.f32(float %1816)
  %1818 = fneg float %692
  %1819 = fmul float %1817, %1818
  %1820 = fmul float %1819, 0.000000e+00
  %1821 = bitcast i32 %686 to float
  %1822 = fadd float %1821, %1820
  %1823 = bitcast i32 %52 to float
  %1824 = bitcast i32 %52 to float
  %1825 = fmul float %1823, %1824
  %1826 = fadd float %1825, 0.000000e+00
  %1827 = bitcast i32 %686 to float
  %1828 = bitcast i32 %686 to float
  %1829 = fmul float %1827, %1828
  %1830 = fadd float %1826, %1829
  %1831 = call float @llvm.sqrt.f32(float %1830)
  %1832 = fneg float %692
  %1833 = fmul float %1831, %1832
  %1834 = bitcast i32 %52 to float
  %1835 = fadd float %1834, %1833
  %1836 = bitcast i32 %52 to float
  %1837 = bitcast i32 %52 to float
  %1838 = fmul float %1836, %1837
  %1839 = fadd float %1838, 0.000000e+00
  %1840 = bitcast i32 %686 to float
  %1841 = bitcast i32 %686 to float
  %1842 = fmul float %1840, %1841
  %1843 = fadd float %1839, %1842
  %1844 = call float @llvm.sqrt.f32(float %1843)
  %1845 = fneg float %692
  %1846 = fmul float %1844, %1845
  %1847 = bitcast i32 %52 to float
  %1848 = fadd float %1847, %1846
  %1849 = fmul float %1835, %1848
  %1850 = fadd float %1849, 0.000000e+00
  %1851 = bitcast i32 %52 to float
  %1852 = bitcast i32 %52 to float
  %1853 = fmul float %1851, %1852
  %1854 = fadd float %1853, 0.000000e+00
  %1855 = bitcast i32 %686 to float
  %1856 = bitcast i32 %686 to float
  %1857 = fmul float %1855, %1856
  %1858 = fadd float %1854, %1857
  %1859 = call float @llvm.sqrt.f32(float %1858)
  %1860 = fneg float %692
  %1861 = fmul float %1859, %1860
  %1862 = fmul float %1861, 0.000000e+00
  %1863 = bitcast i32 %686 to float
  %1864 = fadd float %1863, %1862
  %1865 = bitcast i32 %52 to float
  %1866 = bitcast i32 %52 to float
  %1867 = fmul float %1865, %1866
  %1868 = fadd float %1867, 0.000000e+00
  %1869 = bitcast i32 %686 to float
  %1870 = bitcast i32 %686 to float
  %1871 = fmul float %1869, %1870
  %1872 = fadd float %1868, %1871
  %1873 = call float @llvm.sqrt.f32(float %1872)
  %1874 = fneg float %692
  %1875 = fmul float %1873, %1874
  %1876 = fmul float %1875, 0.000000e+00
  %1877 = bitcast i32 %686 to float
  %1878 = fadd float %1877, %1876
  %1879 = fmul float %1864, %1878
  %1880 = fadd float %1850, %1879
  %1881 = call float @llvm.sqrt.f32(float %1880)
  %1882 = fadd float %1881, 0.000000e+00
  %1883 = fdiv float %1822, %1882
  %1884 = fmul float %1883, 2.000000e+00
  %1885 = bitcast i32 %52 to float
  %1886 = bitcast i32 %52 to float
  %1887 = fmul float %1885, %1886
  %1888 = fadd float %1887, 0.000000e+00
  %1889 = bitcast i32 %686 to float
  %1890 = bitcast i32 %686 to float
  %1891 = fmul float %1889, %1890
  %1892 = fadd float %1888, %1891
  %1893 = call float @llvm.sqrt.f32(float %1892)
  %1894 = fneg float %692
  %1895 = fmul float %1893, %1894
  %1896 = bitcast i32 %52 to float
  %1897 = fadd float %1896, %1895
  %1898 = bitcast i32 %52 to float
  %1899 = bitcast i32 %52 to float
  %1900 = fmul float %1898, %1899
  %1901 = fadd float %1900, 0.000000e+00
  %1902 = bitcast i32 %686 to float
  %1903 = bitcast i32 %686 to float
  %1904 = fmul float %1902, %1903
  %1905 = fadd float %1901, %1904
  %1906 = call float @llvm.sqrt.f32(float %1905)
  %1907 = fneg float %692
  %1908 = fmul float %1906, %1907
  %1909 = bitcast i32 %52 to float
  %1910 = fadd float %1909, %1908
  %1911 = bitcast i32 %52 to float
  %1912 = bitcast i32 %52 to float
  %1913 = fmul float %1911, %1912
  %1914 = fadd float %1913, 0.000000e+00
  %1915 = bitcast i32 %686 to float
  %1916 = bitcast i32 %686 to float
  %1917 = fmul float %1915, %1916
  %1918 = fadd float %1914, %1917
  %1919 = call float @llvm.sqrt.f32(float %1918)
  %1920 = fneg float %692
  %1921 = fmul float %1919, %1920
  %1922 = bitcast i32 %52 to float
  %1923 = fadd float %1922, %1921
  %1924 = fmul float %1910, %1923
  %1925 = fadd float %1924, 0.000000e+00
  %1926 = bitcast i32 %52 to float
  %1927 = bitcast i32 %52 to float
  %1928 = fmul float %1926, %1927
  %1929 = fadd float %1928, 0.000000e+00
  %1930 = bitcast i32 %686 to float
  %1931 = bitcast i32 %686 to float
  %1932 = fmul float %1930, %1931
  %1933 = fadd float %1929, %1932
  %1934 = call float @llvm.sqrt.f32(float %1933)
  %1935 = fneg float %692
  %1936 = fmul float %1934, %1935
  %1937 = fmul float %1936, 0.000000e+00
  %1938 = bitcast i32 %686 to float
  %1939 = fadd float %1938, %1937
  %1940 = bitcast i32 %52 to float
  %1941 = bitcast i32 %52 to float
  %1942 = fmul float %1940, %1941
  %1943 = fadd float %1942, 0.000000e+00
  %1944 = bitcast i32 %686 to float
  %1945 = bitcast i32 %686 to float
  %1946 = fmul float %1944, %1945
  %1947 = fadd float %1943, %1946
  %1948 = call float @llvm.sqrt.f32(float %1947)
  %1949 = fneg float %692
  %1950 = fmul float %1948, %1949
  %1951 = fmul float %1950, 0.000000e+00
  %1952 = bitcast i32 %686 to float
  %1953 = fadd float %1952, %1951
  %1954 = fmul float %1939, %1953
  %1955 = fadd float %1925, %1954
  %1956 = call float @llvm.sqrt.f32(float %1955)
  %1957 = fadd float %1956, 0.000000e+00
  %1958 = fdiv float %1897, %1957
  %1959 = fmul float %1884, %1958
  %1960 = fneg float %1959
  %1961 = fmul float %1960, %1802
  %1962 = fadd float %1961, 0.000000e+00
  %1963 = bitcast i32 %52 to float
  %1964 = bitcast i32 %52 to float
  %1965 = fmul float %1963, %1964
  %1966 = fadd float %1965, 0.000000e+00
  %1967 = bitcast i32 %686 to float
  %1968 = bitcast i32 %686 to float
  %1969 = fmul float %1967, %1968
  %1970 = fadd float %1966, %1969
  %1971 = call float @llvm.sqrt.f32(float %1970)
  %1972 = fneg float %692
  %1973 = fmul float %1971, %1972
  %1974 = fmul float %1973, 0.000000e+00
  %1975 = bitcast i32 %686 to float
  %1976 = fadd float %1975, %1974
  %1977 = bitcast i32 %52 to float
  %1978 = bitcast i32 %52 to float
  %1979 = fmul float %1977, %1978
  %1980 = fadd float %1979, 0.000000e+00
  %1981 = bitcast i32 %686 to float
  %1982 = bitcast i32 %686 to float
  %1983 = fmul float %1981, %1982
  %1984 = fadd float %1980, %1983
  %1985 = call float @llvm.sqrt.f32(float %1984)
  %1986 = fneg float %692
  %1987 = fmul float %1985, %1986
  %1988 = bitcast i32 %52 to float
  %1989 = fadd float %1988, %1987
  %1990 = bitcast i32 %52 to float
  %1991 = bitcast i32 %52 to float
  %1992 = fmul float %1990, %1991
  %1993 = fadd float %1992, 0.000000e+00
  %1994 = bitcast i32 %686 to float
  %1995 = bitcast i32 %686 to float
  %1996 = fmul float %1994, %1995
  %1997 = fadd float %1993, %1996
  %1998 = call float @llvm.sqrt.f32(float %1997)
  %1999 = fneg float %692
  %2000 = fmul float %1998, %1999
  %2001 = bitcast i32 %52 to float
  %2002 = fadd float %2001, %2000
  %2003 = fmul float %1989, %2002
  %2004 = fadd float %2003, 0.000000e+00
  %2005 = bitcast i32 %52 to float
  %2006 = bitcast i32 %52 to float
  %2007 = fmul float %2005, %2006
  %2008 = fadd float %2007, 0.000000e+00
  %2009 = bitcast i32 %686 to float
  %2010 = bitcast i32 %686 to float
  %2011 = fmul float %2009, %2010
  %2012 = fadd float %2008, %2011
  %2013 = call float @llvm.sqrt.f32(float %2012)
  %2014 = fneg float %692
  %2015 = fmul float %2013, %2014
  %2016 = fmul float %2015, 0.000000e+00
  %2017 = bitcast i32 %686 to float
  %2018 = fadd float %2017, %2016
  %2019 = bitcast i32 %52 to float
  %2020 = bitcast i32 %52 to float
  %2021 = fmul float %2019, %2020
  %2022 = fadd float %2021, 0.000000e+00
  %2023 = bitcast i32 %686 to float
  %2024 = bitcast i32 %686 to float
  %2025 = fmul float %2023, %2024
  %2026 = fadd float %2022, %2025
  %2027 = call float @llvm.sqrt.f32(float %2026)
  %2028 = fneg float %692
  %2029 = fmul float %2027, %2028
  %2030 = fmul float %2029, 0.000000e+00
  %2031 = bitcast i32 %686 to float
  %2032 = fadd float %2031, %2030
  %2033 = fmul float %2018, %2032
  %2034 = fadd float %2004, %2033
  %2035 = call float @llvm.sqrt.f32(float %2034)
  %2036 = fadd float %2035, 0.000000e+00
  %2037 = fdiv float %1976, %2036
  %2038 = fmul float %2037, 2.000000e+00
  %2039 = bitcast i32 %52 to float
  %2040 = bitcast i32 %52 to float
  %2041 = fmul float %2039, %2040
  %2042 = fadd float %2041, 0.000000e+00
  %2043 = bitcast i32 %686 to float
  %2044 = bitcast i32 %686 to float
  %2045 = fmul float %2043, %2044
  %2046 = fadd float %2042, %2045
  %2047 = call float @llvm.sqrt.f32(float %2046)
  %2048 = fneg float %692
  %2049 = fmul float %2047, %2048
  %2050 = fmul float %2049, 0.000000e+00
  %2051 = bitcast i32 %686 to float
  %2052 = fadd float %2051, %2050
  %2053 = bitcast i32 %52 to float
  %2054 = bitcast i32 %52 to float
  %2055 = fmul float %2053, %2054
  %2056 = fadd float %2055, 0.000000e+00
  %2057 = bitcast i32 %686 to float
  %2058 = bitcast i32 %686 to float
  %2059 = fmul float %2057, %2058
  %2060 = fadd float %2056, %2059
  %2061 = call float @llvm.sqrt.f32(float %2060)
  %2062 = fneg float %692
  %2063 = fmul float %2061, %2062
  %2064 = bitcast i32 %52 to float
  %2065 = fadd float %2064, %2063
  %2066 = bitcast i32 %52 to float
  %2067 = bitcast i32 %52 to float
  %2068 = fmul float %2066, %2067
  %2069 = fadd float %2068, 0.000000e+00
  %2070 = bitcast i32 %686 to float
  %2071 = bitcast i32 %686 to float
  %2072 = fmul float %2070, %2071
  %2073 = fadd float %2069, %2072
  %2074 = call float @llvm.sqrt.f32(float %2073)
  %2075 = fneg float %692
  %2076 = fmul float %2074, %2075
  %2077 = bitcast i32 %52 to float
  %2078 = fadd float %2077, %2076
  %2079 = fmul float %2065, %2078
  %2080 = fadd float %2079, 0.000000e+00
  %2081 = bitcast i32 %52 to float
  %2082 = bitcast i32 %52 to float
  %2083 = fmul float %2081, %2082
  %2084 = fadd float %2083, 0.000000e+00
  %2085 = bitcast i32 %686 to float
  %2086 = bitcast i32 %686 to float
  %2087 = fmul float %2085, %2086
  %2088 = fadd float %2084, %2087
  %2089 = call float @llvm.sqrt.f32(float %2088)
  %2090 = fneg float %692
  %2091 = fmul float %2089, %2090
  %2092 = fmul float %2091, 0.000000e+00
  %2093 = bitcast i32 %686 to float
  %2094 = fadd float %2093, %2092
  %2095 = bitcast i32 %52 to float
  %2096 = bitcast i32 %52 to float
  %2097 = fmul float %2095, %2096
  %2098 = fadd float %2097, 0.000000e+00
  %2099 = bitcast i32 %686 to float
  %2100 = bitcast i32 %686 to float
  %2101 = fmul float %2099, %2100
  %2102 = fadd float %2098, %2101
  %2103 = call float @llvm.sqrt.f32(float %2102)
  %2104 = fneg float %692
  %2105 = fmul float %2103, %2104
  %2106 = fmul float %2105, 0.000000e+00
  %2107 = bitcast i32 %686 to float
  %2108 = fadd float %2107, %2106
  %2109 = fmul float %2094, %2108
  %2110 = fadd float %2080, %2109
  %2111 = call float @llvm.sqrt.f32(float %2110)
  %2112 = fadd float %2111, 0.000000e+00
  %2113 = fdiv float %2052, %2112
  %2114 = fmul float %2038, %2113
  %2115 = fsub float 1.000000e+00, %2114
  %2116 = load float, float* %1153, align 4
  %2117 = fmul float %2115, %2116
  %2118 = fadd float %1962, %2117
  %2119 = insertelement <4 x float> zeroinitializer, float %2118, i32 0
  %2120 = insertelement <4 x float> %2119, float 0.000000e+00, i32 1
  %2121 = insertelement <4 x float> %2120, float 0.000000e+00, i32 2
  %2122 = insertelement <4 x float> %2121, float 0.000000e+00, i32 3
  %2123 = extractelement <4 x float> %2122, i32 0
  store float %2123, float* %1644, align 4
  %2124 = extractelement <4 x float> %2122, i32 1
  %2125 = getelementptr float, float* %2, i32 0
  %2126 = getelementptr inbounds float, float* %2125, i64 3
  store float %2124, float* %2126, align 4
  %2127 = bitcast i32 %52 to float
  %2128 = bitcast i32 %52 to float
  %2129 = fmul float %2127, %2128
  %2130 = fadd float %2129, 0.000000e+00
  %2131 = bitcast i32 %686 to float
  %2132 = bitcast i32 %686 to float
  %2133 = fmul float %2131, %2132
  %2134 = fadd float %2130, %2133
  %2135 = call float @llvm.sqrt.f32(float %2134)
  %2136 = fneg float %692
  %2137 = fmul float %2135, %2136
  %2138 = fmul float %2137, 0.000000e+00
  %2139 = bitcast i32 %686 to float
  %2140 = fadd float %2139, %2138
  %2141 = bitcast i32 %52 to float
  %2142 = bitcast i32 %52 to float
  %2143 = fmul float %2141, %2142
  %2144 = fadd float %2143, 0.000000e+00
  %2145 = bitcast i32 %686 to float
  %2146 = bitcast i32 %686 to float
  %2147 = fmul float %2145, %2146
  %2148 = fadd float %2144, %2147
  %2149 = call float @llvm.sqrt.f32(float %2148)
  %2150 = fneg float %692
  %2151 = fmul float %2149, %2150
  %2152 = bitcast i32 %52 to float
  %2153 = fadd float %2152, %2151
  %2154 = bitcast i32 %52 to float
  %2155 = bitcast i32 %52 to float
  %2156 = fmul float %2154, %2155
  %2157 = fadd float %2156, 0.000000e+00
  %2158 = bitcast i32 %686 to float
  %2159 = bitcast i32 %686 to float
  %2160 = fmul float %2158, %2159
  %2161 = fadd float %2157, %2160
  %2162 = call float @llvm.sqrt.f32(float %2161)
  %2163 = fneg float %692
  %2164 = fmul float %2162, %2163
  %2165 = bitcast i32 %52 to float
  %2166 = fadd float %2165, %2164
  %2167 = fmul float %2153, %2166
  %2168 = fadd float %2167, 0.000000e+00
  %2169 = bitcast i32 %52 to float
  %2170 = bitcast i32 %52 to float
  %2171 = fmul float %2169, %2170
  %2172 = fadd float %2171, 0.000000e+00
  %2173 = bitcast i32 %686 to float
  %2174 = bitcast i32 %686 to float
  %2175 = fmul float %2173, %2174
  %2176 = fadd float %2172, %2175
  %2177 = call float @llvm.sqrt.f32(float %2176)
  %2178 = fneg float %692
  %2179 = fmul float %2177, %2178
  %2180 = fmul float %2179, 0.000000e+00
  %2181 = bitcast i32 %686 to float
  %2182 = fadd float %2181, %2180
  %2183 = bitcast i32 %52 to float
  %2184 = bitcast i32 %52 to float
  %2185 = fmul float %2183, %2184
  %2186 = fadd float %2185, 0.000000e+00
  %2187 = bitcast i32 %686 to float
  %2188 = bitcast i32 %686 to float
  %2189 = fmul float %2187, %2188
  %2190 = fadd float %2186, %2189
  %2191 = call float @llvm.sqrt.f32(float %2190)
  %2192 = fneg float %692
  %2193 = fmul float %2191, %2192
  %2194 = fmul float %2193, 0.000000e+00
  %2195 = bitcast i32 %686 to float
  %2196 = fadd float %2195, %2194
  %2197 = fmul float %2182, %2196
  %2198 = fadd float %2168, %2197
  %2199 = call float @llvm.sqrt.f32(float %2198)
  %2200 = fadd float %2199, 0.000000e+00
  %2201 = fdiv float %2140, %2200
  %2202 = fmul float %2201, 2.000000e+00
  %2203 = bitcast i32 %52 to float
  %2204 = bitcast i32 %52 to float
  %2205 = fmul float %2203, %2204
  %2206 = fadd float %2205, 0.000000e+00
  %2207 = bitcast i32 %686 to float
  %2208 = bitcast i32 %686 to float
  %2209 = fmul float %2207, %2208
  %2210 = fadd float %2206, %2209
  %2211 = call float @llvm.sqrt.f32(float %2210)
  %2212 = fneg float %692
  %2213 = fmul float %2211, %2212
  %2214 = bitcast i32 %52 to float
  %2215 = fadd float %2214, %2213
  %2216 = bitcast i32 %52 to float
  %2217 = bitcast i32 %52 to float
  %2218 = fmul float %2216, %2217
  %2219 = fadd float %2218, 0.000000e+00
  %2220 = bitcast i32 %686 to float
  %2221 = bitcast i32 %686 to float
  %2222 = fmul float %2220, %2221
  %2223 = fadd float %2219, %2222
  %2224 = call float @llvm.sqrt.f32(float %2223)
  %2225 = fneg float %692
  %2226 = fmul float %2224, %2225
  %2227 = bitcast i32 %52 to float
  %2228 = fadd float %2227, %2226
  %2229 = bitcast i32 %52 to float
  %2230 = bitcast i32 %52 to float
  %2231 = fmul float %2229, %2230
  %2232 = fadd float %2231, 0.000000e+00
  %2233 = bitcast i32 %686 to float
  %2234 = bitcast i32 %686 to float
  %2235 = fmul float %2233, %2234
  %2236 = fadd float %2232, %2235
  %2237 = call float @llvm.sqrt.f32(float %2236)
  %2238 = fneg float %692
  %2239 = fmul float %2237, %2238
  %2240 = bitcast i32 %52 to float
  %2241 = fadd float %2240, %2239
  %2242 = fmul float %2228, %2241
  %2243 = fadd float %2242, 0.000000e+00
  %2244 = bitcast i32 %52 to float
  %2245 = bitcast i32 %52 to float
  %2246 = fmul float %2244, %2245
  %2247 = fadd float %2246, 0.000000e+00
  %2248 = bitcast i32 %686 to float
  %2249 = bitcast i32 %686 to float
  %2250 = fmul float %2248, %2249
  %2251 = fadd float %2247, %2250
  %2252 = call float @llvm.sqrt.f32(float %2251)
  %2253 = fneg float %692
  %2254 = fmul float %2252, %2253
  %2255 = fmul float %2254, 0.000000e+00
  %2256 = bitcast i32 %686 to float
  %2257 = fadd float %2256, %2255
  %2258 = bitcast i32 %52 to float
  %2259 = bitcast i32 %52 to float
  %2260 = fmul float %2258, %2259
  %2261 = fadd float %2260, 0.000000e+00
  %2262 = bitcast i32 %686 to float
  %2263 = bitcast i32 %686 to float
  %2264 = fmul float %2262, %2263
  %2265 = fadd float %2261, %2264
  %2266 = call float @llvm.sqrt.f32(float %2265)
  %2267 = fneg float %692
  %2268 = fmul float %2266, %2267
  %2269 = fmul float %2268, 0.000000e+00
  %2270 = bitcast i32 %686 to float
  %2271 = fadd float %2270, %2269
  %2272 = fmul float %2257, %2271
  %2273 = fadd float %2243, %2272
  %2274 = call float @llvm.sqrt.f32(float %2273)
  %2275 = fadd float %2274, 0.000000e+00
  %2276 = fdiv float %2215, %2275
  %2277 = fmul float %2202, %2276
  %2278 = fneg float %2277
  %2279 = insertelement <4 x float> zeroinitializer, float %2278, i32 0
  %2280 = insertelement <4 x float> %2279, float 0.000000e+00, i32 1
  %2281 = insertelement <4 x float> %2280, float 0.000000e+00, i32 2
  %2282 = insertelement <4 x float> %2281, float 0.000000e+00, i32 3
  %2283 = load float, float* %1321, align 4
  %2284 = insertelement <4 x float> zeroinitializer, float %2283, i32 0
  %2285 = insertelement <4 x float> %2284, float 0.000000e+00, i32 1
  %2286 = insertelement <4 x float> %2285, float 0.000000e+00, i32 2
  %2287 = insertelement <4 x float> %2286, float 0.000000e+00, i32 3
  %2288 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2282, <4 x float> %2287, <4 x float> zeroinitializer)
  %2289 = extractelement <4 x float> %2288, i32 0
  store float %2289, float* %2126, align 4
  %2290 = bitcast i32 %52 to float
  %2291 = bitcast i32 %52 to float
  %2292 = fmul float %2290, %2291
  %2293 = fadd float %2292, 0.000000e+00
  %2294 = bitcast i32 %686 to float
  %2295 = bitcast i32 %686 to float
  %2296 = fmul float %2294, %2295
  %2297 = fadd float %2293, %2296
  %2298 = call float @llvm.sqrt.f32(float %2297)
  %2299 = fneg float %692
  %2300 = fmul float %2298, %2299
  %2301 = fmul float %2300, 0.000000e+00
  %2302 = bitcast i32 %686 to float
  %2303 = fadd float %2302, %2301
  %2304 = bitcast i32 %52 to float
  %2305 = bitcast i32 %52 to float
  %2306 = fmul float %2304, %2305
  %2307 = fadd float %2306, 0.000000e+00
  %2308 = bitcast i32 %686 to float
  %2309 = bitcast i32 %686 to float
  %2310 = fmul float %2308, %2309
  %2311 = fadd float %2307, %2310
  %2312 = call float @llvm.sqrt.f32(float %2311)
  %2313 = fneg float %692
  %2314 = fmul float %2312, %2313
  %2315 = bitcast i32 %52 to float
  %2316 = fadd float %2315, %2314
  %2317 = bitcast i32 %52 to float
  %2318 = bitcast i32 %52 to float
  %2319 = fmul float %2317, %2318
  %2320 = fadd float %2319, 0.000000e+00
  %2321 = bitcast i32 %686 to float
  %2322 = bitcast i32 %686 to float
  %2323 = fmul float %2321, %2322
  %2324 = fadd float %2320, %2323
  %2325 = call float @llvm.sqrt.f32(float %2324)
  %2326 = fneg float %692
  %2327 = fmul float %2325, %2326
  %2328 = bitcast i32 %52 to float
  %2329 = fadd float %2328, %2327
  %2330 = fmul float %2316, %2329
  %2331 = fadd float %2330, 0.000000e+00
  %2332 = bitcast i32 %52 to float
  %2333 = bitcast i32 %52 to float
  %2334 = fmul float %2332, %2333
  %2335 = fadd float %2334, 0.000000e+00
  %2336 = bitcast i32 %686 to float
  %2337 = bitcast i32 %686 to float
  %2338 = fmul float %2336, %2337
  %2339 = fadd float %2335, %2338
  %2340 = call float @llvm.sqrt.f32(float %2339)
  %2341 = fneg float %692
  %2342 = fmul float %2340, %2341
  %2343 = fmul float %2342, 0.000000e+00
  %2344 = bitcast i32 %686 to float
  %2345 = fadd float %2344, %2343
  %2346 = bitcast i32 %52 to float
  %2347 = bitcast i32 %52 to float
  %2348 = fmul float %2346, %2347
  %2349 = fadd float %2348, 0.000000e+00
  %2350 = bitcast i32 %686 to float
  %2351 = bitcast i32 %686 to float
  %2352 = fmul float %2350, %2351
  %2353 = fadd float %2349, %2352
  %2354 = call float @llvm.sqrt.f32(float %2353)
  %2355 = fneg float %692
  %2356 = fmul float %2354, %2355
  %2357 = fmul float %2356, 0.000000e+00
  %2358 = bitcast i32 %686 to float
  %2359 = fadd float %2358, %2357
  %2360 = fmul float %2345, %2359
  %2361 = fadd float %2331, %2360
  %2362 = call float @llvm.sqrt.f32(float %2361)
  %2363 = fadd float %2362, 0.000000e+00
  %2364 = fdiv float %2303, %2363
  %2365 = fmul float %2364, 2.000000e+00
  %2366 = bitcast i32 %52 to float
  %2367 = bitcast i32 %52 to float
  %2368 = fmul float %2366, %2367
  %2369 = fadd float %2368, 0.000000e+00
  %2370 = bitcast i32 %686 to float
  %2371 = bitcast i32 %686 to float
  %2372 = fmul float %2370, %2371
  %2373 = fadd float %2369, %2372
  %2374 = call float @llvm.sqrt.f32(float %2373)
  %2375 = fneg float %692
  %2376 = fmul float %2374, %2375
  %2377 = bitcast i32 %52 to float
  %2378 = fadd float %2377, %2376
  %2379 = bitcast i32 %52 to float
  %2380 = bitcast i32 %52 to float
  %2381 = fmul float %2379, %2380
  %2382 = fadd float %2381, 0.000000e+00
  %2383 = bitcast i32 %686 to float
  %2384 = bitcast i32 %686 to float
  %2385 = fmul float %2383, %2384
  %2386 = fadd float %2382, %2385
  %2387 = call float @llvm.sqrt.f32(float %2386)
  %2388 = fneg float %692
  %2389 = fmul float %2387, %2388
  %2390 = bitcast i32 %52 to float
  %2391 = fadd float %2390, %2389
  %2392 = bitcast i32 %52 to float
  %2393 = bitcast i32 %52 to float
  %2394 = fmul float %2392, %2393
  %2395 = fadd float %2394, 0.000000e+00
  %2396 = bitcast i32 %686 to float
  %2397 = bitcast i32 %686 to float
  %2398 = fmul float %2396, %2397
  %2399 = fadd float %2395, %2398
  %2400 = call float @llvm.sqrt.f32(float %2399)
  %2401 = fneg float %692
  %2402 = fmul float %2400, %2401
  %2403 = bitcast i32 %52 to float
  %2404 = fadd float %2403, %2402
  %2405 = fmul float %2391, %2404
  %2406 = fadd float %2405, 0.000000e+00
  %2407 = bitcast i32 %52 to float
  %2408 = bitcast i32 %52 to float
  %2409 = fmul float %2407, %2408
  %2410 = fadd float %2409, 0.000000e+00
  %2411 = bitcast i32 %686 to float
  %2412 = bitcast i32 %686 to float
  %2413 = fmul float %2411, %2412
  %2414 = fadd float %2410, %2413
  %2415 = call float @llvm.sqrt.f32(float %2414)
  %2416 = fneg float %692
  %2417 = fmul float %2415, %2416
  %2418 = fmul float %2417, 0.000000e+00
  %2419 = bitcast i32 %686 to float
  %2420 = fadd float %2419, %2418
  %2421 = bitcast i32 %52 to float
  %2422 = bitcast i32 %52 to float
  %2423 = fmul float %2421, %2422
  %2424 = fadd float %2423, 0.000000e+00
  %2425 = bitcast i32 %686 to float
  %2426 = bitcast i32 %686 to float
  %2427 = fmul float %2425, %2426
  %2428 = fadd float %2424, %2427
  %2429 = call float @llvm.sqrt.f32(float %2428)
  %2430 = fneg float %692
  %2431 = fmul float %2429, %2430
  %2432 = fmul float %2431, 0.000000e+00
  %2433 = bitcast i32 %686 to float
  %2434 = fadd float %2433, %2432
  %2435 = fmul float %2420, %2434
  %2436 = fadd float %2406, %2435
  %2437 = call float @llvm.sqrt.f32(float %2436)
  %2438 = fadd float %2437, 0.000000e+00
  %2439 = fdiv float %2378, %2438
  %2440 = fmul float %2365, %2439
  %2441 = fneg float %2440
  %2442 = fmul float %2441, %2283
  %2443 = fadd float %2442, 0.000000e+00
  %2444 = bitcast i32 %52 to float
  %2445 = bitcast i32 %52 to float
  %2446 = fmul float %2444, %2445
  %2447 = fadd float %2446, 0.000000e+00
  %2448 = bitcast i32 %686 to float
  %2449 = bitcast i32 %686 to float
  %2450 = fmul float %2448, %2449
  %2451 = fadd float %2447, %2450
  %2452 = call float @llvm.sqrt.f32(float %2451)
  %2453 = fneg float %692
  %2454 = fmul float %2452, %2453
  %2455 = fmul float %2454, 0.000000e+00
  %2456 = bitcast i32 %686 to float
  %2457 = fadd float %2456, %2455
  %2458 = bitcast i32 %52 to float
  %2459 = bitcast i32 %52 to float
  %2460 = fmul float %2458, %2459
  %2461 = fadd float %2460, 0.000000e+00
  %2462 = bitcast i32 %686 to float
  %2463 = bitcast i32 %686 to float
  %2464 = fmul float %2462, %2463
  %2465 = fadd float %2461, %2464
  %2466 = call float @llvm.sqrt.f32(float %2465)
  %2467 = fneg float %692
  %2468 = fmul float %2466, %2467
  %2469 = bitcast i32 %52 to float
  %2470 = fadd float %2469, %2468
  %2471 = bitcast i32 %52 to float
  %2472 = bitcast i32 %52 to float
  %2473 = fmul float %2471, %2472
  %2474 = fadd float %2473, 0.000000e+00
  %2475 = bitcast i32 %686 to float
  %2476 = bitcast i32 %686 to float
  %2477 = fmul float %2475, %2476
  %2478 = fadd float %2474, %2477
  %2479 = call float @llvm.sqrt.f32(float %2478)
  %2480 = fneg float %692
  %2481 = fmul float %2479, %2480
  %2482 = bitcast i32 %52 to float
  %2483 = fadd float %2482, %2481
  %2484 = fmul float %2470, %2483
  %2485 = fadd float %2484, 0.000000e+00
  %2486 = bitcast i32 %52 to float
  %2487 = bitcast i32 %52 to float
  %2488 = fmul float %2486, %2487
  %2489 = fadd float %2488, 0.000000e+00
  %2490 = bitcast i32 %686 to float
  %2491 = bitcast i32 %686 to float
  %2492 = fmul float %2490, %2491
  %2493 = fadd float %2489, %2492
  %2494 = call float @llvm.sqrt.f32(float %2493)
  %2495 = fneg float %692
  %2496 = fmul float %2494, %2495
  %2497 = fmul float %2496, 0.000000e+00
  %2498 = bitcast i32 %686 to float
  %2499 = fadd float %2498, %2497
  %2500 = bitcast i32 %52 to float
  %2501 = bitcast i32 %52 to float
  %2502 = fmul float %2500, %2501
  %2503 = fadd float %2502, 0.000000e+00
  %2504 = bitcast i32 %686 to float
  %2505 = bitcast i32 %686 to float
  %2506 = fmul float %2504, %2505
  %2507 = fadd float %2503, %2506
  %2508 = call float @llvm.sqrt.f32(float %2507)
  %2509 = fneg float %692
  %2510 = fmul float %2508, %2509
  %2511 = fmul float %2510, 0.000000e+00
  %2512 = bitcast i32 %686 to float
  %2513 = fadd float %2512, %2511
  %2514 = fmul float %2499, %2513
  %2515 = fadd float %2485, %2514
  %2516 = call float @llvm.sqrt.f32(float %2515)
  %2517 = fadd float %2516, 0.000000e+00
  %2518 = fdiv float %2457, %2517
  %2519 = fmul float %2518, 2.000000e+00
  %2520 = bitcast i32 %52 to float
  %2521 = bitcast i32 %52 to float
  %2522 = fmul float %2520, %2521
  %2523 = fadd float %2522, 0.000000e+00
  %2524 = bitcast i32 %686 to float
  %2525 = bitcast i32 %686 to float
  %2526 = fmul float %2524, %2525
  %2527 = fadd float %2523, %2526
  %2528 = call float @llvm.sqrt.f32(float %2527)
  %2529 = fneg float %692
  %2530 = fmul float %2528, %2529
  %2531 = fmul float %2530, 0.000000e+00
  %2532 = bitcast i32 %686 to float
  %2533 = fadd float %2532, %2531
  %2534 = bitcast i32 %52 to float
  %2535 = bitcast i32 %52 to float
  %2536 = fmul float %2534, %2535
  %2537 = fadd float %2536, 0.000000e+00
  %2538 = bitcast i32 %686 to float
  %2539 = bitcast i32 %686 to float
  %2540 = fmul float %2538, %2539
  %2541 = fadd float %2537, %2540
  %2542 = call float @llvm.sqrt.f32(float %2541)
  %2543 = fneg float %692
  %2544 = fmul float %2542, %2543
  %2545 = bitcast i32 %52 to float
  %2546 = fadd float %2545, %2544
  %2547 = bitcast i32 %52 to float
  %2548 = bitcast i32 %52 to float
  %2549 = fmul float %2547, %2548
  %2550 = fadd float %2549, 0.000000e+00
  %2551 = bitcast i32 %686 to float
  %2552 = bitcast i32 %686 to float
  %2553 = fmul float %2551, %2552
  %2554 = fadd float %2550, %2553
  %2555 = call float @llvm.sqrt.f32(float %2554)
  %2556 = fneg float %692
  %2557 = fmul float %2555, %2556
  %2558 = bitcast i32 %52 to float
  %2559 = fadd float %2558, %2557
  %2560 = fmul float %2546, %2559
  %2561 = fadd float %2560, 0.000000e+00
  %2562 = bitcast i32 %52 to float
  %2563 = bitcast i32 %52 to float
  %2564 = fmul float %2562, %2563
  %2565 = fadd float %2564, 0.000000e+00
  %2566 = bitcast i32 %686 to float
  %2567 = bitcast i32 %686 to float
  %2568 = fmul float %2566, %2567
  %2569 = fadd float %2565, %2568
  %2570 = call float @llvm.sqrt.f32(float %2569)
  %2571 = fneg float %692
  %2572 = fmul float %2570, %2571
  %2573 = fmul float %2572, 0.000000e+00
  %2574 = bitcast i32 %686 to float
  %2575 = fadd float %2574, %2573
  %2576 = bitcast i32 %52 to float
  %2577 = bitcast i32 %52 to float
  %2578 = fmul float %2576, %2577
  %2579 = fadd float %2578, 0.000000e+00
  %2580 = bitcast i32 %686 to float
  %2581 = bitcast i32 %686 to float
  %2582 = fmul float %2580, %2581
  %2583 = fadd float %2579, %2582
  %2584 = call float @llvm.sqrt.f32(float %2583)
  %2585 = fneg float %692
  %2586 = fmul float %2584, %2585
  %2587 = fmul float %2586, 0.000000e+00
  %2588 = bitcast i32 %686 to float
  %2589 = fadd float %2588, %2587
  %2590 = fmul float %2575, %2589
  %2591 = fadd float %2561, %2590
  %2592 = call float @llvm.sqrt.f32(float %2591)
  %2593 = fadd float %2592, 0.000000e+00
  %2594 = fdiv float %2533, %2593
  %2595 = fmul float %2519, %2594
  %2596 = fsub float 1.000000e+00, %2595
  %2597 = load float, float* %44, align 4
  %2598 = fmul float %2596, %2597
  %2599 = fadd float %2443, %2598
  %2600 = insertelement <4 x float> zeroinitializer, float %2599, i32 0
  %2601 = insertelement <4 x float> %2600, float 0.000000e+00, i32 1
  %2602 = insertelement <4 x float> %2601, float 0.000000e+00, i32 2
  %2603 = insertelement <4 x float> %2602, float 0.000000e+00, i32 3
  %2604 = extractelement <4 x float> %2603, i32 0
  store float %2604, float* %2126, align 4
  %2605 = getelementptr float, float* %1, i32 0
  %2606 = getelementptr inbounds float, float* %2605, i64 2
  %2607 = bitcast float* %2606 to i32*
  %2608 = load i32, i32* %2607, align 4
  %2609 = bitcast i32 %2608 to float
  %2610 = insertelement <4 x float> zeroinitializer, float %2609, i32 0
  %2611 = getelementptr float, float* %1, i32 0
  %2612 = getelementptr inbounds float, float* %2611, i64 1
  %2613 = bitcast float* %2612 to i32*
  %2614 = load i32, i32* %2613, align 4
  %2615 = bitcast i32 %2614 to float
  %2616 = insertelement <4 x float> %2610, float %2615, i32 1
  %2617 = insertelement <4 x float> %2616, float 0.000000e+00, i32 2
  %2618 = insertelement <4 x float> %2617, float 0.000000e+00, i32 3
  %2619 = extractelement <4 x float> %2618, i32 0
  %2620 = bitcast i32* %2613 to float*
  store float %2619, float* %2620, align 4
  %2621 = extractelement <4 x float> %2618, i32 1
  %2622 = bitcast i32* %2607 to float*
  store float %2621, float* %2622, align 4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind ssp uwtable
define void @no_opt_naive_fixed_qr_decomp(float* %0, float* %1, float* %2) #1 {
.preheader13:
  %3 = bitcast float* %2 to i8*
  %4 = bitcast float* %0 to i8*
  %5 = call i64 @llvm.objectsize.i64.p0i8(i8* %3, i1 false, i1 true, i1 false)
  %6 = call i8* @__memcpy_chk(i8* %3, i8* %4, i64 16, i64 %5) #9
  %7 = call dereferenceable_or_null(16) i8* @calloc(i64 4, i64 4) #10
  %8 = bitcast i8* %7 to float*
  store float 1.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds i8, i8* %7, i64 8
  %10 = getelementptr inbounds i8, i8* %7, i64 12
  %11 = bitcast i8* %10 to float*
  store float 1.000000e+00, float* %11, align 4
  %12 = bitcast float* %1 to i8*
  %13 = call i64 @llvm.objectsize.i64.p0i8(i8* %12, i1 false, i1 true, i1 false)
  %14 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #10
  %15 = bitcast i8* %14 to float*
  %16 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #10
  %17 = bitcast i8* %16 to float*
  %18 = bitcast float* %2 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = bitcast i8* %14 to i32*
  store i32 %19, i32* %20, align 4
  %21 = bitcast i8* %7 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = bitcast i8* %16 to i32*
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds float, float* %2, i64 2
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds i8, i8* %14, i64 4
  %28 = bitcast i8* %27 to i32*
  store i32 %26, i32* %28, align 4
  %29 = bitcast i8* %9 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %16, i64 4
  %32 = bitcast i8* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = load float, float* %15, align 4
  %34 = call float @no_opt_sgn(float %33)
  %35 = fneg float %34
  %36 = call float @no_opt_naive_norm(float* nonnull %15, i32 2)
  %37 = fmul float %36, %35
  %38 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #10
  %39 = bitcast i8* %38 to float*
  %40 = call dereferenceable_or_null(8) i8* @calloc(i64 4, i64 2) #10
  %41 = load float, float* %15, align 4
  %42 = load float, float* %17, align 4
  %43 = fmul float %37, %42
  %44 = fadd float %41, %43
  store float %44, float* %39, align 4
  %45 = bitcast i8* %27 to float*
  %46 = load float, float* %45, align 4
  %47 = bitcast i8* %31 to float*
  %48 = load float, float* %47, align 4
  %49 = fmul float %37, %48
  %50 = fadd float %46, %49
  %51 = getelementptr inbounds i8, i8* %38, i64 4
  %52 = bitcast i8* %51 to float*
  store float %50, float* %52, align 4
  %53 = bitcast i8* %40 to float*
  %54 = call float @no_opt_naive_norm(float* nonnull %39, i32 2)
  %55 = fadd float %54, 0x3EE4F8B580000000
  %56 = load float, float* %39, align 4
  %57 = fdiv float %56, %55
  store float %57, float* %53, align 4
  %58 = load float, float* %52, align 4
  %59 = fdiv float %58, %55
  %60 = getelementptr inbounds i8, i8* %40, i64 4
  %61 = bitcast i8* %60 to float*
  store float %59, float* %61, align 4
  %62 = call dereferenceable_or_null(16) i8* @calloc(i64 4, i64 4) #10
  %63 = bitcast i8* %62 to float*
  %64 = load float, float* %53, align 4
  %65 = fmul float %64, 2.000000e+00
  %66 = fmul float %65, %64
  %67 = fsub float 1.000000e+00, %66
  store float %67, float* %63, align 4
  %68 = load float, float* %53, align 4
  %69 = fmul float %68, 2.000000e+00
  %70 = load float, float* %61, align 4
  %71 = fmul float %69, %70
  %72 = fsub float 0.000000e+00, %71
  %73 = getelementptr inbounds i8, i8* %62, i64 4
  %74 = bitcast i8* %73 to float*
  store float %72, float* %74, align 4
  %75 = load float, float* %61, align 4
  %76 = fmul float %75, 2.000000e+00
  %77 = load float, float* %53, align 4
  %78 = fmul float %76, %77
  %79 = fsub float 0.000000e+00, %78
  %80 = getelementptr inbounds i8, i8* %62, i64 8
  %81 = bitcast i8* %80 to float*
  store float %79, float* %81, align 4
  %82 = load float, float* %61, align 4
  %83 = fmul float %82, 2.000000e+00
  %84 = fmul float %83, %82
  %85 = fsub float 1.000000e+00, %84
  %86 = getelementptr inbounds i8, i8* %62, i64 12
  %87 = bitcast i8* %86 to float*
  store float %85, float* %87, align 4
  %88 = call dereferenceable_or_null(16) i8* @calloc(i64 4, i64 4) #10
  %89 = bitcast i8* %88 to float*
  %90 = bitcast i8* %62 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = bitcast i8* %88 to i32*
  store i32 %91, i32* %92, align 4
  %93 = bitcast i8* %73 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds i8, i8* %88, i64 4
  %96 = bitcast i8* %95 to i32*
  store i32 %94, i32* %96, align 4
  %97 = bitcast i8* %80 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds i8, i8* %88, i64 8
  %100 = bitcast i8* %99 to i32*
  store i32 %98, i32* %100, align 4
  %101 = bitcast i8* %86 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = getelementptr inbounds i8, i8* %88, i64 12
  %104 = bitcast i8* %103 to i32*
  store i32 %102, i32* %104, align 4
  %105 = call i8* @__memcpy_chk(i8* %12, i8* %88, i64 16, i64 %13) #9
  call void @no_opt_naive_fixed_matrix_multiply(float* %89, float* %0, float* %2)
  call void @free(i8* %14)
  call void @free(i8* %16)
  call void @free(i8* %38)
  call void @free(i8* %40)
  call void @free(i8* %62)
  call void @free(i8* %88)
  call void @no_opt_naive_fixed_transpose(float* %1)
  ret void
}

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #2

; Function Attrs: allocsize(0,1)
declare i8* @calloc(i64, i64) #5

declare void @free(i8*) #6

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #1 {
.preheader6:
  %0 = alloca i64, align 8
  %1 = alloca [4 x float], align 16
  %2 = alloca [4 x float], align 16
  %3 = alloca [4 x float], align 16
  %4 = alloca [4 x float], align 16
  %5 = alloca [4 x float], align 16
  %6 = call i64 @time(i64* null) #9
  store i64 %6, i64* %0, align 8
  %7 = call i64 @time(i64* nonnull %0) #9
  %8 = trunc i64 %7 to i32
  call void @srand(i32 %8) #9
  %9 = call i32 @rand() #9
  %10 = sitofp i32 %9 to float
  %11 = fdiv float %10, 0x41747AE140000000
  %12 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 0
  store float %11, float* %12, align 16
  %13 = call i32 @rand() #9
  %14 = sitofp i32 %13 to float
  %15 = fdiv float %14, 0x41747AE140000000
  %16 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 1
  store float %15, float* %16, align 4
  %17 = call i32 @rand() #9
  %18 = sitofp i32 %17 to float
  %19 = fdiv float %18, 0x41747AE140000000
  %20 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 2
  store float %19, float* %20, align 8
  %21 = call i32 @rand() #9
  %22 = sitofp i32 %21 to float
  %23 = fdiv float %22, 0x41747AE140000000
  %24 = getelementptr inbounds [4 x float], [4 x float]* %1, i64 0, i64 3
  store float %23, float* %24, align 4
  %25 = bitcast [4 x float]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %25, i8 0, i64 16, i1 false)
  %26 = bitcast [4 x float]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %26, i8 0, i64 16, i1 false)
  %27 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 0
  %28 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 0
  call void @naive_fixed_qr_decomp(float* nonnull %12, float* nonnull %27, float* nonnull %28)
  %29 = bitcast [4 x float]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %29, i8 0, i64 16, i1 false)
  %30 = bitcast [4 x float]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16) %30, i8 0, i64 16, i1 false)
  %31 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %32 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 0
  call void @no_opt_naive_fixed_qr_decomp(float* nonnull %12, float* nonnull %31, float* nonnull %32)
  %33 = load float, float* %27, align 16
  %34 = fpext float %33 to double
  %35 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %34) #9
  %36 = load float, float* %31, align 16
  %37 = fpext float %36 to double
  %38 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), double %37) #9
  %39 = load float, float* %31, align 16
  %40 = load float, float* %27, align 16
  %41 = fsub float %39, %40
  %42 = call float @llvm.fabs.f32(float %41)
  %43 = fcmp uge float %42, 0x3FB99999A0000000
  br i1 %43, label %58, label %44

44:                                               ; preds = %.preheader6
  %45 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 1
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %47) #9
  %49 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 1
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), double %51) #9
  %53 = load float, float* %31, align 16
  %54 = load float, float* %27, align 16
  %55 = fsub float %53, %54
  %56 = call float @llvm.fabs.f32(float %55)
  %57 = fcmp uge float %56, 0x3FB99999A0000000
  br i1 %57, label %58, label %.preheader6.1

58:                                               ; preds = %115, %.preheader6.1, %44, %.preheader6
  call void @__assert_rtn(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.main, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 300, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0)) #11
  unreachable

59:                                               ; preds = %.preheader5
  %60 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 1
  %61 = load float, float* %60, align 4
  %62 = fpext float %61 to double
  %63 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), double %62) #9
  %64 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 1
  %65 = load float, float* %64, align 4
  %66 = fpext float %65 to double
  %67 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), double %66) #9
  %68 = load float, float* %32, align 16
  %69 = load float, float* %28, align 16
  %70 = fsub float %68, %69
  %71 = call float @llvm.fabs.f32(float %70)
  %72 = fcmp uge float %71, 0x3FB99999A0000000
  br i1 %72, label %73, label %.preheader.1

73:                                               ; preds = %.preheader5, %87, %.preheader.1, %59
  call void @__assert_rtn(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @__func__.main, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 307, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0)) #11
  unreachable

.preheader.1:                                     ; preds = %59
  %74 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 2
  %75 = load float, float* %74, align 8
  %76 = fpext float %75 to double
  %77 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), double %76) #9
  %78 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 2
  %79 = load float, float* %78, align 8
  %80 = fpext float %79 to double
  %81 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), double %80) #9
  %82 = load float, float* %64, align 4
  %83 = load float, float* %60, align 4
  %84 = fsub float %82, %83
  %85 = call float @llvm.fabs.f32(float %84)
  %86 = fcmp uge float %85, 0x3FB99999A0000000
  br i1 %86, label %73, label %87

87:                                               ; preds = %.preheader.1
  %88 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 3
  %89 = load float, float* %88, align 4
  %90 = fpext float %89 to double
  %91 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), double %90) #9
  %92 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 3
  %93 = load float, float* %92, align 4
  %94 = fpext float %93 to double
  %95 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), double %94) #9
  %96 = load float, float* %64, align 4
  %97 = load float, float* %60, align 4
  %98 = fsub float %96, %97
  %99 = call float @llvm.fabs.f32(float %98)
  %100 = fcmp uge float %99, 0x3FB99999A0000000
  br i1 %100, label %73, label %101

101:                                              ; preds = %87
  ret i32 0

.preheader6.1:                                    ; preds = %44
  %102 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 2
  %103 = load float, float* %102, align 8
  %104 = fpext float %103 to double
  %105 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %104) #9
  %106 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 2
  %107 = load float, float* %106, align 8
  %108 = fpext float %107 to double
  %109 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), double %108) #9
  %110 = load float, float* %49, align 4
  %111 = load float, float* %45, align 4
  %112 = fsub float %110, %111
  %113 = call float @llvm.fabs.f32(float %112)
  %114 = fcmp uge float %113, 0x3FB99999A0000000
  br i1 %114, label %58, label %115

115:                                              ; preds = %.preheader6.1
  %116 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 3
  %117 = load float, float* %116, align 4
  %118 = fpext float %117 to double
  %119 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), double %118) #9
  %120 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 3
  %121 = load float, float* %120, align 4
  %122 = fpext float %121 to double
  %123 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), double %122) #9
  %124 = load float, float* %49, align 4
  %125 = load float, float* %45, align 4
  %126 = fsub float %124, %125
  %127 = call float @llvm.fabs.f32(float %126)
  %128 = fcmp uge float %127, 0x3FB99999A0000000
  br i1 %128, label %58, label %.preheader5

.preheader5:                                      ; preds = %115
  %129 = load float, float* %28, align 16
  %130 = fpext float %129 to double
  %131 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), double %130) #9
  %132 = load float, float* %32, align 16
  %133 = fpext float %132 to double
  %134 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), double %133) #9
  %135 = load float, float* %32, align 16
  %136 = load float, float* %28, align 16
  %137 = fsub float %135, %136
  %138 = call float @llvm.fabs.f32(float %137)
  %139 = fcmp uge float %138, 0x3FB99999A0000000
  br i1 %139, label %73, label %59
}

declare i64 @time(i64*) #6

declare void @srand(i32) #6

declare i32 @rand() #6

declare i32 @printf(i8*, ...) #6

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #2

; Function Attrs: noreturn
declare void @__assert_rtn(i8*, i8*, i32, i8*) #7

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #8

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #2

attributes #0 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { argmemonly nounwind willreturn writeonly }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { allocsize(0,1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="true" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nounwind willreturn }
attributes #9 = { nounwind }
attributes #10 = { nounwind allocsize(0,1) }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 11.0.1"}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
