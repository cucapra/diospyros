; ModuleID = 'finish.ll'
source_filename = "llvm-tests/qr-decomp-fixed-size.c"
target datalayout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

@__const.main.A = private unnamed_addr constant [16 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00], align 16

; Function Attrs: alwaysinline nounwind ssp uwtable
define float @sgn(float %0) #0 {
  %2 = fcmp ogt float %0, 0.000000e+00
  %3 = zext i1 %2 to i32
  %4 = fcmp olt float %0, 0.000000e+00
  %.neg = sext i1 %4 to i32
  %5 = add nsw i32 %.neg, %3
  %6 = sitofp i32 %5 to float
  ret float %6
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define float @naive_norm(float* %0, i32 %1) #0 {
  %3 = icmp sgt i32 %1, 0
  %smax = select i1 %3, i32 %1, i32 0
  %wide.trip.count = zext i32 %smax to i64
  br i1 %3, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  %xtraiter = and i64 %wide.trip.count, 1
  %4 = icmp eq i32 %smax, 1
  br i1 %4, label %._crit_edge.unr-lcssa, label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.lr.ph
  %unroll_iter = and i64 %wide.trip.count, 2147483646
  br label %5

5:                                                ; preds = %5, %.lr.ph.new
  %.013 = phi float [ 0.000000e+00, %.lr.ph.new ], [ %17, %5 ]
  %indvars.iv2 = phi i64 [ 0, %.lr.ph.new ], [ %indvars.iv.next.1, %5 ]
  %niter = phi i64 [ %unroll_iter, %.lr.ph.new ], [ %niter.nsub.1, %5 ]
  %6 = getelementptr inbounds float, float* %0, i64 %indvars.iv2
  %7 = load float, float* %6, align 4
  %8 = fpext float %7 to double
  %square = fmul double %8, %8
  %9 = fpext float %.013 to double
  %10 = fadd double %square, %9
  %11 = fptrunc double %10 to float
  %indvars.iv.next = or i64 %indvars.iv2, 1
  %12 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next
  %13 = load float, float* %12, align 4
  %14 = fpext float %13 to double
  %square4 = fmul double %14, %14
  %15 = fpext float %11 to double
  %16 = fadd double %square4, %15
  %17 = fptrunc double %16 to float
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv2, 2
  %niter.nsub.1 = add i64 %niter, -2
  %niter.ncmp.1.not = icmp eq i64 %niter.nsub.1, 0
  br i1 %niter.ncmp.1.not, label %._crit_edge.unr-lcssa, label %5

._crit_edge.unr-lcssa:                            ; preds = %5, %.lr.ph
  %split.ph = phi float [ undef, %.lr.ph ], [ %17, %5 ]
  %.013.unr = phi float [ 0.000000e+00, %.lr.ph ], [ %17, %5 ]
  %indvars.iv2.unr = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next.1, %5 ]
  %lcmp.mod.not = icmp eq i64 %xtraiter, 0
  br i1 %lcmp.mod.not, label %._crit_edge, label %.epil.preheader

.epil.preheader:                                  ; preds = %._crit_edge.unr-lcssa
  %18 = getelementptr inbounds float, float* %0, i64 %indvars.iv2.unr
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %square5 = fmul double %20, %20
  %21 = fpext float %.013.unr to double
  %22 = fadd double %square5, %21
  %23 = fptrunc double %22 to float
  br label %._crit_edge

._crit_edge:                                      ; preds = %.epil.preheader, %._crit_edge.unr-lcssa, %2
  %.01.lcssa = phi float [ 0.000000e+00, %2 ], [ %split.ph, %._crit_edge.unr-lcssa ], [ %23, %.epil.preheader ]
  %24 = call float @llvm.sqrt.f32(float %.01.lcssa)
  ret float %24
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.pow.f64(double, double) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double) #1

; Function Attrs: alwaysinline nounwind ssp uwtable
define void @naive_fixed_transpose(float* %0) #0 {
.lr.ph:
  %1 = getelementptr inbounds float, float* %0, i64 1
  %2 = bitcast float* %1 to i32*
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds float, float* %0, i64 4
  %5 = bitcast float* %4 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds float, float* %0, i64 1
  %8 = bitcast float* %7 to i32*
  store i32 %6, i32* %8, align 4
  %9 = getelementptr inbounds float, float* %0, i64 4
  %10 = bitcast float* %9 to i32*
  store i32 %3, i32* %10, align 4
  br label %11

11:                                               ; preds = %11, %.lr.ph
  %indvars.iv25 = phi i64 [ 2, %.lr.ph ], [ %indvars.iv.next3.1, %11 ]
  %12 = getelementptr inbounds float, float* %0, i64 %indvars.iv25
  %13 = bitcast float* %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = shl nuw nsw i64 %indvars.iv25, 2
  %16 = getelementptr inbounds float, float* %0, i64 %15
  %17 = bitcast float* %16 to i32*
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds float, float* %0, i64 %indvars.iv25
  %20 = bitcast float* %19 to i32*
  store i32 %18, i32* %20, align 4
  %21 = shl nuw nsw i64 %indvars.iv25, 2
  %22 = getelementptr inbounds float, float* %0, i64 %21
  %23 = bitcast float* %22 to i32*
  store i32 %14, i32* %23, align 4
  %indvars.iv.next3 = or i64 %indvars.iv25, 1
  %24 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next3
  %25 = bitcast float* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = shl nuw nsw i64 %indvars.iv.next3, 2
  %28 = getelementptr inbounds float, float* %0, i64 %27
  %29 = bitcast float* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds float, float* %0, i64 %indvars.iv.next3
  %32 = bitcast float* %31 to i32*
  store i32 %30, i32* %32, align 4
  %33 = shl nuw nsw i64 %indvars.iv.next3, 2
  %34 = getelementptr inbounds float, float* %0, i64 %33
  %35 = bitcast float* %34 to i32*
  store i32 %26, i32* %35, align 4
  %indvars.iv.next3.1 = add nuw nsw i64 %indvars.iv25, 2
  %exitcond.1.not = icmp eq i64 %indvars.iv.next3.1, 4
  br i1 %exitcond.1.not, label %.lr.ph.new.1, label %11

.lr.ph.new.1:                                     ; preds = %.lr.ph.new.1, %11
  %indvars.iv25.1 = phi i64 [ %indvars.iv.next3.1.1, %.lr.ph.new.1 ], [ 2, %11 ]
  %36 = add nuw nsw i64 %indvars.iv25.1, 4
  %37 = getelementptr inbounds float, float* %0, i64 %36
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = shl nuw nsw i64 %indvars.iv25.1, 2
  %41 = or i64 %40, 1
  %42 = getelementptr inbounds float, float* %0, i64 %41
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = add nuw nsw i64 %indvars.iv25.1, 4
  %46 = getelementptr inbounds float, float* %0, i64 %45
  %47 = bitcast float* %46 to i32*
  store i32 %44, i32* %47, align 4
  %48 = shl nuw nsw i64 %indvars.iv25.1, 2
  %49 = or i64 %48, 1
  %50 = getelementptr inbounds float, float* %0, i64 %49
  %51 = bitcast float* %50 to i32*
  store i32 %39, i32* %51, align 4
  %indvars.iv.next3.113 = or i64 %indvars.iv25.1, 1
  %52 = add nuw nsw i64 %indvars.iv25.1, 5
  %53 = getelementptr inbounds float, float* %0, i64 %52
  %54 = bitcast float* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = shl nuw nsw i64 %indvars.iv.next3.113, 2
  %57 = or i64 %56, 1
  %58 = getelementptr inbounds float, float* %0, i64 %57
  %59 = bitcast float* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = add nuw nsw i64 %indvars.iv25.1, 5
  %62 = getelementptr inbounds float, float* %0, i64 %61
  %63 = bitcast float* %62 to i32*
  store i32 %60, i32* %63, align 4
  %64 = shl nuw nsw i64 %indvars.iv.next3.113, 2
  %65 = or i64 %64, 1
  %66 = getelementptr inbounds float, float* %0, i64 %65
  %67 = bitcast float* %66 to i32*
  store i32 %55, i32* %67, align 4
  %indvars.iv.next3.1.1 = add nuw nsw i64 %indvars.iv25.1, 2
  %exitcond.1.1.not = icmp eq i64 %indvars.iv.next3.1.1, 4
  br i1 %exitcond.1.1.not, label %.prol.preheader.2, label %.lr.ph.new.1

.prol.preheader.2:                                ; preds = %.lr.ph.new.1
  %68 = getelementptr inbounds float, float* %0, i64 11
  %69 = bitcast float* %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds float, float* %0, i64 14
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds float, float* %0, i64 11
  %75 = bitcast float* %74 to i32*
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds float, float* %0, i64 14
  %77 = bitcast float* %76 to i32*
  store i32 %70, i32* %77, align 4
  ret void
}

; Function Attrs: alwaysinline nounwind ssp uwtable
define void @naive_fixed_matrix_multiply(float* %0, float* %1, float* %2) #0 {
.preheader:
  %3 = load float, float* %0, align 4
  %4 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3, i32 3
  %5 = load float, float* %1, align 4
  %6 = insertelement <4 x float> zeroinitializer, float %5, i32 3
  %7 = fmul <4 x float> %4, %6
  %8 = load float, float* %0, align 4
  %9 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %8, i32 2
  %10 = insertelement <4 x float> %9, float 1.000000e+00, i32 3
  %11 = load float, float* %1, align 4
  %12 = insertelement <4 x float> zeroinitializer, float %11, i32 2
  %13 = insertelement <4 x float> %12, float 0.000000e+00, i32 3
  %14 = call <4 x float> @llvm.fma.v4f32(<4 x float> %10, <4 x float> %13, <4 x float> %7)
  %15 = getelementptr inbounds float, float* %0, i64 1
  %16 = load float, float* %15, align 4
  %17 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %16, i32 3
  %18 = getelementptr inbounds float, float* %1, i64 4
  %19 = load float, float* %18, align 4
  %20 = insertelement <4 x float> zeroinitializer, float %19, i32 3
  %21 = call <4 x float> @llvm.fma.v4f32(<4 x float> %17, <4 x float> %20, <4 x float> %14)
  %22 = load float, float* %0, align 4
  %23 = insertelement <4 x float> zeroinitializer, float %22, i32 1
  %24 = getelementptr inbounds float, float* %0, i64 1
  %25 = load float, float* %24, align 4
  %26 = insertelement <4 x float> %23, float %25, i32 2
  %27 = getelementptr inbounds float, float* %0, i64 2
  %28 = load float, float* %27, align 4
  %29 = insertelement <4 x float> %26, float %28, i32 3
  %30 = load float, float* %1, align 4
  %31 = insertelement <4 x float> zeroinitializer, float %30, i32 1
  %32 = getelementptr inbounds float, float* %1, i64 4
  %33 = load float, float* %32, align 4
  %34 = insertelement <4 x float> %31, float %33, i32 2
  %35 = getelementptr inbounds float, float* %1, i64 8
  %36 = load float, float* %35, align 4
  %37 = insertelement <4 x float> %34, float %36, i32 3
  %38 = call <4 x float> @llvm.fma.v4f32(<4 x float> %29, <4 x float> %37, <4 x float> %21)
  %39 = load float, float* %0, align 4
  %40 = insertelement <4 x float> zeroinitializer, float %39, i32 0
  %41 = insertelement <4 x float> %40, float 1.000000e+00, i32 1
  %42 = insertelement <4 x float> %41, float 1.000000e+00, i32 2
  %43 = insertelement <4 x float> %42, float 1.000000e+00, i32 3
  %44 = load float, float* %1, align 4
  %45 = insertelement <4 x float> zeroinitializer, float %44, i32 0
  %46 = insertelement <4 x float> %45, float 0.000000e+00, i32 1
  %47 = insertelement <4 x float> %46, float 0.000000e+00, i32 2
  %48 = insertelement <4 x float> %47, float 0.000000e+00, i32 3
  %49 = fmul <4 x float> %43, %48
  %50 = fadd <4 x float> %49, zeroinitializer
  %51 = getelementptr inbounds float, float* %0, i64 1
  %52 = load float, float* %51, align 4
  %53 = insertelement <4 x float> zeroinitializer, float %52, i32 0
  %54 = insertelement <4 x float> %53, float 1.000000e+00, i32 1
  %55 = insertelement <4 x float> %54, float 1.000000e+00, i32 2
  %56 = load float, float* %0, align 4
  %57 = insertelement <4 x float> %55, float %56, i32 3
  %58 = getelementptr inbounds float, float* %1, i64 4
  %59 = load float, float* %58, align 4
  %60 = insertelement <4 x float> zeroinitializer, float %59, i32 0
  %61 = insertelement <4 x float> %60, float 0.000000e+00, i32 1
  %62 = insertelement <4 x float> %61, float 0.000000e+00, i32 2
  %63 = getelementptr inbounds float, float* %1, i64 1
  %64 = load float, float* %63, align 4
  %65 = insertelement <4 x float> %62, float %64, i32 3
  %66 = call <4 x float> @llvm.fma.v4f32(<4 x float> %57, <4 x float> %65, <4 x float> %50)
  %67 = getelementptr inbounds float, float* %0, i64 2
  %68 = load float, float* %67, align 4
  %69 = insertelement <4 x float> zeroinitializer, float %68, i32 0
  %70 = insertelement <4 x float> %69, float 1.000000e+00, i32 1
  %71 = insertelement <4 x float> %70, float 1.000000e+00, i32 2
  %72 = insertelement <4 x float> %71, float 1.000000e+00, i32 3
  %73 = getelementptr inbounds float, float* %1, i64 8
  %74 = load float, float* %73, align 4
  %75 = insertelement <4 x float> zeroinitializer, float %74, i32 0
  %76 = insertelement <4 x float> %75, float 0.000000e+00, i32 1
  %77 = insertelement <4 x float> %76, float 0.000000e+00, i32 2
  %78 = insertelement <4 x float> %77, float 0.000000e+00, i32 3
  %79 = call <4 x float> @llvm.fma.v4f32(<4 x float> %72, <4 x float> %78, <4 x float> %66)
  %80 = getelementptr inbounds float, float* %0, i64 3
  %81 = load float, float* %80, align 4
  %82 = insertelement <4 x float> zeroinitializer, float %81, i32 0
  %83 = insertelement <4 x float> %82, float 0.000000e+00, i32 1
  %84 = load float, float* %0, align 4
  %85 = insertelement <4 x float> %83, float %84, i32 2
  %86 = getelementptr inbounds float, float* %0, i64 1
  %87 = load float, float* %86, align 4
  %88 = insertelement <4 x float> %85, float %87, i32 3
  %89 = getelementptr inbounds float, float* %1, i64 12
  %90 = load float, float* %89, align 4
  %91 = insertelement <4 x float> zeroinitializer, float %90, i32 0
  %92 = insertelement <4 x float> %91, float 0.000000e+00, i32 1
  %93 = getelementptr inbounds float, float* %1, i64 1
  %94 = load float, float* %93, align 4
  %95 = insertelement <4 x float> %92, float %94, i32 2
  %96 = getelementptr inbounds float, float* %1, i64 5
  %97 = load float, float* %96, align 4
  %98 = insertelement <4 x float> %95, float %97, i32 3
  %99 = call <4 x float> @llvm.fma.v4f32(<4 x float> %88, <4 x float> %98, <4 x float> %79)
  %100 = shufflevector <4 x float> %38, <4 x float> %99, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %101 = load float, float* %0, align 4
  %102 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %101, i32 1
  %103 = insertelement <4 x float> %102, float 1.000000e+00, i32 2
  %104 = insertelement <4 x float> %103, float 1.000000e+00, i32 3
  %105 = getelementptr inbounds float, float* %1, i64 1
  %106 = load float, float* %105, align 4
  %107 = insertelement <4 x float> zeroinitializer, float %106, i32 1
  %108 = insertelement <4 x float> %107, float 0.000000e+00, i32 2
  %109 = insertelement <4 x float> %108, float 0.000000e+00, i32 3
  %110 = fmul <4 x float> %104, %109
  %111 = load float, float* %0, align 4
  %112 = insertelement <4 x float> zeroinitializer, float %111, i32 0
  %113 = insertelement <4 x float> %112, float 1.000000e+00, i32 1
  %114 = insertelement <4 x float> %113, float 1.000000e+00, i32 2
  %115 = insertelement <4 x float> %114, float 1.000000e+00, i32 3
  %116 = getelementptr inbounds float, float* %1, i64 1
  %117 = load float, float* %116, align 4
  %118 = insertelement <4 x float> zeroinitializer, float %117, i32 0
  %119 = insertelement <4 x float> %118, float 0.000000e+00, i32 1
  %120 = insertelement <4 x float> %119, float 0.000000e+00, i32 2
  %121 = insertelement <4 x float> %120, float 0.000000e+00, i32 3
  %122 = call <4 x float> @llvm.fma.v4f32(<4 x float> %115, <4 x float> %121, <4 x float> %110)
  %123 = getelementptr inbounds float, float* %0, i64 1
  %124 = load float, float* %123, align 4
  %125 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %124, i32 1
  %126 = insertelement <4 x float> %125, float 1.000000e+00, i32 2
  %127 = insertelement <4 x float> %126, float 1.000000e+00, i32 3
  %128 = getelementptr inbounds float, float* %1, i64 5
  %129 = load float, float* %128, align 4
  %130 = insertelement <4 x float> zeroinitializer, float %129, i32 1
  %131 = insertelement <4 x float> %130, float 0.000000e+00, i32 2
  %132 = insertelement <4 x float> %131, float 0.000000e+00, i32 3
  %133 = call <4 x float> @llvm.fma.v4f32(<4 x float> %127, <4 x float> %132, <4 x float> %122)
  %134 = getelementptr inbounds float, float* %0, i64 1
  %135 = load float, float* %134, align 4
  %136 = insertelement <4 x float> zeroinitializer, float %135, i32 0
  %137 = getelementptr inbounds float, float* %0, i64 2
  %138 = load float, float* %137, align 4
  %139 = insertelement <4 x float> %136, float %138, i32 1
  %140 = insertelement <4 x float> %139, float 1.000000e+00, i32 2
  %141 = load float, float* %0, align 4
  %142 = insertelement <4 x float> %140, float %141, i32 3
  %143 = getelementptr inbounds float, float* %1, i64 5
  %144 = load float, float* %143, align 4
  %145 = insertelement <4 x float> zeroinitializer, float %144, i32 0
  %146 = getelementptr inbounds float, float* %1, i64 9
  %147 = load float, float* %146, align 4
  %148 = insertelement <4 x float> %145, float %147, i32 1
  %149 = insertelement <4 x float> %148, float 0.000000e+00, i32 2
  %150 = getelementptr inbounds float, float* %1, i64 2
  %151 = load float, float* %150, align 4
  %152 = insertelement <4 x float> %149, float %151, i32 3
  %153 = call <4 x float> @llvm.fma.v4f32(<4 x float> %142, <4 x float> %152, <4 x float> %133)
  %154 = getelementptr inbounds float, float* %0, i64 2
  %155 = load float, float* %154, align 4
  %156 = insertelement <4 x float> zeroinitializer, float %155, i32 0
  %157 = getelementptr inbounds float, float* %0, i64 3
  %158 = load float, float* %157, align 4
  %159 = insertelement <4 x float> %156, float %158, i32 1
  %160 = insertelement <4 x float> %159, float 1.000000e+00, i32 2
  %161 = insertelement <4 x float> %160, float 1.000000e+00, i32 3
  %162 = getelementptr inbounds float, float* %1, i64 9
  %163 = load float, float* %162, align 4
  %164 = insertelement <4 x float> zeroinitializer, float %163, i32 0
  %165 = getelementptr inbounds float, float* %1, i64 13
  %166 = load float, float* %165, align 4
  %167 = insertelement <4 x float> %164, float %166, i32 1
  %168 = insertelement <4 x float> %167, float 0.000000e+00, i32 2
  %169 = insertelement <4 x float> %168, float 0.000000e+00, i32 3
  %170 = call <4 x float> @llvm.fma.v4f32(<4 x float> %161, <4 x float> %169, <4 x float> %153)
  %171 = load float, float* %0, align 4
  %172 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %171, i32 2
  %173 = insertelement <4 x float> %172, float 1.000000e+00, i32 3
  %174 = getelementptr inbounds float, float* %1, i64 2
  %175 = load float, float* %174, align 4
  %176 = insertelement <4 x float> zeroinitializer, float %175, i32 2
  %177 = insertelement <4 x float> %176, float 0.000000e+00, i32 3
  %178 = fmul <4 x float> %173, %177
  %179 = load float, float* %0, align 4
  %180 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %179, i32 1
  %181 = insertelement <4 x float> %180, float 1.000000e+00, i32 2
  %182 = insertelement <4 x float> %181, float 1.000000e+00, i32 3
  %183 = getelementptr inbounds float, float* %1, i64 2
  %184 = load float, float* %183, align 4
  %185 = insertelement <4 x float> zeroinitializer, float %184, i32 1
  %186 = insertelement <4 x float> %185, float 0.000000e+00, i32 2
  %187 = insertelement <4 x float> %186, float 0.000000e+00, i32 3
  %188 = call <4 x float> @llvm.fma.v4f32(<4 x float> %182, <4 x float> %187, <4 x float> %178)
  %189 = load float, float* %0, align 4
  %190 = insertelement <4 x float> zeroinitializer, float %189, i32 0
  %191 = insertelement <4 x float> %190, float 1.000000e+00, i32 1
  %192 = getelementptr inbounds float, float* %0, i64 1
  %193 = load float, float* %192, align 4
  %194 = insertelement <4 x float> %191, float %193, i32 2
  %195 = insertelement <4 x float> %194, float 1.000000e+00, i32 3
  %196 = getelementptr inbounds float, float* %1, i64 2
  %197 = load float, float* %196, align 4
  %198 = insertelement <4 x float> zeroinitializer, float %197, i32 0
  %199 = insertelement <4 x float> %198, float 0.000000e+00, i32 1
  %200 = getelementptr inbounds float, float* %1, i64 6
  %201 = load float, float* %200, align 4
  %202 = insertelement <4 x float> %199, float %201, i32 2
  %203 = insertelement <4 x float> %202, float 0.000000e+00, i32 3
  %204 = call <4 x float> @llvm.fma.v4f32(<4 x float> %195, <4 x float> %203, <4 x float> %188)
  %205 = getelementptr inbounds float, float* %0, i64 1
  %206 = load float, float* %205, align 4
  %207 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %206, i32 1
  %208 = getelementptr inbounds float, float* %0, i64 2
  %209 = load float, float* %208, align 4
  %210 = insertelement <4 x float> %207, float %209, i32 2
  %211 = insertelement <4 x float> %210, float 1.000000e+00, i32 3
  %212 = getelementptr inbounds float, float* %1, i64 6
  %213 = load float, float* %212, align 4
  %214 = insertelement <4 x float> zeroinitializer, float %213, i32 1
  %215 = getelementptr inbounds float, float* %1, i64 10
  %216 = load float, float* %215, align 4
  %217 = insertelement <4 x float> %214, float %216, i32 2
  %218 = insertelement <4 x float> %217, float 0.000000e+00, i32 3
  %219 = call <4 x float> @llvm.fma.v4f32(<4 x float> %211, <4 x float> %218, <4 x float> %204)
  %220 = getelementptr inbounds float, float* %0, i64 1
  %221 = load float, float* %220, align 4
  %222 = insertelement <4 x float> zeroinitializer, float %221, i32 0
  %223 = getelementptr inbounds float, float* %0, i64 2
  %224 = load float, float* %223, align 4
  %225 = insertelement <4 x float> %222, float %224, i32 1
  %226 = getelementptr inbounds float, float* %0, i64 3
  %227 = load float, float* %226, align 4
  %228 = insertelement <4 x float> %225, float %227, i32 2
  %229 = insertelement <4 x float> %228, float 0.000000e+00, i32 3
  %230 = getelementptr inbounds float, float* %1, i64 6
  %231 = load float, float* %230, align 4
  %232 = insertelement <4 x float> zeroinitializer, float %231, i32 0
  %233 = getelementptr inbounds float, float* %1, i64 10
  %234 = load float, float* %233, align 4
  %235 = insertelement <4 x float> %232, float %234, i32 1
  %236 = getelementptr inbounds float, float* %1, i64 14
  %237 = load float, float* %236, align 4
  %238 = insertelement <4 x float> %235, float %237, i32 2
  %239 = insertelement <4 x float> %238, float 0.000000e+00, i32 3
  %240 = call <4 x float> @llvm.fma.v4f32(<4 x float> %229, <4 x float> %239, <4 x float> %219)
  %241 = shufflevector <4 x float> %170, <4 x float> %240, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %242 = shufflevector <8 x float> %100, <8 x float> %241, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %243 = load float, float* %0, align 4
  %244 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %243, i32 3
  %245 = getelementptr inbounds float, float* %1, i64 3
  %246 = load float, float* %245, align 4
  %247 = insertelement <4 x float> zeroinitializer, float %246, i32 3
  %248 = fmul <4 x float> %244, %247
  %249 = load float, float* %0, align 4
  %250 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %249, i32 2
  %251 = insertelement <4 x float> %250, float 1.000000e+00, i32 3
  %252 = getelementptr inbounds float, float* %1, i64 3
  %253 = load float, float* %252, align 4
  %254 = insertelement <4 x float> zeroinitializer, float %253, i32 2
  %255 = insertelement <4 x float> %254, float 0.000000e+00, i32 3
  %256 = call <4 x float> @llvm.fma.v4f32(<4 x float> %251, <4 x float> %255, <4 x float> %248)
  %257 = load float, float* %0, align 4
  %258 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %257, i32 1
  %259 = insertelement <4 x float> %258, float 1.000000e+00, i32 2
  %260 = getelementptr inbounds float, float* %0, i64 1
  %261 = load float, float* %260, align 4
  %262 = insertelement <4 x float> %259, float %261, i32 3
  %263 = getelementptr inbounds float, float* %1, i64 3
  %264 = load float, float* %263, align 4
  %265 = insertelement <4 x float> zeroinitializer, float %264, i32 1
  %266 = insertelement <4 x float> %265, float 0.000000e+00, i32 2
  %267 = getelementptr inbounds float, float* %1, i64 7
  %268 = load float, float* %267, align 4
  %269 = insertelement <4 x float> %266, float %268, i32 3
  %270 = call <4 x float> @llvm.fma.v4f32(<4 x float> %262, <4 x float> %269, <4 x float> %256)
  %271 = getelementptr inbounds float, float* %0, i64 1
  %272 = load float, float* %271, align 4
  %273 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %272, i32 2
  %274 = getelementptr inbounds float, float* %0, i64 2
  %275 = load float, float* %274, align 4
  %276 = insertelement <4 x float> %273, float %275, i32 3
  %277 = getelementptr inbounds float, float* %1, i64 7
  %278 = load float, float* %277, align 4
  %279 = insertelement <4 x float> zeroinitializer, float %278, i32 2
  %280 = getelementptr inbounds float, float* %1, i64 11
  %281 = load float, float* %280, align 4
  %282 = insertelement <4 x float> %279, float %281, i32 3
  %283 = call <4 x float> @llvm.fma.v4f32(<4 x float> %276, <4 x float> %282, <4 x float> %270)
  %284 = load float, float* %0, align 4
  %285 = insertelement <4 x float> zeroinitializer, float %284, i32 0
  %286 = getelementptr inbounds float, float* %0, i64 1
  %287 = load float, float* %286, align 4
  %288 = insertelement <4 x float> %285, float %287, i32 1
  %289 = getelementptr inbounds float, float* %0, i64 2
  %290 = load float, float* %289, align 4
  %291 = insertelement <4 x float> %288, float %290, i32 2
  %292 = getelementptr inbounds float, float* %0, i64 3
  %293 = load float, float* %292, align 4
  %294 = insertelement <4 x float> %291, float %293, i32 3
  %295 = getelementptr inbounds float, float* %1, i64 3
  %296 = load float, float* %295, align 4
  %297 = insertelement <4 x float> zeroinitializer, float %296, i32 0
  %298 = getelementptr inbounds float, float* %1, i64 7
  %299 = load float, float* %298, align 4
  %300 = insertelement <4 x float> %297, float %299, i32 1
  %301 = getelementptr inbounds float, float* %1, i64 11
  %302 = load float, float* %301, align 4
  %303 = insertelement <4 x float> %300, float %302, i32 2
  %304 = getelementptr inbounds float, float* %1, i64 15
  %305 = load float, float* %304, align 4
  %306 = insertelement <4 x float> %303, float %305, i32 3
  %307 = call <4 x float> @llvm.fma.v4f32(<4 x float> %294, <4 x float> %306, <4 x float> %283)
  %308 = getelementptr inbounds float, float* %0, i64 4
  %309 = load float, float* %308, align 4
  %310 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %309, i32 3
  %311 = load float, float* %1, align 4
  %312 = insertelement <4 x float> zeroinitializer, float %311, i32 3
  %313 = fmul <4 x float> %310, %312
  %314 = getelementptr inbounds float, float* %0, i64 4
  %315 = load float, float* %314, align 4
  %316 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %315, i32 2
  %317 = insertelement <4 x float> %316, float 1.000000e+00, i32 3
  %318 = load float, float* %1, align 4
  %319 = insertelement <4 x float> zeroinitializer, float %318, i32 2
  %320 = insertelement <4 x float> %319, float 0.000000e+00, i32 3
  %321 = call <4 x float> @llvm.fma.v4f32(<4 x float> %317, <4 x float> %320, <4 x float> %313)
  %322 = getelementptr inbounds float, float* %0, i64 5
  %323 = load float, float* %322, align 4
  %324 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %323, i32 3
  %325 = getelementptr inbounds float, float* %1, i64 4
  %326 = load float, float* %325, align 4
  %327 = insertelement <4 x float> zeroinitializer, float %326, i32 3
  %328 = call <4 x float> @llvm.fma.v4f32(<4 x float> %324, <4 x float> %327, <4 x float> %321)
  %329 = getelementptr inbounds float, float* %0, i64 4
  %330 = load float, float* %329, align 4
  %331 = insertelement <4 x float> zeroinitializer, float %330, i32 1
  %332 = getelementptr inbounds float, float* %0, i64 5
  %333 = load float, float* %332, align 4
  %334 = insertelement <4 x float> %331, float %333, i32 2
  %335 = getelementptr inbounds float, float* %0, i64 6
  %336 = load float, float* %335, align 4
  %337 = insertelement <4 x float> %334, float %336, i32 3
  %338 = load float, float* %1, align 4
  %339 = insertelement <4 x float> zeroinitializer, float %338, i32 1
  %340 = getelementptr inbounds float, float* %1, i64 4
  %341 = load float, float* %340, align 4
  %342 = insertelement <4 x float> %339, float %341, i32 2
  %343 = getelementptr inbounds float, float* %1, i64 8
  %344 = load float, float* %343, align 4
  %345 = insertelement <4 x float> %342, float %344, i32 3
  %346 = call <4 x float> @llvm.fma.v4f32(<4 x float> %337, <4 x float> %345, <4 x float> %328)
  %347 = shufflevector <4 x float> %307, <4 x float> %346, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %348 = getelementptr inbounds float, float* %0, i64 4
  %349 = load float, float* %348, align 4
  %350 = insertelement <4 x float> zeroinitializer, float %349, i32 0
  %351 = insertelement <4 x float> %350, float 1.000000e+00, i32 1
  %352 = insertelement <4 x float> %351, float 1.000000e+00, i32 2
  %353 = insertelement <4 x float> %352, float 1.000000e+00, i32 3
  %354 = load float, float* %1, align 4
  %355 = insertelement <4 x float> zeroinitializer, float %354, i32 0
  %356 = insertelement <4 x float> %355, float 0.000000e+00, i32 1
  %357 = insertelement <4 x float> %356, float 0.000000e+00, i32 2
  %358 = insertelement <4 x float> %357, float 0.000000e+00, i32 3
  %359 = fmul <4 x float> %353, %358
  %360 = fadd <4 x float> %359, zeroinitializer
  %361 = getelementptr inbounds float, float* %0, i64 5
  %362 = load float, float* %361, align 4
  %363 = insertelement <4 x float> zeroinitializer, float %362, i32 0
  %364 = insertelement <4 x float> %363, float 1.000000e+00, i32 1
  %365 = insertelement <4 x float> %364, float 1.000000e+00, i32 2
  %366 = getelementptr inbounds float, float* %0, i64 4
  %367 = load float, float* %366, align 4
  %368 = insertelement <4 x float> %365, float %367, i32 3
  %369 = getelementptr inbounds float, float* %1, i64 4
  %370 = load float, float* %369, align 4
  %371 = insertelement <4 x float> zeroinitializer, float %370, i32 0
  %372 = insertelement <4 x float> %371, float 0.000000e+00, i32 1
  %373 = insertelement <4 x float> %372, float 0.000000e+00, i32 2
  %374 = getelementptr inbounds float, float* %1, i64 1
  %375 = load float, float* %374, align 4
  %376 = insertelement <4 x float> %373, float %375, i32 3
  %377 = call <4 x float> @llvm.fma.v4f32(<4 x float> %368, <4 x float> %376, <4 x float> %360)
  %378 = getelementptr inbounds float, float* %0, i64 6
  %379 = load float, float* %378, align 4
  %380 = insertelement <4 x float> zeroinitializer, float %379, i32 0
  %381 = insertelement <4 x float> %380, float 1.000000e+00, i32 1
  %382 = insertelement <4 x float> %381, float 1.000000e+00, i32 2
  %383 = insertelement <4 x float> %382, float 1.000000e+00, i32 3
  %384 = getelementptr inbounds float, float* %1, i64 8
  %385 = load float, float* %384, align 4
  %386 = insertelement <4 x float> zeroinitializer, float %385, i32 0
  %387 = insertelement <4 x float> %386, float 0.000000e+00, i32 1
  %388 = insertelement <4 x float> %387, float 0.000000e+00, i32 2
  %389 = insertelement <4 x float> %388, float 0.000000e+00, i32 3
  %390 = call <4 x float> @llvm.fma.v4f32(<4 x float> %383, <4 x float> %389, <4 x float> %377)
  %391 = getelementptr inbounds float, float* %0, i64 7
  %392 = load float, float* %391, align 4
  %393 = insertelement <4 x float> zeroinitializer, float %392, i32 0
  %394 = insertelement <4 x float> %393, float 0.000000e+00, i32 1
  %395 = getelementptr inbounds float, float* %0, i64 4
  %396 = load float, float* %395, align 4
  %397 = insertelement <4 x float> %394, float %396, i32 2
  %398 = getelementptr inbounds float, float* %0, i64 5
  %399 = load float, float* %398, align 4
  %400 = insertelement <4 x float> %397, float %399, i32 3
  %401 = getelementptr inbounds float, float* %1, i64 12
  %402 = load float, float* %401, align 4
  %403 = insertelement <4 x float> zeroinitializer, float %402, i32 0
  %404 = insertelement <4 x float> %403, float 0.000000e+00, i32 1
  %405 = getelementptr inbounds float, float* %1, i64 1
  %406 = load float, float* %405, align 4
  %407 = insertelement <4 x float> %404, float %406, i32 2
  %408 = getelementptr inbounds float, float* %1, i64 5
  %409 = load float, float* %408, align 4
  %410 = insertelement <4 x float> %407, float %409, i32 3
  %411 = call <4 x float> @llvm.fma.v4f32(<4 x float> %400, <4 x float> %410, <4 x float> %390)
  %412 = getelementptr inbounds float, float* %0, i64 4
  %413 = load float, float* %412, align 4
  %414 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %413, i32 1
  %415 = insertelement <4 x float> %414, float 1.000000e+00, i32 2
  %416 = insertelement <4 x float> %415, float 1.000000e+00, i32 3
  %417 = getelementptr inbounds float, float* %1, i64 1
  %418 = load float, float* %417, align 4
  %419 = insertelement <4 x float> zeroinitializer, float %418, i32 1
  %420 = insertelement <4 x float> %419, float 0.000000e+00, i32 2
  %421 = insertelement <4 x float> %420, float 0.000000e+00, i32 3
  %422 = fmul <4 x float> %416, %421
  %423 = getelementptr inbounds float, float* %0, i64 4
  %424 = load float, float* %423, align 4
  %425 = insertelement <4 x float> zeroinitializer, float %424, i32 0
  %426 = insertelement <4 x float> %425, float 1.000000e+00, i32 1
  %427 = insertelement <4 x float> %426, float 1.000000e+00, i32 2
  %428 = insertelement <4 x float> %427, float 1.000000e+00, i32 3
  %429 = getelementptr inbounds float, float* %1, i64 1
  %430 = load float, float* %429, align 4
  %431 = insertelement <4 x float> zeroinitializer, float %430, i32 0
  %432 = insertelement <4 x float> %431, float 0.000000e+00, i32 1
  %433 = insertelement <4 x float> %432, float 0.000000e+00, i32 2
  %434 = insertelement <4 x float> %433, float 0.000000e+00, i32 3
  %435 = call <4 x float> @llvm.fma.v4f32(<4 x float> %428, <4 x float> %434, <4 x float> %422)
  %436 = getelementptr inbounds float, float* %0, i64 5
  %437 = load float, float* %436, align 4
  %438 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %437, i32 1
  %439 = insertelement <4 x float> %438, float 1.000000e+00, i32 2
  %440 = insertelement <4 x float> %439, float 1.000000e+00, i32 3
  %441 = getelementptr inbounds float, float* %1, i64 5
  %442 = load float, float* %441, align 4
  %443 = insertelement <4 x float> zeroinitializer, float %442, i32 1
  %444 = insertelement <4 x float> %443, float 0.000000e+00, i32 2
  %445 = insertelement <4 x float> %444, float 0.000000e+00, i32 3
  %446 = call <4 x float> @llvm.fma.v4f32(<4 x float> %440, <4 x float> %445, <4 x float> %435)
  %447 = getelementptr inbounds float, float* %0, i64 5
  %448 = load float, float* %447, align 4
  %449 = insertelement <4 x float> zeroinitializer, float %448, i32 0
  %450 = getelementptr inbounds float, float* %0, i64 6
  %451 = load float, float* %450, align 4
  %452 = insertelement <4 x float> %449, float %451, i32 1
  %453 = insertelement <4 x float> %452, float 1.000000e+00, i32 2
  %454 = getelementptr inbounds float, float* %0, i64 4
  %455 = load float, float* %454, align 4
  %456 = insertelement <4 x float> %453, float %455, i32 3
  %457 = getelementptr inbounds float, float* %1, i64 5
  %458 = load float, float* %457, align 4
  %459 = insertelement <4 x float> zeroinitializer, float %458, i32 0
  %460 = getelementptr inbounds float, float* %1, i64 9
  %461 = load float, float* %460, align 4
  %462 = insertelement <4 x float> %459, float %461, i32 1
  %463 = insertelement <4 x float> %462, float 0.000000e+00, i32 2
  %464 = getelementptr inbounds float, float* %1, i64 2
  %465 = load float, float* %464, align 4
  %466 = insertelement <4 x float> %463, float %465, i32 3
  %467 = call <4 x float> @llvm.fma.v4f32(<4 x float> %456, <4 x float> %466, <4 x float> %446)
  %468 = getelementptr inbounds float, float* %0, i64 6
  %469 = load float, float* %468, align 4
  %470 = insertelement <4 x float> zeroinitializer, float %469, i32 0
  %471 = getelementptr inbounds float, float* %0, i64 7
  %472 = load float, float* %471, align 4
  %473 = insertelement <4 x float> %470, float %472, i32 1
  %474 = insertelement <4 x float> %473, float 1.000000e+00, i32 2
  %475 = insertelement <4 x float> %474, float 1.000000e+00, i32 3
  %476 = getelementptr inbounds float, float* %1, i64 9
  %477 = load float, float* %476, align 4
  %478 = insertelement <4 x float> zeroinitializer, float %477, i32 0
  %479 = getelementptr inbounds float, float* %1, i64 13
  %480 = load float, float* %479, align 4
  %481 = insertelement <4 x float> %478, float %480, i32 1
  %482 = insertelement <4 x float> %481, float 0.000000e+00, i32 2
  %483 = insertelement <4 x float> %482, float 0.000000e+00, i32 3
  %484 = call <4 x float> @llvm.fma.v4f32(<4 x float> %475, <4 x float> %483, <4 x float> %467)
  %485 = shufflevector <4 x float> %411, <4 x float> %484, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %486 = shufflevector <8 x float> %347, <8 x float> %485, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %487 = shufflevector <16 x float> %242, <16 x float> %486, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %488 = getelementptr inbounds float, float* %0, i64 4
  %489 = load float, float* %488, align 4
  %490 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %489, i32 2
  %491 = insertelement <4 x float> %490, float 1.000000e+00, i32 3
  %492 = getelementptr inbounds float, float* %1, i64 2
  %493 = load float, float* %492, align 4
  %494 = insertelement <4 x float> zeroinitializer, float %493, i32 2
  %495 = insertelement <4 x float> %494, float 0.000000e+00, i32 3
  %496 = fmul <4 x float> %491, %495
  %497 = getelementptr inbounds float, float* %0, i64 4
  %498 = load float, float* %497, align 4
  %499 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %498, i32 1
  %500 = insertelement <4 x float> %499, float 1.000000e+00, i32 2
  %501 = insertelement <4 x float> %500, float 1.000000e+00, i32 3
  %502 = getelementptr inbounds float, float* %1, i64 2
  %503 = load float, float* %502, align 4
  %504 = insertelement <4 x float> zeroinitializer, float %503, i32 1
  %505 = insertelement <4 x float> %504, float 0.000000e+00, i32 2
  %506 = insertelement <4 x float> %505, float 0.000000e+00, i32 3
  %507 = call <4 x float> @llvm.fma.v4f32(<4 x float> %501, <4 x float> %506, <4 x float> %496)
  %508 = getelementptr inbounds float, float* %0, i64 4
  %509 = load float, float* %508, align 4
  %510 = insertelement <4 x float> zeroinitializer, float %509, i32 0
  %511 = insertelement <4 x float> %510, float 1.000000e+00, i32 1
  %512 = getelementptr inbounds float, float* %0, i64 5
  %513 = load float, float* %512, align 4
  %514 = insertelement <4 x float> %511, float %513, i32 2
  %515 = insertelement <4 x float> %514, float 1.000000e+00, i32 3
  %516 = getelementptr inbounds float, float* %1, i64 2
  %517 = load float, float* %516, align 4
  %518 = insertelement <4 x float> zeroinitializer, float %517, i32 0
  %519 = insertelement <4 x float> %518, float 0.000000e+00, i32 1
  %520 = getelementptr inbounds float, float* %1, i64 6
  %521 = load float, float* %520, align 4
  %522 = insertelement <4 x float> %519, float %521, i32 2
  %523 = insertelement <4 x float> %522, float 0.000000e+00, i32 3
  %524 = call <4 x float> @llvm.fma.v4f32(<4 x float> %515, <4 x float> %523, <4 x float> %507)
  %525 = getelementptr inbounds float, float* %0, i64 5
  %526 = load float, float* %525, align 4
  %527 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %526, i32 1
  %528 = getelementptr inbounds float, float* %0, i64 6
  %529 = load float, float* %528, align 4
  %530 = insertelement <4 x float> %527, float %529, i32 2
  %531 = insertelement <4 x float> %530, float 1.000000e+00, i32 3
  %532 = getelementptr inbounds float, float* %1, i64 6
  %533 = load float, float* %532, align 4
  %534 = insertelement <4 x float> zeroinitializer, float %533, i32 1
  %535 = getelementptr inbounds float, float* %1, i64 10
  %536 = load float, float* %535, align 4
  %537 = insertelement <4 x float> %534, float %536, i32 2
  %538 = insertelement <4 x float> %537, float 0.000000e+00, i32 3
  %539 = call <4 x float> @llvm.fma.v4f32(<4 x float> %531, <4 x float> %538, <4 x float> %524)
  %540 = getelementptr inbounds float, float* %0, i64 5
  %541 = load float, float* %540, align 4
  %542 = insertelement <4 x float> zeroinitializer, float %541, i32 0
  %543 = getelementptr inbounds float, float* %0, i64 6
  %544 = load float, float* %543, align 4
  %545 = insertelement <4 x float> %542, float %544, i32 1
  %546 = getelementptr inbounds float, float* %0, i64 7
  %547 = load float, float* %546, align 4
  %548 = insertelement <4 x float> %545, float %547, i32 2
  %549 = insertelement <4 x float> %548, float 0.000000e+00, i32 3
  %550 = getelementptr inbounds float, float* %1, i64 6
  %551 = load float, float* %550, align 4
  %552 = insertelement <4 x float> zeroinitializer, float %551, i32 0
  %553 = getelementptr inbounds float, float* %1, i64 10
  %554 = load float, float* %553, align 4
  %555 = insertelement <4 x float> %552, float %554, i32 1
  %556 = getelementptr inbounds float, float* %1, i64 14
  %557 = load float, float* %556, align 4
  %558 = insertelement <4 x float> %555, float %557, i32 2
  %559 = insertelement <4 x float> %558, float 0.000000e+00, i32 3
  %560 = call <4 x float> @llvm.fma.v4f32(<4 x float> %549, <4 x float> %559, <4 x float> %539)
  %561 = getelementptr inbounds float, float* %0, i64 4
  %562 = load float, float* %561, align 4
  %563 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %562, i32 3
  %564 = getelementptr inbounds float, float* %1, i64 3
  %565 = load float, float* %564, align 4
  %566 = insertelement <4 x float> zeroinitializer, float %565, i32 3
  %567 = fmul <4 x float> %563, %566
  %568 = getelementptr inbounds float, float* %0, i64 4
  %569 = load float, float* %568, align 4
  %570 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %569, i32 2
  %571 = insertelement <4 x float> %570, float 1.000000e+00, i32 3
  %572 = getelementptr inbounds float, float* %1, i64 3
  %573 = load float, float* %572, align 4
  %574 = insertelement <4 x float> zeroinitializer, float %573, i32 2
  %575 = insertelement <4 x float> %574, float 0.000000e+00, i32 3
  %576 = call <4 x float> @llvm.fma.v4f32(<4 x float> %571, <4 x float> %575, <4 x float> %567)
  %577 = getelementptr inbounds float, float* %0, i64 4
  %578 = load float, float* %577, align 4
  %579 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %578, i32 1
  %580 = insertelement <4 x float> %579, float 1.000000e+00, i32 2
  %581 = getelementptr inbounds float, float* %0, i64 5
  %582 = load float, float* %581, align 4
  %583 = insertelement <4 x float> %580, float %582, i32 3
  %584 = getelementptr inbounds float, float* %1, i64 3
  %585 = load float, float* %584, align 4
  %586 = insertelement <4 x float> zeroinitializer, float %585, i32 1
  %587 = insertelement <4 x float> %586, float 0.000000e+00, i32 2
  %588 = getelementptr inbounds float, float* %1, i64 7
  %589 = load float, float* %588, align 4
  %590 = insertelement <4 x float> %587, float %589, i32 3
  %591 = call <4 x float> @llvm.fma.v4f32(<4 x float> %583, <4 x float> %590, <4 x float> %576)
  %592 = getelementptr inbounds float, float* %0, i64 5
  %593 = load float, float* %592, align 4
  %594 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %593, i32 2
  %595 = getelementptr inbounds float, float* %0, i64 6
  %596 = load float, float* %595, align 4
  %597 = insertelement <4 x float> %594, float %596, i32 3
  %598 = getelementptr inbounds float, float* %1, i64 7
  %599 = load float, float* %598, align 4
  %600 = insertelement <4 x float> zeroinitializer, float %599, i32 2
  %601 = getelementptr inbounds float, float* %1, i64 11
  %602 = load float, float* %601, align 4
  %603 = insertelement <4 x float> %600, float %602, i32 3
  %604 = call <4 x float> @llvm.fma.v4f32(<4 x float> %597, <4 x float> %603, <4 x float> %591)
  %605 = getelementptr inbounds float, float* %0, i64 4
  %606 = load float, float* %605, align 4
  %607 = insertelement <4 x float> zeroinitializer, float %606, i32 0
  %608 = getelementptr inbounds float, float* %0, i64 5
  %609 = load float, float* %608, align 4
  %610 = insertelement <4 x float> %607, float %609, i32 1
  %611 = getelementptr inbounds float, float* %0, i64 6
  %612 = load float, float* %611, align 4
  %613 = insertelement <4 x float> %610, float %612, i32 2
  %614 = getelementptr inbounds float, float* %0, i64 7
  %615 = load float, float* %614, align 4
  %616 = insertelement <4 x float> %613, float %615, i32 3
  %617 = getelementptr inbounds float, float* %1, i64 3
  %618 = load float, float* %617, align 4
  %619 = insertelement <4 x float> zeroinitializer, float %618, i32 0
  %620 = getelementptr inbounds float, float* %1, i64 7
  %621 = load float, float* %620, align 4
  %622 = insertelement <4 x float> %619, float %621, i32 1
  %623 = getelementptr inbounds float, float* %1, i64 11
  %624 = load float, float* %623, align 4
  %625 = insertelement <4 x float> %622, float %624, i32 2
  %626 = getelementptr inbounds float, float* %1, i64 15
  %627 = load float, float* %626, align 4
  %628 = insertelement <4 x float> %625, float %627, i32 3
  %629 = call <4 x float> @llvm.fma.v4f32(<4 x float> %616, <4 x float> %628, <4 x float> %604)
  %630 = shufflevector <4 x float> %560, <4 x float> %629, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %631 = getelementptr inbounds float, float* %0, i64 8
  %632 = load float, float* %631, align 4
  %633 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %632, i32 3
  %634 = load float, float* %1, align 4
  %635 = insertelement <4 x float> zeroinitializer, float %634, i32 3
  %636 = fmul <4 x float> %633, %635
  %637 = getelementptr inbounds float, float* %0, i64 8
  %638 = load float, float* %637, align 4
  %639 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %638, i32 2
  %640 = insertelement <4 x float> %639, float 1.000000e+00, i32 3
  %641 = load float, float* %1, align 4
  %642 = insertelement <4 x float> zeroinitializer, float %641, i32 2
  %643 = insertelement <4 x float> %642, float 0.000000e+00, i32 3
  %644 = call <4 x float> @llvm.fma.v4f32(<4 x float> %640, <4 x float> %643, <4 x float> %636)
  %645 = getelementptr inbounds float, float* %0, i64 9
  %646 = load float, float* %645, align 4
  %647 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %646, i32 3
  %648 = getelementptr inbounds float, float* %1, i64 4
  %649 = load float, float* %648, align 4
  %650 = insertelement <4 x float> zeroinitializer, float %649, i32 3
  %651 = call <4 x float> @llvm.fma.v4f32(<4 x float> %647, <4 x float> %650, <4 x float> %644)
  %652 = getelementptr inbounds float, float* %0, i64 8
  %653 = load float, float* %652, align 4
  %654 = insertelement <4 x float> zeroinitializer, float %653, i32 1
  %655 = getelementptr inbounds float, float* %0, i64 9
  %656 = load float, float* %655, align 4
  %657 = insertelement <4 x float> %654, float %656, i32 2
  %658 = getelementptr inbounds float, float* %0, i64 10
  %659 = load float, float* %658, align 4
  %660 = insertelement <4 x float> %657, float %659, i32 3
  %661 = load float, float* %1, align 4
  %662 = insertelement <4 x float> zeroinitializer, float %661, i32 1
  %663 = getelementptr inbounds float, float* %1, i64 4
  %664 = load float, float* %663, align 4
  %665 = insertelement <4 x float> %662, float %664, i32 2
  %666 = getelementptr inbounds float, float* %1, i64 8
  %667 = load float, float* %666, align 4
  %668 = insertelement <4 x float> %665, float %667, i32 3
  %669 = call <4 x float> @llvm.fma.v4f32(<4 x float> %660, <4 x float> %668, <4 x float> %651)
  %670 = getelementptr inbounds float, float* %0, i64 8
  %671 = load float, float* %670, align 4
  %672 = insertelement <4 x float> zeroinitializer, float %671, i32 0
  %673 = insertelement <4 x float> %672, float 1.000000e+00, i32 1
  %674 = insertelement <4 x float> %673, float 1.000000e+00, i32 2
  %675 = insertelement <4 x float> %674, float 1.000000e+00, i32 3
  %676 = load float, float* %1, align 4
  %677 = insertelement <4 x float> zeroinitializer, float %676, i32 0
  %678 = insertelement <4 x float> %677, float 0.000000e+00, i32 1
  %679 = insertelement <4 x float> %678, float 0.000000e+00, i32 2
  %680 = insertelement <4 x float> %679, float 0.000000e+00, i32 3
  %681 = fmul <4 x float> %675, %680
  %682 = fadd <4 x float> %681, zeroinitializer
  %683 = getelementptr inbounds float, float* %0, i64 9
  %684 = load float, float* %683, align 4
  %685 = insertelement <4 x float> zeroinitializer, float %684, i32 0
  %686 = insertelement <4 x float> %685, float 1.000000e+00, i32 1
  %687 = insertelement <4 x float> %686, float 1.000000e+00, i32 2
  %688 = getelementptr inbounds float, float* %0, i64 8
  %689 = load float, float* %688, align 4
  %690 = insertelement <4 x float> %687, float %689, i32 3
  %691 = getelementptr inbounds float, float* %1, i64 4
  %692 = load float, float* %691, align 4
  %693 = insertelement <4 x float> zeroinitializer, float %692, i32 0
  %694 = insertelement <4 x float> %693, float 0.000000e+00, i32 1
  %695 = insertelement <4 x float> %694, float 0.000000e+00, i32 2
  %696 = getelementptr inbounds float, float* %1, i64 1
  %697 = load float, float* %696, align 4
  %698 = insertelement <4 x float> %695, float %697, i32 3
  %699 = call <4 x float> @llvm.fma.v4f32(<4 x float> %690, <4 x float> %698, <4 x float> %682)
  %700 = getelementptr inbounds float, float* %0, i64 10
  %701 = load float, float* %700, align 4
  %702 = insertelement <4 x float> zeroinitializer, float %701, i32 0
  %703 = insertelement <4 x float> %702, float 1.000000e+00, i32 1
  %704 = insertelement <4 x float> %703, float 1.000000e+00, i32 2
  %705 = insertelement <4 x float> %704, float 1.000000e+00, i32 3
  %706 = getelementptr inbounds float, float* %1, i64 8
  %707 = load float, float* %706, align 4
  %708 = insertelement <4 x float> zeroinitializer, float %707, i32 0
  %709 = insertelement <4 x float> %708, float 0.000000e+00, i32 1
  %710 = insertelement <4 x float> %709, float 0.000000e+00, i32 2
  %711 = insertelement <4 x float> %710, float 0.000000e+00, i32 3
  %712 = call <4 x float> @llvm.fma.v4f32(<4 x float> %705, <4 x float> %711, <4 x float> %699)
  %713 = getelementptr inbounds float, float* %0, i64 11
  %714 = load float, float* %713, align 4
  %715 = insertelement <4 x float> zeroinitializer, float %714, i32 0
  %716 = insertelement <4 x float> %715, float 0.000000e+00, i32 1
  %717 = getelementptr inbounds float, float* %0, i64 8
  %718 = load float, float* %717, align 4
  %719 = insertelement <4 x float> %716, float %718, i32 2
  %720 = getelementptr inbounds float, float* %0, i64 9
  %721 = load float, float* %720, align 4
  %722 = insertelement <4 x float> %719, float %721, i32 3
  %723 = getelementptr inbounds float, float* %1, i64 12
  %724 = load float, float* %723, align 4
  %725 = insertelement <4 x float> zeroinitializer, float %724, i32 0
  %726 = insertelement <4 x float> %725, float 0.000000e+00, i32 1
  %727 = getelementptr inbounds float, float* %1, i64 1
  %728 = load float, float* %727, align 4
  %729 = insertelement <4 x float> %726, float %728, i32 2
  %730 = getelementptr inbounds float, float* %1, i64 5
  %731 = load float, float* %730, align 4
  %732 = insertelement <4 x float> %729, float %731, i32 3
  %733 = call <4 x float> @llvm.fma.v4f32(<4 x float> %722, <4 x float> %732, <4 x float> %712)
  %734 = shufflevector <4 x float> %669, <4 x float> %733, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %735 = shufflevector <8 x float> %630, <8 x float> %734, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %736 = getelementptr inbounds float, float* %0, i64 8
  %737 = load float, float* %736, align 4
  %738 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %737, i32 1
  %739 = insertelement <4 x float> %738, float 1.000000e+00, i32 2
  %740 = insertelement <4 x float> %739, float 1.000000e+00, i32 3
  %741 = getelementptr inbounds float, float* %1, i64 1
  %742 = load float, float* %741, align 4
  %743 = insertelement <4 x float> zeroinitializer, float %742, i32 1
  %744 = insertelement <4 x float> %743, float 0.000000e+00, i32 2
  %745 = insertelement <4 x float> %744, float 0.000000e+00, i32 3
  %746 = fmul <4 x float> %740, %745
  %747 = getelementptr inbounds float, float* %0, i64 8
  %748 = load float, float* %747, align 4
  %749 = insertelement <4 x float> zeroinitializer, float %748, i32 0
  %750 = insertelement <4 x float> %749, float 1.000000e+00, i32 1
  %751 = insertelement <4 x float> %750, float 1.000000e+00, i32 2
  %752 = insertelement <4 x float> %751, float 1.000000e+00, i32 3
  %753 = getelementptr inbounds float, float* %1, i64 1
  %754 = load float, float* %753, align 4
  %755 = insertelement <4 x float> zeroinitializer, float %754, i32 0
  %756 = insertelement <4 x float> %755, float 0.000000e+00, i32 1
  %757 = insertelement <4 x float> %756, float 0.000000e+00, i32 2
  %758 = insertelement <4 x float> %757, float 0.000000e+00, i32 3
  %759 = call <4 x float> @llvm.fma.v4f32(<4 x float> %752, <4 x float> %758, <4 x float> %746)
  %760 = getelementptr inbounds float, float* %0, i64 9
  %761 = load float, float* %760, align 4
  %762 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %761, i32 1
  %763 = insertelement <4 x float> %762, float 1.000000e+00, i32 2
  %764 = insertelement <4 x float> %763, float 1.000000e+00, i32 3
  %765 = getelementptr inbounds float, float* %1, i64 5
  %766 = load float, float* %765, align 4
  %767 = insertelement <4 x float> zeroinitializer, float %766, i32 1
  %768 = insertelement <4 x float> %767, float 0.000000e+00, i32 2
  %769 = insertelement <4 x float> %768, float 0.000000e+00, i32 3
  %770 = call <4 x float> @llvm.fma.v4f32(<4 x float> %764, <4 x float> %769, <4 x float> %759)
  %771 = getelementptr inbounds float, float* %0, i64 9
  %772 = load float, float* %771, align 4
  %773 = insertelement <4 x float> zeroinitializer, float %772, i32 0
  %774 = getelementptr inbounds float, float* %0, i64 10
  %775 = load float, float* %774, align 4
  %776 = insertelement <4 x float> %773, float %775, i32 1
  %777 = insertelement <4 x float> %776, float 1.000000e+00, i32 2
  %778 = getelementptr inbounds float, float* %0, i64 8
  %779 = load float, float* %778, align 4
  %780 = insertelement <4 x float> %777, float %779, i32 3
  %781 = getelementptr inbounds float, float* %1, i64 5
  %782 = load float, float* %781, align 4
  %783 = insertelement <4 x float> zeroinitializer, float %782, i32 0
  %784 = getelementptr inbounds float, float* %1, i64 9
  %785 = load float, float* %784, align 4
  %786 = insertelement <4 x float> %783, float %785, i32 1
  %787 = insertelement <4 x float> %786, float 0.000000e+00, i32 2
  %788 = getelementptr inbounds float, float* %1, i64 2
  %789 = load float, float* %788, align 4
  %790 = insertelement <4 x float> %787, float %789, i32 3
  %791 = call <4 x float> @llvm.fma.v4f32(<4 x float> %780, <4 x float> %790, <4 x float> %770)
  %792 = getelementptr inbounds float, float* %0, i64 10
  %793 = load float, float* %792, align 4
  %794 = insertelement <4 x float> zeroinitializer, float %793, i32 0
  %795 = getelementptr inbounds float, float* %0, i64 11
  %796 = load float, float* %795, align 4
  %797 = insertelement <4 x float> %794, float %796, i32 1
  %798 = insertelement <4 x float> %797, float 1.000000e+00, i32 2
  %799 = insertelement <4 x float> %798, float 1.000000e+00, i32 3
  %800 = getelementptr inbounds float, float* %1, i64 9
  %801 = load float, float* %800, align 4
  %802 = insertelement <4 x float> zeroinitializer, float %801, i32 0
  %803 = getelementptr inbounds float, float* %1, i64 13
  %804 = load float, float* %803, align 4
  %805 = insertelement <4 x float> %802, float %804, i32 1
  %806 = insertelement <4 x float> %805, float 0.000000e+00, i32 2
  %807 = insertelement <4 x float> %806, float 0.000000e+00, i32 3
  %808 = call <4 x float> @llvm.fma.v4f32(<4 x float> %799, <4 x float> %807, <4 x float> %791)
  %809 = getelementptr inbounds float, float* %0, i64 8
  %810 = load float, float* %809, align 4
  %811 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %810, i32 2
  %812 = insertelement <4 x float> %811, float 1.000000e+00, i32 3
  %813 = getelementptr inbounds float, float* %1, i64 2
  %814 = load float, float* %813, align 4
  %815 = insertelement <4 x float> zeroinitializer, float %814, i32 2
  %816 = insertelement <4 x float> %815, float 0.000000e+00, i32 3
  %817 = fmul <4 x float> %812, %816
  %818 = getelementptr inbounds float, float* %0, i64 8
  %819 = load float, float* %818, align 4
  %820 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %819, i32 1
  %821 = insertelement <4 x float> %820, float 1.000000e+00, i32 2
  %822 = insertelement <4 x float> %821, float 1.000000e+00, i32 3
  %823 = getelementptr inbounds float, float* %1, i64 2
  %824 = load float, float* %823, align 4
  %825 = insertelement <4 x float> zeroinitializer, float %824, i32 1
  %826 = insertelement <4 x float> %825, float 0.000000e+00, i32 2
  %827 = insertelement <4 x float> %826, float 0.000000e+00, i32 3
  %828 = call <4 x float> @llvm.fma.v4f32(<4 x float> %822, <4 x float> %827, <4 x float> %817)
  %829 = getelementptr inbounds float, float* %0, i64 8
  %830 = load float, float* %829, align 4
  %831 = insertelement <4 x float> zeroinitializer, float %830, i32 0
  %832 = insertelement <4 x float> %831, float 1.000000e+00, i32 1
  %833 = getelementptr inbounds float, float* %0, i64 9
  %834 = load float, float* %833, align 4
  %835 = insertelement <4 x float> %832, float %834, i32 2
  %836 = insertelement <4 x float> %835, float 1.000000e+00, i32 3
  %837 = getelementptr inbounds float, float* %1, i64 2
  %838 = load float, float* %837, align 4
  %839 = insertelement <4 x float> zeroinitializer, float %838, i32 0
  %840 = insertelement <4 x float> %839, float 0.000000e+00, i32 1
  %841 = getelementptr inbounds float, float* %1, i64 6
  %842 = load float, float* %841, align 4
  %843 = insertelement <4 x float> %840, float %842, i32 2
  %844 = insertelement <4 x float> %843, float 0.000000e+00, i32 3
  %845 = call <4 x float> @llvm.fma.v4f32(<4 x float> %836, <4 x float> %844, <4 x float> %828)
  %846 = getelementptr inbounds float, float* %0, i64 9
  %847 = load float, float* %846, align 4
  %848 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %847, i32 1
  %849 = getelementptr inbounds float, float* %0, i64 10
  %850 = load float, float* %849, align 4
  %851 = insertelement <4 x float> %848, float %850, i32 2
  %852 = insertelement <4 x float> %851, float 1.000000e+00, i32 3
  %853 = getelementptr inbounds float, float* %1, i64 6
  %854 = load float, float* %853, align 4
  %855 = insertelement <4 x float> zeroinitializer, float %854, i32 1
  %856 = getelementptr inbounds float, float* %1, i64 10
  %857 = load float, float* %856, align 4
  %858 = insertelement <4 x float> %855, float %857, i32 2
  %859 = insertelement <4 x float> %858, float 0.000000e+00, i32 3
  %860 = call <4 x float> @llvm.fma.v4f32(<4 x float> %852, <4 x float> %859, <4 x float> %845)
  %861 = getelementptr inbounds float, float* %0, i64 9
  %862 = load float, float* %861, align 4
  %863 = insertelement <4 x float> zeroinitializer, float %862, i32 0
  %864 = getelementptr inbounds float, float* %0, i64 10
  %865 = load float, float* %864, align 4
  %866 = insertelement <4 x float> %863, float %865, i32 1
  %867 = getelementptr inbounds float, float* %0, i64 11
  %868 = load float, float* %867, align 4
  %869 = insertelement <4 x float> %866, float %868, i32 2
  %870 = insertelement <4 x float> %869, float 0.000000e+00, i32 3
  %871 = getelementptr inbounds float, float* %1, i64 6
  %872 = load float, float* %871, align 4
  %873 = insertelement <4 x float> zeroinitializer, float %872, i32 0
  %874 = getelementptr inbounds float, float* %1, i64 10
  %875 = load float, float* %874, align 4
  %876 = insertelement <4 x float> %873, float %875, i32 1
  %877 = getelementptr inbounds float, float* %1, i64 14
  %878 = load float, float* %877, align 4
  %879 = insertelement <4 x float> %876, float %878, i32 2
  %880 = insertelement <4 x float> %879, float 0.000000e+00, i32 3
  %881 = call <4 x float> @llvm.fma.v4f32(<4 x float> %870, <4 x float> %880, <4 x float> %860)
  %882 = shufflevector <4 x float> %808, <4 x float> %881, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %883 = getelementptr inbounds float, float* %0, i64 8
  %884 = load float, float* %883, align 4
  %885 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %884, i32 3
  %886 = getelementptr inbounds float, float* %1, i64 3
  %887 = load float, float* %886, align 4
  %888 = insertelement <4 x float> zeroinitializer, float %887, i32 3
  %889 = fmul <4 x float> %885, %888
  %890 = getelementptr inbounds float, float* %0, i64 8
  %891 = load float, float* %890, align 4
  %892 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %891, i32 2
  %893 = insertelement <4 x float> %892, float 1.000000e+00, i32 3
  %894 = getelementptr inbounds float, float* %1, i64 3
  %895 = load float, float* %894, align 4
  %896 = insertelement <4 x float> zeroinitializer, float %895, i32 2
  %897 = insertelement <4 x float> %896, float 0.000000e+00, i32 3
  %898 = call <4 x float> @llvm.fma.v4f32(<4 x float> %893, <4 x float> %897, <4 x float> %889)
  %899 = getelementptr inbounds float, float* %0, i64 8
  %900 = load float, float* %899, align 4
  %901 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %900, i32 1
  %902 = insertelement <4 x float> %901, float 1.000000e+00, i32 2
  %903 = getelementptr inbounds float, float* %0, i64 9
  %904 = load float, float* %903, align 4
  %905 = insertelement <4 x float> %902, float %904, i32 3
  %906 = getelementptr inbounds float, float* %1, i64 3
  %907 = load float, float* %906, align 4
  %908 = insertelement <4 x float> zeroinitializer, float %907, i32 1
  %909 = insertelement <4 x float> %908, float 0.000000e+00, i32 2
  %910 = getelementptr inbounds float, float* %1, i64 7
  %911 = load float, float* %910, align 4
  %912 = insertelement <4 x float> %909, float %911, i32 3
  %913 = call <4 x float> @llvm.fma.v4f32(<4 x float> %905, <4 x float> %912, <4 x float> %898)
  %914 = getelementptr inbounds float, float* %0, i64 9
  %915 = load float, float* %914, align 4
  %916 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %915, i32 2
  %917 = getelementptr inbounds float, float* %0, i64 10
  %918 = load float, float* %917, align 4
  %919 = insertelement <4 x float> %916, float %918, i32 3
  %920 = getelementptr inbounds float, float* %1, i64 7
  %921 = load float, float* %920, align 4
  %922 = insertelement <4 x float> zeroinitializer, float %921, i32 2
  %923 = getelementptr inbounds float, float* %1, i64 11
  %924 = load float, float* %923, align 4
  %925 = insertelement <4 x float> %922, float %924, i32 3
  %926 = call <4 x float> @llvm.fma.v4f32(<4 x float> %919, <4 x float> %925, <4 x float> %913)
  %927 = getelementptr inbounds float, float* %0, i64 8
  %928 = load float, float* %927, align 4
  %929 = insertelement <4 x float> zeroinitializer, float %928, i32 0
  %930 = getelementptr inbounds float, float* %0, i64 9
  %931 = load float, float* %930, align 4
  %932 = insertelement <4 x float> %929, float %931, i32 1
  %933 = getelementptr inbounds float, float* %0, i64 10
  %934 = load float, float* %933, align 4
  %935 = insertelement <4 x float> %932, float %934, i32 2
  %936 = getelementptr inbounds float, float* %0, i64 11
  %937 = load float, float* %936, align 4
  %938 = insertelement <4 x float> %935, float %937, i32 3
  %939 = getelementptr inbounds float, float* %1, i64 3
  %940 = load float, float* %939, align 4
  %941 = insertelement <4 x float> zeroinitializer, float %940, i32 0
  %942 = getelementptr inbounds float, float* %1, i64 7
  %943 = load float, float* %942, align 4
  %944 = insertelement <4 x float> %941, float %943, i32 1
  %945 = getelementptr inbounds float, float* %1, i64 11
  %946 = load float, float* %945, align 4
  %947 = insertelement <4 x float> %944, float %946, i32 2
  %948 = getelementptr inbounds float, float* %1, i64 15
  %949 = load float, float* %948, align 4
  %950 = insertelement <4 x float> %947, float %949, i32 3
  %951 = call <4 x float> @llvm.fma.v4f32(<4 x float> %938, <4 x float> %950, <4 x float> %926)
  %952 = getelementptr inbounds float, float* %0, i64 12
  %953 = load float, float* %952, align 4
  %954 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %953, i32 3
  %955 = load float, float* %1, align 4
  %956 = insertelement <4 x float> zeroinitializer, float %955, i32 3
  %957 = fmul <4 x float> %954, %956
  %958 = getelementptr inbounds float, float* %0, i64 12
  %959 = load float, float* %958, align 4
  %960 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %959, i32 2
  %961 = insertelement <4 x float> %960, float 1.000000e+00, i32 3
  %962 = load float, float* %1, align 4
  %963 = insertelement <4 x float> zeroinitializer, float %962, i32 2
  %964 = insertelement <4 x float> %963, float 0.000000e+00, i32 3
  %965 = call <4 x float> @llvm.fma.v4f32(<4 x float> %961, <4 x float> %964, <4 x float> %957)
  %966 = getelementptr inbounds float, float* %0, i64 13
  %967 = load float, float* %966, align 4
  %968 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %967, i32 3
  %969 = getelementptr inbounds float, float* %1, i64 4
  %970 = load float, float* %969, align 4
  %971 = insertelement <4 x float> zeroinitializer, float %970, i32 3
  %972 = call <4 x float> @llvm.fma.v4f32(<4 x float> %968, <4 x float> %971, <4 x float> %965)
  %973 = getelementptr inbounds float, float* %0, i64 12
  %974 = load float, float* %973, align 4
  %975 = insertelement <4 x float> zeroinitializer, float %974, i32 1
  %976 = getelementptr inbounds float, float* %0, i64 13
  %977 = load float, float* %976, align 4
  %978 = insertelement <4 x float> %975, float %977, i32 2
  %979 = getelementptr inbounds float, float* %0, i64 14
  %980 = load float, float* %979, align 4
  %981 = insertelement <4 x float> %978, float %980, i32 3
  %982 = load float, float* %1, align 4
  %983 = insertelement <4 x float> zeroinitializer, float %982, i32 1
  %984 = getelementptr inbounds float, float* %1, i64 4
  %985 = load float, float* %984, align 4
  %986 = insertelement <4 x float> %983, float %985, i32 2
  %987 = getelementptr inbounds float, float* %1, i64 8
  %988 = load float, float* %987, align 4
  %989 = insertelement <4 x float> %986, float %988, i32 3
  %990 = call <4 x float> @llvm.fma.v4f32(<4 x float> %981, <4 x float> %989, <4 x float> %972)
  %991 = shufflevector <4 x float> %951, <4 x float> %990, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %992 = shufflevector <8 x float> %882, <8 x float> %991, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %993 = shufflevector <16 x float> %735, <16 x float> %992, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %994 = shufflevector <32 x float> %487, <32 x float> %993, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %995 = getelementptr inbounds float, float* %0, i64 12
  %996 = load float, float* %995, align 4
  %997 = insertelement <4 x float> zeroinitializer, float %996, i32 0
  %998 = insertelement <4 x float> %997, float 1.000000e+00, i32 1
  %999 = insertelement <4 x float> %998, float 1.000000e+00, i32 2
  %1000 = insertelement <4 x float> %999, float 1.000000e+00, i32 3
  %1001 = load float, float* %1, align 4
  %1002 = insertelement <4 x float> zeroinitializer, float %1001, i32 0
  %1003 = insertelement <4 x float> %1002, float 0.000000e+00, i32 1
  %1004 = insertelement <4 x float> %1003, float 0.000000e+00, i32 2
  %1005 = insertelement <4 x float> %1004, float 0.000000e+00, i32 3
  %1006 = fmul <4 x float> %1000, %1005
  %1007 = fadd <4 x float> %1006, zeroinitializer
  %1008 = getelementptr inbounds float, float* %0, i64 13
  %1009 = load float, float* %1008, align 4
  %1010 = insertelement <4 x float> zeroinitializer, float %1009, i32 0
  %1011 = insertelement <4 x float> %1010, float 1.000000e+00, i32 1
  %1012 = insertelement <4 x float> %1011, float 1.000000e+00, i32 2
  %1013 = getelementptr inbounds float, float* %0, i64 12
  %1014 = load float, float* %1013, align 4
  %1015 = insertelement <4 x float> %1012, float %1014, i32 3
  %1016 = getelementptr inbounds float, float* %1, i64 4
  %1017 = load float, float* %1016, align 4
  %1018 = insertelement <4 x float> zeroinitializer, float %1017, i32 0
  %1019 = insertelement <4 x float> %1018, float 0.000000e+00, i32 1
  %1020 = insertelement <4 x float> %1019, float 0.000000e+00, i32 2
  %1021 = getelementptr inbounds float, float* %1, i64 1
  %1022 = load float, float* %1021, align 4
  %1023 = insertelement <4 x float> %1020, float %1022, i32 3
  %1024 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1015, <4 x float> %1023, <4 x float> %1007)
  %1025 = getelementptr inbounds float, float* %0, i64 14
  %1026 = load float, float* %1025, align 4
  %1027 = insertelement <4 x float> zeroinitializer, float %1026, i32 0
  %1028 = insertelement <4 x float> %1027, float 1.000000e+00, i32 1
  %1029 = insertelement <4 x float> %1028, float 1.000000e+00, i32 2
  %1030 = insertelement <4 x float> %1029, float 1.000000e+00, i32 3
  %1031 = getelementptr inbounds float, float* %1, i64 8
  %1032 = load float, float* %1031, align 4
  %1033 = insertelement <4 x float> zeroinitializer, float %1032, i32 0
  %1034 = insertelement <4 x float> %1033, float 0.000000e+00, i32 1
  %1035 = insertelement <4 x float> %1034, float 0.000000e+00, i32 2
  %1036 = insertelement <4 x float> %1035, float 0.000000e+00, i32 3
  %1037 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1030, <4 x float> %1036, <4 x float> %1024)
  %1038 = getelementptr inbounds float, float* %0, i64 15
  %1039 = load float, float* %1038, align 4
  %1040 = insertelement <4 x float> zeroinitializer, float %1039, i32 0
  %1041 = insertelement <4 x float> %1040, float 0.000000e+00, i32 1
  %1042 = getelementptr inbounds float, float* %0, i64 12
  %1043 = load float, float* %1042, align 4
  %1044 = insertelement <4 x float> %1041, float %1043, i32 2
  %1045 = getelementptr inbounds float, float* %0, i64 13
  %1046 = load float, float* %1045, align 4
  %1047 = insertelement <4 x float> %1044, float %1046, i32 3
  %1048 = getelementptr inbounds float, float* %1, i64 12
  %1049 = load float, float* %1048, align 4
  %1050 = insertelement <4 x float> zeroinitializer, float %1049, i32 0
  %1051 = insertelement <4 x float> %1050, float 0.000000e+00, i32 1
  %1052 = getelementptr inbounds float, float* %1, i64 1
  %1053 = load float, float* %1052, align 4
  %1054 = insertelement <4 x float> %1051, float %1053, i32 2
  %1055 = getelementptr inbounds float, float* %1, i64 5
  %1056 = load float, float* %1055, align 4
  %1057 = insertelement <4 x float> %1054, float %1056, i32 3
  %1058 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1047, <4 x float> %1057, <4 x float> %1037)
  %1059 = getelementptr inbounds float, float* %0, i64 12
  %1060 = load float, float* %1059, align 4
  %1061 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1060, i32 1
  %1062 = insertelement <4 x float> %1061, float 1.000000e+00, i32 2
  %1063 = insertelement <4 x float> %1062, float 1.000000e+00, i32 3
  %1064 = getelementptr inbounds float, float* %1, i64 1
  %1065 = load float, float* %1064, align 4
  %1066 = insertelement <4 x float> zeroinitializer, float %1065, i32 1
  %1067 = insertelement <4 x float> %1066, float 0.000000e+00, i32 2
  %1068 = insertelement <4 x float> %1067, float 0.000000e+00, i32 3
  %1069 = fmul <4 x float> %1063, %1068
  %1070 = getelementptr inbounds float, float* %0, i64 12
  %1071 = load float, float* %1070, align 4
  %1072 = insertelement <4 x float> zeroinitializer, float %1071, i32 0
  %1073 = insertelement <4 x float> %1072, float 1.000000e+00, i32 1
  %1074 = insertelement <4 x float> %1073, float 1.000000e+00, i32 2
  %1075 = insertelement <4 x float> %1074, float 1.000000e+00, i32 3
  %1076 = getelementptr inbounds float, float* %1, i64 1
  %1077 = load float, float* %1076, align 4
  %1078 = insertelement <4 x float> zeroinitializer, float %1077, i32 0
  %1079 = insertelement <4 x float> %1078, float 0.000000e+00, i32 1
  %1080 = insertelement <4 x float> %1079, float 0.000000e+00, i32 2
  %1081 = insertelement <4 x float> %1080, float 0.000000e+00, i32 3
  %1082 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1075, <4 x float> %1081, <4 x float> %1069)
  %1083 = getelementptr inbounds float, float* %0, i64 13
  %1084 = load float, float* %1083, align 4
  %1085 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1084, i32 1
  %1086 = insertelement <4 x float> %1085, float 1.000000e+00, i32 2
  %1087 = insertelement <4 x float> %1086, float 1.000000e+00, i32 3
  %1088 = getelementptr inbounds float, float* %1, i64 5
  %1089 = load float, float* %1088, align 4
  %1090 = insertelement <4 x float> zeroinitializer, float %1089, i32 1
  %1091 = insertelement <4 x float> %1090, float 0.000000e+00, i32 2
  %1092 = insertelement <4 x float> %1091, float 0.000000e+00, i32 3
  %1093 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1087, <4 x float> %1092, <4 x float> %1082)
  %1094 = getelementptr inbounds float, float* %0, i64 13
  %1095 = load float, float* %1094, align 4
  %1096 = insertelement <4 x float> zeroinitializer, float %1095, i32 0
  %1097 = getelementptr inbounds float, float* %0, i64 14
  %1098 = load float, float* %1097, align 4
  %1099 = insertelement <4 x float> %1096, float %1098, i32 1
  %1100 = insertelement <4 x float> %1099, float 1.000000e+00, i32 2
  %1101 = getelementptr inbounds float, float* %0, i64 12
  %1102 = load float, float* %1101, align 4
  %1103 = insertelement <4 x float> %1100, float %1102, i32 3
  %1104 = getelementptr inbounds float, float* %1, i64 5
  %1105 = load float, float* %1104, align 4
  %1106 = insertelement <4 x float> zeroinitializer, float %1105, i32 0
  %1107 = getelementptr inbounds float, float* %1, i64 9
  %1108 = load float, float* %1107, align 4
  %1109 = insertelement <4 x float> %1106, float %1108, i32 1
  %1110 = insertelement <4 x float> %1109, float 0.000000e+00, i32 2
  %1111 = getelementptr inbounds float, float* %1, i64 2
  %1112 = load float, float* %1111, align 4
  %1113 = insertelement <4 x float> %1110, float %1112, i32 3
  %1114 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1103, <4 x float> %1113, <4 x float> %1093)
  %1115 = getelementptr inbounds float, float* %0, i64 14
  %1116 = load float, float* %1115, align 4
  %1117 = insertelement <4 x float> zeroinitializer, float %1116, i32 0
  %1118 = getelementptr inbounds float, float* %0, i64 15
  %1119 = load float, float* %1118, align 4
  %1120 = insertelement <4 x float> %1117, float %1119, i32 1
  %1121 = insertelement <4 x float> %1120, float 1.000000e+00, i32 2
  %1122 = insertelement <4 x float> %1121, float 1.000000e+00, i32 3
  %1123 = getelementptr inbounds float, float* %1, i64 9
  %1124 = load float, float* %1123, align 4
  %1125 = insertelement <4 x float> zeroinitializer, float %1124, i32 0
  %1126 = getelementptr inbounds float, float* %1, i64 13
  %1127 = load float, float* %1126, align 4
  %1128 = insertelement <4 x float> %1125, float %1127, i32 1
  %1129 = insertelement <4 x float> %1128, float 0.000000e+00, i32 2
  %1130 = insertelement <4 x float> %1129, float 0.000000e+00, i32 3
  %1131 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1122, <4 x float> %1130, <4 x float> %1114)
  %1132 = shufflevector <4 x float> %1058, <4 x float> %1131, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1133 = getelementptr inbounds float, float* %0, i64 12
  %1134 = load float, float* %1133, align 4
  %1135 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1134, i32 2
  %1136 = insertelement <4 x float> %1135, float 1.000000e+00, i32 3
  %1137 = getelementptr inbounds float, float* %1, i64 2
  %1138 = load float, float* %1137, align 4
  %1139 = insertelement <4 x float> zeroinitializer, float %1138, i32 2
  %1140 = insertelement <4 x float> %1139, float 0.000000e+00, i32 3
  %1141 = fmul <4 x float> %1136, %1140
  %1142 = getelementptr inbounds float, float* %0, i64 12
  %1143 = load float, float* %1142, align 4
  %1144 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1143, i32 1
  %1145 = insertelement <4 x float> %1144, float 1.000000e+00, i32 2
  %1146 = insertelement <4 x float> %1145, float 1.000000e+00, i32 3
  %1147 = getelementptr inbounds float, float* %1, i64 2
  %1148 = load float, float* %1147, align 4
  %1149 = insertelement <4 x float> zeroinitializer, float %1148, i32 1
  %1150 = insertelement <4 x float> %1149, float 0.000000e+00, i32 2
  %1151 = insertelement <4 x float> %1150, float 0.000000e+00, i32 3
  %1152 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1146, <4 x float> %1151, <4 x float> %1141)
  %1153 = getelementptr inbounds float, float* %0, i64 12
  %1154 = load float, float* %1153, align 4
  %1155 = insertelement <4 x float> zeroinitializer, float %1154, i32 0
  %1156 = insertelement <4 x float> %1155, float 1.000000e+00, i32 1
  %1157 = getelementptr inbounds float, float* %0, i64 13
  %1158 = load float, float* %1157, align 4
  %1159 = insertelement <4 x float> %1156, float %1158, i32 2
  %1160 = insertelement <4 x float> %1159, float 1.000000e+00, i32 3
  %1161 = getelementptr inbounds float, float* %1, i64 2
  %1162 = load float, float* %1161, align 4
  %1163 = insertelement <4 x float> zeroinitializer, float %1162, i32 0
  %1164 = insertelement <4 x float> %1163, float 0.000000e+00, i32 1
  %1165 = getelementptr inbounds float, float* %1, i64 6
  %1166 = load float, float* %1165, align 4
  %1167 = insertelement <4 x float> %1164, float %1166, i32 2
  %1168 = insertelement <4 x float> %1167, float 0.000000e+00, i32 3
  %1169 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1160, <4 x float> %1168, <4 x float> %1152)
  %1170 = getelementptr inbounds float, float* %0, i64 13
  %1171 = load float, float* %1170, align 4
  %1172 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1171, i32 1
  %1173 = getelementptr inbounds float, float* %0, i64 14
  %1174 = load float, float* %1173, align 4
  %1175 = insertelement <4 x float> %1172, float %1174, i32 2
  %1176 = insertelement <4 x float> %1175, float 1.000000e+00, i32 3
  %1177 = getelementptr inbounds float, float* %1, i64 6
  %1178 = load float, float* %1177, align 4
  %1179 = insertelement <4 x float> zeroinitializer, float %1178, i32 1
  %1180 = getelementptr inbounds float, float* %1, i64 10
  %1181 = load float, float* %1180, align 4
  %1182 = insertelement <4 x float> %1179, float %1181, i32 2
  %1183 = insertelement <4 x float> %1182, float 0.000000e+00, i32 3
  %1184 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1176, <4 x float> %1183, <4 x float> %1169)
  %1185 = getelementptr inbounds float, float* %0, i64 13
  %1186 = load float, float* %1185, align 4
  %1187 = insertelement <4 x float> zeroinitializer, float %1186, i32 0
  %1188 = getelementptr inbounds float, float* %0, i64 14
  %1189 = load float, float* %1188, align 4
  %1190 = insertelement <4 x float> %1187, float %1189, i32 1
  %1191 = getelementptr inbounds float, float* %0, i64 15
  %1192 = load float, float* %1191, align 4
  %1193 = insertelement <4 x float> %1190, float %1192, i32 2
  %1194 = insertelement <4 x float> %1193, float 0.000000e+00, i32 3
  %1195 = getelementptr inbounds float, float* %1, i64 6
  %1196 = load float, float* %1195, align 4
  %1197 = insertelement <4 x float> zeroinitializer, float %1196, i32 0
  %1198 = getelementptr inbounds float, float* %1, i64 10
  %1199 = load float, float* %1198, align 4
  %1200 = insertelement <4 x float> %1197, float %1199, i32 1
  %1201 = getelementptr inbounds float, float* %1, i64 14
  %1202 = load float, float* %1201, align 4
  %1203 = insertelement <4 x float> %1200, float %1202, i32 2
  %1204 = insertelement <4 x float> %1203, float 0.000000e+00, i32 3
  %1205 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1194, <4 x float> %1204, <4 x float> %1184)
  %1206 = getelementptr inbounds float, float* %0, i64 12
  %1207 = load float, float* %1206, align 4
  %1208 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1207, i32 3
  %1209 = getelementptr inbounds float, float* %1, i64 3
  %1210 = load float, float* %1209, align 4
  %1211 = insertelement <4 x float> zeroinitializer, float %1210, i32 3
  %1212 = fmul <4 x float> %1208, %1211
  %1213 = getelementptr inbounds float, float* %0, i64 12
  %1214 = load float, float* %1213, align 4
  %1215 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1214, i32 2
  %1216 = insertelement <4 x float> %1215, float 1.000000e+00, i32 3
  %1217 = getelementptr inbounds float, float* %1, i64 3
  %1218 = load float, float* %1217, align 4
  %1219 = insertelement <4 x float> zeroinitializer, float %1218, i32 2
  %1220 = insertelement <4 x float> %1219, float 0.000000e+00, i32 3
  %1221 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1216, <4 x float> %1220, <4 x float> %1212)
  %1222 = getelementptr inbounds float, float* %0, i64 12
  %1223 = load float, float* %1222, align 4
  %1224 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1223, i32 1
  %1225 = insertelement <4 x float> %1224, float 1.000000e+00, i32 2
  %1226 = getelementptr inbounds float, float* %0, i64 13
  %1227 = load float, float* %1226, align 4
  %1228 = insertelement <4 x float> %1225, float %1227, i32 3
  %1229 = getelementptr inbounds float, float* %1, i64 3
  %1230 = load float, float* %1229, align 4
  %1231 = insertelement <4 x float> zeroinitializer, float %1230, i32 1
  %1232 = insertelement <4 x float> %1231, float 0.000000e+00, i32 2
  %1233 = getelementptr inbounds float, float* %1, i64 7
  %1234 = load float, float* %1233, align 4
  %1235 = insertelement <4 x float> %1232, float %1234, i32 3
  %1236 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1228, <4 x float> %1235, <4 x float> %1221)
  %1237 = getelementptr inbounds float, float* %0, i64 13
  %1238 = load float, float* %1237, align 4
  %1239 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1238, i32 2
  %1240 = getelementptr inbounds float, float* %0, i64 14
  %1241 = load float, float* %1240, align 4
  %1242 = insertelement <4 x float> %1239, float %1241, i32 3
  %1243 = getelementptr inbounds float, float* %1, i64 7
  %1244 = load float, float* %1243, align 4
  %1245 = insertelement <4 x float> zeroinitializer, float %1244, i32 2
  %1246 = getelementptr inbounds float, float* %1, i64 11
  %1247 = load float, float* %1246, align 4
  %1248 = insertelement <4 x float> %1245, float %1247, i32 3
  %1249 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1242, <4 x float> %1248, <4 x float> %1236)
  %1250 = getelementptr inbounds float, float* %0, i64 12
  %1251 = load float, float* %1250, align 4
  %1252 = insertelement <4 x float> zeroinitializer, float %1251, i32 0
  %1253 = getelementptr inbounds float, float* %0, i64 13
  %1254 = load float, float* %1253, align 4
  %1255 = insertelement <4 x float> %1252, float %1254, i32 1
  %1256 = getelementptr inbounds float, float* %0, i64 14
  %1257 = load float, float* %1256, align 4
  %1258 = insertelement <4 x float> %1255, float %1257, i32 2
  %1259 = getelementptr inbounds float, float* %0, i64 15
  %1260 = load float, float* %1259, align 4
  %1261 = insertelement <4 x float> %1258, float %1260, i32 3
  %1262 = getelementptr inbounds float, float* %1, i64 3
  %1263 = load float, float* %1262, align 4
  %1264 = insertelement <4 x float> zeroinitializer, float %1263, i32 0
  %1265 = getelementptr inbounds float, float* %1, i64 7
  %1266 = load float, float* %1265, align 4
  %1267 = insertelement <4 x float> %1264, float %1266, i32 1
  %1268 = getelementptr inbounds float, float* %1, i64 11
  %1269 = load float, float* %1268, align 4
  %1270 = insertelement <4 x float> %1267, float %1269, i32 2
  %1271 = getelementptr inbounds float, float* %1, i64 15
  %1272 = load float, float* %1271, align 4
  %1273 = insertelement <4 x float> %1270, float %1272, i32 3
  %1274 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1261, <4 x float> %1273, <4 x float> %1249)
  %1275 = shufflevector <4 x float> %1205, <4 x float> %1274, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1276 = shufflevector <8 x float> %1132, <8 x float> %1275, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1277 = shufflevector <16 x float> %1276, <16 x float> zeroinitializer, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1278 = shufflevector <32 x float> %1277, <32 x float> zeroinitializer, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1279 = shufflevector <64 x float> %994, <64 x float> %1278, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %1280 = extractelement <128 x float> %1279, i32 0
  store float %1280, float* %2, align 4
  %1281 = extractelement <128 x float> %1279, i32 1
  store float %1281, float* %2, align 4
  %1282 = extractelement <128 x float> %1279, i32 2
  store float %1282, float* %2, align 4
  %1283 = extractelement <128 x float> %1279, i32 3
  store float %1283, float* %2, align 4
  %1284 = extractelement <128 x float> %1279, i32 4
  store float %1284, float* %2, align 4
  %1285 = extractelement <128 x float> %1279, i32 5
  %1286 = getelementptr inbounds float, float* %2, i64 1
  store float %1285, float* %1286, align 4
  %1287 = extractelement <128 x float> %1279, i32 6
  %1288 = getelementptr inbounds float, float* %2, i64 1
  store float %1287, float* %1288, align 4
  %1289 = extractelement <128 x float> %1279, i32 7
  %1290 = getelementptr inbounds float, float* %2, i64 1
  store float %1289, float* %1290, align 4
  %1291 = extractelement <128 x float> %1279, i32 8
  %1292 = getelementptr inbounds float, float* %2, i64 1
  store float %1291, float* %1292, align 4
  %1293 = extractelement <128 x float> %1279, i32 9
  %1294 = getelementptr inbounds float, float* %2, i64 1
  store float %1293, float* %1294, align 4
  %1295 = extractelement <128 x float> %1279, i32 10
  %1296 = getelementptr inbounds float, float* %2, i64 2
  store float %1295, float* %1296, align 4
  %1297 = extractelement <128 x float> %1279, i32 11
  %1298 = getelementptr inbounds float, float* %2, i64 2
  store float %1297, float* %1298, align 4
  %1299 = extractelement <128 x float> %1279, i32 12
  %1300 = getelementptr inbounds float, float* %2, i64 2
  store float %1299, float* %1300, align 4
  %1301 = extractelement <128 x float> %1279, i32 13
  %1302 = getelementptr inbounds float, float* %2, i64 2
  store float %1301, float* %1302, align 4
  %1303 = extractelement <128 x float> %1279, i32 14
  %1304 = getelementptr inbounds float, float* %2, i64 2
  store float %1303, float* %1304, align 4
  %1305 = extractelement <128 x float> %1279, i32 15
  %1306 = getelementptr inbounds float, float* %2, i64 3
  store float %1305, float* %1306, align 4
  %1307 = extractelement <128 x float> %1279, i32 16
  %1308 = getelementptr inbounds float, float* %2, i64 3
  store float %1307, float* %1308, align 4
  %1309 = extractelement <128 x float> %1279, i32 17
  %1310 = getelementptr inbounds float, float* %2, i64 3
  store float %1309, float* %1310, align 4
  %1311 = extractelement <128 x float> %1279, i32 18
  %1312 = getelementptr inbounds float, float* %2, i64 3
  store float %1311, float* %1312, align 4
  %1313 = extractelement <128 x float> %1279, i32 19
  %1314 = getelementptr inbounds float, float* %2, i64 3
  store float %1313, float* %1314, align 4
  %1315 = extractelement <128 x float> %1279, i32 20
  %1316 = getelementptr inbounds float, float* %2, i64 4
  store float %1315, float* %1316, align 4
  %1317 = extractelement <128 x float> %1279, i32 21
  %1318 = getelementptr inbounds float, float* %2, i64 4
  store float %1317, float* %1318, align 4
  %1319 = extractelement <128 x float> %1279, i32 22
  %1320 = getelementptr inbounds float, float* %2, i64 4
  store float %1319, float* %1320, align 4
  %1321 = extractelement <128 x float> %1279, i32 23
  %1322 = getelementptr inbounds float, float* %2, i64 4
  store float %1321, float* %1322, align 4
  %1323 = extractelement <128 x float> %1279, i32 24
  %1324 = getelementptr inbounds float, float* %2, i64 4
  store float %1323, float* %1324, align 4
  %1325 = extractelement <128 x float> %1279, i32 25
  %1326 = getelementptr inbounds float, float* %2, i64 5
  store float %1325, float* %1326, align 4
  %1327 = extractelement <128 x float> %1279, i32 26
  %1328 = getelementptr inbounds float, float* %2, i64 5
  store float %1327, float* %1328, align 4
  %1329 = extractelement <128 x float> %1279, i32 27
  %1330 = getelementptr inbounds float, float* %2, i64 5
  store float %1329, float* %1330, align 4
  %1331 = extractelement <128 x float> %1279, i32 28
  %1332 = getelementptr inbounds float, float* %2, i64 5
  store float %1331, float* %1332, align 4
  %1333 = extractelement <128 x float> %1279, i32 29
  %1334 = getelementptr inbounds float, float* %2, i64 5
  store float %1333, float* %1334, align 4
  %1335 = extractelement <128 x float> %1279, i32 30
  %1336 = getelementptr inbounds float, float* %2, i64 6
  store float %1335, float* %1336, align 4
  %1337 = extractelement <128 x float> %1279, i32 31
  %1338 = getelementptr inbounds float, float* %2, i64 6
  store float %1337, float* %1338, align 4
  %1339 = extractelement <128 x float> %1279, i32 32
  %1340 = getelementptr inbounds float, float* %2, i64 6
  store float %1339, float* %1340, align 4
  %1341 = extractelement <128 x float> %1279, i32 33
  %1342 = getelementptr inbounds float, float* %2, i64 6
  store float %1341, float* %1342, align 4
  %1343 = extractelement <128 x float> %1279, i32 34
  %1344 = getelementptr inbounds float, float* %2, i64 6
  store float %1343, float* %1344, align 4
  %1345 = extractelement <128 x float> %1279, i32 35
  %1346 = getelementptr inbounds float, float* %2, i64 7
  store float %1345, float* %1346, align 4
  %1347 = extractelement <128 x float> %1279, i32 36
  %1348 = getelementptr inbounds float, float* %2, i64 7
  store float %1347, float* %1348, align 4
  %1349 = extractelement <128 x float> %1279, i32 37
  %1350 = getelementptr inbounds float, float* %2, i64 7
  store float %1349, float* %1350, align 4
  %1351 = extractelement <128 x float> %1279, i32 38
  %1352 = getelementptr inbounds float, float* %2, i64 7
  store float %1351, float* %1352, align 4
  %1353 = extractelement <128 x float> %1279, i32 39
  %1354 = getelementptr inbounds float, float* %2, i64 7
  store float %1353, float* %1354, align 4
  %1355 = extractelement <128 x float> %1279, i32 40
  %1356 = getelementptr inbounds float, float* %2, i64 8
  store float %1355, float* %1356, align 4
  %1357 = extractelement <128 x float> %1279, i32 41
  %1358 = getelementptr inbounds float, float* %2, i64 8
  store float %1357, float* %1358, align 4
  %1359 = extractelement <128 x float> %1279, i32 42
  %1360 = getelementptr inbounds float, float* %2, i64 8
  store float %1359, float* %1360, align 4
  %1361 = extractelement <128 x float> %1279, i32 43
  %1362 = getelementptr inbounds float, float* %2, i64 8
  store float %1361, float* %1362, align 4
  %1363 = extractelement <128 x float> %1279, i32 44
  %1364 = getelementptr inbounds float, float* %2, i64 8
  store float %1363, float* %1364, align 4
  %1365 = extractelement <128 x float> %1279, i32 45
  %1366 = getelementptr inbounds float, float* %2, i64 9
  store float %1365, float* %1366, align 4
  %1367 = extractelement <128 x float> %1279, i32 46
  %1368 = getelementptr inbounds float, float* %2, i64 9
  store float %1367, float* %1368, align 4
  %1369 = extractelement <128 x float> %1279, i32 47
  %1370 = getelementptr inbounds float, float* %2, i64 9
  store float %1369, float* %1370, align 4
  %1371 = extractelement <128 x float> %1279, i32 48
  %1372 = getelementptr inbounds float, float* %2, i64 9
  store float %1371, float* %1372, align 4
  %1373 = extractelement <128 x float> %1279, i32 49
  %1374 = getelementptr inbounds float, float* %2, i64 9
  store float %1373, float* %1374, align 4
  %1375 = extractelement <128 x float> %1279, i32 50
  %1376 = getelementptr inbounds float, float* %2, i64 10
  store float %1375, float* %1376, align 4
  %1377 = extractelement <128 x float> %1279, i32 51
  %1378 = getelementptr inbounds float, float* %2, i64 10
  store float %1377, float* %1378, align 4
  %1379 = extractelement <128 x float> %1279, i32 52
  %1380 = getelementptr inbounds float, float* %2, i64 10
  store float %1379, float* %1380, align 4
  %1381 = extractelement <128 x float> %1279, i32 53
  %1382 = getelementptr inbounds float, float* %2, i64 10
  store float %1381, float* %1382, align 4
  %1383 = extractelement <128 x float> %1279, i32 54
  %1384 = getelementptr inbounds float, float* %2, i64 10
  store float %1383, float* %1384, align 4
  %1385 = extractelement <128 x float> %1279, i32 55
  %1386 = getelementptr inbounds float, float* %2, i64 11
  store float %1385, float* %1386, align 4
  %1387 = extractelement <128 x float> %1279, i32 56
  %1388 = getelementptr inbounds float, float* %2, i64 11
  store float %1387, float* %1388, align 4
  %1389 = extractelement <128 x float> %1279, i32 57
  %1390 = getelementptr inbounds float, float* %2, i64 11
  store float %1389, float* %1390, align 4
  %1391 = extractelement <128 x float> %1279, i32 58
  %1392 = getelementptr inbounds float, float* %2, i64 11
  store float %1391, float* %1392, align 4
  %1393 = extractelement <128 x float> %1279, i32 59
  %1394 = getelementptr inbounds float, float* %2, i64 11
  store float %1393, float* %1394, align 4
  %1395 = extractelement <128 x float> %1279, i32 60
  %1396 = getelementptr inbounds float, float* %2, i64 12
  store float %1395, float* %1396, align 4
  %1397 = extractelement <128 x float> %1279, i32 61
  %1398 = getelementptr inbounds float, float* %2, i64 12
  store float %1397, float* %1398, align 4
  %1399 = extractelement <128 x float> %1279, i32 62
  %1400 = getelementptr inbounds float, float* %2, i64 12
  store float %1399, float* %1400, align 4
  %1401 = extractelement <128 x float> %1279, i32 63
  %1402 = getelementptr inbounds float, float* %2, i64 12
  store float %1401, float* %1402, align 4
  %1403 = extractelement <128 x float> %1279, i32 64
  %1404 = getelementptr inbounds float, float* %2, i64 12
  store float %1403, float* %1404, align 4
  %1405 = extractelement <128 x float> %1279, i32 65
  %1406 = getelementptr inbounds float, float* %2, i64 13
  store float %1405, float* %1406, align 4
  %1407 = extractelement <128 x float> %1279, i32 66
  %1408 = getelementptr inbounds float, float* %2, i64 13
  store float %1407, float* %1408, align 4
  %1409 = extractelement <128 x float> %1279, i32 67
  %1410 = getelementptr inbounds float, float* %2, i64 13
  store float %1409, float* %1410, align 4
  %1411 = extractelement <128 x float> %1279, i32 68
  %1412 = getelementptr inbounds float, float* %2, i64 13
  store float %1411, float* %1412, align 4
  %1413 = extractelement <128 x float> %1279, i32 69
  %1414 = getelementptr inbounds float, float* %2, i64 13
  store float %1413, float* %1414, align 4
  %1415 = extractelement <128 x float> %1279, i32 70
  %1416 = getelementptr inbounds float, float* %2, i64 14
  store float %1415, float* %1416, align 4
  %1417 = extractelement <128 x float> %1279, i32 71
  %1418 = getelementptr inbounds float, float* %2, i64 14
  store float %1417, float* %1418, align 4
  %1419 = extractelement <128 x float> %1279, i32 72
  %1420 = getelementptr inbounds float, float* %2, i64 14
  store float %1419, float* %1420, align 4
  %1421 = extractelement <128 x float> %1279, i32 73
  %1422 = getelementptr inbounds float, float* %2, i64 14
  store float %1421, float* %1422, align 4
  %1423 = extractelement <128 x float> %1279, i32 74
  %1424 = getelementptr inbounds float, float* %2, i64 14
  store float %1423, float* %1424, align 4
  %1425 = extractelement <128 x float> %1279, i32 75
  %1426 = getelementptr inbounds float, float* %2, i64 15
  store float %1425, float* %1426, align 4
  %1427 = extractelement <128 x float> %1279, i32 76
  %1428 = getelementptr inbounds float, float* %2, i64 15
  store float %1427, float* %1428, align 4
  %1429 = extractelement <128 x float> %1279, i32 77
  %1430 = getelementptr inbounds float, float* %2, i64 15
  store float %1429, float* %1430, align 4
  %1431 = extractelement <128 x float> %1279, i32 78
  %1432 = getelementptr inbounds float, float* %2, i64 15
  store float %1431, float* %1432, align 4
  %1433 = extractelement <128 x float> %1279, i32 79
  %1434 = getelementptr inbounds float, float* %2, i64 15
  store float %1433, float* %1434, align 4
  ret void
}

; Function Attrs: noinline nounwind ssp uwtable
define void @naive_fixed_qr_decomp(float* %0, float* %1, float* %2) #2 {
.preheader26:
  %3 = bitcast float* %2 to i8*
  %4 = bitcast float* %0 to i8*
  %5 = bitcast float* %2 to i8*
  %6 = call i64 @llvm.objectsize.i64.p0i8(i8* %5, i1 false, i1 true, i1 false)
  %7 = call i8* @__memcpy_chk(i8* %3, i8* %4, i64 64, i64 %6) #7
  %8 = getelementptr inbounds float, float* %1, i64 1
  %9 = bitcast float* %8 to i32*
  %10 = getelementptr inbounds float, float* %1, i64 4
  %11 = bitcast float* %10 to i32*
  %12 = load float, float* %1, align 4
  %13 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %12, i32 3
  %14 = load float, float* %0, align 4
  %15 = insertelement <4 x float> zeroinitializer, float %14, i32 3
  %16 = fmul <4 x float> %13, %15
  %17 = load float, float* %1, align 4
  %18 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %17, i32 2
  %19 = insertelement <4 x float> %18, float 1.000000e+00, i32 3
  %20 = load float, float* %0, align 4
  %21 = insertelement <4 x float> zeroinitializer, float %20, i32 2
  %22 = insertelement <4 x float> %21, float 0.000000e+00, i32 3
  %23 = call <4 x float> @llvm.fma.v4f32(<4 x float> %19, <4 x float> %22, <4 x float> %16)
  %24 = getelementptr inbounds float, float* %1, i64 1
  %25 = load float, float* %24, align 4
  %26 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %25, i32 3
  %27 = getelementptr inbounds float, float* %0, i64 4
  %28 = load float, float* %27, align 4
  %29 = insertelement <4 x float> zeroinitializer, float %28, i32 3
  %30 = call <4 x float> @llvm.fma.v4f32(<4 x float> %26, <4 x float> %29, <4 x float> %23)
  %31 = load float, float* %1, align 4
  %32 = insertelement <4 x float> zeroinitializer, float %31, i32 1
  %33 = getelementptr inbounds float, float* %1, i64 1
  %34 = load float, float* %33, align 4
  %35 = insertelement <4 x float> %32, float %34, i32 2
  %36 = getelementptr inbounds float, float* %1, i64 2
  %37 = load float, float* %36, align 4
  %38 = insertelement <4 x float> %35, float %37, i32 3
  %39 = load float, float* %0, align 4
  %40 = insertelement <4 x float> zeroinitializer, float %39, i32 1
  %41 = getelementptr inbounds float, float* %0, i64 4
  %42 = load float, float* %41, align 4
  %43 = insertelement <4 x float> %40, float %42, i32 2
  %44 = getelementptr inbounds float, float* %0, i64 8
  %45 = load float, float* %44, align 4
  %46 = insertelement <4 x float> %43, float %45, i32 3
  %47 = call <4 x float> @llvm.fma.v4f32(<4 x float> %38, <4 x float> %46, <4 x float> %30)
  %48 = load float, float* %1, align 4
  %49 = insertelement <4 x float> zeroinitializer, float %48, i32 0
  %50 = insertelement <4 x float> %49, float 1.000000e+00, i32 1
  %51 = insertelement <4 x float> %50, float 1.000000e+00, i32 2
  %52 = insertelement <4 x float> %51, float 1.000000e+00, i32 3
  %53 = load float, float* %0, align 4
  %54 = insertelement <4 x float> zeroinitializer, float %53, i32 0
  %55 = insertelement <4 x float> %54, float 0.000000e+00, i32 1
  %56 = insertelement <4 x float> %55, float 0.000000e+00, i32 2
  %57 = insertelement <4 x float> %56, float 0.000000e+00, i32 3
  %58 = fmul <4 x float> %52, %57
  %59 = fadd <4 x float> %58, zeroinitializer
  %60 = getelementptr inbounds float, float* %1, i64 1
  %61 = load float, float* %60, align 4
  %62 = insertelement <4 x float> zeroinitializer, float %61, i32 0
  %63 = insertelement <4 x float> %62, float 1.000000e+00, i32 1
  %64 = insertelement <4 x float> %63, float 1.000000e+00, i32 2
  %65 = load float, float* %1, align 4
  %66 = insertelement <4 x float> %64, float %65, i32 3
  %67 = getelementptr inbounds float, float* %0, i64 4
  %68 = load float, float* %67, align 4
  %69 = insertelement <4 x float> zeroinitializer, float %68, i32 0
  %70 = insertelement <4 x float> %69, float 0.000000e+00, i32 1
  %71 = insertelement <4 x float> %70, float 0.000000e+00, i32 2
  %72 = getelementptr inbounds float, float* %0, i64 1
  %73 = load float, float* %72, align 4
  %74 = insertelement <4 x float> %71, float %73, i32 3
  %75 = call <4 x float> @llvm.fma.v4f32(<4 x float> %66, <4 x float> %74, <4 x float> %59)
  %76 = getelementptr inbounds float, float* %1, i64 2
  %77 = load float, float* %76, align 4
  %78 = insertelement <4 x float> zeroinitializer, float %77, i32 0
  %79 = insertelement <4 x float> %78, float 1.000000e+00, i32 1
  %80 = insertelement <4 x float> %79, float 1.000000e+00, i32 2
  %81 = insertelement <4 x float> %80, float 1.000000e+00, i32 3
  %82 = getelementptr inbounds float, float* %0, i64 8
  %83 = load float, float* %82, align 4
  %84 = insertelement <4 x float> zeroinitializer, float %83, i32 0
  %85 = insertelement <4 x float> %84, float 0.000000e+00, i32 1
  %86 = insertelement <4 x float> %85, float 0.000000e+00, i32 2
  %87 = insertelement <4 x float> %86, float 0.000000e+00, i32 3
  %88 = call <4 x float> @llvm.fma.v4f32(<4 x float> %81, <4 x float> %87, <4 x float> %75)
  %89 = getelementptr inbounds float, float* %1, i64 3
  %90 = load float, float* %89, align 4
  %91 = insertelement <4 x float> zeroinitializer, float %90, i32 0
  %92 = insertelement <4 x float> %91, float 0.000000e+00, i32 1
  %93 = load float, float* %1, align 4
  %94 = insertelement <4 x float> %92, float %93, i32 2
  %95 = getelementptr inbounds float, float* %1, i64 1
  %96 = load float, float* %95, align 4
  %97 = insertelement <4 x float> %94, float %96, i32 3
  %98 = getelementptr inbounds float, float* %0, i64 12
  %99 = load float, float* %98, align 4
  %100 = insertelement <4 x float> zeroinitializer, float %99, i32 0
  %101 = insertelement <4 x float> %100, float 0.000000e+00, i32 1
  %102 = getelementptr inbounds float, float* %0, i64 1
  %103 = load float, float* %102, align 4
  %104 = insertelement <4 x float> %101, float %103, i32 2
  %105 = getelementptr inbounds float, float* %0, i64 5
  %106 = load float, float* %105, align 4
  %107 = insertelement <4 x float> %104, float %106, i32 3
  %108 = call <4 x float> @llvm.fma.v4f32(<4 x float> %97, <4 x float> %107, <4 x float> %88)
  %109 = shufflevector <4 x float> %47, <4 x float> %108, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %110 = load float, float* %1, align 4
  %111 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %110, i32 1
  %112 = insertelement <4 x float> %111, float 1.000000e+00, i32 2
  %113 = insertelement <4 x float> %112, float 1.000000e+00, i32 3
  %114 = getelementptr inbounds float, float* %0, i64 1
  %115 = load float, float* %114, align 4
  %116 = insertelement <4 x float> zeroinitializer, float %115, i32 1
  %117 = insertelement <4 x float> %116, float 0.000000e+00, i32 2
  %118 = insertelement <4 x float> %117, float 0.000000e+00, i32 3
  %119 = fmul <4 x float> %113, %118
  %120 = load float, float* %1, align 4
  %121 = insertelement <4 x float> zeroinitializer, float %120, i32 0
  %122 = insertelement <4 x float> %121, float 1.000000e+00, i32 1
  %123 = insertelement <4 x float> %122, float 1.000000e+00, i32 2
  %124 = insertelement <4 x float> %123, float 1.000000e+00, i32 3
  %125 = getelementptr inbounds float, float* %0, i64 1
  %126 = load float, float* %125, align 4
  %127 = insertelement <4 x float> zeroinitializer, float %126, i32 0
  %128 = insertelement <4 x float> %127, float 0.000000e+00, i32 1
  %129 = insertelement <4 x float> %128, float 0.000000e+00, i32 2
  %130 = insertelement <4 x float> %129, float 0.000000e+00, i32 3
  %131 = call <4 x float> @llvm.fma.v4f32(<4 x float> %124, <4 x float> %130, <4 x float> %119)
  %132 = getelementptr inbounds float, float* %1, i64 1
  %133 = load float, float* %132, align 4
  %134 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %133, i32 1
  %135 = insertelement <4 x float> %134, float 1.000000e+00, i32 2
  %136 = insertelement <4 x float> %135, float 1.000000e+00, i32 3
  %137 = getelementptr inbounds float, float* %0, i64 5
  %138 = load float, float* %137, align 4
  %139 = insertelement <4 x float> zeroinitializer, float %138, i32 1
  %140 = insertelement <4 x float> %139, float 0.000000e+00, i32 2
  %141 = insertelement <4 x float> %140, float 0.000000e+00, i32 3
  %142 = call <4 x float> @llvm.fma.v4f32(<4 x float> %136, <4 x float> %141, <4 x float> %131)
  %143 = getelementptr inbounds float, float* %1, i64 1
  %144 = load float, float* %143, align 4
  %145 = insertelement <4 x float> zeroinitializer, float %144, i32 0
  %146 = getelementptr inbounds float, float* %1, i64 2
  %147 = load float, float* %146, align 4
  %148 = insertelement <4 x float> %145, float %147, i32 1
  %149 = insertelement <4 x float> %148, float 1.000000e+00, i32 2
  %150 = load float, float* %1, align 4
  %151 = insertelement <4 x float> %149, float %150, i32 3
  %152 = getelementptr inbounds float, float* %0, i64 5
  %153 = load float, float* %152, align 4
  %154 = insertelement <4 x float> zeroinitializer, float %153, i32 0
  %155 = getelementptr inbounds float, float* %0, i64 9
  %156 = load float, float* %155, align 4
  %157 = insertelement <4 x float> %154, float %156, i32 1
  %158 = insertelement <4 x float> %157, float 0.000000e+00, i32 2
  %159 = getelementptr inbounds float, float* %0, i64 2
  %160 = load float, float* %159, align 4
  %161 = insertelement <4 x float> %158, float %160, i32 3
  %162 = call <4 x float> @llvm.fma.v4f32(<4 x float> %151, <4 x float> %161, <4 x float> %142)
  %163 = getelementptr inbounds float, float* %1, i64 2
  %164 = load float, float* %163, align 4
  %165 = insertelement <4 x float> zeroinitializer, float %164, i32 0
  %166 = getelementptr inbounds float, float* %1, i64 3
  %167 = load float, float* %166, align 4
  %168 = insertelement <4 x float> %165, float %167, i32 1
  %169 = insertelement <4 x float> %168, float 1.000000e+00, i32 2
  %170 = insertelement <4 x float> %169, float 1.000000e+00, i32 3
  %171 = getelementptr inbounds float, float* %0, i64 9
  %172 = load float, float* %171, align 4
  %173 = insertelement <4 x float> zeroinitializer, float %172, i32 0
  %174 = getelementptr inbounds float, float* %0, i64 13
  %175 = load float, float* %174, align 4
  %176 = insertelement <4 x float> %173, float %175, i32 1
  %177 = insertelement <4 x float> %176, float 0.000000e+00, i32 2
  %178 = insertelement <4 x float> %177, float 0.000000e+00, i32 3
  %179 = call <4 x float> @llvm.fma.v4f32(<4 x float> %170, <4 x float> %178, <4 x float> %162)
  %180 = load float, float* %1, align 4
  %181 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %180, i32 2
  %182 = insertelement <4 x float> %181, float 1.000000e+00, i32 3
  %183 = getelementptr inbounds float, float* %0, i64 2
  %184 = load float, float* %183, align 4
  %185 = insertelement <4 x float> zeroinitializer, float %184, i32 2
  %186 = insertelement <4 x float> %185, float 0.000000e+00, i32 3
  %187 = fmul <4 x float> %182, %186
  %188 = load float, float* %1, align 4
  %189 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %188, i32 1
  %190 = insertelement <4 x float> %189, float 1.000000e+00, i32 2
  %191 = insertelement <4 x float> %190, float 1.000000e+00, i32 3
  %192 = getelementptr inbounds float, float* %0, i64 2
  %193 = load float, float* %192, align 4
  %194 = insertelement <4 x float> zeroinitializer, float %193, i32 1
  %195 = insertelement <4 x float> %194, float 0.000000e+00, i32 2
  %196 = insertelement <4 x float> %195, float 0.000000e+00, i32 3
  %197 = call <4 x float> @llvm.fma.v4f32(<4 x float> %191, <4 x float> %196, <4 x float> %187)
  %198 = load float, float* %1, align 4
  %199 = insertelement <4 x float> zeroinitializer, float %198, i32 0
  %200 = insertelement <4 x float> %199, float 1.000000e+00, i32 1
  %201 = getelementptr inbounds float, float* %1, i64 1
  %202 = load float, float* %201, align 4
  %203 = insertelement <4 x float> %200, float %202, i32 2
  %204 = insertelement <4 x float> %203, float 1.000000e+00, i32 3
  %205 = getelementptr inbounds float, float* %0, i64 2
  %206 = load float, float* %205, align 4
  %207 = insertelement <4 x float> zeroinitializer, float %206, i32 0
  %208 = insertelement <4 x float> %207, float 0.000000e+00, i32 1
  %209 = getelementptr inbounds float, float* %0, i64 6
  %210 = load float, float* %209, align 4
  %211 = insertelement <4 x float> %208, float %210, i32 2
  %212 = insertelement <4 x float> %211, float 0.000000e+00, i32 3
  %213 = call <4 x float> @llvm.fma.v4f32(<4 x float> %204, <4 x float> %212, <4 x float> %197)
  %214 = getelementptr inbounds float, float* %1, i64 1
  %215 = load float, float* %214, align 4
  %216 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %215, i32 1
  %217 = getelementptr inbounds float, float* %1, i64 2
  %218 = load float, float* %217, align 4
  %219 = insertelement <4 x float> %216, float %218, i32 2
  %220 = insertelement <4 x float> %219, float 1.000000e+00, i32 3
  %221 = getelementptr inbounds float, float* %0, i64 6
  %222 = load float, float* %221, align 4
  %223 = insertelement <4 x float> zeroinitializer, float %222, i32 1
  %224 = getelementptr inbounds float, float* %0, i64 10
  %225 = load float, float* %224, align 4
  %226 = insertelement <4 x float> %223, float %225, i32 2
  %227 = insertelement <4 x float> %226, float 0.000000e+00, i32 3
  %228 = call <4 x float> @llvm.fma.v4f32(<4 x float> %220, <4 x float> %227, <4 x float> %213)
  %229 = getelementptr inbounds float, float* %1, i64 1
  %230 = load float, float* %229, align 4
  %231 = insertelement <4 x float> zeroinitializer, float %230, i32 0
  %232 = getelementptr inbounds float, float* %1, i64 2
  %233 = load float, float* %232, align 4
  %234 = insertelement <4 x float> %231, float %233, i32 1
  %235 = getelementptr inbounds float, float* %1, i64 3
  %236 = load float, float* %235, align 4
  %237 = insertelement <4 x float> %234, float %236, i32 2
  %238 = insertelement <4 x float> %237, float 0.000000e+00, i32 3
  %239 = getelementptr inbounds float, float* %0, i64 6
  %240 = load float, float* %239, align 4
  %241 = insertelement <4 x float> zeroinitializer, float %240, i32 0
  %242 = getelementptr inbounds float, float* %0, i64 10
  %243 = load float, float* %242, align 4
  %244 = insertelement <4 x float> %241, float %243, i32 1
  %245 = getelementptr inbounds float, float* %0, i64 14
  %246 = load float, float* %245, align 4
  %247 = insertelement <4 x float> %244, float %246, i32 2
  %248 = insertelement <4 x float> %247, float 0.000000e+00, i32 3
  %249 = call <4 x float> @llvm.fma.v4f32(<4 x float> %238, <4 x float> %248, <4 x float> %228)
  %250 = shufflevector <4 x float> %179, <4 x float> %249, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %251 = shufflevector <8 x float> %109, <8 x float> %250, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %252 = load float, float* %1, align 4
  %253 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %252, i32 3
  %254 = getelementptr inbounds float, float* %0, i64 3
  %255 = load float, float* %254, align 4
  %256 = insertelement <4 x float> zeroinitializer, float %255, i32 3
  %257 = fmul <4 x float> %253, %256
  %258 = load float, float* %1, align 4
  %259 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %258, i32 2
  %260 = insertelement <4 x float> %259, float 1.000000e+00, i32 3
  %261 = getelementptr inbounds float, float* %0, i64 3
  %262 = load float, float* %261, align 4
  %263 = insertelement <4 x float> zeroinitializer, float %262, i32 2
  %264 = insertelement <4 x float> %263, float 0.000000e+00, i32 3
  %265 = call <4 x float> @llvm.fma.v4f32(<4 x float> %260, <4 x float> %264, <4 x float> %257)
  %266 = load float, float* %1, align 4
  %267 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %266, i32 1
  %268 = insertelement <4 x float> %267, float 1.000000e+00, i32 2
  %269 = getelementptr inbounds float, float* %1, i64 1
  %270 = load float, float* %269, align 4
  %271 = insertelement <4 x float> %268, float %270, i32 3
  %272 = getelementptr inbounds float, float* %0, i64 3
  %273 = load float, float* %272, align 4
  %274 = insertelement <4 x float> zeroinitializer, float %273, i32 1
  %275 = insertelement <4 x float> %274, float 0.000000e+00, i32 2
  %276 = getelementptr inbounds float, float* %0, i64 7
  %277 = load float, float* %276, align 4
  %278 = insertelement <4 x float> %275, float %277, i32 3
  %279 = call <4 x float> @llvm.fma.v4f32(<4 x float> %271, <4 x float> %278, <4 x float> %265)
  %280 = getelementptr inbounds float, float* %1, i64 1
  %281 = load float, float* %280, align 4
  %282 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %281, i32 2
  %283 = getelementptr inbounds float, float* %1, i64 2
  %284 = load float, float* %283, align 4
  %285 = insertelement <4 x float> %282, float %284, i32 3
  %286 = getelementptr inbounds float, float* %0, i64 7
  %287 = load float, float* %286, align 4
  %288 = insertelement <4 x float> zeroinitializer, float %287, i32 2
  %289 = getelementptr inbounds float, float* %0, i64 11
  %290 = load float, float* %289, align 4
  %291 = insertelement <4 x float> %288, float %290, i32 3
  %292 = call <4 x float> @llvm.fma.v4f32(<4 x float> %285, <4 x float> %291, <4 x float> %279)
  %293 = load float, float* %1, align 4
  %294 = insertelement <4 x float> zeroinitializer, float %293, i32 0
  %295 = getelementptr inbounds float, float* %1, i64 1
  %296 = load float, float* %295, align 4
  %297 = insertelement <4 x float> %294, float %296, i32 1
  %298 = getelementptr inbounds float, float* %1, i64 2
  %299 = load float, float* %298, align 4
  %300 = insertelement <4 x float> %297, float %299, i32 2
  %301 = getelementptr inbounds float, float* %1, i64 3
  %302 = load float, float* %301, align 4
  %303 = insertelement <4 x float> %300, float %302, i32 3
  %304 = getelementptr inbounds float, float* %0, i64 3
  %305 = load float, float* %304, align 4
  %306 = insertelement <4 x float> zeroinitializer, float %305, i32 0
  %307 = getelementptr inbounds float, float* %0, i64 7
  %308 = load float, float* %307, align 4
  %309 = insertelement <4 x float> %306, float %308, i32 1
  %310 = getelementptr inbounds float, float* %0, i64 11
  %311 = load float, float* %310, align 4
  %312 = insertelement <4 x float> %309, float %311, i32 2
  %313 = getelementptr inbounds float, float* %0, i64 15
  %314 = load float, float* %313, align 4
  %315 = insertelement <4 x float> %312, float %314, i32 3
  %316 = call <4 x float> @llvm.fma.v4f32(<4 x float> %303, <4 x float> %315, <4 x float> %292)
  %317 = getelementptr inbounds float, float* %1, i64 4
  %318 = load float, float* %317, align 4
  %319 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %318, i32 3
  %320 = load float, float* %0, align 4
  %321 = insertelement <4 x float> zeroinitializer, float %320, i32 3
  %322 = fmul <4 x float> %319, %321
  %323 = getelementptr inbounds float, float* %1, i64 4
  %324 = load float, float* %323, align 4
  %325 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %324, i32 2
  %326 = insertelement <4 x float> %325, float 1.000000e+00, i32 3
  %327 = load float, float* %0, align 4
  %328 = insertelement <4 x float> zeroinitializer, float %327, i32 2
  %329 = insertelement <4 x float> %328, float 0.000000e+00, i32 3
  %330 = call <4 x float> @llvm.fma.v4f32(<4 x float> %326, <4 x float> %329, <4 x float> %322)
  %331 = getelementptr inbounds float, float* %1, i64 5
  %332 = load float, float* %331, align 4
  %333 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %332, i32 3
  %334 = getelementptr inbounds float, float* %0, i64 4
  %335 = load float, float* %334, align 4
  %336 = insertelement <4 x float> zeroinitializer, float %335, i32 3
  %337 = call <4 x float> @llvm.fma.v4f32(<4 x float> %333, <4 x float> %336, <4 x float> %330)
  %338 = getelementptr inbounds float, float* %1, i64 4
  %339 = load float, float* %338, align 4
  %340 = insertelement <4 x float> zeroinitializer, float %339, i32 1
  %341 = getelementptr inbounds float, float* %1, i64 5
  %342 = load float, float* %341, align 4
  %343 = insertelement <4 x float> %340, float %342, i32 2
  %344 = getelementptr inbounds float, float* %1, i64 6
  %345 = load float, float* %344, align 4
  %346 = insertelement <4 x float> %343, float %345, i32 3
  %347 = load float, float* %0, align 4
  %348 = insertelement <4 x float> zeroinitializer, float %347, i32 1
  %349 = getelementptr inbounds float, float* %0, i64 4
  %350 = load float, float* %349, align 4
  %351 = insertelement <4 x float> %348, float %350, i32 2
  %352 = getelementptr inbounds float, float* %0, i64 8
  %353 = load float, float* %352, align 4
  %354 = insertelement <4 x float> %351, float %353, i32 3
  %355 = call <4 x float> @llvm.fma.v4f32(<4 x float> %346, <4 x float> %354, <4 x float> %337)
  %356 = shufflevector <4 x float> %316, <4 x float> %355, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %357 = getelementptr inbounds float, float* %1, i64 4
  %358 = load float, float* %357, align 4
  %359 = insertelement <4 x float> zeroinitializer, float %358, i32 0
  %360 = insertelement <4 x float> %359, float 1.000000e+00, i32 1
  %361 = insertelement <4 x float> %360, float 1.000000e+00, i32 2
  %362 = insertelement <4 x float> %361, float 1.000000e+00, i32 3
  %363 = load float, float* %0, align 4
  %364 = insertelement <4 x float> zeroinitializer, float %363, i32 0
  %365 = insertelement <4 x float> %364, float 0.000000e+00, i32 1
  %366 = insertelement <4 x float> %365, float 0.000000e+00, i32 2
  %367 = insertelement <4 x float> %366, float 0.000000e+00, i32 3
  %368 = fmul <4 x float> %362, %367
  %369 = fadd <4 x float> %368, zeroinitializer
  %370 = getelementptr inbounds float, float* %1, i64 5
  %371 = load float, float* %370, align 4
  %372 = insertelement <4 x float> zeroinitializer, float %371, i32 0
  %373 = insertelement <4 x float> %372, float 1.000000e+00, i32 1
  %374 = insertelement <4 x float> %373, float 1.000000e+00, i32 2
  %375 = getelementptr inbounds float, float* %1, i64 4
  %376 = load float, float* %375, align 4
  %377 = insertelement <4 x float> %374, float %376, i32 3
  %378 = getelementptr inbounds float, float* %0, i64 4
  %379 = load float, float* %378, align 4
  %380 = insertelement <4 x float> zeroinitializer, float %379, i32 0
  %381 = insertelement <4 x float> %380, float 0.000000e+00, i32 1
  %382 = insertelement <4 x float> %381, float 0.000000e+00, i32 2
  %383 = getelementptr inbounds float, float* %0, i64 1
  %384 = load float, float* %383, align 4
  %385 = insertelement <4 x float> %382, float %384, i32 3
  %386 = call <4 x float> @llvm.fma.v4f32(<4 x float> %377, <4 x float> %385, <4 x float> %369)
  %387 = getelementptr inbounds float, float* %1, i64 6
  %388 = load float, float* %387, align 4
  %389 = insertelement <4 x float> zeroinitializer, float %388, i32 0
  %390 = insertelement <4 x float> %389, float 1.000000e+00, i32 1
  %391 = insertelement <4 x float> %390, float 1.000000e+00, i32 2
  %392 = insertelement <4 x float> %391, float 1.000000e+00, i32 3
  %393 = getelementptr inbounds float, float* %0, i64 8
  %394 = load float, float* %393, align 4
  %395 = insertelement <4 x float> zeroinitializer, float %394, i32 0
  %396 = insertelement <4 x float> %395, float 0.000000e+00, i32 1
  %397 = insertelement <4 x float> %396, float 0.000000e+00, i32 2
  %398 = insertelement <4 x float> %397, float 0.000000e+00, i32 3
  %399 = call <4 x float> @llvm.fma.v4f32(<4 x float> %392, <4 x float> %398, <4 x float> %386)
  %400 = getelementptr inbounds float, float* %1, i64 7
  %401 = load float, float* %400, align 4
  %402 = insertelement <4 x float> zeroinitializer, float %401, i32 0
  %403 = insertelement <4 x float> %402, float 0.000000e+00, i32 1
  %404 = getelementptr inbounds float, float* %1, i64 4
  %405 = load float, float* %404, align 4
  %406 = insertelement <4 x float> %403, float %405, i32 2
  %407 = getelementptr inbounds float, float* %1, i64 5
  %408 = load float, float* %407, align 4
  %409 = insertelement <4 x float> %406, float %408, i32 3
  %410 = getelementptr inbounds float, float* %0, i64 12
  %411 = load float, float* %410, align 4
  %412 = insertelement <4 x float> zeroinitializer, float %411, i32 0
  %413 = insertelement <4 x float> %412, float 0.000000e+00, i32 1
  %414 = getelementptr inbounds float, float* %0, i64 1
  %415 = load float, float* %414, align 4
  %416 = insertelement <4 x float> %413, float %415, i32 2
  %417 = getelementptr inbounds float, float* %0, i64 5
  %418 = load float, float* %417, align 4
  %419 = insertelement <4 x float> %416, float %418, i32 3
  %420 = call <4 x float> @llvm.fma.v4f32(<4 x float> %409, <4 x float> %419, <4 x float> %399)
  %421 = getelementptr inbounds float, float* %1, i64 4
  %422 = load float, float* %421, align 4
  %423 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %422, i32 1
  %424 = insertelement <4 x float> %423, float 1.000000e+00, i32 2
  %425 = insertelement <4 x float> %424, float 1.000000e+00, i32 3
  %426 = getelementptr inbounds float, float* %0, i64 1
  %427 = load float, float* %426, align 4
  %428 = insertelement <4 x float> zeroinitializer, float %427, i32 1
  %429 = insertelement <4 x float> %428, float 0.000000e+00, i32 2
  %430 = insertelement <4 x float> %429, float 0.000000e+00, i32 3
  %431 = fmul <4 x float> %425, %430
  %432 = getelementptr inbounds float, float* %1, i64 4
  %433 = load float, float* %432, align 4
  %434 = insertelement <4 x float> zeroinitializer, float %433, i32 0
  %435 = insertelement <4 x float> %434, float 1.000000e+00, i32 1
  %436 = insertelement <4 x float> %435, float 1.000000e+00, i32 2
  %437 = insertelement <4 x float> %436, float 1.000000e+00, i32 3
  %438 = getelementptr inbounds float, float* %0, i64 1
  %439 = load float, float* %438, align 4
  %440 = insertelement <4 x float> zeroinitializer, float %439, i32 0
  %441 = insertelement <4 x float> %440, float 0.000000e+00, i32 1
  %442 = insertelement <4 x float> %441, float 0.000000e+00, i32 2
  %443 = insertelement <4 x float> %442, float 0.000000e+00, i32 3
  %444 = call <4 x float> @llvm.fma.v4f32(<4 x float> %437, <4 x float> %443, <4 x float> %431)
  %445 = getelementptr inbounds float, float* %1, i64 5
  %446 = load float, float* %445, align 4
  %447 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %446, i32 1
  %448 = insertelement <4 x float> %447, float 1.000000e+00, i32 2
  %449 = insertelement <4 x float> %448, float 1.000000e+00, i32 3
  %450 = getelementptr inbounds float, float* %0, i64 5
  %451 = load float, float* %450, align 4
  %452 = insertelement <4 x float> zeroinitializer, float %451, i32 1
  %453 = insertelement <4 x float> %452, float 0.000000e+00, i32 2
  %454 = insertelement <4 x float> %453, float 0.000000e+00, i32 3
  %455 = call <4 x float> @llvm.fma.v4f32(<4 x float> %449, <4 x float> %454, <4 x float> %444)
  %456 = getelementptr inbounds float, float* %1, i64 5
  %457 = load float, float* %456, align 4
  %458 = insertelement <4 x float> zeroinitializer, float %457, i32 0
  %459 = getelementptr inbounds float, float* %1, i64 6
  %460 = load float, float* %459, align 4
  %461 = insertelement <4 x float> %458, float %460, i32 1
  %462 = insertelement <4 x float> %461, float 1.000000e+00, i32 2
  %463 = getelementptr inbounds float, float* %1, i64 4
  %464 = load float, float* %463, align 4
  %465 = insertelement <4 x float> %462, float %464, i32 3
  %466 = getelementptr inbounds float, float* %0, i64 5
  %467 = load float, float* %466, align 4
  %468 = insertelement <4 x float> zeroinitializer, float %467, i32 0
  %469 = getelementptr inbounds float, float* %0, i64 9
  %470 = load float, float* %469, align 4
  %471 = insertelement <4 x float> %468, float %470, i32 1
  %472 = insertelement <4 x float> %471, float 0.000000e+00, i32 2
  %473 = getelementptr inbounds float, float* %0, i64 2
  %474 = load float, float* %473, align 4
  %475 = insertelement <4 x float> %472, float %474, i32 3
  %476 = call <4 x float> @llvm.fma.v4f32(<4 x float> %465, <4 x float> %475, <4 x float> %455)
  %477 = getelementptr inbounds float, float* %1, i64 6
  %478 = load float, float* %477, align 4
  %479 = insertelement <4 x float> zeroinitializer, float %478, i32 0
  %480 = getelementptr inbounds float, float* %1, i64 7
  %481 = load float, float* %480, align 4
  %482 = insertelement <4 x float> %479, float %481, i32 1
  %483 = insertelement <4 x float> %482, float 1.000000e+00, i32 2
  %484 = insertelement <4 x float> %483, float 1.000000e+00, i32 3
  %485 = getelementptr inbounds float, float* %0, i64 9
  %486 = load float, float* %485, align 4
  %487 = insertelement <4 x float> zeroinitializer, float %486, i32 0
  %488 = getelementptr inbounds float, float* %0, i64 13
  %489 = load float, float* %488, align 4
  %490 = insertelement <4 x float> %487, float %489, i32 1
  %491 = insertelement <4 x float> %490, float 0.000000e+00, i32 2
  %492 = insertelement <4 x float> %491, float 0.000000e+00, i32 3
  %493 = call <4 x float> @llvm.fma.v4f32(<4 x float> %484, <4 x float> %492, <4 x float> %476)
  %494 = shufflevector <4 x float> %420, <4 x float> %493, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %495 = shufflevector <8 x float> %356, <8 x float> %494, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %496 = shufflevector <16 x float> %251, <16 x float> %495, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %497 = getelementptr inbounds float, float* %1, i64 4
  %498 = load float, float* %497, align 4
  %499 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %498, i32 2
  %500 = insertelement <4 x float> %499, float 1.000000e+00, i32 3
  %501 = getelementptr inbounds float, float* %0, i64 2
  %502 = load float, float* %501, align 4
  %503 = insertelement <4 x float> zeroinitializer, float %502, i32 2
  %504 = insertelement <4 x float> %503, float 0.000000e+00, i32 3
  %505 = fmul <4 x float> %500, %504
  %506 = getelementptr inbounds float, float* %1, i64 4
  %507 = load float, float* %506, align 4
  %508 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %507, i32 1
  %509 = insertelement <4 x float> %508, float 1.000000e+00, i32 2
  %510 = insertelement <4 x float> %509, float 1.000000e+00, i32 3
  %511 = getelementptr inbounds float, float* %0, i64 2
  %512 = load float, float* %511, align 4
  %513 = insertelement <4 x float> zeroinitializer, float %512, i32 1
  %514 = insertelement <4 x float> %513, float 0.000000e+00, i32 2
  %515 = insertelement <4 x float> %514, float 0.000000e+00, i32 3
  %516 = call <4 x float> @llvm.fma.v4f32(<4 x float> %510, <4 x float> %515, <4 x float> %505)
  %517 = getelementptr inbounds float, float* %1, i64 4
  %518 = load float, float* %517, align 4
  %519 = insertelement <4 x float> zeroinitializer, float %518, i32 0
  %520 = insertelement <4 x float> %519, float 1.000000e+00, i32 1
  %521 = getelementptr inbounds float, float* %1, i64 5
  %522 = load float, float* %521, align 4
  %523 = insertelement <4 x float> %520, float %522, i32 2
  %524 = insertelement <4 x float> %523, float 1.000000e+00, i32 3
  %525 = getelementptr inbounds float, float* %0, i64 2
  %526 = load float, float* %525, align 4
  %527 = insertelement <4 x float> zeroinitializer, float %526, i32 0
  %528 = insertelement <4 x float> %527, float 0.000000e+00, i32 1
  %529 = getelementptr inbounds float, float* %0, i64 6
  %530 = load float, float* %529, align 4
  %531 = insertelement <4 x float> %528, float %530, i32 2
  %532 = insertelement <4 x float> %531, float 0.000000e+00, i32 3
  %533 = call <4 x float> @llvm.fma.v4f32(<4 x float> %524, <4 x float> %532, <4 x float> %516)
  %534 = getelementptr inbounds float, float* %1, i64 5
  %535 = load float, float* %534, align 4
  %536 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %535, i32 1
  %537 = getelementptr inbounds float, float* %1, i64 6
  %538 = load float, float* %537, align 4
  %539 = insertelement <4 x float> %536, float %538, i32 2
  %540 = insertelement <4 x float> %539, float 1.000000e+00, i32 3
  %541 = getelementptr inbounds float, float* %0, i64 6
  %542 = load float, float* %541, align 4
  %543 = insertelement <4 x float> zeroinitializer, float %542, i32 1
  %544 = getelementptr inbounds float, float* %0, i64 10
  %545 = load float, float* %544, align 4
  %546 = insertelement <4 x float> %543, float %545, i32 2
  %547 = insertelement <4 x float> %546, float 0.000000e+00, i32 3
  %548 = call <4 x float> @llvm.fma.v4f32(<4 x float> %540, <4 x float> %547, <4 x float> %533)
  %549 = getelementptr inbounds float, float* %1, i64 5
  %550 = load float, float* %549, align 4
  %551 = insertelement <4 x float> zeroinitializer, float %550, i32 0
  %552 = getelementptr inbounds float, float* %1, i64 6
  %553 = load float, float* %552, align 4
  %554 = insertelement <4 x float> %551, float %553, i32 1
  %555 = getelementptr inbounds float, float* %1, i64 7
  %556 = load float, float* %555, align 4
  %557 = insertelement <4 x float> %554, float %556, i32 2
  %558 = insertelement <4 x float> %557, float 0.000000e+00, i32 3
  %559 = getelementptr inbounds float, float* %0, i64 6
  %560 = load float, float* %559, align 4
  %561 = insertelement <4 x float> zeroinitializer, float %560, i32 0
  %562 = getelementptr inbounds float, float* %0, i64 10
  %563 = load float, float* %562, align 4
  %564 = insertelement <4 x float> %561, float %563, i32 1
  %565 = getelementptr inbounds float, float* %0, i64 14
  %566 = load float, float* %565, align 4
  %567 = insertelement <4 x float> %564, float %566, i32 2
  %568 = insertelement <4 x float> %567, float 0.000000e+00, i32 3
  %569 = call <4 x float> @llvm.fma.v4f32(<4 x float> %558, <4 x float> %568, <4 x float> %548)
  %570 = getelementptr inbounds float, float* %1, i64 4
  %571 = load float, float* %570, align 4
  %572 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %571, i32 3
  %573 = getelementptr inbounds float, float* %0, i64 3
  %574 = load float, float* %573, align 4
  %575 = insertelement <4 x float> zeroinitializer, float %574, i32 3
  %576 = fmul <4 x float> %572, %575
  %577 = getelementptr inbounds float, float* %1, i64 4
  %578 = load float, float* %577, align 4
  %579 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %578, i32 2
  %580 = insertelement <4 x float> %579, float 1.000000e+00, i32 3
  %581 = getelementptr inbounds float, float* %0, i64 3
  %582 = load float, float* %581, align 4
  %583 = insertelement <4 x float> zeroinitializer, float %582, i32 2
  %584 = insertelement <4 x float> %583, float 0.000000e+00, i32 3
  %585 = call <4 x float> @llvm.fma.v4f32(<4 x float> %580, <4 x float> %584, <4 x float> %576)
  %586 = getelementptr inbounds float, float* %1, i64 4
  %587 = load float, float* %586, align 4
  %588 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %587, i32 1
  %589 = insertelement <4 x float> %588, float 1.000000e+00, i32 2
  %590 = getelementptr inbounds float, float* %1, i64 5
  %591 = load float, float* %590, align 4
  %592 = insertelement <4 x float> %589, float %591, i32 3
  %593 = getelementptr inbounds float, float* %0, i64 3
  %594 = load float, float* %593, align 4
  %595 = insertelement <4 x float> zeroinitializer, float %594, i32 1
  %596 = insertelement <4 x float> %595, float 0.000000e+00, i32 2
  %597 = getelementptr inbounds float, float* %0, i64 7
  %598 = load float, float* %597, align 4
  %599 = insertelement <4 x float> %596, float %598, i32 3
  %600 = call <4 x float> @llvm.fma.v4f32(<4 x float> %592, <4 x float> %599, <4 x float> %585)
  %601 = getelementptr inbounds float, float* %1, i64 5
  %602 = load float, float* %601, align 4
  %603 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %602, i32 2
  %604 = getelementptr inbounds float, float* %1, i64 6
  %605 = load float, float* %604, align 4
  %606 = insertelement <4 x float> %603, float %605, i32 3
  %607 = getelementptr inbounds float, float* %0, i64 7
  %608 = load float, float* %607, align 4
  %609 = insertelement <4 x float> zeroinitializer, float %608, i32 2
  %610 = getelementptr inbounds float, float* %0, i64 11
  %611 = load float, float* %610, align 4
  %612 = insertelement <4 x float> %609, float %611, i32 3
  %613 = call <4 x float> @llvm.fma.v4f32(<4 x float> %606, <4 x float> %612, <4 x float> %600)
  %614 = getelementptr inbounds float, float* %1, i64 4
  %615 = load float, float* %614, align 4
  %616 = insertelement <4 x float> zeroinitializer, float %615, i32 0
  %617 = getelementptr inbounds float, float* %1, i64 5
  %618 = load float, float* %617, align 4
  %619 = insertelement <4 x float> %616, float %618, i32 1
  %620 = getelementptr inbounds float, float* %1, i64 6
  %621 = load float, float* %620, align 4
  %622 = insertelement <4 x float> %619, float %621, i32 2
  %623 = getelementptr inbounds float, float* %1, i64 7
  %624 = load float, float* %623, align 4
  %625 = insertelement <4 x float> %622, float %624, i32 3
  %626 = getelementptr inbounds float, float* %0, i64 3
  %627 = load float, float* %626, align 4
  %628 = insertelement <4 x float> zeroinitializer, float %627, i32 0
  %629 = getelementptr inbounds float, float* %0, i64 7
  %630 = load float, float* %629, align 4
  %631 = insertelement <4 x float> %628, float %630, i32 1
  %632 = getelementptr inbounds float, float* %0, i64 11
  %633 = load float, float* %632, align 4
  %634 = insertelement <4 x float> %631, float %633, i32 2
  %635 = getelementptr inbounds float, float* %0, i64 15
  %636 = load float, float* %635, align 4
  %637 = insertelement <4 x float> %634, float %636, i32 3
  %638 = call <4 x float> @llvm.fma.v4f32(<4 x float> %625, <4 x float> %637, <4 x float> %613)
  %639 = shufflevector <4 x float> %569, <4 x float> %638, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %640 = getelementptr inbounds float, float* %1, i64 8
  %641 = load float, float* %640, align 4
  %642 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %641, i32 3
  %643 = load float, float* %0, align 4
  %644 = insertelement <4 x float> zeroinitializer, float %643, i32 3
  %645 = fmul <4 x float> %642, %644
  %646 = getelementptr inbounds float, float* %1, i64 8
  %647 = load float, float* %646, align 4
  %648 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %647, i32 2
  %649 = insertelement <4 x float> %648, float 1.000000e+00, i32 3
  %650 = load float, float* %0, align 4
  %651 = insertelement <4 x float> zeroinitializer, float %650, i32 2
  %652 = insertelement <4 x float> %651, float 0.000000e+00, i32 3
  %653 = call <4 x float> @llvm.fma.v4f32(<4 x float> %649, <4 x float> %652, <4 x float> %645)
  %654 = getelementptr inbounds float, float* %1, i64 9
  %655 = load float, float* %654, align 4
  %656 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %655, i32 3
  %657 = getelementptr inbounds float, float* %0, i64 4
  %658 = load float, float* %657, align 4
  %659 = insertelement <4 x float> zeroinitializer, float %658, i32 3
  %660 = call <4 x float> @llvm.fma.v4f32(<4 x float> %656, <4 x float> %659, <4 x float> %653)
  %661 = getelementptr inbounds float, float* %1, i64 8
  %662 = load float, float* %661, align 4
  %663 = insertelement <4 x float> zeroinitializer, float %662, i32 1
  %664 = getelementptr inbounds float, float* %1, i64 9
  %665 = load float, float* %664, align 4
  %666 = insertelement <4 x float> %663, float %665, i32 2
  %667 = getelementptr inbounds float, float* %1, i64 10
  %668 = load float, float* %667, align 4
  %669 = insertelement <4 x float> %666, float %668, i32 3
  %670 = load float, float* %0, align 4
  %671 = insertelement <4 x float> zeroinitializer, float %670, i32 1
  %672 = getelementptr inbounds float, float* %0, i64 4
  %673 = load float, float* %672, align 4
  %674 = insertelement <4 x float> %671, float %673, i32 2
  %675 = getelementptr inbounds float, float* %0, i64 8
  %676 = load float, float* %675, align 4
  %677 = insertelement <4 x float> %674, float %676, i32 3
  %678 = call <4 x float> @llvm.fma.v4f32(<4 x float> %669, <4 x float> %677, <4 x float> %660)
  %679 = getelementptr inbounds float, float* %1, i64 8
  %680 = load float, float* %679, align 4
  %681 = insertelement <4 x float> zeroinitializer, float %680, i32 0
  %682 = insertelement <4 x float> %681, float 1.000000e+00, i32 1
  %683 = insertelement <4 x float> %682, float 1.000000e+00, i32 2
  %684 = insertelement <4 x float> %683, float 1.000000e+00, i32 3
  %685 = load float, float* %0, align 4
  %686 = insertelement <4 x float> zeroinitializer, float %685, i32 0
  %687 = insertelement <4 x float> %686, float 0.000000e+00, i32 1
  %688 = insertelement <4 x float> %687, float 0.000000e+00, i32 2
  %689 = insertelement <4 x float> %688, float 0.000000e+00, i32 3
  %690 = fmul <4 x float> %684, %689
  %691 = fadd <4 x float> %690, zeroinitializer
  %692 = getelementptr inbounds float, float* %1, i64 9
  %693 = load float, float* %692, align 4
  %694 = insertelement <4 x float> zeroinitializer, float %693, i32 0
  %695 = insertelement <4 x float> %694, float 1.000000e+00, i32 1
  %696 = insertelement <4 x float> %695, float 1.000000e+00, i32 2
  %697 = getelementptr inbounds float, float* %1, i64 8
  %698 = load float, float* %697, align 4
  %699 = insertelement <4 x float> %696, float %698, i32 3
  %700 = getelementptr inbounds float, float* %0, i64 4
  %701 = load float, float* %700, align 4
  %702 = insertelement <4 x float> zeroinitializer, float %701, i32 0
  %703 = insertelement <4 x float> %702, float 0.000000e+00, i32 1
  %704 = insertelement <4 x float> %703, float 0.000000e+00, i32 2
  %705 = getelementptr inbounds float, float* %0, i64 1
  %706 = load float, float* %705, align 4
  %707 = insertelement <4 x float> %704, float %706, i32 3
  %708 = call <4 x float> @llvm.fma.v4f32(<4 x float> %699, <4 x float> %707, <4 x float> %691)
  %709 = getelementptr inbounds float, float* %1, i64 10
  %710 = load float, float* %709, align 4
  %711 = insertelement <4 x float> zeroinitializer, float %710, i32 0
  %712 = insertelement <4 x float> %711, float 1.000000e+00, i32 1
  %713 = insertelement <4 x float> %712, float 1.000000e+00, i32 2
  %714 = insertelement <4 x float> %713, float 1.000000e+00, i32 3
  %715 = getelementptr inbounds float, float* %0, i64 8
  %716 = load float, float* %715, align 4
  %717 = insertelement <4 x float> zeroinitializer, float %716, i32 0
  %718 = insertelement <4 x float> %717, float 0.000000e+00, i32 1
  %719 = insertelement <4 x float> %718, float 0.000000e+00, i32 2
  %720 = insertelement <4 x float> %719, float 0.000000e+00, i32 3
  %721 = call <4 x float> @llvm.fma.v4f32(<4 x float> %714, <4 x float> %720, <4 x float> %708)
  %722 = getelementptr inbounds float, float* %1, i64 11
  %723 = load float, float* %722, align 4
  %724 = insertelement <4 x float> zeroinitializer, float %723, i32 0
  %725 = insertelement <4 x float> %724, float 0.000000e+00, i32 1
  %726 = getelementptr inbounds float, float* %1, i64 8
  %727 = load float, float* %726, align 4
  %728 = insertelement <4 x float> %725, float %727, i32 2
  %729 = getelementptr inbounds float, float* %1, i64 9
  %730 = load float, float* %729, align 4
  %731 = insertelement <4 x float> %728, float %730, i32 3
  %732 = getelementptr inbounds float, float* %0, i64 12
  %733 = load float, float* %732, align 4
  %734 = insertelement <4 x float> zeroinitializer, float %733, i32 0
  %735 = insertelement <4 x float> %734, float 0.000000e+00, i32 1
  %736 = getelementptr inbounds float, float* %0, i64 1
  %737 = load float, float* %736, align 4
  %738 = insertelement <4 x float> %735, float %737, i32 2
  %739 = getelementptr inbounds float, float* %0, i64 5
  %740 = load float, float* %739, align 4
  %741 = insertelement <4 x float> %738, float %740, i32 3
  %742 = call <4 x float> @llvm.fma.v4f32(<4 x float> %731, <4 x float> %741, <4 x float> %721)
  %743 = shufflevector <4 x float> %678, <4 x float> %742, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %744 = shufflevector <8 x float> %639, <8 x float> %743, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %745 = getelementptr inbounds float, float* %1, i64 8
  %746 = load float, float* %745, align 4
  %747 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %746, i32 1
  %748 = insertelement <4 x float> %747, float 1.000000e+00, i32 2
  %749 = insertelement <4 x float> %748, float 1.000000e+00, i32 3
  %750 = getelementptr inbounds float, float* %0, i64 1
  %751 = load float, float* %750, align 4
  %752 = insertelement <4 x float> zeroinitializer, float %751, i32 1
  %753 = insertelement <4 x float> %752, float 0.000000e+00, i32 2
  %754 = insertelement <4 x float> %753, float 0.000000e+00, i32 3
  %755 = fmul <4 x float> %749, %754
  %756 = getelementptr inbounds float, float* %1, i64 8
  %757 = load float, float* %756, align 4
  %758 = insertelement <4 x float> zeroinitializer, float %757, i32 0
  %759 = insertelement <4 x float> %758, float 1.000000e+00, i32 1
  %760 = insertelement <4 x float> %759, float 1.000000e+00, i32 2
  %761 = insertelement <4 x float> %760, float 1.000000e+00, i32 3
  %762 = getelementptr inbounds float, float* %0, i64 1
  %763 = load float, float* %762, align 4
  %764 = insertelement <4 x float> zeroinitializer, float %763, i32 0
  %765 = insertelement <4 x float> %764, float 0.000000e+00, i32 1
  %766 = insertelement <4 x float> %765, float 0.000000e+00, i32 2
  %767 = insertelement <4 x float> %766, float 0.000000e+00, i32 3
  %768 = call <4 x float> @llvm.fma.v4f32(<4 x float> %761, <4 x float> %767, <4 x float> %755)
  %769 = getelementptr inbounds float, float* %1, i64 9
  %770 = load float, float* %769, align 4
  %771 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %770, i32 1
  %772 = insertelement <4 x float> %771, float 1.000000e+00, i32 2
  %773 = insertelement <4 x float> %772, float 1.000000e+00, i32 3
  %774 = getelementptr inbounds float, float* %0, i64 5
  %775 = load float, float* %774, align 4
  %776 = insertelement <4 x float> zeroinitializer, float %775, i32 1
  %777 = insertelement <4 x float> %776, float 0.000000e+00, i32 2
  %778 = insertelement <4 x float> %777, float 0.000000e+00, i32 3
  %779 = call <4 x float> @llvm.fma.v4f32(<4 x float> %773, <4 x float> %778, <4 x float> %768)
  %780 = getelementptr inbounds float, float* %1, i64 9
  %781 = load float, float* %780, align 4
  %782 = insertelement <4 x float> zeroinitializer, float %781, i32 0
  %783 = getelementptr inbounds float, float* %1, i64 10
  %784 = load float, float* %783, align 4
  %785 = insertelement <4 x float> %782, float %784, i32 1
  %786 = insertelement <4 x float> %785, float 1.000000e+00, i32 2
  %787 = getelementptr inbounds float, float* %1, i64 8
  %788 = load float, float* %787, align 4
  %789 = insertelement <4 x float> %786, float %788, i32 3
  %790 = getelementptr inbounds float, float* %0, i64 5
  %791 = load float, float* %790, align 4
  %792 = insertelement <4 x float> zeroinitializer, float %791, i32 0
  %793 = getelementptr inbounds float, float* %0, i64 9
  %794 = load float, float* %793, align 4
  %795 = insertelement <4 x float> %792, float %794, i32 1
  %796 = insertelement <4 x float> %795, float 0.000000e+00, i32 2
  %797 = getelementptr inbounds float, float* %0, i64 2
  %798 = load float, float* %797, align 4
  %799 = insertelement <4 x float> %796, float %798, i32 3
  %800 = call <4 x float> @llvm.fma.v4f32(<4 x float> %789, <4 x float> %799, <4 x float> %779)
  %801 = getelementptr inbounds float, float* %1, i64 10
  %802 = load float, float* %801, align 4
  %803 = insertelement <4 x float> zeroinitializer, float %802, i32 0
  %804 = getelementptr inbounds float, float* %1, i64 11
  %805 = load float, float* %804, align 4
  %806 = insertelement <4 x float> %803, float %805, i32 1
  %807 = insertelement <4 x float> %806, float 1.000000e+00, i32 2
  %808 = insertelement <4 x float> %807, float 1.000000e+00, i32 3
  %809 = getelementptr inbounds float, float* %0, i64 9
  %810 = load float, float* %809, align 4
  %811 = insertelement <4 x float> zeroinitializer, float %810, i32 0
  %812 = getelementptr inbounds float, float* %0, i64 13
  %813 = load float, float* %812, align 4
  %814 = insertelement <4 x float> %811, float %813, i32 1
  %815 = insertelement <4 x float> %814, float 0.000000e+00, i32 2
  %816 = insertelement <4 x float> %815, float 0.000000e+00, i32 3
  %817 = call <4 x float> @llvm.fma.v4f32(<4 x float> %808, <4 x float> %816, <4 x float> %800)
  %818 = getelementptr inbounds float, float* %1, i64 8
  %819 = load float, float* %818, align 4
  %820 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %819, i32 2
  %821 = insertelement <4 x float> %820, float 1.000000e+00, i32 3
  %822 = getelementptr inbounds float, float* %0, i64 2
  %823 = load float, float* %822, align 4
  %824 = insertelement <4 x float> zeroinitializer, float %823, i32 2
  %825 = insertelement <4 x float> %824, float 0.000000e+00, i32 3
  %826 = fmul <4 x float> %821, %825
  %827 = getelementptr inbounds float, float* %1, i64 8
  %828 = load float, float* %827, align 4
  %829 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %828, i32 1
  %830 = insertelement <4 x float> %829, float 1.000000e+00, i32 2
  %831 = insertelement <4 x float> %830, float 1.000000e+00, i32 3
  %832 = getelementptr inbounds float, float* %0, i64 2
  %833 = load float, float* %832, align 4
  %834 = insertelement <4 x float> zeroinitializer, float %833, i32 1
  %835 = insertelement <4 x float> %834, float 0.000000e+00, i32 2
  %836 = insertelement <4 x float> %835, float 0.000000e+00, i32 3
  %837 = call <4 x float> @llvm.fma.v4f32(<4 x float> %831, <4 x float> %836, <4 x float> %826)
  %838 = getelementptr inbounds float, float* %1, i64 8
  %839 = load float, float* %838, align 4
  %840 = insertelement <4 x float> zeroinitializer, float %839, i32 0
  %841 = insertelement <4 x float> %840, float 1.000000e+00, i32 1
  %842 = getelementptr inbounds float, float* %1, i64 9
  %843 = load float, float* %842, align 4
  %844 = insertelement <4 x float> %841, float %843, i32 2
  %845 = insertelement <4 x float> %844, float 1.000000e+00, i32 3
  %846 = getelementptr inbounds float, float* %0, i64 2
  %847 = load float, float* %846, align 4
  %848 = insertelement <4 x float> zeroinitializer, float %847, i32 0
  %849 = insertelement <4 x float> %848, float 0.000000e+00, i32 1
  %850 = getelementptr inbounds float, float* %0, i64 6
  %851 = load float, float* %850, align 4
  %852 = insertelement <4 x float> %849, float %851, i32 2
  %853 = insertelement <4 x float> %852, float 0.000000e+00, i32 3
  %854 = call <4 x float> @llvm.fma.v4f32(<4 x float> %845, <4 x float> %853, <4 x float> %837)
  %855 = getelementptr inbounds float, float* %1, i64 9
  %856 = load float, float* %855, align 4
  %857 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %856, i32 1
  %858 = getelementptr inbounds float, float* %1, i64 10
  %859 = load float, float* %858, align 4
  %860 = insertelement <4 x float> %857, float %859, i32 2
  %861 = insertelement <4 x float> %860, float 1.000000e+00, i32 3
  %862 = getelementptr inbounds float, float* %0, i64 6
  %863 = load float, float* %862, align 4
  %864 = insertelement <4 x float> zeroinitializer, float %863, i32 1
  %865 = getelementptr inbounds float, float* %0, i64 10
  %866 = load float, float* %865, align 4
  %867 = insertelement <4 x float> %864, float %866, i32 2
  %868 = insertelement <4 x float> %867, float 0.000000e+00, i32 3
  %869 = call <4 x float> @llvm.fma.v4f32(<4 x float> %861, <4 x float> %868, <4 x float> %854)
  %870 = getelementptr inbounds float, float* %1, i64 9
  %871 = load float, float* %870, align 4
  %872 = insertelement <4 x float> zeroinitializer, float %871, i32 0
  %873 = getelementptr inbounds float, float* %1, i64 10
  %874 = load float, float* %873, align 4
  %875 = insertelement <4 x float> %872, float %874, i32 1
  %876 = getelementptr inbounds float, float* %1, i64 11
  %877 = load float, float* %876, align 4
  %878 = insertelement <4 x float> %875, float %877, i32 2
  %879 = insertelement <4 x float> %878, float 0.000000e+00, i32 3
  %880 = getelementptr inbounds float, float* %0, i64 6
  %881 = load float, float* %880, align 4
  %882 = insertelement <4 x float> zeroinitializer, float %881, i32 0
  %883 = getelementptr inbounds float, float* %0, i64 10
  %884 = load float, float* %883, align 4
  %885 = insertelement <4 x float> %882, float %884, i32 1
  %886 = getelementptr inbounds float, float* %0, i64 14
  %887 = load float, float* %886, align 4
  %888 = insertelement <4 x float> %885, float %887, i32 2
  %889 = insertelement <4 x float> %888, float 0.000000e+00, i32 3
  %890 = call <4 x float> @llvm.fma.v4f32(<4 x float> %879, <4 x float> %889, <4 x float> %869)
  %891 = shufflevector <4 x float> %817, <4 x float> %890, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %892 = getelementptr inbounds float, float* %1, i64 8
  %893 = load float, float* %892, align 4
  %894 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %893, i32 3
  %895 = getelementptr inbounds float, float* %0, i64 3
  %896 = load float, float* %895, align 4
  %897 = insertelement <4 x float> zeroinitializer, float %896, i32 3
  %898 = fmul <4 x float> %894, %897
  %899 = getelementptr inbounds float, float* %1, i64 8
  %900 = load float, float* %899, align 4
  %901 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %900, i32 2
  %902 = insertelement <4 x float> %901, float 1.000000e+00, i32 3
  %903 = getelementptr inbounds float, float* %0, i64 3
  %904 = load float, float* %903, align 4
  %905 = insertelement <4 x float> zeroinitializer, float %904, i32 2
  %906 = insertelement <4 x float> %905, float 0.000000e+00, i32 3
  %907 = call <4 x float> @llvm.fma.v4f32(<4 x float> %902, <4 x float> %906, <4 x float> %898)
  %908 = getelementptr inbounds float, float* %1, i64 8
  %909 = load float, float* %908, align 4
  %910 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %909, i32 1
  %911 = insertelement <4 x float> %910, float 1.000000e+00, i32 2
  %912 = getelementptr inbounds float, float* %1, i64 9
  %913 = load float, float* %912, align 4
  %914 = insertelement <4 x float> %911, float %913, i32 3
  %915 = getelementptr inbounds float, float* %0, i64 3
  %916 = load float, float* %915, align 4
  %917 = insertelement <4 x float> zeroinitializer, float %916, i32 1
  %918 = insertelement <4 x float> %917, float 0.000000e+00, i32 2
  %919 = getelementptr inbounds float, float* %0, i64 7
  %920 = load float, float* %919, align 4
  %921 = insertelement <4 x float> %918, float %920, i32 3
  %922 = call <4 x float> @llvm.fma.v4f32(<4 x float> %914, <4 x float> %921, <4 x float> %907)
  %923 = getelementptr inbounds float, float* %1, i64 9
  %924 = load float, float* %923, align 4
  %925 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %924, i32 2
  %926 = getelementptr inbounds float, float* %1, i64 10
  %927 = load float, float* %926, align 4
  %928 = insertelement <4 x float> %925, float %927, i32 3
  %929 = getelementptr inbounds float, float* %0, i64 7
  %930 = load float, float* %929, align 4
  %931 = insertelement <4 x float> zeroinitializer, float %930, i32 2
  %932 = getelementptr inbounds float, float* %0, i64 11
  %933 = load float, float* %932, align 4
  %934 = insertelement <4 x float> %931, float %933, i32 3
  %935 = call <4 x float> @llvm.fma.v4f32(<4 x float> %928, <4 x float> %934, <4 x float> %922)
  %936 = getelementptr inbounds float, float* %1, i64 8
  %937 = load float, float* %936, align 4
  %938 = insertelement <4 x float> zeroinitializer, float %937, i32 0
  %939 = getelementptr inbounds float, float* %1, i64 9
  %940 = load float, float* %939, align 4
  %941 = insertelement <4 x float> %938, float %940, i32 1
  %942 = getelementptr inbounds float, float* %1, i64 10
  %943 = load float, float* %942, align 4
  %944 = insertelement <4 x float> %941, float %943, i32 2
  %945 = getelementptr inbounds float, float* %1, i64 11
  %946 = load float, float* %945, align 4
  %947 = insertelement <4 x float> %944, float %946, i32 3
  %948 = getelementptr inbounds float, float* %0, i64 3
  %949 = load float, float* %948, align 4
  %950 = insertelement <4 x float> zeroinitializer, float %949, i32 0
  %951 = getelementptr inbounds float, float* %0, i64 7
  %952 = load float, float* %951, align 4
  %953 = insertelement <4 x float> %950, float %952, i32 1
  %954 = getelementptr inbounds float, float* %0, i64 11
  %955 = load float, float* %954, align 4
  %956 = insertelement <4 x float> %953, float %955, i32 2
  %957 = getelementptr inbounds float, float* %0, i64 15
  %958 = load float, float* %957, align 4
  %959 = insertelement <4 x float> %956, float %958, i32 3
  %960 = call <4 x float> @llvm.fma.v4f32(<4 x float> %947, <4 x float> %959, <4 x float> %935)
  %961 = getelementptr inbounds float, float* %1, i64 12
  %962 = load float, float* %961, align 4
  %963 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %962, i32 3
  %964 = load float, float* %0, align 4
  %965 = insertelement <4 x float> zeroinitializer, float %964, i32 3
  %966 = fmul <4 x float> %963, %965
  %967 = getelementptr inbounds float, float* %1, i64 12
  %968 = load float, float* %967, align 4
  %969 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %968, i32 2
  %970 = insertelement <4 x float> %969, float 1.000000e+00, i32 3
  %971 = load float, float* %0, align 4
  %972 = insertelement <4 x float> zeroinitializer, float %971, i32 2
  %973 = insertelement <4 x float> %972, float 0.000000e+00, i32 3
  %974 = call <4 x float> @llvm.fma.v4f32(<4 x float> %970, <4 x float> %973, <4 x float> %966)
  %975 = getelementptr inbounds float, float* %1, i64 13
  %976 = load float, float* %975, align 4
  %977 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %976, i32 3
  %978 = getelementptr inbounds float, float* %0, i64 4
  %979 = load float, float* %978, align 4
  %980 = insertelement <4 x float> zeroinitializer, float %979, i32 3
  %981 = call <4 x float> @llvm.fma.v4f32(<4 x float> %977, <4 x float> %980, <4 x float> %974)
  %982 = getelementptr inbounds float, float* %1, i64 12
  %983 = load float, float* %982, align 4
  %984 = insertelement <4 x float> zeroinitializer, float %983, i32 1
  %985 = getelementptr inbounds float, float* %1, i64 13
  %986 = load float, float* %985, align 4
  %987 = insertelement <4 x float> %984, float %986, i32 2
  %988 = getelementptr inbounds float, float* %1, i64 14
  %989 = load float, float* %988, align 4
  %990 = insertelement <4 x float> %987, float %989, i32 3
  %991 = load float, float* %0, align 4
  %992 = insertelement <4 x float> zeroinitializer, float %991, i32 1
  %993 = getelementptr inbounds float, float* %0, i64 4
  %994 = load float, float* %993, align 4
  %995 = insertelement <4 x float> %992, float %994, i32 2
  %996 = getelementptr inbounds float, float* %0, i64 8
  %997 = load float, float* %996, align 4
  %998 = insertelement <4 x float> %995, float %997, i32 3
  %999 = call <4 x float> @llvm.fma.v4f32(<4 x float> %990, <4 x float> %998, <4 x float> %981)
  %1000 = shufflevector <4 x float> %960, <4 x float> %999, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1001 = shufflevector <8 x float> %891, <8 x float> %1000, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1002 = shufflevector <16 x float> %744, <16 x float> %1001, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1003 = shufflevector <32 x float> %496, <32 x float> %1002, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %1004 = getelementptr inbounds float, float* %1, i64 12
  %1005 = load float, float* %1004, align 4
  %1006 = insertelement <4 x float> zeroinitializer, float %1005, i32 0
  %1007 = insertelement <4 x float> %1006, float 1.000000e+00, i32 1
  %1008 = insertelement <4 x float> %1007, float 1.000000e+00, i32 2
  %1009 = insertelement <4 x float> %1008, float 1.000000e+00, i32 3
  %1010 = load float, float* %0, align 4
  %1011 = insertelement <4 x float> zeroinitializer, float %1010, i32 0
  %1012 = insertelement <4 x float> %1011, float 0.000000e+00, i32 1
  %1013 = insertelement <4 x float> %1012, float 0.000000e+00, i32 2
  %1014 = insertelement <4 x float> %1013, float 0.000000e+00, i32 3
  %1015 = fmul <4 x float> %1009, %1014
  %1016 = fadd <4 x float> %1015, zeroinitializer
  %1017 = getelementptr inbounds float, float* %1, i64 13
  %1018 = load float, float* %1017, align 4
  %1019 = insertelement <4 x float> zeroinitializer, float %1018, i32 0
  %1020 = insertelement <4 x float> %1019, float 1.000000e+00, i32 1
  %1021 = insertelement <4 x float> %1020, float 1.000000e+00, i32 2
  %1022 = getelementptr inbounds float, float* %1, i64 12
  %1023 = load float, float* %1022, align 4
  %1024 = insertelement <4 x float> %1021, float %1023, i32 3
  %1025 = getelementptr inbounds float, float* %0, i64 4
  %1026 = load float, float* %1025, align 4
  %1027 = insertelement <4 x float> zeroinitializer, float %1026, i32 0
  %1028 = insertelement <4 x float> %1027, float 0.000000e+00, i32 1
  %1029 = insertelement <4 x float> %1028, float 0.000000e+00, i32 2
  %1030 = getelementptr inbounds float, float* %0, i64 1
  %1031 = load float, float* %1030, align 4
  %1032 = insertelement <4 x float> %1029, float %1031, i32 3
  %1033 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1024, <4 x float> %1032, <4 x float> %1016)
  %1034 = getelementptr inbounds float, float* %1, i64 14
  %1035 = load float, float* %1034, align 4
  %1036 = insertelement <4 x float> zeroinitializer, float %1035, i32 0
  %1037 = insertelement <4 x float> %1036, float 1.000000e+00, i32 1
  %1038 = insertelement <4 x float> %1037, float 1.000000e+00, i32 2
  %1039 = insertelement <4 x float> %1038, float 1.000000e+00, i32 3
  %1040 = getelementptr inbounds float, float* %0, i64 8
  %1041 = load float, float* %1040, align 4
  %1042 = insertelement <4 x float> zeroinitializer, float %1041, i32 0
  %1043 = insertelement <4 x float> %1042, float 0.000000e+00, i32 1
  %1044 = insertelement <4 x float> %1043, float 0.000000e+00, i32 2
  %1045 = insertelement <4 x float> %1044, float 0.000000e+00, i32 3
  %1046 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1039, <4 x float> %1045, <4 x float> %1033)
  %1047 = getelementptr inbounds float, float* %1, i64 15
  %1048 = load float, float* %1047, align 4
  %1049 = insertelement <4 x float> zeroinitializer, float %1048, i32 0
  %1050 = insertelement <4 x float> %1049, float 0.000000e+00, i32 1
  %1051 = getelementptr inbounds float, float* %1, i64 12
  %1052 = load float, float* %1051, align 4
  %1053 = insertelement <4 x float> %1050, float %1052, i32 2
  %1054 = getelementptr inbounds float, float* %1, i64 13
  %1055 = load float, float* %1054, align 4
  %1056 = insertelement <4 x float> %1053, float %1055, i32 3
  %1057 = getelementptr inbounds float, float* %0, i64 12
  %1058 = load float, float* %1057, align 4
  %1059 = insertelement <4 x float> zeroinitializer, float %1058, i32 0
  %1060 = insertelement <4 x float> %1059, float 0.000000e+00, i32 1
  %1061 = getelementptr inbounds float, float* %0, i64 1
  %1062 = load float, float* %1061, align 4
  %1063 = insertelement <4 x float> %1060, float %1062, i32 2
  %1064 = getelementptr inbounds float, float* %0, i64 5
  %1065 = load float, float* %1064, align 4
  %1066 = insertelement <4 x float> %1063, float %1065, i32 3
  %1067 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1056, <4 x float> %1066, <4 x float> %1046)
  %1068 = getelementptr inbounds float, float* %1, i64 12
  %1069 = load float, float* %1068, align 4
  %1070 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1069, i32 1
  %1071 = insertelement <4 x float> %1070, float 1.000000e+00, i32 2
  %1072 = insertelement <4 x float> %1071, float 1.000000e+00, i32 3
  %1073 = getelementptr inbounds float, float* %0, i64 1
  %1074 = load float, float* %1073, align 4
  %1075 = insertelement <4 x float> zeroinitializer, float %1074, i32 1
  %1076 = insertelement <4 x float> %1075, float 0.000000e+00, i32 2
  %1077 = insertelement <4 x float> %1076, float 0.000000e+00, i32 3
  %1078 = fmul <4 x float> %1072, %1077
  %1079 = getelementptr inbounds float, float* %1, i64 12
  %1080 = load float, float* %1079, align 4
  %1081 = insertelement <4 x float> zeroinitializer, float %1080, i32 0
  %1082 = insertelement <4 x float> %1081, float 1.000000e+00, i32 1
  %1083 = insertelement <4 x float> %1082, float 1.000000e+00, i32 2
  %1084 = insertelement <4 x float> %1083, float 1.000000e+00, i32 3
  %1085 = getelementptr inbounds float, float* %0, i64 1
  %1086 = load float, float* %1085, align 4
  %1087 = insertelement <4 x float> zeroinitializer, float %1086, i32 0
  %1088 = insertelement <4 x float> %1087, float 0.000000e+00, i32 1
  %1089 = insertelement <4 x float> %1088, float 0.000000e+00, i32 2
  %1090 = insertelement <4 x float> %1089, float 0.000000e+00, i32 3
  %1091 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1084, <4 x float> %1090, <4 x float> %1078)
  %1092 = getelementptr inbounds float, float* %1, i64 13
  %1093 = load float, float* %1092, align 4
  %1094 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1093, i32 1
  %1095 = insertelement <4 x float> %1094, float 1.000000e+00, i32 2
  %1096 = insertelement <4 x float> %1095, float 1.000000e+00, i32 3
  %1097 = getelementptr inbounds float, float* %0, i64 5
  %1098 = load float, float* %1097, align 4
  %1099 = insertelement <4 x float> zeroinitializer, float %1098, i32 1
  %1100 = insertelement <4 x float> %1099, float 0.000000e+00, i32 2
  %1101 = insertelement <4 x float> %1100, float 0.000000e+00, i32 3
  %1102 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1096, <4 x float> %1101, <4 x float> %1091)
  %1103 = getelementptr inbounds float, float* %1, i64 13
  %1104 = load float, float* %1103, align 4
  %1105 = insertelement <4 x float> zeroinitializer, float %1104, i32 0
  %1106 = getelementptr inbounds float, float* %1, i64 14
  %1107 = load float, float* %1106, align 4
  %1108 = insertelement <4 x float> %1105, float %1107, i32 1
  %1109 = insertelement <4 x float> %1108, float 1.000000e+00, i32 2
  %1110 = getelementptr inbounds float, float* %1, i64 12
  %1111 = load float, float* %1110, align 4
  %1112 = insertelement <4 x float> %1109, float %1111, i32 3
  %1113 = getelementptr inbounds float, float* %0, i64 5
  %1114 = load float, float* %1113, align 4
  %1115 = insertelement <4 x float> zeroinitializer, float %1114, i32 0
  %1116 = getelementptr inbounds float, float* %0, i64 9
  %1117 = load float, float* %1116, align 4
  %1118 = insertelement <4 x float> %1115, float %1117, i32 1
  %1119 = insertelement <4 x float> %1118, float 0.000000e+00, i32 2
  %1120 = getelementptr inbounds float, float* %0, i64 2
  %1121 = load float, float* %1120, align 4
  %1122 = insertelement <4 x float> %1119, float %1121, i32 3
  %1123 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1112, <4 x float> %1122, <4 x float> %1102)
  %1124 = getelementptr inbounds float, float* %1, i64 14
  %1125 = load float, float* %1124, align 4
  %1126 = insertelement <4 x float> zeroinitializer, float %1125, i32 0
  %1127 = getelementptr inbounds float, float* %1, i64 15
  %1128 = load float, float* %1127, align 4
  %1129 = insertelement <4 x float> %1126, float %1128, i32 1
  %1130 = insertelement <4 x float> %1129, float 1.000000e+00, i32 2
  %1131 = insertelement <4 x float> %1130, float 1.000000e+00, i32 3
  %1132 = getelementptr inbounds float, float* %0, i64 9
  %1133 = load float, float* %1132, align 4
  %1134 = insertelement <4 x float> zeroinitializer, float %1133, i32 0
  %1135 = getelementptr inbounds float, float* %0, i64 13
  %1136 = load float, float* %1135, align 4
  %1137 = insertelement <4 x float> %1134, float %1136, i32 1
  %1138 = insertelement <4 x float> %1137, float 0.000000e+00, i32 2
  %1139 = insertelement <4 x float> %1138, float 0.000000e+00, i32 3
  %1140 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1131, <4 x float> %1139, <4 x float> %1123)
  %1141 = shufflevector <4 x float> %1067, <4 x float> %1140, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1142 = getelementptr inbounds float, float* %1, i64 12
  %1143 = load float, float* %1142, align 4
  %1144 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1143, i32 2
  %1145 = insertelement <4 x float> %1144, float 1.000000e+00, i32 3
  %1146 = getelementptr inbounds float, float* %0, i64 2
  %1147 = load float, float* %1146, align 4
  %1148 = insertelement <4 x float> zeroinitializer, float %1147, i32 2
  %1149 = insertelement <4 x float> %1148, float 0.000000e+00, i32 3
  %1150 = fmul <4 x float> %1145, %1149
  %1151 = getelementptr inbounds float, float* %1, i64 12
  %1152 = load float, float* %1151, align 4
  %1153 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1152, i32 1
  %1154 = insertelement <4 x float> %1153, float 1.000000e+00, i32 2
  %1155 = insertelement <4 x float> %1154, float 1.000000e+00, i32 3
  %1156 = getelementptr inbounds float, float* %0, i64 2
  %1157 = load float, float* %1156, align 4
  %1158 = insertelement <4 x float> zeroinitializer, float %1157, i32 1
  %1159 = insertelement <4 x float> %1158, float 0.000000e+00, i32 2
  %1160 = insertelement <4 x float> %1159, float 0.000000e+00, i32 3
  %1161 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1155, <4 x float> %1160, <4 x float> %1150)
  %1162 = getelementptr inbounds float, float* %1, i64 12
  %1163 = load float, float* %1162, align 4
  %1164 = insertelement <4 x float> zeroinitializer, float %1163, i32 0
  %1165 = insertelement <4 x float> %1164, float 1.000000e+00, i32 1
  %1166 = getelementptr inbounds float, float* %1, i64 13
  %1167 = load float, float* %1166, align 4
  %1168 = insertelement <4 x float> %1165, float %1167, i32 2
  %1169 = insertelement <4 x float> %1168, float 1.000000e+00, i32 3
  %1170 = getelementptr inbounds float, float* %0, i64 2
  %1171 = load float, float* %1170, align 4
  %1172 = insertelement <4 x float> zeroinitializer, float %1171, i32 0
  %1173 = insertelement <4 x float> %1172, float 0.000000e+00, i32 1
  %1174 = getelementptr inbounds float, float* %0, i64 6
  %1175 = load float, float* %1174, align 4
  %1176 = insertelement <4 x float> %1173, float %1175, i32 2
  %1177 = insertelement <4 x float> %1176, float 0.000000e+00, i32 3
  %1178 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1169, <4 x float> %1177, <4 x float> %1161)
  %1179 = getelementptr inbounds float, float* %1, i64 13
  %1180 = load float, float* %1179, align 4
  %1181 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1180, i32 1
  %1182 = getelementptr inbounds float, float* %1, i64 14
  %1183 = load float, float* %1182, align 4
  %1184 = insertelement <4 x float> %1181, float %1183, i32 2
  %1185 = insertelement <4 x float> %1184, float 1.000000e+00, i32 3
  %1186 = getelementptr inbounds float, float* %0, i64 6
  %1187 = load float, float* %1186, align 4
  %1188 = insertelement <4 x float> zeroinitializer, float %1187, i32 1
  %1189 = getelementptr inbounds float, float* %0, i64 10
  %1190 = load float, float* %1189, align 4
  %1191 = insertelement <4 x float> %1188, float %1190, i32 2
  %1192 = insertelement <4 x float> %1191, float 0.000000e+00, i32 3
  %1193 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1185, <4 x float> %1192, <4 x float> %1178)
  %1194 = getelementptr inbounds float, float* %1, i64 13
  %1195 = load float, float* %1194, align 4
  %1196 = insertelement <4 x float> zeroinitializer, float %1195, i32 0
  %1197 = getelementptr inbounds float, float* %1, i64 14
  %1198 = load float, float* %1197, align 4
  %1199 = insertelement <4 x float> %1196, float %1198, i32 1
  %1200 = getelementptr inbounds float, float* %1, i64 15
  %1201 = load float, float* %1200, align 4
  %1202 = insertelement <4 x float> %1199, float %1201, i32 2
  %1203 = insertelement <4 x float> %1202, float 0.000000e+00, i32 3
  %1204 = getelementptr inbounds float, float* %0, i64 6
  %1205 = load float, float* %1204, align 4
  %1206 = insertelement <4 x float> zeroinitializer, float %1205, i32 0
  %1207 = getelementptr inbounds float, float* %0, i64 10
  %1208 = load float, float* %1207, align 4
  %1209 = insertelement <4 x float> %1206, float %1208, i32 1
  %1210 = getelementptr inbounds float, float* %0, i64 14
  %1211 = load float, float* %1210, align 4
  %1212 = insertelement <4 x float> %1209, float %1211, i32 2
  %1213 = insertelement <4 x float> %1212, float 0.000000e+00, i32 3
  %1214 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1203, <4 x float> %1213, <4 x float> %1193)
  %1215 = getelementptr inbounds float, float* %1, i64 12
  %1216 = load float, float* %1215, align 4
  %1217 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1216, i32 3
  %1218 = getelementptr inbounds float, float* %0, i64 3
  %1219 = load float, float* %1218, align 4
  %1220 = insertelement <4 x float> zeroinitializer, float %1219, i32 3
  %1221 = fmul <4 x float> %1217, %1220
  %1222 = getelementptr inbounds float, float* %1, i64 12
  %1223 = load float, float* %1222, align 4
  %1224 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1223, i32 2
  %1225 = insertelement <4 x float> %1224, float 1.000000e+00, i32 3
  %1226 = getelementptr inbounds float, float* %0, i64 3
  %1227 = load float, float* %1226, align 4
  %1228 = insertelement <4 x float> zeroinitializer, float %1227, i32 2
  %1229 = insertelement <4 x float> %1228, float 0.000000e+00, i32 3
  %1230 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1225, <4 x float> %1229, <4 x float> %1221)
  %1231 = getelementptr inbounds float, float* %1, i64 12
  %1232 = load float, float* %1231, align 4
  %1233 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1232, i32 1
  %1234 = insertelement <4 x float> %1233, float 1.000000e+00, i32 2
  %1235 = getelementptr inbounds float, float* %1, i64 13
  %1236 = load float, float* %1235, align 4
  %1237 = insertelement <4 x float> %1234, float %1236, i32 3
  %1238 = getelementptr inbounds float, float* %0, i64 3
  %1239 = load float, float* %1238, align 4
  %1240 = insertelement <4 x float> zeroinitializer, float %1239, i32 1
  %1241 = insertelement <4 x float> %1240, float 0.000000e+00, i32 2
  %1242 = getelementptr inbounds float, float* %0, i64 7
  %1243 = load float, float* %1242, align 4
  %1244 = insertelement <4 x float> %1241, float %1243, i32 3
  %1245 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1237, <4 x float> %1244, <4 x float> %1230)
  %1246 = getelementptr inbounds float, float* %1, i64 13
  %1247 = load float, float* %1246, align 4
  %1248 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1247, i32 2
  %1249 = getelementptr inbounds float, float* %1, i64 14
  %1250 = load float, float* %1249, align 4
  %1251 = insertelement <4 x float> %1248, float %1250, i32 3
  %1252 = getelementptr inbounds float, float* %0, i64 7
  %1253 = load float, float* %1252, align 4
  %1254 = insertelement <4 x float> zeroinitializer, float %1253, i32 2
  %1255 = getelementptr inbounds float, float* %0, i64 11
  %1256 = load float, float* %1255, align 4
  %1257 = insertelement <4 x float> %1254, float %1256, i32 3
  %1258 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1251, <4 x float> %1257, <4 x float> %1245)
  %1259 = getelementptr inbounds float, float* %1, i64 12
  %1260 = load float, float* %1259, align 4
  %1261 = insertelement <4 x float> zeroinitializer, float %1260, i32 0
  %1262 = getelementptr inbounds float, float* %1, i64 13
  %1263 = load float, float* %1262, align 4
  %1264 = insertelement <4 x float> %1261, float %1263, i32 1
  %1265 = getelementptr inbounds float, float* %1, i64 14
  %1266 = load float, float* %1265, align 4
  %1267 = insertelement <4 x float> %1264, float %1266, i32 2
  %1268 = getelementptr inbounds float, float* %1, i64 15
  %1269 = load float, float* %1268, align 4
  %1270 = insertelement <4 x float> %1267, float %1269, i32 3
  %1271 = getelementptr inbounds float, float* %0, i64 3
  %1272 = load float, float* %1271, align 4
  %1273 = insertelement <4 x float> zeroinitializer, float %1272, i32 0
  %1274 = getelementptr inbounds float, float* %0, i64 7
  %1275 = load float, float* %1274, align 4
  %1276 = insertelement <4 x float> %1273, float %1275, i32 1
  %1277 = getelementptr inbounds float, float* %0, i64 11
  %1278 = load float, float* %1277, align 4
  %1279 = insertelement <4 x float> %1276, float %1278, i32 2
  %1280 = getelementptr inbounds float, float* %0, i64 15
  %1281 = load float, float* %1280, align 4
  %1282 = insertelement <4 x float> %1279, float %1281, i32 3
  %1283 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1270, <4 x float> %1282, <4 x float> %1258)
  %1284 = shufflevector <4 x float> %1214, <4 x float> %1283, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1285 = shufflevector <8 x float> %1141, <8 x float> %1284, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1286 = load float, float* %1, align 4
  %1287 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1286, i32 3
  %1288 = load float, float* %0, align 4
  %1289 = insertelement <4 x float> zeroinitializer, float %1288, i32 3
  %1290 = fmul <4 x float> %1287, %1289
  %1291 = load float, float* %1, align 4
  %1292 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1291, i32 2
  %1293 = insertelement <4 x float> %1292, float 1.000000e+00, i32 3
  %1294 = load float, float* %0, align 4
  %1295 = insertelement <4 x float> zeroinitializer, float %1294, i32 2
  %1296 = insertelement <4 x float> %1295, float 0.000000e+00, i32 3
  %1297 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1293, <4 x float> %1296, <4 x float> %1290)
  %1298 = getelementptr inbounds float, float* %1, i64 1
  %1299 = load float, float* %1298, align 4
  %1300 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1299, i32 3
  %1301 = getelementptr inbounds float, float* %0, i64 4
  %1302 = load float, float* %1301, align 4
  %1303 = insertelement <4 x float> zeroinitializer, float %1302, i32 3
  %1304 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1300, <4 x float> %1303, <4 x float> %1297)
  %1305 = load float, float* %1, align 4
  %1306 = insertelement <4 x float> zeroinitializer, float %1305, i32 1
  %1307 = getelementptr inbounds float, float* %1, i64 1
  %1308 = load float, float* %1307, align 4
  %1309 = insertelement <4 x float> %1306, float %1308, i32 2
  %1310 = getelementptr inbounds float, float* %1, i64 2
  %1311 = load float, float* %1310, align 4
  %1312 = insertelement <4 x float> %1309, float %1311, i32 3
  %1313 = load float, float* %0, align 4
  %1314 = insertelement <4 x float> zeroinitializer, float %1313, i32 1
  %1315 = getelementptr inbounds float, float* %0, i64 4
  %1316 = load float, float* %1315, align 4
  %1317 = insertelement <4 x float> %1314, float %1316, i32 2
  %1318 = getelementptr inbounds float, float* %0, i64 8
  %1319 = load float, float* %1318, align 4
  %1320 = insertelement <4 x float> %1317, float %1319, i32 3
  %1321 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1312, <4 x float> %1320, <4 x float> %1304)
  %1322 = load float, float* %1, align 4
  %1323 = insertelement <4 x float> zeroinitializer, float %1322, i32 0
  %1324 = insertelement <4 x float> %1323, float 1.000000e+00, i32 1
  %1325 = insertelement <4 x float> %1324, float 1.000000e+00, i32 2
  %1326 = insertelement <4 x float> %1325, float 1.000000e+00, i32 3
  %1327 = load float, float* %0, align 4
  %1328 = insertelement <4 x float> zeroinitializer, float %1327, i32 0
  %1329 = insertelement <4 x float> %1328, float 0.000000e+00, i32 1
  %1330 = insertelement <4 x float> %1329, float 0.000000e+00, i32 2
  %1331 = insertelement <4 x float> %1330, float 0.000000e+00, i32 3
  %1332 = fmul <4 x float> %1326, %1331
  %1333 = fadd <4 x float> %1332, zeroinitializer
  %1334 = getelementptr inbounds float, float* %1, i64 1
  %1335 = load float, float* %1334, align 4
  %1336 = insertelement <4 x float> zeroinitializer, float %1335, i32 0
  %1337 = insertelement <4 x float> %1336, float 1.000000e+00, i32 1
  %1338 = insertelement <4 x float> %1337, float 1.000000e+00, i32 2
  %1339 = load float, float* %1, align 4
  %1340 = insertelement <4 x float> %1338, float %1339, i32 3
  %1341 = getelementptr inbounds float, float* %0, i64 4
  %1342 = load float, float* %1341, align 4
  %1343 = insertelement <4 x float> zeroinitializer, float %1342, i32 0
  %1344 = insertelement <4 x float> %1343, float 0.000000e+00, i32 1
  %1345 = insertelement <4 x float> %1344, float 0.000000e+00, i32 2
  %1346 = getelementptr inbounds float, float* %0, i64 1
  %1347 = load float, float* %1346, align 4
  %1348 = insertelement <4 x float> %1345, float %1347, i32 3
  %1349 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1340, <4 x float> %1348, <4 x float> %1333)
  %1350 = getelementptr inbounds float, float* %1, i64 2
  %1351 = load float, float* %1350, align 4
  %1352 = insertelement <4 x float> zeroinitializer, float %1351, i32 0
  %1353 = insertelement <4 x float> %1352, float 1.000000e+00, i32 1
  %1354 = insertelement <4 x float> %1353, float 1.000000e+00, i32 2
  %1355 = insertelement <4 x float> %1354, float 1.000000e+00, i32 3
  %1356 = getelementptr inbounds float, float* %0, i64 8
  %1357 = load float, float* %1356, align 4
  %1358 = insertelement <4 x float> zeroinitializer, float %1357, i32 0
  %1359 = insertelement <4 x float> %1358, float 0.000000e+00, i32 1
  %1360 = insertelement <4 x float> %1359, float 0.000000e+00, i32 2
  %1361 = insertelement <4 x float> %1360, float 0.000000e+00, i32 3
  %1362 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1355, <4 x float> %1361, <4 x float> %1349)
  %1363 = getelementptr inbounds float, float* %1, i64 3
  %1364 = load float, float* %1363, align 4
  %1365 = insertelement <4 x float> zeroinitializer, float %1364, i32 0
  %1366 = insertelement <4 x float> %1365, float 0.000000e+00, i32 1
  %1367 = load float, float* %1, align 4
  %1368 = insertelement <4 x float> %1366, float %1367, i32 2
  %1369 = getelementptr inbounds float, float* %1, i64 1
  %1370 = load float, float* %1369, align 4
  %1371 = insertelement <4 x float> %1368, float %1370, i32 3
  %1372 = getelementptr inbounds float, float* %0, i64 12
  %1373 = load float, float* %1372, align 4
  %1374 = insertelement <4 x float> zeroinitializer, float %1373, i32 0
  %1375 = insertelement <4 x float> %1374, float 0.000000e+00, i32 1
  %1376 = getelementptr inbounds float, float* %0, i64 1
  %1377 = load float, float* %1376, align 4
  %1378 = insertelement <4 x float> %1375, float %1377, i32 2
  %1379 = getelementptr inbounds float, float* %0, i64 5
  %1380 = load float, float* %1379, align 4
  %1381 = insertelement <4 x float> %1378, float %1380, i32 3
  %1382 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1371, <4 x float> %1381, <4 x float> %1362)
  %1383 = shufflevector <4 x float> %1321, <4 x float> %1382, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1384 = load float, float* %1, align 4
  %1385 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1384, i32 1
  %1386 = insertelement <4 x float> %1385, float 1.000000e+00, i32 2
  %1387 = insertelement <4 x float> %1386, float 1.000000e+00, i32 3
  %1388 = getelementptr inbounds float, float* %0, i64 1
  %1389 = load float, float* %1388, align 4
  %1390 = insertelement <4 x float> zeroinitializer, float %1389, i32 1
  %1391 = insertelement <4 x float> %1390, float 0.000000e+00, i32 2
  %1392 = insertelement <4 x float> %1391, float 0.000000e+00, i32 3
  %1393 = fmul <4 x float> %1387, %1392
  %1394 = load float, float* %1, align 4
  %1395 = insertelement <4 x float> zeroinitializer, float %1394, i32 0
  %1396 = insertelement <4 x float> %1395, float 1.000000e+00, i32 1
  %1397 = insertelement <4 x float> %1396, float 1.000000e+00, i32 2
  %1398 = insertelement <4 x float> %1397, float 1.000000e+00, i32 3
  %1399 = getelementptr inbounds float, float* %0, i64 1
  %1400 = load float, float* %1399, align 4
  %1401 = insertelement <4 x float> zeroinitializer, float %1400, i32 0
  %1402 = insertelement <4 x float> %1401, float 0.000000e+00, i32 1
  %1403 = insertelement <4 x float> %1402, float 0.000000e+00, i32 2
  %1404 = insertelement <4 x float> %1403, float 0.000000e+00, i32 3
  %1405 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1398, <4 x float> %1404, <4 x float> %1393)
  %1406 = getelementptr inbounds float, float* %1, i64 1
  %1407 = load float, float* %1406, align 4
  %1408 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1407, i32 1
  %1409 = insertelement <4 x float> %1408, float 1.000000e+00, i32 2
  %1410 = insertelement <4 x float> %1409, float 1.000000e+00, i32 3
  %1411 = getelementptr inbounds float, float* %0, i64 5
  %1412 = load float, float* %1411, align 4
  %1413 = insertelement <4 x float> zeroinitializer, float %1412, i32 1
  %1414 = insertelement <4 x float> %1413, float 0.000000e+00, i32 2
  %1415 = insertelement <4 x float> %1414, float 0.000000e+00, i32 3
  %1416 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1410, <4 x float> %1415, <4 x float> %1405)
  %1417 = getelementptr inbounds float, float* %1, i64 1
  %1418 = load float, float* %1417, align 4
  %1419 = insertelement <4 x float> zeroinitializer, float %1418, i32 0
  %1420 = getelementptr inbounds float, float* %1, i64 2
  %1421 = load float, float* %1420, align 4
  %1422 = insertelement <4 x float> %1419, float %1421, i32 1
  %1423 = insertelement <4 x float> %1422, float 1.000000e+00, i32 2
  %1424 = load float, float* %1, align 4
  %1425 = insertelement <4 x float> %1423, float %1424, i32 3
  %1426 = getelementptr inbounds float, float* %0, i64 5
  %1427 = load float, float* %1426, align 4
  %1428 = insertelement <4 x float> zeroinitializer, float %1427, i32 0
  %1429 = getelementptr inbounds float, float* %0, i64 9
  %1430 = load float, float* %1429, align 4
  %1431 = insertelement <4 x float> %1428, float %1430, i32 1
  %1432 = insertelement <4 x float> %1431, float 0.000000e+00, i32 2
  %1433 = getelementptr inbounds float, float* %0, i64 2
  %1434 = load float, float* %1433, align 4
  %1435 = insertelement <4 x float> %1432, float %1434, i32 3
  %1436 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1425, <4 x float> %1435, <4 x float> %1416)
  %1437 = getelementptr inbounds float, float* %1, i64 2
  %1438 = load float, float* %1437, align 4
  %1439 = insertelement <4 x float> zeroinitializer, float %1438, i32 0
  %1440 = getelementptr inbounds float, float* %1, i64 3
  %1441 = load float, float* %1440, align 4
  %1442 = insertelement <4 x float> %1439, float %1441, i32 1
  %1443 = insertelement <4 x float> %1442, float 1.000000e+00, i32 2
  %1444 = insertelement <4 x float> %1443, float 1.000000e+00, i32 3
  %1445 = getelementptr inbounds float, float* %0, i64 9
  %1446 = load float, float* %1445, align 4
  %1447 = insertelement <4 x float> zeroinitializer, float %1446, i32 0
  %1448 = getelementptr inbounds float, float* %0, i64 13
  %1449 = load float, float* %1448, align 4
  %1450 = insertelement <4 x float> %1447, float %1449, i32 1
  %1451 = insertelement <4 x float> %1450, float 0.000000e+00, i32 2
  %1452 = insertelement <4 x float> %1451, float 0.000000e+00, i32 3
  %1453 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1444, <4 x float> %1452, <4 x float> %1436)
  %1454 = load float, float* %1, align 4
  %1455 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1454, i32 2
  %1456 = insertelement <4 x float> %1455, float 1.000000e+00, i32 3
  %1457 = getelementptr inbounds float, float* %0, i64 2
  %1458 = load float, float* %1457, align 4
  %1459 = insertelement <4 x float> zeroinitializer, float %1458, i32 2
  %1460 = insertelement <4 x float> %1459, float 0.000000e+00, i32 3
  %1461 = fmul <4 x float> %1456, %1460
  %1462 = load float, float* %1, align 4
  %1463 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1462, i32 1
  %1464 = insertelement <4 x float> %1463, float 1.000000e+00, i32 2
  %1465 = insertelement <4 x float> %1464, float 1.000000e+00, i32 3
  %1466 = getelementptr inbounds float, float* %0, i64 2
  %1467 = load float, float* %1466, align 4
  %1468 = insertelement <4 x float> zeroinitializer, float %1467, i32 1
  %1469 = insertelement <4 x float> %1468, float 0.000000e+00, i32 2
  %1470 = insertelement <4 x float> %1469, float 0.000000e+00, i32 3
  %1471 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1465, <4 x float> %1470, <4 x float> %1461)
  %1472 = load float, float* %1, align 4
  %1473 = insertelement <4 x float> zeroinitializer, float %1472, i32 0
  %1474 = insertelement <4 x float> %1473, float 1.000000e+00, i32 1
  %1475 = getelementptr inbounds float, float* %1, i64 1
  %1476 = load float, float* %1475, align 4
  %1477 = insertelement <4 x float> %1474, float %1476, i32 2
  %1478 = insertelement <4 x float> %1477, float 1.000000e+00, i32 3
  %1479 = getelementptr inbounds float, float* %0, i64 2
  %1480 = load float, float* %1479, align 4
  %1481 = insertelement <4 x float> zeroinitializer, float %1480, i32 0
  %1482 = insertelement <4 x float> %1481, float 0.000000e+00, i32 1
  %1483 = getelementptr inbounds float, float* %0, i64 6
  %1484 = load float, float* %1483, align 4
  %1485 = insertelement <4 x float> %1482, float %1484, i32 2
  %1486 = insertelement <4 x float> %1485, float 0.000000e+00, i32 3
  %1487 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1478, <4 x float> %1486, <4 x float> %1471)
  %1488 = getelementptr inbounds float, float* %1, i64 1
  %1489 = load float, float* %1488, align 4
  %1490 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1489, i32 1
  %1491 = getelementptr inbounds float, float* %1, i64 2
  %1492 = load float, float* %1491, align 4
  %1493 = insertelement <4 x float> %1490, float %1492, i32 2
  %1494 = insertelement <4 x float> %1493, float 1.000000e+00, i32 3
  %1495 = getelementptr inbounds float, float* %0, i64 6
  %1496 = load float, float* %1495, align 4
  %1497 = insertelement <4 x float> zeroinitializer, float %1496, i32 1
  %1498 = getelementptr inbounds float, float* %0, i64 10
  %1499 = load float, float* %1498, align 4
  %1500 = insertelement <4 x float> %1497, float %1499, i32 2
  %1501 = insertelement <4 x float> %1500, float 0.000000e+00, i32 3
  %1502 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1494, <4 x float> %1501, <4 x float> %1487)
  %1503 = getelementptr inbounds float, float* %1, i64 1
  %1504 = load float, float* %1503, align 4
  %1505 = insertelement <4 x float> zeroinitializer, float %1504, i32 0
  %1506 = getelementptr inbounds float, float* %1, i64 2
  %1507 = load float, float* %1506, align 4
  %1508 = insertelement <4 x float> %1505, float %1507, i32 1
  %1509 = getelementptr inbounds float, float* %1, i64 3
  %1510 = load float, float* %1509, align 4
  %1511 = insertelement <4 x float> %1508, float %1510, i32 2
  %1512 = insertelement <4 x float> %1511, float 0.000000e+00, i32 3
  %1513 = getelementptr inbounds float, float* %0, i64 6
  %1514 = load float, float* %1513, align 4
  %1515 = insertelement <4 x float> zeroinitializer, float %1514, i32 0
  %1516 = getelementptr inbounds float, float* %0, i64 10
  %1517 = load float, float* %1516, align 4
  %1518 = insertelement <4 x float> %1515, float %1517, i32 1
  %1519 = getelementptr inbounds float, float* %0, i64 14
  %1520 = load float, float* %1519, align 4
  %1521 = insertelement <4 x float> %1518, float %1520, i32 2
  %1522 = insertelement <4 x float> %1521, float 0.000000e+00, i32 3
  %1523 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1512, <4 x float> %1522, <4 x float> %1502)
  %1524 = shufflevector <4 x float> %1453, <4 x float> %1523, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1525 = shufflevector <8 x float> %1383, <8 x float> %1524, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1526 = shufflevector <16 x float> %1285, <16 x float> %1525, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %1527 = load float, float* %1, align 4
  %1528 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1527, i32 3
  %1529 = getelementptr inbounds float, float* %0, i64 3
  %1530 = load float, float* %1529, align 4
  %1531 = insertelement <4 x float> zeroinitializer, float %1530, i32 3
  %1532 = fmul <4 x float> %1528, %1531
  %1533 = load float, float* %1, align 4
  %1534 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1533, i32 2
  %1535 = insertelement <4 x float> %1534, float 1.000000e+00, i32 3
  %1536 = getelementptr inbounds float, float* %0, i64 3
  %1537 = load float, float* %1536, align 4
  %1538 = insertelement <4 x float> zeroinitializer, float %1537, i32 2
  %1539 = insertelement <4 x float> %1538, float 0.000000e+00, i32 3
  %1540 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1535, <4 x float> %1539, <4 x float> %1532)
  %1541 = load float, float* %1, align 4
  %1542 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1541, i32 1
  %1543 = insertelement <4 x float> %1542, float 1.000000e+00, i32 2
  %1544 = getelementptr inbounds float, float* %1, i64 1
  %1545 = load float, float* %1544, align 4
  %1546 = insertelement <4 x float> %1543, float %1545, i32 3
  %1547 = getelementptr inbounds float, float* %0, i64 3
  %1548 = load float, float* %1547, align 4
  %1549 = insertelement <4 x float> zeroinitializer, float %1548, i32 1
  %1550 = insertelement <4 x float> %1549, float 0.000000e+00, i32 2
  %1551 = getelementptr inbounds float, float* %0, i64 7
  %1552 = load float, float* %1551, align 4
  %1553 = insertelement <4 x float> %1550, float %1552, i32 3
  %1554 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1546, <4 x float> %1553, <4 x float> %1540)
  %1555 = getelementptr inbounds float, float* %1, i64 1
  %1556 = load float, float* %1555, align 4
  %1557 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1556, i32 2
  %1558 = getelementptr inbounds float, float* %1, i64 2
  %1559 = load float, float* %1558, align 4
  %1560 = insertelement <4 x float> %1557, float %1559, i32 3
  %1561 = getelementptr inbounds float, float* %0, i64 7
  %1562 = load float, float* %1561, align 4
  %1563 = insertelement <4 x float> zeroinitializer, float %1562, i32 2
  %1564 = getelementptr inbounds float, float* %0, i64 11
  %1565 = load float, float* %1564, align 4
  %1566 = insertelement <4 x float> %1563, float %1565, i32 3
  %1567 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1560, <4 x float> %1566, <4 x float> %1554)
  %1568 = load float, float* %1, align 4
  %1569 = insertelement <4 x float> zeroinitializer, float %1568, i32 0
  %1570 = getelementptr inbounds float, float* %1, i64 1
  %1571 = load float, float* %1570, align 4
  %1572 = insertelement <4 x float> %1569, float %1571, i32 1
  %1573 = getelementptr inbounds float, float* %1, i64 2
  %1574 = load float, float* %1573, align 4
  %1575 = insertelement <4 x float> %1572, float %1574, i32 2
  %1576 = getelementptr inbounds float, float* %1, i64 3
  %1577 = load float, float* %1576, align 4
  %1578 = insertelement <4 x float> %1575, float %1577, i32 3
  %1579 = getelementptr inbounds float, float* %0, i64 3
  %1580 = load float, float* %1579, align 4
  %1581 = insertelement <4 x float> zeroinitializer, float %1580, i32 0
  %1582 = getelementptr inbounds float, float* %0, i64 7
  %1583 = load float, float* %1582, align 4
  %1584 = insertelement <4 x float> %1581, float %1583, i32 1
  %1585 = getelementptr inbounds float, float* %0, i64 11
  %1586 = load float, float* %1585, align 4
  %1587 = insertelement <4 x float> %1584, float %1586, i32 2
  %1588 = getelementptr inbounds float, float* %0, i64 15
  %1589 = load float, float* %1588, align 4
  %1590 = insertelement <4 x float> %1587, float %1589, i32 3
  %1591 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1578, <4 x float> %1590, <4 x float> %1567)
  %1592 = getelementptr inbounds float, float* %1, i64 4
  %1593 = load float, float* %1592, align 4
  %1594 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1593, i32 3
  %1595 = load float, float* %0, align 4
  %1596 = insertelement <4 x float> zeroinitializer, float %1595, i32 3
  %1597 = fmul <4 x float> %1594, %1596
  %1598 = getelementptr inbounds float, float* %1, i64 4
  %1599 = load float, float* %1598, align 4
  %1600 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1599, i32 2
  %1601 = insertelement <4 x float> %1600, float 1.000000e+00, i32 3
  %1602 = load float, float* %0, align 4
  %1603 = insertelement <4 x float> zeroinitializer, float %1602, i32 2
  %1604 = insertelement <4 x float> %1603, float 0.000000e+00, i32 3
  %1605 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1601, <4 x float> %1604, <4 x float> %1597)
  %1606 = getelementptr inbounds float, float* %1, i64 5
  %1607 = load float, float* %1606, align 4
  %1608 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1607, i32 3
  %1609 = getelementptr inbounds float, float* %0, i64 4
  %1610 = load float, float* %1609, align 4
  %1611 = insertelement <4 x float> zeroinitializer, float %1610, i32 3
  %1612 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1608, <4 x float> %1611, <4 x float> %1605)
  %1613 = getelementptr inbounds float, float* %1, i64 4
  %1614 = load float, float* %1613, align 4
  %1615 = insertelement <4 x float> zeroinitializer, float %1614, i32 1
  %1616 = getelementptr inbounds float, float* %1, i64 5
  %1617 = load float, float* %1616, align 4
  %1618 = insertelement <4 x float> %1615, float %1617, i32 2
  %1619 = getelementptr inbounds float, float* %1, i64 6
  %1620 = load float, float* %1619, align 4
  %1621 = insertelement <4 x float> %1618, float %1620, i32 3
  %1622 = load float, float* %0, align 4
  %1623 = insertelement <4 x float> zeroinitializer, float %1622, i32 1
  %1624 = getelementptr inbounds float, float* %0, i64 4
  %1625 = load float, float* %1624, align 4
  %1626 = insertelement <4 x float> %1623, float %1625, i32 2
  %1627 = getelementptr inbounds float, float* %0, i64 8
  %1628 = load float, float* %1627, align 4
  %1629 = insertelement <4 x float> %1626, float %1628, i32 3
  %1630 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1621, <4 x float> %1629, <4 x float> %1612)
  %1631 = shufflevector <4 x float> %1591, <4 x float> %1630, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1632 = getelementptr inbounds float, float* %1, i64 4
  %1633 = load float, float* %1632, align 4
  %1634 = insertelement <4 x float> zeroinitializer, float %1633, i32 0
  %1635 = insertelement <4 x float> %1634, float 1.000000e+00, i32 1
  %1636 = insertelement <4 x float> %1635, float 1.000000e+00, i32 2
  %1637 = insertelement <4 x float> %1636, float 1.000000e+00, i32 3
  %1638 = load float, float* %0, align 4
  %1639 = insertelement <4 x float> zeroinitializer, float %1638, i32 0
  %1640 = insertelement <4 x float> %1639, float 0.000000e+00, i32 1
  %1641 = insertelement <4 x float> %1640, float 0.000000e+00, i32 2
  %1642 = insertelement <4 x float> %1641, float 0.000000e+00, i32 3
  %1643 = fmul <4 x float> %1637, %1642
  %1644 = fadd <4 x float> %1643, zeroinitializer
  %1645 = getelementptr inbounds float, float* %1, i64 5
  %1646 = load float, float* %1645, align 4
  %1647 = insertelement <4 x float> zeroinitializer, float %1646, i32 0
  %1648 = insertelement <4 x float> %1647, float 1.000000e+00, i32 1
  %1649 = insertelement <4 x float> %1648, float 1.000000e+00, i32 2
  %1650 = getelementptr inbounds float, float* %1, i64 4
  %1651 = load float, float* %1650, align 4
  %1652 = insertelement <4 x float> %1649, float %1651, i32 3
  %1653 = getelementptr inbounds float, float* %0, i64 4
  %1654 = load float, float* %1653, align 4
  %1655 = insertelement <4 x float> zeroinitializer, float %1654, i32 0
  %1656 = insertelement <4 x float> %1655, float 0.000000e+00, i32 1
  %1657 = insertelement <4 x float> %1656, float 0.000000e+00, i32 2
  %1658 = getelementptr inbounds float, float* %0, i64 1
  %1659 = load float, float* %1658, align 4
  %1660 = insertelement <4 x float> %1657, float %1659, i32 3
  %1661 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1652, <4 x float> %1660, <4 x float> %1644)
  %1662 = getelementptr inbounds float, float* %1, i64 6
  %1663 = load float, float* %1662, align 4
  %1664 = insertelement <4 x float> zeroinitializer, float %1663, i32 0
  %1665 = insertelement <4 x float> %1664, float 1.000000e+00, i32 1
  %1666 = insertelement <4 x float> %1665, float 1.000000e+00, i32 2
  %1667 = insertelement <4 x float> %1666, float 1.000000e+00, i32 3
  %1668 = getelementptr inbounds float, float* %0, i64 8
  %1669 = load float, float* %1668, align 4
  %1670 = insertelement <4 x float> zeroinitializer, float %1669, i32 0
  %1671 = insertelement <4 x float> %1670, float 0.000000e+00, i32 1
  %1672 = insertelement <4 x float> %1671, float 0.000000e+00, i32 2
  %1673 = insertelement <4 x float> %1672, float 0.000000e+00, i32 3
  %1674 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1667, <4 x float> %1673, <4 x float> %1661)
  %1675 = getelementptr inbounds float, float* %1, i64 7
  %1676 = load float, float* %1675, align 4
  %1677 = insertelement <4 x float> zeroinitializer, float %1676, i32 0
  %1678 = insertelement <4 x float> %1677, float 0.000000e+00, i32 1
  %1679 = getelementptr inbounds float, float* %1, i64 4
  %1680 = load float, float* %1679, align 4
  %1681 = insertelement <4 x float> %1678, float %1680, i32 2
  %1682 = getelementptr inbounds float, float* %1, i64 5
  %1683 = load float, float* %1682, align 4
  %1684 = insertelement <4 x float> %1681, float %1683, i32 3
  %1685 = getelementptr inbounds float, float* %0, i64 12
  %1686 = load float, float* %1685, align 4
  %1687 = insertelement <4 x float> zeroinitializer, float %1686, i32 0
  %1688 = insertelement <4 x float> %1687, float 0.000000e+00, i32 1
  %1689 = getelementptr inbounds float, float* %0, i64 1
  %1690 = load float, float* %1689, align 4
  %1691 = insertelement <4 x float> %1688, float %1690, i32 2
  %1692 = getelementptr inbounds float, float* %0, i64 5
  %1693 = load float, float* %1692, align 4
  %1694 = insertelement <4 x float> %1691, float %1693, i32 3
  %1695 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1684, <4 x float> %1694, <4 x float> %1674)
  %1696 = getelementptr inbounds float, float* %1, i64 4
  %1697 = load float, float* %1696, align 4
  %1698 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1697, i32 1
  %1699 = insertelement <4 x float> %1698, float 1.000000e+00, i32 2
  %1700 = insertelement <4 x float> %1699, float 1.000000e+00, i32 3
  %1701 = getelementptr inbounds float, float* %0, i64 1
  %1702 = load float, float* %1701, align 4
  %1703 = insertelement <4 x float> zeroinitializer, float %1702, i32 1
  %1704 = insertelement <4 x float> %1703, float 0.000000e+00, i32 2
  %1705 = insertelement <4 x float> %1704, float 0.000000e+00, i32 3
  %1706 = fmul <4 x float> %1700, %1705
  %1707 = getelementptr inbounds float, float* %1, i64 4
  %1708 = load float, float* %1707, align 4
  %1709 = insertelement <4 x float> zeroinitializer, float %1708, i32 0
  %1710 = insertelement <4 x float> %1709, float 1.000000e+00, i32 1
  %1711 = insertelement <4 x float> %1710, float 1.000000e+00, i32 2
  %1712 = insertelement <4 x float> %1711, float 1.000000e+00, i32 3
  %1713 = getelementptr inbounds float, float* %0, i64 1
  %1714 = load float, float* %1713, align 4
  %1715 = insertelement <4 x float> zeroinitializer, float %1714, i32 0
  %1716 = insertelement <4 x float> %1715, float 0.000000e+00, i32 1
  %1717 = insertelement <4 x float> %1716, float 0.000000e+00, i32 2
  %1718 = insertelement <4 x float> %1717, float 0.000000e+00, i32 3
  %1719 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1712, <4 x float> %1718, <4 x float> %1706)
  %1720 = getelementptr inbounds float, float* %1, i64 5
  %1721 = load float, float* %1720, align 4
  %1722 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1721, i32 1
  %1723 = insertelement <4 x float> %1722, float 1.000000e+00, i32 2
  %1724 = insertelement <4 x float> %1723, float 1.000000e+00, i32 3
  %1725 = getelementptr inbounds float, float* %0, i64 5
  %1726 = load float, float* %1725, align 4
  %1727 = insertelement <4 x float> zeroinitializer, float %1726, i32 1
  %1728 = insertelement <4 x float> %1727, float 0.000000e+00, i32 2
  %1729 = insertelement <4 x float> %1728, float 0.000000e+00, i32 3
  %1730 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1724, <4 x float> %1729, <4 x float> %1719)
  %1731 = getelementptr inbounds float, float* %1, i64 5
  %1732 = load float, float* %1731, align 4
  %1733 = insertelement <4 x float> zeroinitializer, float %1732, i32 0
  %1734 = getelementptr inbounds float, float* %1, i64 6
  %1735 = load float, float* %1734, align 4
  %1736 = insertelement <4 x float> %1733, float %1735, i32 1
  %1737 = insertelement <4 x float> %1736, float 1.000000e+00, i32 2
  %1738 = getelementptr inbounds float, float* %1, i64 4
  %1739 = load float, float* %1738, align 4
  %1740 = insertelement <4 x float> %1737, float %1739, i32 3
  %1741 = getelementptr inbounds float, float* %0, i64 5
  %1742 = load float, float* %1741, align 4
  %1743 = insertelement <4 x float> zeroinitializer, float %1742, i32 0
  %1744 = getelementptr inbounds float, float* %0, i64 9
  %1745 = load float, float* %1744, align 4
  %1746 = insertelement <4 x float> %1743, float %1745, i32 1
  %1747 = insertelement <4 x float> %1746, float 0.000000e+00, i32 2
  %1748 = getelementptr inbounds float, float* %0, i64 2
  %1749 = load float, float* %1748, align 4
  %1750 = insertelement <4 x float> %1747, float %1749, i32 3
  %1751 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1740, <4 x float> %1750, <4 x float> %1730)
  %1752 = getelementptr inbounds float, float* %1, i64 6
  %1753 = load float, float* %1752, align 4
  %1754 = insertelement <4 x float> zeroinitializer, float %1753, i32 0
  %1755 = getelementptr inbounds float, float* %1, i64 7
  %1756 = load float, float* %1755, align 4
  %1757 = insertelement <4 x float> %1754, float %1756, i32 1
  %1758 = insertelement <4 x float> %1757, float 1.000000e+00, i32 2
  %1759 = insertelement <4 x float> %1758, float 1.000000e+00, i32 3
  %1760 = getelementptr inbounds float, float* %0, i64 9
  %1761 = load float, float* %1760, align 4
  %1762 = insertelement <4 x float> zeroinitializer, float %1761, i32 0
  %1763 = getelementptr inbounds float, float* %0, i64 13
  %1764 = load float, float* %1763, align 4
  %1765 = insertelement <4 x float> %1762, float %1764, i32 1
  %1766 = insertelement <4 x float> %1765, float 0.000000e+00, i32 2
  %1767 = insertelement <4 x float> %1766, float 0.000000e+00, i32 3
  %1768 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1759, <4 x float> %1767, <4 x float> %1751)
  %1769 = shufflevector <4 x float> %1695, <4 x float> %1768, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1770 = shufflevector <8 x float> %1631, <8 x float> %1769, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %1771 = getelementptr inbounds float, float* %1, i64 4
  %1772 = load float, float* %1771, align 4
  %1773 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1772, i32 2
  %1774 = insertelement <4 x float> %1773, float 1.000000e+00, i32 3
  %1775 = getelementptr inbounds float, float* %0, i64 2
  %1776 = load float, float* %1775, align 4
  %1777 = insertelement <4 x float> zeroinitializer, float %1776, i32 2
  %1778 = insertelement <4 x float> %1777, float 0.000000e+00, i32 3
  %1779 = fmul <4 x float> %1774, %1778
  %1780 = getelementptr inbounds float, float* %1, i64 4
  %1781 = load float, float* %1780, align 4
  %1782 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1781, i32 1
  %1783 = insertelement <4 x float> %1782, float 1.000000e+00, i32 2
  %1784 = insertelement <4 x float> %1783, float 1.000000e+00, i32 3
  %1785 = getelementptr inbounds float, float* %0, i64 2
  %1786 = load float, float* %1785, align 4
  %1787 = insertelement <4 x float> zeroinitializer, float %1786, i32 1
  %1788 = insertelement <4 x float> %1787, float 0.000000e+00, i32 2
  %1789 = insertelement <4 x float> %1788, float 0.000000e+00, i32 3
  %1790 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1784, <4 x float> %1789, <4 x float> %1779)
  %1791 = getelementptr inbounds float, float* %1, i64 4
  %1792 = load float, float* %1791, align 4
  %1793 = insertelement <4 x float> zeroinitializer, float %1792, i32 0
  %1794 = insertelement <4 x float> %1793, float 1.000000e+00, i32 1
  %1795 = getelementptr inbounds float, float* %1, i64 5
  %1796 = load float, float* %1795, align 4
  %1797 = insertelement <4 x float> %1794, float %1796, i32 2
  %1798 = insertelement <4 x float> %1797, float 1.000000e+00, i32 3
  %1799 = getelementptr inbounds float, float* %0, i64 2
  %1800 = load float, float* %1799, align 4
  %1801 = insertelement <4 x float> zeroinitializer, float %1800, i32 0
  %1802 = insertelement <4 x float> %1801, float 0.000000e+00, i32 1
  %1803 = getelementptr inbounds float, float* %0, i64 6
  %1804 = load float, float* %1803, align 4
  %1805 = insertelement <4 x float> %1802, float %1804, i32 2
  %1806 = insertelement <4 x float> %1805, float 0.000000e+00, i32 3
  %1807 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1798, <4 x float> %1806, <4 x float> %1790)
  %1808 = getelementptr inbounds float, float* %1, i64 5
  %1809 = load float, float* %1808, align 4
  %1810 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1809, i32 1
  %1811 = getelementptr inbounds float, float* %1, i64 6
  %1812 = load float, float* %1811, align 4
  %1813 = insertelement <4 x float> %1810, float %1812, i32 2
  %1814 = insertelement <4 x float> %1813, float 1.000000e+00, i32 3
  %1815 = getelementptr inbounds float, float* %0, i64 6
  %1816 = load float, float* %1815, align 4
  %1817 = insertelement <4 x float> zeroinitializer, float %1816, i32 1
  %1818 = getelementptr inbounds float, float* %0, i64 10
  %1819 = load float, float* %1818, align 4
  %1820 = insertelement <4 x float> %1817, float %1819, i32 2
  %1821 = insertelement <4 x float> %1820, float 0.000000e+00, i32 3
  %1822 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1814, <4 x float> %1821, <4 x float> %1807)
  %1823 = getelementptr inbounds float, float* %1, i64 5
  %1824 = load float, float* %1823, align 4
  %1825 = insertelement <4 x float> zeroinitializer, float %1824, i32 0
  %1826 = getelementptr inbounds float, float* %1, i64 6
  %1827 = load float, float* %1826, align 4
  %1828 = insertelement <4 x float> %1825, float %1827, i32 1
  %1829 = getelementptr inbounds float, float* %1, i64 7
  %1830 = load float, float* %1829, align 4
  %1831 = insertelement <4 x float> %1828, float %1830, i32 2
  %1832 = insertelement <4 x float> %1831, float 0.000000e+00, i32 3
  %1833 = getelementptr inbounds float, float* %0, i64 6
  %1834 = load float, float* %1833, align 4
  %1835 = insertelement <4 x float> zeroinitializer, float %1834, i32 0
  %1836 = getelementptr inbounds float, float* %0, i64 10
  %1837 = load float, float* %1836, align 4
  %1838 = insertelement <4 x float> %1835, float %1837, i32 1
  %1839 = getelementptr inbounds float, float* %0, i64 14
  %1840 = load float, float* %1839, align 4
  %1841 = insertelement <4 x float> %1838, float %1840, i32 2
  %1842 = insertelement <4 x float> %1841, float 0.000000e+00, i32 3
  %1843 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1832, <4 x float> %1842, <4 x float> %1822)
  %1844 = getelementptr inbounds float, float* %1, i64 4
  %1845 = load float, float* %1844, align 4
  %1846 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1845, i32 3
  %1847 = getelementptr inbounds float, float* %0, i64 3
  %1848 = load float, float* %1847, align 4
  %1849 = insertelement <4 x float> zeroinitializer, float %1848, i32 3
  %1850 = fmul <4 x float> %1846, %1849
  %1851 = getelementptr inbounds float, float* %1, i64 4
  %1852 = load float, float* %1851, align 4
  %1853 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1852, i32 2
  %1854 = insertelement <4 x float> %1853, float 1.000000e+00, i32 3
  %1855 = getelementptr inbounds float, float* %0, i64 3
  %1856 = load float, float* %1855, align 4
  %1857 = insertelement <4 x float> zeroinitializer, float %1856, i32 2
  %1858 = insertelement <4 x float> %1857, float 0.000000e+00, i32 3
  %1859 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1854, <4 x float> %1858, <4 x float> %1850)
  %1860 = getelementptr inbounds float, float* %1, i64 4
  %1861 = load float, float* %1860, align 4
  %1862 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1861, i32 1
  %1863 = insertelement <4 x float> %1862, float 1.000000e+00, i32 2
  %1864 = getelementptr inbounds float, float* %1, i64 5
  %1865 = load float, float* %1864, align 4
  %1866 = insertelement <4 x float> %1863, float %1865, i32 3
  %1867 = getelementptr inbounds float, float* %0, i64 3
  %1868 = load float, float* %1867, align 4
  %1869 = insertelement <4 x float> zeroinitializer, float %1868, i32 1
  %1870 = insertelement <4 x float> %1869, float 0.000000e+00, i32 2
  %1871 = getelementptr inbounds float, float* %0, i64 7
  %1872 = load float, float* %1871, align 4
  %1873 = insertelement <4 x float> %1870, float %1872, i32 3
  %1874 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1866, <4 x float> %1873, <4 x float> %1859)
  %1875 = getelementptr inbounds float, float* %1, i64 5
  %1876 = load float, float* %1875, align 4
  %1877 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1876, i32 2
  %1878 = getelementptr inbounds float, float* %1, i64 6
  %1879 = load float, float* %1878, align 4
  %1880 = insertelement <4 x float> %1877, float %1879, i32 3
  %1881 = getelementptr inbounds float, float* %0, i64 7
  %1882 = load float, float* %1881, align 4
  %1883 = insertelement <4 x float> zeroinitializer, float %1882, i32 2
  %1884 = getelementptr inbounds float, float* %0, i64 11
  %1885 = load float, float* %1884, align 4
  %1886 = insertelement <4 x float> %1883, float %1885, i32 3
  %1887 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1880, <4 x float> %1886, <4 x float> %1874)
  %1888 = getelementptr inbounds float, float* %1, i64 4
  %1889 = load float, float* %1888, align 4
  %1890 = insertelement <4 x float> zeroinitializer, float %1889, i32 0
  %1891 = getelementptr inbounds float, float* %1, i64 5
  %1892 = load float, float* %1891, align 4
  %1893 = insertelement <4 x float> %1890, float %1892, i32 1
  %1894 = getelementptr inbounds float, float* %1, i64 6
  %1895 = load float, float* %1894, align 4
  %1896 = insertelement <4 x float> %1893, float %1895, i32 2
  %1897 = getelementptr inbounds float, float* %1, i64 7
  %1898 = load float, float* %1897, align 4
  %1899 = insertelement <4 x float> %1896, float %1898, i32 3
  %1900 = getelementptr inbounds float, float* %0, i64 3
  %1901 = load float, float* %1900, align 4
  %1902 = insertelement <4 x float> zeroinitializer, float %1901, i32 0
  %1903 = getelementptr inbounds float, float* %0, i64 7
  %1904 = load float, float* %1903, align 4
  %1905 = insertelement <4 x float> %1902, float %1904, i32 1
  %1906 = getelementptr inbounds float, float* %0, i64 11
  %1907 = load float, float* %1906, align 4
  %1908 = insertelement <4 x float> %1905, float %1907, i32 2
  %1909 = getelementptr inbounds float, float* %0, i64 15
  %1910 = load float, float* %1909, align 4
  %1911 = insertelement <4 x float> %1908, float %1910, i32 3
  %1912 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1899, <4 x float> %1911, <4 x float> %1887)
  %1913 = shufflevector <4 x float> %1843, <4 x float> %1912, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %1914 = getelementptr inbounds float, float* %1, i64 8
  %1915 = load float, float* %1914, align 4
  %1916 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1915, i32 3
  %1917 = load float, float* %0, align 4
  %1918 = insertelement <4 x float> zeroinitializer, float %1917, i32 3
  %1919 = fmul <4 x float> %1916, %1918
  %1920 = getelementptr inbounds float, float* %1, i64 8
  %1921 = load float, float* %1920, align 4
  %1922 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %1921, i32 2
  %1923 = insertelement <4 x float> %1922, float 1.000000e+00, i32 3
  %1924 = load float, float* %0, align 4
  %1925 = insertelement <4 x float> zeroinitializer, float %1924, i32 2
  %1926 = insertelement <4 x float> %1925, float 0.000000e+00, i32 3
  %1927 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1923, <4 x float> %1926, <4 x float> %1919)
  %1928 = getelementptr inbounds float, float* %1, i64 9
  %1929 = load float, float* %1928, align 4
  %1930 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %1929, i32 3
  %1931 = getelementptr inbounds float, float* %0, i64 4
  %1932 = load float, float* %1931, align 4
  %1933 = insertelement <4 x float> zeroinitializer, float %1932, i32 3
  %1934 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1930, <4 x float> %1933, <4 x float> %1927)
  %1935 = getelementptr inbounds float, float* %1, i64 8
  %1936 = load float, float* %1935, align 4
  %1937 = insertelement <4 x float> zeroinitializer, float %1936, i32 1
  %1938 = getelementptr inbounds float, float* %1, i64 9
  %1939 = load float, float* %1938, align 4
  %1940 = insertelement <4 x float> %1937, float %1939, i32 2
  %1941 = getelementptr inbounds float, float* %1, i64 10
  %1942 = load float, float* %1941, align 4
  %1943 = insertelement <4 x float> %1940, float %1942, i32 3
  %1944 = load float, float* %0, align 4
  %1945 = insertelement <4 x float> zeroinitializer, float %1944, i32 1
  %1946 = getelementptr inbounds float, float* %0, i64 4
  %1947 = load float, float* %1946, align 4
  %1948 = insertelement <4 x float> %1945, float %1947, i32 2
  %1949 = getelementptr inbounds float, float* %0, i64 8
  %1950 = load float, float* %1949, align 4
  %1951 = insertelement <4 x float> %1948, float %1950, i32 3
  %1952 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1943, <4 x float> %1951, <4 x float> %1934)
  %1953 = getelementptr inbounds float, float* %1, i64 8
  %1954 = load float, float* %1953, align 4
  %1955 = insertelement <4 x float> zeroinitializer, float %1954, i32 0
  %1956 = insertelement <4 x float> %1955, float 1.000000e+00, i32 1
  %1957 = insertelement <4 x float> %1956, float 1.000000e+00, i32 2
  %1958 = insertelement <4 x float> %1957, float 1.000000e+00, i32 3
  %1959 = load float, float* %0, align 4
  %1960 = insertelement <4 x float> zeroinitializer, float %1959, i32 0
  %1961 = insertelement <4 x float> %1960, float 0.000000e+00, i32 1
  %1962 = insertelement <4 x float> %1961, float 0.000000e+00, i32 2
  %1963 = insertelement <4 x float> %1962, float 0.000000e+00, i32 3
  %1964 = fmul <4 x float> %1958, %1963
  %1965 = fadd <4 x float> %1964, zeroinitializer
  %1966 = getelementptr inbounds float, float* %1, i64 9
  %1967 = load float, float* %1966, align 4
  %1968 = insertelement <4 x float> zeroinitializer, float %1967, i32 0
  %1969 = insertelement <4 x float> %1968, float 1.000000e+00, i32 1
  %1970 = insertelement <4 x float> %1969, float 1.000000e+00, i32 2
  %1971 = getelementptr inbounds float, float* %1, i64 8
  %1972 = load float, float* %1971, align 4
  %1973 = insertelement <4 x float> %1970, float %1972, i32 3
  %1974 = getelementptr inbounds float, float* %0, i64 4
  %1975 = load float, float* %1974, align 4
  %1976 = insertelement <4 x float> zeroinitializer, float %1975, i32 0
  %1977 = insertelement <4 x float> %1976, float 0.000000e+00, i32 1
  %1978 = insertelement <4 x float> %1977, float 0.000000e+00, i32 2
  %1979 = getelementptr inbounds float, float* %0, i64 1
  %1980 = load float, float* %1979, align 4
  %1981 = insertelement <4 x float> %1978, float %1980, i32 3
  %1982 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1973, <4 x float> %1981, <4 x float> %1965)
  %1983 = getelementptr inbounds float, float* %1, i64 10
  %1984 = load float, float* %1983, align 4
  %1985 = insertelement <4 x float> zeroinitializer, float %1984, i32 0
  %1986 = insertelement <4 x float> %1985, float 1.000000e+00, i32 1
  %1987 = insertelement <4 x float> %1986, float 1.000000e+00, i32 2
  %1988 = insertelement <4 x float> %1987, float 1.000000e+00, i32 3
  %1989 = getelementptr inbounds float, float* %0, i64 8
  %1990 = load float, float* %1989, align 4
  %1991 = insertelement <4 x float> zeroinitializer, float %1990, i32 0
  %1992 = insertelement <4 x float> %1991, float 0.000000e+00, i32 1
  %1993 = insertelement <4 x float> %1992, float 0.000000e+00, i32 2
  %1994 = insertelement <4 x float> %1993, float 0.000000e+00, i32 3
  %1995 = call <4 x float> @llvm.fma.v4f32(<4 x float> %1988, <4 x float> %1994, <4 x float> %1982)
  %1996 = getelementptr inbounds float, float* %1, i64 11
  %1997 = load float, float* %1996, align 4
  %1998 = insertelement <4 x float> zeroinitializer, float %1997, i32 0
  %1999 = insertelement <4 x float> %1998, float 0.000000e+00, i32 1
  %2000 = getelementptr inbounds float, float* %1, i64 8
  %2001 = load float, float* %2000, align 4
  %2002 = insertelement <4 x float> %1999, float %2001, i32 2
  %2003 = getelementptr inbounds float, float* %1, i64 9
  %2004 = load float, float* %2003, align 4
  %2005 = insertelement <4 x float> %2002, float %2004, i32 3
  %2006 = getelementptr inbounds float, float* %0, i64 12
  %2007 = load float, float* %2006, align 4
  %2008 = insertelement <4 x float> zeroinitializer, float %2007, i32 0
  %2009 = insertelement <4 x float> %2008, float 0.000000e+00, i32 1
  %2010 = getelementptr inbounds float, float* %0, i64 1
  %2011 = load float, float* %2010, align 4
  %2012 = insertelement <4 x float> %2009, float %2011, i32 2
  %2013 = getelementptr inbounds float, float* %0, i64 5
  %2014 = load float, float* %2013, align 4
  %2015 = insertelement <4 x float> %2012, float %2014, i32 3
  %2016 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2005, <4 x float> %2015, <4 x float> %1995)
  %2017 = shufflevector <4 x float> %1952, <4 x float> %2016, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2018 = shufflevector <8 x float> %1913, <8 x float> %2017, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2019 = shufflevector <16 x float> %1770, <16 x float> %2018, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2020 = shufflevector <32 x float> %1526, <32 x float> %2019, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %2021 = shufflevector <64 x float> %1003, <64 x float> %2020, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %2022 = getelementptr inbounds float, float* %1, i64 8
  %2023 = load float, float* %2022, align 4
  %2024 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2023, i32 1
  %2025 = insertelement <4 x float> %2024, float 1.000000e+00, i32 2
  %2026 = insertelement <4 x float> %2025, float 1.000000e+00, i32 3
  %2027 = getelementptr inbounds float, float* %0, i64 1
  %2028 = load float, float* %2027, align 4
  %2029 = insertelement <4 x float> zeroinitializer, float %2028, i32 1
  %2030 = insertelement <4 x float> %2029, float 0.000000e+00, i32 2
  %2031 = insertelement <4 x float> %2030, float 0.000000e+00, i32 3
  %2032 = fmul <4 x float> %2026, %2031
  %2033 = getelementptr inbounds float, float* %1, i64 8
  %2034 = load float, float* %2033, align 4
  %2035 = insertelement <4 x float> zeroinitializer, float %2034, i32 0
  %2036 = insertelement <4 x float> %2035, float 1.000000e+00, i32 1
  %2037 = insertelement <4 x float> %2036, float 1.000000e+00, i32 2
  %2038 = insertelement <4 x float> %2037, float 1.000000e+00, i32 3
  %2039 = getelementptr inbounds float, float* %0, i64 1
  %2040 = load float, float* %2039, align 4
  %2041 = insertelement <4 x float> zeroinitializer, float %2040, i32 0
  %2042 = insertelement <4 x float> %2041, float 0.000000e+00, i32 1
  %2043 = insertelement <4 x float> %2042, float 0.000000e+00, i32 2
  %2044 = insertelement <4 x float> %2043, float 0.000000e+00, i32 3
  %2045 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2038, <4 x float> %2044, <4 x float> %2032)
  %2046 = getelementptr inbounds float, float* %1, i64 9
  %2047 = load float, float* %2046, align 4
  %2048 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2047, i32 1
  %2049 = insertelement <4 x float> %2048, float 1.000000e+00, i32 2
  %2050 = insertelement <4 x float> %2049, float 1.000000e+00, i32 3
  %2051 = getelementptr inbounds float, float* %0, i64 5
  %2052 = load float, float* %2051, align 4
  %2053 = insertelement <4 x float> zeroinitializer, float %2052, i32 1
  %2054 = insertelement <4 x float> %2053, float 0.000000e+00, i32 2
  %2055 = insertelement <4 x float> %2054, float 0.000000e+00, i32 3
  %2056 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2050, <4 x float> %2055, <4 x float> %2045)
  %2057 = getelementptr inbounds float, float* %1, i64 9
  %2058 = load float, float* %2057, align 4
  %2059 = insertelement <4 x float> zeroinitializer, float %2058, i32 0
  %2060 = getelementptr inbounds float, float* %1, i64 10
  %2061 = load float, float* %2060, align 4
  %2062 = insertelement <4 x float> %2059, float %2061, i32 1
  %2063 = insertelement <4 x float> %2062, float 1.000000e+00, i32 2
  %2064 = getelementptr inbounds float, float* %1, i64 8
  %2065 = load float, float* %2064, align 4
  %2066 = insertelement <4 x float> %2063, float %2065, i32 3
  %2067 = getelementptr inbounds float, float* %0, i64 5
  %2068 = load float, float* %2067, align 4
  %2069 = insertelement <4 x float> zeroinitializer, float %2068, i32 0
  %2070 = getelementptr inbounds float, float* %0, i64 9
  %2071 = load float, float* %2070, align 4
  %2072 = insertelement <4 x float> %2069, float %2071, i32 1
  %2073 = insertelement <4 x float> %2072, float 0.000000e+00, i32 2
  %2074 = getelementptr inbounds float, float* %0, i64 2
  %2075 = load float, float* %2074, align 4
  %2076 = insertelement <4 x float> %2073, float %2075, i32 3
  %2077 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2066, <4 x float> %2076, <4 x float> %2056)
  %2078 = getelementptr inbounds float, float* %1, i64 10
  %2079 = load float, float* %2078, align 4
  %2080 = insertelement <4 x float> zeroinitializer, float %2079, i32 0
  %2081 = getelementptr inbounds float, float* %1, i64 11
  %2082 = load float, float* %2081, align 4
  %2083 = insertelement <4 x float> %2080, float %2082, i32 1
  %2084 = insertelement <4 x float> %2083, float 1.000000e+00, i32 2
  %2085 = insertelement <4 x float> %2084, float 1.000000e+00, i32 3
  %2086 = getelementptr inbounds float, float* %0, i64 9
  %2087 = load float, float* %2086, align 4
  %2088 = insertelement <4 x float> zeroinitializer, float %2087, i32 0
  %2089 = getelementptr inbounds float, float* %0, i64 13
  %2090 = load float, float* %2089, align 4
  %2091 = insertelement <4 x float> %2088, float %2090, i32 1
  %2092 = insertelement <4 x float> %2091, float 0.000000e+00, i32 2
  %2093 = insertelement <4 x float> %2092, float 0.000000e+00, i32 3
  %2094 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2085, <4 x float> %2093, <4 x float> %2077)
  %2095 = getelementptr inbounds float, float* %1, i64 8
  %2096 = load float, float* %2095, align 4
  %2097 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2096, i32 2
  %2098 = insertelement <4 x float> %2097, float 1.000000e+00, i32 3
  %2099 = getelementptr inbounds float, float* %0, i64 2
  %2100 = load float, float* %2099, align 4
  %2101 = insertelement <4 x float> zeroinitializer, float %2100, i32 2
  %2102 = insertelement <4 x float> %2101, float 0.000000e+00, i32 3
  %2103 = fmul <4 x float> %2098, %2102
  %2104 = getelementptr inbounds float, float* %1, i64 8
  %2105 = load float, float* %2104, align 4
  %2106 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2105, i32 1
  %2107 = insertelement <4 x float> %2106, float 1.000000e+00, i32 2
  %2108 = insertelement <4 x float> %2107, float 1.000000e+00, i32 3
  %2109 = getelementptr inbounds float, float* %0, i64 2
  %2110 = load float, float* %2109, align 4
  %2111 = insertelement <4 x float> zeroinitializer, float %2110, i32 1
  %2112 = insertelement <4 x float> %2111, float 0.000000e+00, i32 2
  %2113 = insertelement <4 x float> %2112, float 0.000000e+00, i32 3
  %2114 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2108, <4 x float> %2113, <4 x float> %2103)
  %2115 = getelementptr inbounds float, float* %1, i64 8
  %2116 = load float, float* %2115, align 4
  %2117 = insertelement <4 x float> zeroinitializer, float %2116, i32 0
  %2118 = insertelement <4 x float> %2117, float 1.000000e+00, i32 1
  %2119 = getelementptr inbounds float, float* %1, i64 9
  %2120 = load float, float* %2119, align 4
  %2121 = insertelement <4 x float> %2118, float %2120, i32 2
  %2122 = insertelement <4 x float> %2121, float 1.000000e+00, i32 3
  %2123 = getelementptr inbounds float, float* %0, i64 2
  %2124 = load float, float* %2123, align 4
  %2125 = insertelement <4 x float> zeroinitializer, float %2124, i32 0
  %2126 = insertelement <4 x float> %2125, float 0.000000e+00, i32 1
  %2127 = getelementptr inbounds float, float* %0, i64 6
  %2128 = load float, float* %2127, align 4
  %2129 = insertelement <4 x float> %2126, float %2128, i32 2
  %2130 = insertelement <4 x float> %2129, float 0.000000e+00, i32 3
  %2131 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2122, <4 x float> %2130, <4 x float> %2114)
  %2132 = getelementptr inbounds float, float* %1, i64 9
  %2133 = load float, float* %2132, align 4
  %2134 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2133, i32 1
  %2135 = getelementptr inbounds float, float* %1, i64 10
  %2136 = load float, float* %2135, align 4
  %2137 = insertelement <4 x float> %2134, float %2136, i32 2
  %2138 = insertelement <4 x float> %2137, float 1.000000e+00, i32 3
  %2139 = getelementptr inbounds float, float* %0, i64 6
  %2140 = load float, float* %2139, align 4
  %2141 = insertelement <4 x float> zeroinitializer, float %2140, i32 1
  %2142 = getelementptr inbounds float, float* %0, i64 10
  %2143 = load float, float* %2142, align 4
  %2144 = insertelement <4 x float> %2141, float %2143, i32 2
  %2145 = insertelement <4 x float> %2144, float 0.000000e+00, i32 3
  %2146 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2138, <4 x float> %2145, <4 x float> %2131)
  %2147 = getelementptr inbounds float, float* %1, i64 9
  %2148 = load float, float* %2147, align 4
  %2149 = insertelement <4 x float> zeroinitializer, float %2148, i32 0
  %2150 = getelementptr inbounds float, float* %1, i64 10
  %2151 = load float, float* %2150, align 4
  %2152 = insertelement <4 x float> %2149, float %2151, i32 1
  %2153 = getelementptr inbounds float, float* %1, i64 11
  %2154 = load float, float* %2153, align 4
  %2155 = insertelement <4 x float> %2152, float %2154, i32 2
  %2156 = insertelement <4 x float> %2155, float 0.000000e+00, i32 3
  %2157 = getelementptr inbounds float, float* %0, i64 6
  %2158 = load float, float* %2157, align 4
  %2159 = insertelement <4 x float> zeroinitializer, float %2158, i32 0
  %2160 = getelementptr inbounds float, float* %0, i64 10
  %2161 = load float, float* %2160, align 4
  %2162 = insertelement <4 x float> %2159, float %2161, i32 1
  %2163 = getelementptr inbounds float, float* %0, i64 14
  %2164 = load float, float* %2163, align 4
  %2165 = insertelement <4 x float> %2162, float %2164, i32 2
  %2166 = insertelement <4 x float> %2165, float 0.000000e+00, i32 3
  %2167 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2156, <4 x float> %2166, <4 x float> %2146)
  %2168 = shufflevector <4 x float> %2094, <4 x float> %2167, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2169 = getelementptr inbounds float, float* %1, i64 8
  %2170 = load float, float* %2169, align 4
  %2171 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2170, i32 3
  %2172 = getelementptr inbounds float, float* %0, i64 3
  %2173 = load float, float* %2172, align 4
  %2174 = insertelement <4 x float> zeroinitializer, float %2173, i32 3
  %2175 = fmul <4 x float> %2171, %2174
  %2176 = getelementptr inbounds float, float* %1, i64 8
  %2177 = load float, float* %2176, align 4
  %2178 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2177, i32 2
  %2179 = insertelement <4 x float> %2178, float 1.000000e+00, i32 3
  %2180 = getelementptr inbounds float, float* %0, i64 3
  %2181 = load float, float* %2180, align 4
  %2182 = insertelement <4 x float> zeroinitializer, float %2181, i32 2
  %2183 = insertelement <4 x float> %2182, float 0.000000e+00, i32 3
  %2184 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2179, <4 x float> %2183, <4 x float> %2175)
  %2185 = getelementptr inbounds float, float* %1, i64 8
  %2186 = load float, float* %2185, align 4
  %2187 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2186, i32 1
  %2188 = insertelement <4 x float> %2187, float 1.000000e+00, i32 2
  %2189 = getelementptr inbounds float, float* %1, i64 9
  %2190 = load float, float* %2189, align 4
  %2191 = insertelement <4 x float> %2188, float %2190, i32 3
  %2192 = getelementptr inbounds float, float* %0, i64 3
  %2193 = load float, float* %2192, align 4
  %2194 = insertelement <4 x float> zeroinitializer, float %2193, i32 1
  %2195 = insertelement <4 x float> %2194, float 0.000000e+00, i32 2
  %2196 = getelementptr inbounds float, float* %0, i64 7
  %2197 = load float, float* %2196, align 4
  %2198 = insertelement <4 x float> %2195, float %2197, i32 3
  %2199 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2191, <4 x float> %2198, <4 x float> %2184)
  %2200 = getelementptr inbounds float, float* %1, i64 9
  %2201 = load float, float* %2200, align 4
  %2202 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2201, i32 2
  %2203 = getelementptr inbounds float, float* %1, i64 10
  %2204 = load float, float* %2203, align 4
  %2205 = insertelement <4 x float> %2202, float %2204, i32 3
  %2206 = getelementptr inbounds float, float* %0, i64 7
  %2207 = load float, float* %2206, align 4
  %2208 = insertelement <4 x float> zeroinitializer, float %2207, i32 2
  %2209 = getelementptr inbounds float, float* %0, i64 11
  %2210 = load float, float* %2209, align 4
  %2211 = insertelement <4 x float> %2208, float %2210, i32 3
  %2212 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2205, <4 x float> %2211, <4 x float> %2199)
  %2213 = getelementptr inbounds float, float* %1, i64 8
  %2214 = load float, float* %2213, align 4
  %2215 = insertelement <4 x float> zeroinitializer, float %2214, i32 0
  %2216 = getelementptr inbounds float, float* %1, i64 9
  %2217 = load float, float* %2216, align 4
  %2218 = insertelement <4 x float> %2215, float %2217, i32 1
  %2219 = getelementptr inbounds float, float* %1, i64 10
  %2220 = load float, float* %2219, align 4
  %2221 = insertelement <4 x float> %2218, float %2220, i32 2
  %2222 = getelementptr inbounds float, float* %1, i64 11
  %2223 = load float, float* %2222, align 4
  %2224 = insertelement <4 x float> %2221, float %2223, i32 3
  %2225 = getelementptr inbounds float, float* %0, i64 3
  %2226 = load float, float* %2225, align 4
  %2227 = insertelement <4 x float> zeroinitializer, float %2226, i32 0
  %2228 = getelementptr inbounds float, float* %0, i64 7
  %2229 = load float, float* %2228, align 4
  %2230 = insertelement <4 x float> %2227, float %2229, i32 1
  %2231 = getelementptr inbounds float, float* %0, i64 11
  %2232 = load float, float* %2231, align 4
  %2233 = insertelement <4 x float> %2230, float %2232, i32 2
  %2234 = getelementptr inbounds float, float* %0, i64 15
  %2235 = load float, float* %2234, align 4
  %2236 = insertelement <4 x float> %2233, float %2235, i32 3
  %2237 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2224, <4 x float> %2236, <4 x float> %2212)
  %2238 = getelementptr inbounds float, float* %1, i64 12
  %2239 = load float, float* %2238, align 4
  %2240 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2239, i32 3
  %2241 = load float, float* %0, align 4
  %2242 = insertelement <4 x float> zeroinitializer, float %2241, i32 3
  %2243 = fmul <4 x float> %2240, %2242
  %2244 = getelementptr inbounds float, float* %1, i64 12
  %2245 = load float, float* %2244, align 4
  %2246 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2245, i32 2
  %2247 = insertelement <4 x float> %2246, float 1.000000e+00, i32 3
  %2248 = load float, float* %0, align 4
  %2249 = insertelement <4 x float> zeroinitializer, float %2248, i32 2
  %2250 = insertelement <4 x float> %2249, float 0.000000e+00, i32 3
  %2251 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2247, <4 x float> %2250, <4 x float> %2243)
  %2252 = getelementptr inbounds float, float* %1, i64 13
  %2253 = load float, float* %2252, align 4
  %2254 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2253, i32 3
  %2255 = getelementptr inbounds float, float* %0, i64 4
  %2256 = load float, float* %2255, align 4
  %2257 = insertelement <4 x float> zeroinitializer, float %2256, i32 3
  %2258 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2254, <4 x float> %2257, <4 x float> %2251)
  %2259 = getelementptr inbounds float, float* %1, i64 12
  %2260 = load float, float* %2259, align 4
  %2261 = insertelement <4 x float> zeroinitializer, float %2260, i32 1
  %2262 = getelementptr inbounds float, float* %1, i64 13
  %2263 = load float, float* %2262, align 4
  %2264 = insertelement <4 x float> %2261, float %2263, i32 2
  %2265 = getelementptr inbounds float, float* %1, i64 14
  %2266 = load float, float* %2265, align 4
  %2267 = insertelement <4 x float> %2264, float %2266, i32 3
  %2268 = load float, float* %0, align 4
  %2269 = insertelement <4 x float> zeroinitializer, float %2268, i32 1
  %2270 = getelementptr inbounds float, float* %0, i64 4
  %2271 = load float, float* %2270, align 4
  %2272 = insertelement <4 x float> %2269, float %2271, i32 2
  %2273 = getelementptr inbounds float, float* %0, i64 8
  %2274 = load float, float* %2273, align 4
  %2275 = insertelement <4 x float> %2272, float %2274, i32 3
  %2276 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2267, <4 x float> %2275, <4 x float> %2258)
  %2277 = shufflevector <4 x float> %2237, <4 x float> %2276, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2278 = shufflevector <8 x float> %2168, <8 x float> %2277, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2279 = getelementptr inbounds float, float* %1, i64 12
  %2280 = load float, float* %2279, align 4
  %2281 = insertelement <4 x float> zeroinitializer, float %2280, i32 0
  %2282 = insertelement <4 x float> %2281, float 1.000000e+00, i32 1
  %2283 = insertelement <4 x float> %2282, float 1.000000e+00, i32 2
  %2284 = insertelement <4 x float> %2283, float 1.000000e+00, i32 3
  %2285 = load float, float* %0, align 4
  %2286 = insertelement <4 x float> zeroinitializer, float %2285, i32 0
  %2287 = insertelement <4 x float> %2286, float 0.000000e+00, i32 1
  %2288 = insertelement <4 x float> %2287, float 0.000000e+00, i32 2
  %2289 = insertelement <4 x float> %2288, float 0.000000e+00, i32 3
  %2290 = fmul <4 x float> %2284, %2289
  %2291 = fadd <4 x float> %2290, zeroinitializer
  %2292 = getelementptr inbounds float, float* %1, i64 13
  %2293 = load float, float* %2292, align 4
  %2294 = insertelement <4 x float> zeroinitializer, float %2293, i32 0
  %2295 = insertelement <4 x float> %2294, float 1.000000e+00, i32 1
  %2296 = insertelement <4 x float> %2295, float 1.000000e+00, i32 2
  %2297 = getelementptr inbounds float, float* %1, i64 12
  %2298 = load float, float* %2297, align 4
  %2299 = insertelement <4 x float> %2296, float %2298, i32 3
  %2300 = getelementptr inbounds float, float* %0, i64 4
  %2301 = load float, float* %2300, align 4
  %2302 = insertelement <4 x float> zeroinitializer, float %2301, i32 0
  %2303 = insertelement <4 x float> %2302, float 0.000000e+00, i32 1
  %2304 = insertelement <4 x float> %2303, float 0.000000e+00, i32 2
  %2305 = getelementptr inbounds float, float* %0, i64 1
  %2306 = load float, float* %2305, align 4
  %2307 = insertelement <4 x float> %2304, float %2306, i32 3
  %2308 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2299, <4 x float> %2307, <4 x float> %2291)
  %2309 = getelementptr inbounds float, float* %1, i64 14
  %2310 = load float, float* %2309, align 4
  %2311 = insertelement <4 x float> zeroinitializer, float %2310, i32 0
  %2312 = insertelement <4 x float> %2311, float 1.000000e+00, i32 1
  %2313 = insertelement <4 x float> %2312, float 1.000000e+00, i32 2
  %2314 = insertelement <4 x float> %2313, float 1.000000e+00, i32 3
  %2315 = getelementptr inbounds float, float* %0, i64 8
  %2316 = load float, float* %2315, align 4
  %2317 = insertelement <4 x float> zeroinitializer, float %2316, i32 0
  %2318 = insertelement <4 x float> %2317, float 0.000000e+00, i32 1
  %2319 = insertelement <4 x float> %2318, float 0.000000e+00, i32 2
  %2320 = insertelement <4 x float> %2319, float 0.000000e+00, i32 3
  %2321 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2314, <4 x float> %2320, <4 x float> %2308)
  %2322 = getelementptr inbounds float, float* %1, i64 15
  %2323 = load float, float* %2322, align 4
  %2324 = insertelement <4 x float> zeroinitializer, float %2323, i32 0
  %2325 = insertelement <4 x float> %2324, float 0.000000e+00, i32 1
  %2326 = getelementptr inbounds float, float* %1, i64 12
  %2327 = load float, float* %2326, align 4
  %2328 = insertelement <4 x float> %2325, float %2327, i32 2
  %2329 = getelementptr inbounds float, float* %1, i64 13
  %2330 = load float, float* %2329, align 4
  %2331 = insertelement <4 x float> %2328, float %2330, i32 3
  %2332 = getelementptr inbounds float, float* %0, i64 12
  %2333 = load float, float* %2332, align 4
  %2334 = insertelement <4 x float> zeroinitializer, float %2333, i32 0
  %2335 = insertelement <4 x float> %2334, float 0.000000e+00, i32 1
  %2336 = getelementptr inbounds float, float* %0, i64 1
  %2337 = load float, float* %2336, align 4
  %2338 = insertelement <4 x float> %2335, float %2337, i32 2
  %2339 = getelementptr inbounds float, float* %0, i64 5
  %2340 = load float, float* %2339, align 4
  %2341 = insertelement <4 x float> %2338, float %2340, i32 3
  %2342 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2331, <4 x float> %2341, <4 x float> %2321)
  %2343 = getelementptr inbounds float, float* %1, i64 12
  %2344 = load float, float* %2343, align 4
  %2345 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2344, i32 1
  %2346 = insertelement <4 x float> %2345, float 1.000000e+00, i32 2
  %2347 = insertelement <4 x float> %2346, float 1.000000e+00, i32 3
  %2348 = getelementptr inbounds float, float* %0, i64 1
  %2349 = load float, float* %2348, align 4
  %2350 = insertelement <4 x float> zeroinitializer, float %2349, i32 1
  %2351 = insertelement <4 x float> %2350, float 0.000000e+00, i32 2
  %2352 = insertelement <4 x float> %2351, float 0.000000e+00, i32 3
  %2353 = fmul <4 x float> %2347, %2352
  %2354 = getelementptr inbounds float, float* %1, i64 12
  %2355 = load float, float* %2354, align 4
  %2356 = insertelement <4 x float> zeroinitializer, float %2355, i32 0
  %2357 = insertelement <4 x float> %2356, float 1.000000e+00, i32 1
  %2358 = insertelement <4 x float> %2357, float 1.000000e+00, i32 2
  %2359 = insertelement <4 x float> %2358, float 1.000000e+00, i32 3
  %2360 = getelementptr inbounds float, float* %0, i64 1
  %2361 = load float, float* %2360, align 4
  %2362 = insertelement <4 x float> zeroinitializer, float %2361, i32 0
  %2363 = insertelement <4 x float> %2362, float 0.000000e+00, i32 1
  %2364 = insertelement <4 x float> %2363, float 0.000000e+00, i32 2
  %2365 = insertelement <4 x float> %2364, float 0.000000e+00, i32 3
  %2366 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2359, <4 x float> %2365, <4 x float> %2353)
  %2367 = getelementptr inbounds float, float* %1, i64 13
  %2368 = load float, float* %2367, align 4
  %2369 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2368, i32 1
  %2370 = insertelement <4 x float> %2369, float 1.000000e+00, i32 2
  %2371 = insertelement <4 x float> %2370, float 1.000000e+00, i32 3
  %2372 = getelementptr inbounds float, float* %0, i64 5
  %2373 = load float, float* %2372, align 4
  %2374 = insertelement <4 x float> zeroinitializer, float %2373, i32 1
  %2375 = insertelement <4 x float> %2374, float 0.000000e+00, i32 2
  %2376 = insertelement <4 x float> %2375, float 0.000000e+00, i32 3
  %2377 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2371, <4 x float> %2376, <4 x float> %2366)
  %2378 = getelementptr inbounds float, float* %1, i64 13
  %2379 = load float, float* %2378, align 4
  %2380 = insertelement <4 x float> zeroinitializer, float %2379, i32 0
  %2381 = getelementptr inbounds float, float* %1, i64 14
  %2382 = load float, float* %2381, align 4
  %2383 = insertelement <4 x float> %2380, float %2382, i32 1
  %2384 = insertelement <4 x float> %2383, float 1.000000e+00, i32 2
  %2385 = getelementptr inbounds float, float* %1, i64 12
  %2386 = load float, float* %2385, align 4
  %2387 = insertelement <4 x float> %2384, float %2386, i32 3
  %2388 = getelementptr inbounds float, float* %0, i64 5
  %2389 = load float, float* %2388, align 4
  %2390 = insertelement <4 x float> zeroinitializer, float %2389, i32 0
  %2391 = getelementptr inbounds float, float* %0, i64 9
  %2392 = load float, float* %2391, align 4
  %2393 = insertelement <4 x float> %2390, float %2392, i32 1
  %2394 = insertelement <4 x float> %2393, float 0.000000e+00, i32 2
  %2395 = getelementptr inbounds float, float* %0, i64 2
  %2396 = load float, float* %2395, align 4
  %2397 = insertelement <4 x float> %2394, float %2396, i32 3
  %2398 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2387, <4 x float> %2397, <4 x float> %2377)
  %2399 = getelementptr inbounds float, float* %1, i64 14
  %2400 = load float, float* %2399, align 4
  %2401 = insertelement <4 x float> zeroinitializer, float %2400, i32 0
  %2402 = getelementptr inbounds float, float* %1, i64 15
  %2403 = load float, float* %2402, align 4
  %2404 = insertelement <4 x float> %2401, float %2403, i32 1
  %2405 = insertelement <4 x float> %2404, float 1.000000e+00, i32 2
  %2406 = insertelement <4 x float> %2405, float 1.000000e+00, i32 3
  %2407 = getelementptr inbounds float, float* %0, i64 9
  %2408 = load float, float* %2407, align 4
  %2409 = insertelement <4 x float> zeroinitializer, float %2408, i32 0
  %2410 = getelementptr inbounds float, float* %0, i64 13
  %2411 = load float, float* %2410, align 4
  %2412 = insertelement <4 x float> %2409, float %2411, i32 1
  %2413 = insertelement <4 x float> %2412, float 0.000000e+00, i32 2
  %2414 = insertelement <4 x float> %2413, float 0.000000e+00, i32 3
  %2415 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2406, <4 x float> %2414, <4 x float> %2398)
  %2416 = shufflevector <4 x float> %2342, <4 x float> %2415, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2417 = getelementptr inbounds float, float* %1, i64 12
  %2418 = load float, float* %2417, align 4
  %2419 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2418, i32 2
  %2420 = insertelement <4 x float> %2419, float 1.000000e+00, i32 3
  %2421 = getelementptr inbounds float, float* %0, i64 2
  %2422 = load float, float* %2421, align 4
  %2423 = insertelement <4 x float> zeroinitializer, float %2422, i32 2
  %2424 = insertelement <4 x float> %2423, float 0.000000e+00, i32 3
  %2425 = fmul <4 x float> %2420, %2424
  %2426 = getelementptr inbounds float, float* %1, i64 12
  %2427 = load float, float* %2426, align 4
  %2428 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2427, i32 1
  %2429 = insertelement <4 x float> %2428, float 1.000000e+00, i32 2
  %2430 = insertelement <4 x float> %2429, float 1.000000e+00, i32 3
  %2431 = getelementptr inbounds float, float* %0, i64 2
  %2432 = load float, float* %2431, align 4
  %2433 = insertelement <4 x float> zeroinitializer, float %2432, i32 1
  %2434 = insertelement <4 x float> %2433, float 0.000000e+00, i32 2
  %2435 = insertelement <4 x float> %2434, float 0.000000e+00, i32 3
  %2436 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2430, <4 x float> %2435, <4 x float> %2425)
  %2437 = getelementptr inbounds float, float* %1, i64 12
  %2438 = load float, float* %2437, align 4
  %2439 = insertelement <4 x float> zeroinitializer, float %2438, i32 0
  %2440 = insertelement <4 x float> %2439, float 1.000000e+00, i32 1
  %2441 = getelementptr inbounds float, float* %1, i64 13
  %2442 = load float, float* %2441, align 4
  %2443 = insertelement <4 x float> %2440, float %2442, i32 2
  %2444 = insertelement <4 x float> %2443, float 1.000000e+00, i32 3
  %2445 = getelementptr inbounds float, float* %0, i64 2
  %2446 = load float, float* %2445, align 4
  %2447 = insertelement <4 x float> zeroinitializer, float %2446, i32 0
  %2448 = insertelement <4 x float> %2447, float 0.000000e+00, i32 1
  %2449 = getelementptr inbounds float, float* %0, i64 6
  %2450 = load float, float* %2449, align 4
  %2451 = insertelement <4 x float> %2448, float %2450, i32 2
  %2452 = insertelement <4 x float> %2451, float 0.000000e+00, i32 3
  %2453 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2444, <4 x float> %2452, <4 x float> %2436)
  %2454 = getelementptr inbounds float, float* %1, i64 13
  %2455 = load float, float* %2454, align 4
  %2456 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2455, i32 1
  %2457 = getelementptr inbounds float, float* %1, i64 14
  %2458 = load float, float* %2457, align 4
  %2459 = insertelement <4 x float> %2456, float %2458, i32 2
  %2460 = insertelement <4 x float> %2459, float 1.000000e+00, i32 3
  %2461 = getelementptr inbounds float, float* %0, i64 6
  %2462 = load float, float* %2461, align 4
  %2463 = insertelement <4 x float> zeroinitializer, float %2462, i32 1
  %2464 = getelementptr inbounds float, float* %0, i64 10
  %2465 = load float, float* %2464, align 4
  %2466 = insertelement <4 x float> %2463, float %2465, i32 2
  %2467 = insertelement <4 x float> %2466, float 0.000000e+00, i32 3
  %2468 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2460, <4 x float> %2467, <4 x float> %2453)
  %2469 = getelementptr inbounds float, float* %1, i64 13
  %2470 = load float, float* %2469, align 4
  %2471 = insertelement <4 x float> zeroinitializer, float %2470, i32 0
  %2472 = getelementptr inbounds float, float* %1, i64 14
  %2473 = load float, float* %2472, align 4
  %2474 = insertelement <4 x float> %2471, float %2473, i32 1
  %2475 = getelementptr inbounds float, float* %1, i64 15
  %2476 = load float, float* %2475, align 4
  %2477 = insertelement <4 x float> %2474, float %2476, i32 2
  %2478 = insertelement <4 x float> %2477, float 0.000000e+00, i32 3
  %2479 = getelementptr inbounds float, float* %0, i64 6
  %2480 = load float, float* %2479, align 4
  %2481 = insertelement <4 x float> zeroinitializer, float %2480, i32 0
  %2482 = getelementptr inbounds float, float* %0, i64 10
  %2483 = load float, float* %2482, align 4
  %2484 = insertelement <4 x float> %2481, float %2483, i32 1
  %2485 = getelementptr inbounds float, float* %0, i64 14
  %2486 = load float, float* %2485, align 4
  %2487 = insertelement <4 x float> %2484, float %2486, i32 2
  %2488 = insertelement <4 x float> %2487, float 0.000000e+00, i32 3
  %2489 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2478, <4 x float> %2488, <4 x float> %2468)
  %2490 = getelementptr inbounds float, float* %1, i64 12
  %2491 = load float, float* %2490, align 4
  %2492 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2491, i32 3
  %2493 = getelementptr inbounds float, float* %0, i64 3
  %2494 = load float, float* %2493, align 4
  %2495 = insertelement <4 x float> zeroinitializer, float %2494, i32 3
  %2496 = fmul <4 x float> %2492, %2495
  %2497 = getelementptr inbounds float, float* %1, i64 12
  %2498 = load float, float* %2497, align 4
  %2499 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2498, i32 2
  %2500 = insertelement <4 x float> %2499, float 1.000000e+00, i32 3
  %2501 = getelementptr inbounds float, float* %0, i64 3
  %2502 = load float, float* %2501, align 4
  %2503 = insertelement <4 x float> zeroinitializer, float %2502, i32 2
  %2504 = insertelement <4 x float> %2503, float 0.000000e+00, i32 3
  %2505 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2500, <4 x float> %2504, <4 x float> %2496)
  %2506 = getelementptr inbounds float, float* %1, i64 12
  %2507 = load float, float* %2506, align 4
  %2508 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2507, i32 1
  %2509 = insertelement <4 x float> %2508, float 1.000000e+00, i32 2
  %2510 = getelementptr inbounds float, float* %1, i64 13
  %2511 = load float, float* %2510, align 4
  %2512 = insertelement <4 x float> %2509, float %2511, i32 3
  %2513 = getelementptr inbounds float, float* %0, i64 3
  %2514 = load float, float* %2513, align 4
  %2515 = insertelement <4 x float> zeroinitializer, float %2514, i32 1
  %2516 = insertelement <4 x float> %2515, float 0.000000e+00, i32 2
  %2517 = getelementptr inbounds float, float* %0, i64 7
  %2518 = load float, float* %2517, align 4
  %2519 = insertelement <4 x float> %2516, float %2518, i32 3
  %2520 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2512, <4 x float> %2519, <4 x float> %2505)
  %2521 = getelementptr inbounds float, float* %1, i64 13
  %2522 = load float, float* %2521, align 4
  %2523 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2522, i32 2
  %2524 = getelementptr inbounds float, float* %1, i64 14
  %2525 = load float, float* %2524, align 4
  %2526 = insertelement <4 x float> %2523, float %2525, i32 3
  %2527 = getelementptr inbounds float, float* %0, i64 7
  %2528 = load float, float* %2527, align 4
  %2529 = insertelement <4 x float> zeroinitializer, float %2528, i32 2
  %2530 = getelementptr inbounds float, float* %0, i64 11
  %2531 = load float, float* %2530, align 4
  %2532 = insertelement <4 x float> %2529, float %2531, i32 3
  %2533 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2526, <4 x float> %2532, <4 x float> %2520)
  %2534 = getelementptr inbounds float, float* %1, i64 12
  %2535 = load float, float* %2534, align 4
  %2536 = insertelement <4 x float> zeroinitializer, float %2535, i32 0
  %2537 = getelementptr inbounds float, float* %1, i64 13
  %2538 = load float, float* %2537, align 4
  %2539 = insertelement <4 x float> %2536, float %2538, i32 1
  %2540 = getelementptr inbounds float, float* %1, i64 14
  %2541 = load float, float* %2540, align 4
  %2542 = insertelement <4 x float> %2539, float %2541, i32 2
  %2543 = getelementptr inbounds float, float* %1, i64 15
  %2544 = load float, float* %2543, align 4
  %2545 = insertelement <4 x float> %2542, float %2544, i32 3
  %2546 = getelementptr inbounds float, float* %0, i64 3
  %2547 = load float, float* %2546, align 4
  %2548 = insertelement <4 x float> zeroinitializer, float %2547, i32 0
  %2549 = getelementptr inbounds float, float* %0, i64 7
  %2550 = load float, float* %2549, align 4
  %2551 = insertelement <4 x float> %2548, float %2550, i32 1
  %2552 = getelementptr inbounds float, float* %0, i64 11
  %2553 = load float, float* %2552, align 4
  %2554 = insertelement <4 x float> %2551, float %2553, i32 2
  %2555 = getelementptr inbounds float, float* %0, i64 15
  %2556 = load float, float* %2555, align 4
  %2557 = insertelement <4 x float> %2554, float %2556, i32 3
  %2558 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2545, <4 x float> %2557, <4 x float> %2533)
  %2559 = shufflevector <4 x float> %2489, <4 x float> %2558, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2560 = shufflevector <8 x float> %2416, <8 x float> %2559, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2561 = shufflevector <16 x float> %2278, <16 x float> %2560, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %2562 = load float, float* %1, align 4
  %2563 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2562, i32 3
  %2564 = load float, float* %0, align 4
  %2565 = insertelement <4 x float> zeroinitializer, float %2564, i32 3
  %2566 = fmul <4 x float> %2563, %2565
  %2567 = load float, float* %1, align 4
  %2568 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2567, i32 2
  %2569 = insertelement <4 x float> %2568, float 1.000000e+00, i32 3
  %2570 = load float, float* %0, align 4
  %2571 = insertelement <4 x float> zeroinitializer, float %2570, i32 2
  %2572 = insertelement <4 x float> %2571, float 0.000000e+00, i32 3
  %2573 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2569, <4 x float> %2572, <4 x float> %2566)
  %2574 = getelementptr inbounds float, float* %1, i64 1
  %2575 = load float, float* %2574, align 4
  %2576 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2575, i32 3
  %2577 = getelementptr inbounds float, float* %0, i64 4
  %2578 = load float, float* %2577, align 4
  %2579 = insertelement <4 x float> zeroinitializer, float %2578, i32 3
  %2580 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2576, <4 x float> %2579, <4 x float> %2573)
  %2581 = load float, float* %1, align 4
  %2582 = insertelement <4 x float> zeroinitializer, float %2581, i32 1
  %2583 = getelementptr inbounds float, float* %1, i64 1
  %2584 = load float, float* %2583, align 4
  %2585 = insertelement <4 x float> %2582, float %2584, i32 2
  %2586 = getelementptr inbounds float, float* %1, i64 2
  %2587 = load float, float* %2586, align 4
  %2588 = insertelement <4 x float> %2585, float %2587, i32 3
  %2589 = load float, float* %0, align 4
  %2590 = insertelement <4 x float> zeroinitializer, float %2589, i32 1
  %2591 = getelementptr inbounds float, float* %0, i64 4
  %2592 = load float, float* %2591, align 4
  %2593 = insertelement <4 x float> %2590, float %2592, i32 2
  %2594 = getelementptr inbounds float, float* %0, i64 8
  %2595 = load float, float* %2594, align 4
  %2596 = insertelement <4 x float> %2593, float %2595, i32 3
  %2597 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2588, <4 x float> %2596, <4 x float> %2580)
  %2598 = load float, float* %1, align 4
  %2599 = insertelement <4 x float> zeroinitializer, float %2598, i32 0
  %2600 = insertelement <4 x float> %2599, float 1.000000e+00, i32 1
  %2601 = insertelement <4 x float> %2600, float 1.000000e+00, i32 2
  %2602 = insertelement <4 x float> %2601, float 1.000000e+00, i32 3
  %2603 = load float, float* %0, align 4
  %2604 = insertelement <4 x float> zeroinitializer, float %2603, i32 0
  %2605 = insertelement <4 x float> %2604, float 0.000000e+00, i32 1
  %2606 = insertelement <4 x float> %2605, float 0.000000e+00, i32 2
  %2607 = insertelement <4 x float> %2606, float 0.000000e+00, i32 3
  %2608 = fmul <4 x float> %2602, %2607
  %2609 = fadd <4 x float> %2608, zeroinitializer
  %2610 = getelementptr inbounds float, float* %1, i64 1
  %2611 = load float, float* %2610, align 4
  %2612 = insertelement <4 x float> zeroinitializer, float %2611, i32 0
  %2613 = insertelement <4 x float> %2612, float 1.000000e+00, i32 1
  %2614 = insertelement <4 x float> %2613, float 1.000000e+00, i32 2
  %2615 = load float, float* %1, align 4
  %2616 = insertelement <4 x float> %2614, float %2615, i32 3
  %2617 = getelementptr inbounds float, float* %0, i64 4
  %2618 = load float, float* %2617, align 4
  %2619 = insertelement <4 x float> zeroinitializer, float %2618, i32 0
  %2620 = insertelement <4 x float> %2619, float 0.000000e+00, i32 1
  %2621 = insertelement <4 x float> %2620, float 0.000000e+00, i32 2
  %2622 = getelementptr inbounds float, float* %0, i64 1
  %2623 = load float, float* %2622, align 4
  %2624 = insertelement <4 x float> %2621, float %2623, i32 3
  %2625 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2616, <4 x float> %2624, <4 x float> %2609)
  %2626 = getelementptr inbounds float, float* %1, i64 2
  %2627 = load float, float* %2626, align 4
  %2628 = insertelement <4 x float> zeroinitializer, float %2627, i32 0
  %2629 = insertelement <4 x float> %2628, float 1.000000e+00, i32 1
  %2630 = insertelement <4 x float> %2629, float 1.000000e+00, i32 2
  %2631 = insertelement <4 x float> %2630, float 1.000000e+00, i32 3
  %2632 = getelementptr inbounds float, float* %0, i64 8
  %2633 = load float, float* %2632, align 4
  %2634 = insertelement <4 x float> zeroinitializer, float %2633, i32 0
  %2635 = insertelement <4 x float> %2634, float 0.000000e+00, i32 1
  %2636 = insertelement <4 x float> %2635, float 0.000000e+00, i32 2
  %2637 = insertelement <4 x float> %2636, float 0.000000e+00, i32 3
  %2638 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2631, <4 x float> %2637, <4 x float> %2625)
  %2639 = getelementptr inbounds float, float* %1, i64 3
  %2640 = load float, float* %2639, align 4
  %2641 = insertelement <4 x float> zeroinitializer, float %2640, i32 0
  %2642 = insertelement <4 x float> %2641, float 0.000000e+00, i32 1
  %2643 = load float, float* %1, align 4
  %2644 = insertelement <4 x float> %2642, float %2643, i32 2
  %2645 = getelementptr inbounds float, float* %1, i64 1
  %2646 = load float, float* %2645, align 4
  %2647 = insertelement <4 x float> %2644, float %2646, i32 3
  %2648 = getelementptr inbounds float, float* %0, i64 12
  %2649 = load float, float* %2648, align 4
  %2650 = insertelement <4 x float> zeroinitializer, float %2649, i32 0
  %2651 = insertelement <4 x float> %2650, float 0.000000e+00, i32 1
  %2652 = getelementptr inbounds float, float* %0, i64 1
  %2653 = load float, float* %2652, align 4
  %2654 = insertelement <4 x float> %2651, float %2653, i32 2
  %2655 = getelementptr inbounds float, float* %0, i64 5
  %2656 = load float, float* %2655, align 4
  %2657 = insertelement <4 x float> %2654, float %2656, i32 3
  %2658 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2647, <4 x float> %2657, <4 x float> %2638)
  %2659 = shufflevector <4 x float> %2597, <4 x float> %2658, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2660 = load float, float* %1, align 4
  %2661 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2660, i32 1
  %2662 = insertelement <4 x float> %2661, float 1.000000e+00, i32 2
  %2663 = insertelement <4 x float> %2662, float 1.000000e+00, i32 3
  %2664 = getelementptr inbounds float, float* %0, i64 1
  %2665 = load float, float* %2664, align 4
  %2666 = insertelement <4 x float> zeroinitializer, float %2665, i32 1
  %2667 = insertelement <4 x float> %2666, float 0.000000e+00, i32 2
  %2668 = insertelement <4 x float> %2667, float 0.000000e+00, i32 3
  %2669 = fmul <4 x float> %2663, %2668
  %2670 = load float, float* %1, align 4
  %2671 = insertelement <4 x float> zeroinitializer, float %2670, i32 0
  %2672 = insertelement <4 x float> %2671, float 1.000000e+00, i32 1
  %2673 = insertelement <4 x float> %2672, float 1.000000e+00, i32 2
  %2674 = insertelement <4 x float> %2673, float 1.000000e+00, i32 3
  %2675 = getelementptr inbounds float, float* %0, i64 1
  %2676 = load float, float* %2675, align 4
  %2677 = insertelement <4 x float> zeroinitializer, float %2676, i32 0
  %2678 = insertelement <4 x float> %2677, float 0.000000e+00, i32 1
  %2679 = insertelement <4 x float> %2678, float 0.000000e+00, i32 2
  %2680 = insertelement <4 x float> %2679, float 0.000000e+00, i32 3
  %2681 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2674, <4 x float> %2680, <4 x float> %2669)
  %2682 = getelementptr inbounds float, float* %1, i64 1
  %2683 = load float, float* %2682, align 4
  %2684 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2683, i32 1
  %2685 = insertelement <4 x float> %2684, float 1.000000e+00, i32 2
  %2686 = insertelement <4 x float> %2685, float 1.000000e+00, i32 3
  %2687 = getelementptr inbounds float, float* %0, i64 5
  %2688 = load float, float* %2687, align 4
  %2689 = insertelement <4 x float> zeroinitializer, float %2688, i32 1
  %2690 = insertelement <4 x float> %2689, float 0.000000e+00, i32 2
  %2691 = insertelement <4 x float> %2690, float 0.000000e+00, i32 3
  %2692 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2686, <4 x float> %2691, <4 x float> %2681)
  %2693 = getelementptr inbounds float, float* %1, i64 1
  %2694 = load float, float* %2693, align 4
  %2695 = insertelement <4 x float> zeroinitializer, float %2694, i32 0
  %2696 = getelementptr inbounds float, float* %1, i64 2
  %2697 = load float, float* %2696, align 4
  %2698 = insertelement <4 x float> %2695, float %2697, i32 1
  %2699 = insertelement <4 x float> %2698, float 1.000000e+00, i32 2
  %2700 = load float, float* %1, align 4
  %2701 = insertelement <4 x float> %2699, float %2700, i32 3
  %2702 = getelementptr inbounds float, float* %0, i64 5
  %2703 = load float, float* %2702, align 4
  %2704 = insertelement <4 x float> zeroinitializer, float %2703, i32 0
  %2705 = getelementptr inbounds float, float* %0, i64 9
  %2706 = load float, float* %2705, align 4
  %2707 = insertelement <4 x float> %2704, float %2706, i32 1
  %2708 = insertelement <4 x float> %2707, float 0.000000e+00, i32 2
  %2709 = getelementptr inbounds float, float* %0, i64 2
  %2710 = load float, float* %2709, align 4
  %2711 = insertelement <4 x float> %2708, float %2710, i32 3
  %2712 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2701, <4 x float> %2711, <4 x float> %2692)
  %2713 = getelementptr inbounds float, float* %1, i64 2
  %2714 = load float, float* %2713, align 4
  %2715 = insertelement <4 x float> zeroinitializer, float %2714, i32 0
  %2716 = getelementptr inbounds float, float* %1, i64 3
  %2717 = load float, float* %2716, align 4
  %2718 = insertelement <4 x float> %2715, float %2717, i32 1
  %2719 = insertelement <4 x float> %2718, float 1.000000e+00, i32 2
  %2720 = insertelement <4 x float> %2719, float 1.000000e+00, i32 3
  %2721 = getelementptr inbounds float, float* %0, i64 9
  %2722 = load float, float* %2721, align 4
  %2723 = insertelement <4 x float> zeroinitializer, float %2722, i32 0
  %2724 = getelementptr inbounds float, float* %0, i64 13
  %2725 = load float, float* %2724, align 4
  %2726 = insertelement <4 x float> %2723, float %2725, i32 1
  %2727 = insertelement <4 x float> %2726, float 0.000000e+00, i32 2
  %2728 = insertelement <4 x float> %2727, float 0.000000e+00, i32 3
  %2729 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2720, <4 x float> %2728, <4 x float> %2712)
  %2730 = load float, float* %1, align 4
  %2731 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2730, i32 2
  %2732 = insertelement <4 x float> %2731, float 1.000000e+00, i32 3
  %2733 = getelementptr inbounds float, float* %0, i64 2
  %2734 = load float, float* %2733, align 4
  %2735 = insertelement <4 x float> zeroinitializer, float %2734, i32 2
  %2736 = insertelement <4 x float> %2735, float 0.000000e+00, i32 3
  %2737 = fmul <4 x float> %2732, %2736
  %2738 = load float, float* %1, align 4
  %2739 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2738, i32 1
  %2740 = insertelement <4 x float> %2739, float 1.000000e+00, i32 2
  %2741 = insertelement <4 x float> %2740, float 1.000000e+00, i32 3
  %2742 = getelementptr inbounds float, float* %0, i64 2
  %2743 = load float, float* %2742, align 4
  %2744 = insertelement <4 x float> zeroinitializer, float %2743, i32 1
  %2745 = insertelement <4 x float> %2744, float 0.000000e+00, i32 2
  %2746 = insertelement <4 x float> %2745, float 0.000000e+00, i32 3
  %2747 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2741, <4 x float> %2746, <4 x float> %2737)
  %2748 = load float, float* %1, align 4
  %2749 = insertelement <4 x float> zeroinitializer, float %2748, i32 0
  %2750 = insertelement <4 x float> %2749, float 1.000000e+00, i32 1
  %2751 = getelementptr inbounds float, float* %1, i64 1
  %2752 = load float, float* %2751, align 4
  %2753 = insertelement <4 x float> %2750, float %2752, i32 2
  %2754 = insertelement <4 x float> %2753, float 1.000000e+00, i32 3
  %2755 = getelementptr inbounds float, float* %0, i64 2
  %2756 = load float, float* %2755, align 4
  %2757 = insertelement <4 x float> zeroinitializer, float %2756, i32 0
  %2758 = insertelement <4 x float> %2757, float 0.000000e+00, i32 1
  %2759 = getelementptr inbounds float, float* %0, i64 6
  %2760 = load float, float* %2759, align 4
  %2761 = insertelement <4 x float> %2758, float %2760, i32 2
  %2762 = insertelement <4 x float> %2761, float 0.000000e+00, i32 3
  %2763 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2754, <4 x float> %2762, <4 x float> %2747)
  %2764 = getelementptr inbounds float, float* %1, i64 1
  %2765 = load float, float* %2764, align 4
  %2766 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2765, i32 1
  %2767 = getelementptr inbounds float, float* %1, i64 2
  %2768 = load float, float* %2767, align 4
  %2769 = insertelement <4 x float> %2766, float %2768, i32 2
  %2770 = insertelement <4 x float> %2769, float 1.000000e+00, i32 3
  %2771 = getelementptr inbounds float, float* %0, i64 6
  %2772 = load float, float* %2771, align 4
  %2773 = insertelement <4 x float> zeroinitializer, float %2772, i32 1
  %2774 = getelementptr inbounds float, float* %0, i64 10
  %2775 = load float, float* %2774, align 4
  %2776 = insertelement <4 x float> %2773, float %2775, i32 2
  %2777 = insertelement <4 x float> %2776, float 0.000000e+00, i32 3
  %2778 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2770, <4 x float> %2777, <4 x float> %2763)
  %2779 = getelementptr inbounds float, float* %1, i64 1
  %2780 = load float, float* %2779, align 4
  %2781 = insertelement <4 x float> zeroinitializer, float %2780, i32 0
  %2782 = getelementptr inbounds float, float* %1, i64 2
  %2783 = load float, float* %2782, align 4
  %2784 = insertelement <4 x float> %2781, float %2783, i32 1
  %2785 = getelementptr inbounds float, float* %1, i64 3
  %2786 = load float, float* %2785, align 4
  %2787 = insertelement <4 x float> %2784, float %2786, i32 2
  %2788 = insertelement <4 x float> %2787, float 0.000000e+00, i32 3
  %2789 = getelementptr inbounds float, float* %0, i64 6
  %2790 = load float, float* %2789, align 4
  %2791 = insertelement <4 x float> zeroinitializer, float %2790, i32 0
  %2792 = getelementptr inbounds float, float* %0, i64 10
  %2793 = load float, float* %2792, align 4
  %2794 = insertelement <4 x float> %2791, float %2793, i32 1
  %2795 = getelementptr inbounds float, float* %0, i64 14
  %2796 = load float, float* %2795, align 4
  %2797 = insertelement <4 x float> %2794, float %2796, i32 2
  %2798 = insertelement <4 x float> %2797, float 0.000000e+00, i32 3
  %2799 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2788, <4 x float> %2798, <4 x float> %2778)
  %2800 = shufflevector <4 x float> %2729, <4 x float> %2799, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2801 = shufflevector <8 x float> %2659, <8 x float> %2800, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %2802 = load float, float* %1, align 4
  %2803 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2802, i32 3
  %2804 = getelementptr inbounds float, float* %0, i64 3
  %2805 = load float, float* %2804, align 4
  %2806 = insertelement <4 x float> zeroinitializer, float %2805, i32 3
  %2807 = fmul <4 x float> %2803, %2806
  %2808 = load float, float* %1, align 4
  %2809 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2808, i32 2
  %2810 = insertelement <4 x float> %2809, float 1.000000e+00, i32 3
  %2811 = getelementptr inbounds float, float* %0, i64 3
  %2812 = load float, float* %2811, align 4
  %2813 = insertelement <4 x float> zeroinitializer, float %2812, i32 2
  %2814 = insertelement <4 x float> %2813, float 0.000000e+00, i32 3
  %2815 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2810, <4 x float> %2814, <4 x float> %2807)
  %2816 = load float, float* %1, align 4
  %2817 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2816, i32 1
  %2818 = insertelement <4 x float> %2817, float 1.000000e+00, i32 2
  %2819 = getelementptr inbounds float, float* %1, i64 1
  %2820 = load float, float* %2819, align 4
  %2821 = insertelement <4 x float> %2818, float %2820, i32 3
  %2822 = getelementptr inbounds float, float* %0, i64 3
  %2823 = load float, float* %2822, align 4
  %2824 = insertelement <4 x float> zeroinitializer, float %2823, i32 1
  %2825 = insertelement <4 x float> %2824, float 0.000000e+00, i32 2
  %2826 = getelementptr inbounds float, float* %0, i64 7
  %2827 = load float, float* %2826, align 4
  %2828 = insertelement <4 x float> %2825, float %2827, i32 3
  %2829 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2821, <4 x float> %2828, <4 x float> %2815)
  %2830 = getelementptr inbounds float, float* %1, i64 1
  %2831 = load float, float* %2830, align 4
  %2832 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2831, i32 2
  %2833 = getelementptr inbounds float, float* %1, i64 2
  %2834 = load float, float* %2833, align 4
  %2835 = insertelement <4 x float> %2832, float %2834, i32 3
  %2836 = getelementptr inbounds float, float* %0, i64 7
  %2837 = load float, float* %2836, align 4
  %2838 = insertelement <4 x float> zeroinitializer, float %2837, i32 2
  %2839 = getelementptr inbounds float, float* %0, i64 11
  %2840 = load float, float* %2839, align 4
  %2841 = insertelement <4 x float> %2838, float %2840, i32 3
  %2842 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2835, <4 x float> %2841, <4 x float> %2829)
  %2843 = load float, float* %1, align 4
  %2844 = insertelement <4 x float> zeroinitializer, float %2843, i32 0
  %2845 = getelementptr inbounds float, float* %1, i64 1
  %2846 = load float, float* %2845, align 4
  %2847 = insertelement <4 x float> %2844, float %2846, i32 1
  %2848 = getelementptr inbounds float, float* %1, i64 2
  %2849 = load float, float* %2848, align 4
  %2850 = insertelement <4 x float> %2847, float %2849, i32 2
  %2851 = getelementptr inbounds float, float* %1, i64 3
  %2852 = load float, float* %2851, align 4
  %2853 = insertelement <4 x float> %2850, float %2852, i32 3
  %2854 = getelementptr inbounds float, float* %0, i64 3
  %2855 = load float, float* %2854, align 4
  %2856 = insertelement <4 x float> zeroinitializer, float %2855, i32 0
  %2857 = getelementptr inbounds float, float* %0, i64 7
  %2858 = load float, float* %2857, align 4
  %2859 = insertelement <4 x float> %2856, float %2858, i32 1
  %2860 = getelementptr inbounds float, float* %0, i64 11
  %2861 = load float, float* %2860, align 4
  %2862 = insertelement <4 x float> %2859, float %2861, i32 2
  %2863 = getelementptr inbounds float, float* %0, i64 15
  %2864 = load float, float* %2863, align 4
  %2865 = insertelement <4 x float> %2862, float %2864, i32 3
  %2866 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2853, <4 x float> %2865, <4 x float> %2842)
  %2867 = getelementptr inbounds float, float* %1, i64 4
  %2868 = load float, float* %2867, align 4
  %2869 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2868, i32 3
  %2870 = load float, float* %0, align 4
  %2871 = insertelement <4 x float> zeroinitializer, float %2870, i32 3
  %2872 = fmul <4 x float> %2869, %2871
  %2873 = getelementptr inbounds float, float* %1, i64 4
  %2874 = load float, float* %2873, align 4
  %2875 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2874, i32 2
  %2876 = insertelement <4 x float> %2875, float 1.000000e+00, i32 3
  %2877 = load float, float* %0, align 4
  %2878 = insertelement <4 x float> zeroinitializer, float %2877, i32 2
  %2879 = insertelement <4 x float> %2878, float 0.000000e+00, i32 3
  %2880 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2876, <4 x float> %2879, <4 x float> %2872)
  %2881 = getelementptr inbounds float, float* %1, i64 5
  %2882 = load float, float* %2881, align 4
  %2883 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %2882, i32 3
  %2884 = getelementptr inbounds float, float* %0, i64 4
  %2885 = load float, float* %2884, align 4
  %2886 = insertelement <4 x float> zeroinitializer, float %2885, i32 3
  %2887 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2883, <4 x float> %2886, <4 x float> %2880)
  %2888 = getelementptr inbounds float, float* %1, i64 4
  %2889 = load float, float* %2888, align 4
  %2890 = insertelement <4 x float> zeroinitializer, float %2889, i32 1
  %2891 = getelementptr inbounds float, float* %1, i64 5
  %2892 = load float, float* %2891, align 4
  %2893 = insertelement <4 x float> %2890, float %2892, i32 2
  %2894 = getelementptr inbounds float, float* %1, i64 6
  %2895 = load float, float* %2894, align 4
  %2896 = insertelement <4 x float> %2893, float %2895, i32 3
  %2897 = load float, float* %0, align 4
  %2898 = insertelement <4 x float> zeroinitializer, float %2897, i32 1
  %2899 = getelementptr inbounds float, float* %0, i64 4
  %2900 = load float, float* %2899, align 4
  %2901 = insertelement <4 x float> %2898, float %2900, i32 2
  %2902 = getelementptr inbounds float, float* %0, i64 8
  %2903 = load float, float* %2902, align 4
  %2904 = insertelement <4 x float> %2901, float %2903, i32 3
  %2905 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2896, <4 x float> %2904, <4 x float> %2887)
  %2906 = shufflevector <4 x float> %2866, <4 x float> %2905, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %2907 = getelementptr inbounds float, float* %1, i64 4
  %2908 = load float, float* %2907, align 4
  %2909 = insertelement <4 x float> zeroinitializer, float %2908, i32 0
  %2910 = insertelement <4 x float> %2909, float 1.000000e+00, i32 1
  %2911 = insertelement <4 x float> %2910, float 1.000000e+00, i32 2
  %2912 = insertelement <4 x float> %2911, float 1.000000e+00, i32 3
  %2913 = load float, float* %0, align 4
  %2914 = insertelement <4 x float> zeroinitializer, float %2913, i32 0
  %2915 = insertelement <4 x float> %2914, float 0.000000e+00, i32 1
  %2916 = insertelement <4 x float> %2915, float 0.000000e+00, i32 2
  %2917 = insertelement <4 x float> %2916, float 0.000000e+00, i32 3
  %2918 = fmul <4 x float> %2912, %2917
  %2919 = fadd <4 x float> %2918, zeroinitializer
  %2920 = getelementptr inbounds float, float* %1, i64 5
  %2921 = load float, float* %2920, align 4
  %2922 = insertelement <4 x float> zeroinitializer, float %2921, i32 0
  %2923 = insertelement <4 x float> %2922, float 1.000000e+00, i32 1
  %2924 = insertelement <4 x float> %2923, float 1.000000e+00, i32 2
  %2925 = getelementptr inbounds float, float* %1, i64 4
  %2926 = load float, float* %2925, align 4
  %2927 = insertelement <4 x float> %2924, float %2926, i32 3
  %2928 = getelementptr inbounds float, float* %0, i64 4
  %2929 = load float, float* %2928, align 4
  %2930 = insertelement <4 x float> zeroinitializer, float %2929, i32 0
  %2931 = insertelement <4 x float> %2930, float 0.000000e+00, i32 1
  %2932 = insertelement <4 x float> %2931, float 0.000000e+00, i32 2
  %2933 = getelementptr inbounds float, float* %0, i64 1
  %2934 = load float, float* %2933, align 4
  %2935 = insertelement <4 x float> %2932, float %2934, i32 3
  %2936 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2927, <4 x float> %2935, <4 x float> %2919)
  %2937 = getelementptr inbounds float, float* %1, i64 6
  %2938 = load float, float* %2937, align 4
  %2939 = insertelement <4 x float> zeroinitializer, float %2938, i32 0
  %2940 = insertelement <4 x float> %2939, float 1.000000e+00, i32 1
  %2941 = insertelement <4 x float> %2940, float 1.000000e+00, i32 2
  %2942 = insertelement <4 x float> %2941, float 1.000000e+00, i32 3
  %2943 = getelementptr inbounds float, float* %0, i64 8
  %2944 = load float, float* %2943, align 4
  %2945 = insertelement <4 x float> zeroinitializer, float %2944, i32 0
  %2946 = insertelement <4 x float> %2945, float 0.000000e+00, i32 1
  %2947 = insertelement <4 x float> %2946, float 0.000000e+00, i32 2
  %2948 = insertelement <4 x float> %2947, float 0.000000e+00, i32 3
  %2949 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2942, <4 x float> %2948, <4 x float> %2936)
  %2950 = getelementptr inbounds float, float* %1, i64 7
  %2951 = load float, float* %2950, align 4
  %2952 = insertelement <4 x float> zeroinitializer, float %2951, i32 0
  %2953 = insertelement <4 x float> %2952, float 0.000000e+00, i32 1
  %2954 = getelementptr inbounds float, float* %1, i64 4
  %2955 = load float, float* %2954, align 4
  %2956 = insertelement <4 x float> %2953, float %2955, i32 2
  %2957 = getelementptr inbounds float, float* %1, i64 5
  %2958 = load float, float* %2957, align 4
  %2959 = insertelement <4 x float> %2956, float %2958, i32 3
  %2960 = getelementptr inbounds float, float* %0, i64 12
  %2961 = load float, float* %2960, align 4
  %2962 = insertelement <4 x float> zeroinitializer, float %2961, i32 0
  %2963 = insertelement <4 x float> %2962, float 0.000000e+00, i32 1
  %2964 = getelementptr inbounds float, float* %0, i64 1
  %2965 = load float, float* %2964, align 4
  %2966 = insertelement <4 x float> %2963, float %2965, i32 2
  %2967 = getelementptr inbounds float, float* %0, i64 5
  %2968 = load float, float* %2967, align 4
  %2969 = insertelement <4 x float> %2966, float %2968, i32 3
  %2970 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2959, <4 x float> %2969, <4 x float> %2949)
  %2971 = getelementptr inbounds float, float* %1, i64 4
  %2972 = load float, float* %2971, align 4
  %2973 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2972, i32 1
  %2974 = insertelement <4 x float> %2973, float 1.000000e+00, i32 2
  %2975 = insertelement <4 x float> %2974, float 1.000000e+00, i32 3
  %2976 = getelementptr inbounds float, float* %0, i64 1
  %2977 = load float, float* %2976, align 4
  %2978 = insertelement <4 x float> zeroinitializer, float %2977, i32 1
  %2979 = insertelement <4 x float> %2978, float 0.000000e+00, i32 2
  %2980 = insertelement <4 x float> %2979, float 0.000000e+00, i32 3
  %2981 = fmul <4 x float> %2975, %2980
  %2982 = getelementptr inbounds float, float* %1, i64 4
  %2983 = load float, float* %2982, align 4
  %2984 = insertelement <4 x float> zeroinitializer, float %2983, i32 0
  %2985 = insertelement <4 x float> %2984, float 1.000000e+00, i32 1
  %2986 = insertelement <4 x float> %2985, float 1.000000e+00, i32 2
  %2987 = insertelement <4 x float> %2986, float 1.000000e+00, i32 3
  %2988 = getelementptr inbounds float, float* %0, i64 1
  %2989 = load float, float* %2988, align 4
  %2990 = insertelement <4 x float> zeroinitializer, float %2989, i32 0
  %2991 = insertelement <4 x float> %2990, float 0.000000e+00, i32 1
  %2992 = insertelement <4 x float> %2991, float 0.000000e+00, i32 2
  %2993 = insertelement <4 x float> %2992, float 0.000000e+00, i32 3
  %2994 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2987, <4 x float> %2993, <4 x float> %2981)
  %2995 = getelementptr inbounds float, float* %1, i64 5
  %2996 = load float, float* %2995, align 4
  %2997 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %2996, i32 1
  %2998 = insertelement <4 x float> %2997, float 1.000000e+00, i32 2
  %2999 = insertelement <4 x float> %2998, float 1.000000e+00, i32 3
  %3000 = getelementptr inbounds float, float* %0, i64 5
  %3001 = load float, float* %3000, align 4
  %3002 = insertelement <4 x float> zeroinitializer, float %3001, i32 1
  %3003 = insertelement <4 x float> %3002, float 0.000000e+00, i32 2
  %3004 = insertelement <4 x float> %3003, float 0.000000e+00, i32 3
  %3005 = call <4 x float> @llvm.fma.v4f32(<4 x float> %2999, <4 x float> %3004, <4 x float> %2994)
  %3006 = getelementptr inbounds float, float* %1, i64 5
  %3007 = load float, float* %3006, align 4
  %3008 = insertelement <4 x float> zeroinitializer, float %3007, i32 0
  %3009 = getelementptr inbounds float, float* %1, i64 6
  %3010 = load float, float* %3009, align 4
  %3011 = insertelement <4 x float> %3008, float %3010, i32 1
  %3012 = insertelement <4 x float> %3011, float 1.000000e+00, i32 2
  %3013 = getelementptr inbounds float, float* %1, i64 4
  %3014 = load float, float* %3013, align 4
  %3015 = insertelement <4 x float> %3012, float %3014, i32 3
  %3016 = getelementptr inbounds float, float* %0, i64 5
  %3017 = load float, float* %3016, align 4
  %3018 = insertelement <4 x float> zeroinitializer, float %3017, i32 0
  %3019 = getelementptr inbounds float, float* %0, i64 9
  %3020 = load float, float* %3019, align 4
  %3021 = insertelement <4 x float> %3018, float %3020, i32 1
  %3022 = insertelement <4 x float> %3021, float 0.000000e+00, i32 2
  %3023 = getelementptr inbounds float, float* %0, i64 2
  %3024 = load float, float* %3023, align 4
  %3025 = insertelement <4 x float> %3022, float %3024, i32 3
  %3026 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3015, <4 x float> %3025, <4 x float> %3005)
  %3027 = getelementptr inbounds float, float* %1, i64 6
  %3028 = load float, float* %3027, align 4
  %3029 = insertelement <4 x float> zeroinitializer, float %3028, i32 0
  %3030 = getelementptr inbounds float, float* %1, i64 7
  %3031 = load float, float* %3030, align 4
  %3032 = insertelement <4 x float> %3029, float %3031, i32 1
  %3033 = insertelement <4 x float> %3032, float 1.000000e+00, i32 2
  %3034 = insertelement <4 x float> %3033, float 1.000000e+00, i32 3
  %3035 = getelementptr inbounds float, float* %0, i64 9
  %3036 = load float, float* %3035, align 4
  %3037 = insertelement <4 x float> zeroinitializer, float %3036, i32 0
  %3038 = getelementptr inbounds float, float* %0, i64 13
  %3039 = load float, float* %3038, align 4
  %3040 = insertelement <4 x float> %3037, float %3039, i32 1
  %3041 = insertelement <4 x float> %3040, float 0.000000e+00, i32 2
  %3042 = insertelement <4 x float> %3041, float 0.000000e+00, i32 3
  %3043 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3034, <4 x float> %3042, <4 x float> %3026)
  %3044 = shufflevector <4 x float> %2970, <4 x float> %3043, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3045 = shufflevector <8 x float> %2906, <8 x float> %3044, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3046 = shufflevector <16 x float> %2801, <16 x float> %3045, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3047 = shufflevector <32 x float> %2561, <32 x float> %3046, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3048 = getelementptr inbounds float, float* %1, i64 4
  %3049 = load float, float* %3048, align 4
  %3050 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3049, i32 2
  %3051 = insertelement <4 x float> %3050, float 1.000000e+00, i32 3
  %3052 = getelementptr inbounds float, float* %0, i64 2
  %3053 = load float, float* %3052, align 4
  %3054 = insertelement <4 x float> zeroinitializer, float %3053, i32 2
  %3055 = insertelement <4 x float> %3054, float 0.000000e+00, i32 3
  %3056 = fmul <4 x float> %3051, %3055
  %3057 = getelementptr inbounds float, float* %1, i64 4
  %3058 = load float, float* %3057, align 4
  %3059 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3058, i32 1
  %3060 = insertelement <4 x float> %3059, float 1.000000e+00, i32 2
  %3061 = insertelement <4 x float> %3060, float 1.000000e+00, i32 3
  %3062 = getelementptr inbounds float, float* %0, i64 2
  %3063 = load float, float* %3062, align 4
  %3064 = insertelement <4 x float> zeroinitializer, float %3063, i32 1
  %3065 = insertelement <4 x float> %3064, float 0.000000e+00, i32 2
  %3066 = insertelement <4 x float> %3065, float 0.000000e+00, i32 3
  %3067 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3061, <4 x float> %3066, <4 x float> %3056)
  %3068 = getelementptr inbounds float, float* %1, i64 4
  %3069 = load float, float* %3068, align 4
  %3070 = insertelement <4 x float> zeroinitializer, float %3069, i32 0
  %3071 = insertelement <4 x float> %3070, float 1.000000e+00, i32 1
  %3072 = getelementptr inbounds float, float* %1, i64 5
  %3073 = load float, float* %3072, align 4
  %3074 = insertelement <4 x float> %3071, float %3073, i32 2
  %3075 = insertelement <4 x float> %3074, float 1.000000e+00, i32 3
  %3076 = getelementptr inbounds float, float* %0, i64 2
  %3077 = load float, float* %3076, align 4
  %3078 = insertelement <4 x float> zeroinitializer, float %3077, i32 0
  %3079 = insertelement <4 x float> %3078, float 0.000000e+00, i32 1
  %3080 = getelementptr inbounds float, float* %0, i64 6
  %3081 = load float, float* %3080, align 4
  %3082 = insertelement <4 x float> %3079, float %3081, i32 2
  %3083 = insertelement <4 x float> %3082, float 0.000000e+00, i32 3
  %3084 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3075, <4 x float> %3083, <4 x float> %3067)
  %3085 = getelementptr inbounds float, float* %1, i64 5
  %3086 = load float, float* %3085, align 4
  %3087 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3086, i32 1
  %3088 = getelementptr inbounds float, float* %1, i64 6
  %3089 = load float, float* %3088, align 4
  %3090 = insertelement <4 x float> %3087, float %3089, i32 2
  %3091 = insertelement <4 x float> %3090, float 1.000000e+00, i32 3
  %3092 = getelementptr inbounds float, float* %0, i64 6
  %3093 = load float, float* %3092, align 4
  %3094 = insertelement <4 x float> zeroinitializer, float %3093, i32 1
  %3095 = getelementptr inbounds float, float* %0, i64 10
  %3096 = load float, float* %3095, align 4
  %3097 = insertelement <4 x float> %3094, float %3096, i32 2
  %3098 = insertelement <4 x float> %3097, float 0.000000e+00, i32 3
  %3099 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3091, <4 x float> %3098, <4 x float> %3084)
  %3100 = getelementptr inbounds float, float* %1, i64 5
  %3101 = load float, float* %3100, align 4
  %3102 = insertelement <4 x float> zeroinitializer, float %3101, i32 0
  %3103 = getelementptr inbounds float, float* %1, i64 6
  %3104 = load float, float* %3103, align 4
  %3105 = insertelement <4 x float> %3102, float %3104, i32 1
  %3106 = getelementptr inbounds float, float* %1, i64 7
  %3107 = load float, float* %3106, align 4
  %3108 = insertelement <4 x float> %3105, float %3107, i32 2
  %3109 = insertelement <4 x float> %3108, float 0.000000e+00, i32 3
  %3110 = getelementptr inbounds float, float* %0, i64 6
  %3111 = load float, float* %3110, align 4
  %3112 = insertelement <4 x float> zeroinitializer, float %3111, i32 0
  %3113 = getelementptr inbounds float, float* %0, i64 10
  %3114 = load float, float* %3113, align 4
  %3115 = insertelement <4 x float> %3112, float %3114, i32 1
  %3116 = getelementptr inbounds float, float* %0, i64 14
  %3117 = load float, float* %3116, align 4
  %3118 = insertelement <4 x float> %3115, float %3117, i32 2
  %3119 = insertelement <4 x float> %3118, float 0.000000e+00, i32 3
  %3120 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3109, <4 x float> %3119, <4 x float> %3099)
  %3121 = getelementptr inbounds float, float* %1, i64 4
  %3122 = load float, float* %3121, align 4
  %3123 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3122, i32 3
  %3124 = getelementptr inbounds float, float* %0, i64 3
  %3125 = load float, float* %3124, align 4
  %3126 = insertelement <4 x float> zeroinitializer, float %3125, i32 3
  %3127 = fmul <4 x float> %3123, %3126
  %3128 = getelementptr inbounds float, float* %1, i64 4
  %3129 = load float, float* %3128, align 4
  %3130 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3129, i32 2
  %3131 = insertelement <4 x float> %3130, float 1.000000e+00, i32 3
  %3132 = getelementptr inbounds float, float* %0, i64 3
  %3133 = load float, float* %3132, align 4
  %3134 = insertelement <4 x float> zeroinitializer, float %3133, i32 2
  %3135 = insertelement <4 x float> %3134, float 0.000000e+00, i32 3
  %3136 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3131, <4 x float> %3135, <4 x float> %3127)
  %3137 = getelementptr inbounds float, float* %1, i64 4
  %3138 = load float, float* %3137, align 4
  %3139 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3138, i32 1
  %3140 = insertelement <4 x float> %3139, float 1.000000e+00, i32 2
  %3141 = getelementptr inbounds float, float* %1, i64 5
  %3142 = load float, float* %3141, align 4
  %3143 = insertelement <4 x float> %3140, float %3142, i32 3
  %3144 = getelementptr inbounds float, float* %0, i64 3
  %3145 = load float, float* %3144, align 4
  %3146 = insertelement <4 x float> zeroinitializer, float %3145, i32 1
  %3147 = insertelement <4 x float> %3146, float 0.000000e+00, i32 2
  %3148 = getelementptr inbounds float, float* %0, i64 7
  %3149 = load float, float* %3148, align 4
  %3150 = insertelement <4 x float> %3147, float %3149, i32 3
  %3151 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3143, <4 x float> %3150, <4 x float> %3136)
  %3152 = getelementptr inbounds float, float* %1, i64 5
  %3153 = load float, float* %3152, align 4
  %3154 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3153, i32 2
  %3155 = getelementptr inbounds float, float* %1, i64 6
  %3156 = load float, float* %3155, align 4
  %3157 = insertelement <4 x float> %3154, float %3156, i32 3
  %3158 = getelementptr inbounds float, float* %0, i64 7
  %3159 = load float, float* %3158, align 4
  %3160 = insertelement <4 x float> zeroinitializer, float %3159, i32 2
  %3161 = getelementptr inbounds float, float* %0, i64 11
  %3162 = load float, float* %3161, align 4
  %3163 = insertelement <4 x float> %3160, float %3162, i32 3
  %3164 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3157, <4 x float> %3163, <4 x float> %3151)
  %3165 = getelementptr inbounds float, float* %1, i64 4
  %3166 = load float, float* %3165, align 4
  %3167 = insertelement <4 x float> zeroinitializer, float %3166, i32 0
  %3168 = getelementptr inbounds float, float* %1, i64 5
  %3169 = load float, float* %3168, align 4
  %3170 = insertelement <4 x float> %3167, float %3169, i32 1
  %3171 = getelementptr inbounds float, float* %1, i64 6
  %3172 = load float, float* %3171, align 4
  %3173 = insertelement <4 x float> %3170, float %3172, i32 2
  %3174 = getelementptr inbounds float, float* %1, i64 7
  %3175 = load float, float* %3174, align 4
  %3176 = insertelement <4 x float> %3173, float %3175, i32 3
  %3177 = getelementptr inbounds float, float* %0, i64 3
  %3178 = load float, float* %3177, align 4
  %3179 = insertelement <4 x float> zeroinitializer, float %3178, i32 0
  %3180 = getelementptr inbounds float, float* %0, i64 7
  %3181 = load float, float* %3180, align 4
  %3182 = insertelement <4 x float> %3179, float %3181, i32 1
  %3183 = getelementptr inbounds float, float* %0, i64 11
  %3184 = load float, float* %3183, align 4
  %3185 = insertelement <4 x float> %3182, float %3184, i32 2
  %3186 = getelementptr inbounds float, float* %0, i64 15
  %3187 = load float, float* %3186, align 4
  %3188 = insertelement <4 x float> %3185, float %3187, i32 3
  %3189 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3176, <4 x float> %3188, <4 x float> %3164)
  %3190 = shufflevector <4 x float> %3120, <4 x float> %3189, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3191 = getelementptr inbounds float, float* %1, i64 8
  %3192 = load float, float* %3191, align 4
  %3193 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3192, i32 3
  %3194 = load float, float* %0, align 4
  %3195 = insertelement <4 x float> zeroinitializer, float %3194, i32 3
  %3196 = fmul <4 x float> %3193, %3195
  %3197 = getelementptr inbounds float, float* %1, i64 8
  %3198 = load float, float* %3197, align 4
  %3199 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3198, i32 2
  %3200 = insertelement <4 x float> %3199, float 1.000000e+00, i32 3
  %3201 = load float, float* %0, align 4
  %3202 = insertelement <4 x float> zeroinitializer, float %3201, i32 2
  %3203 = insertelement <4 x float> %3202, float 0.000000e+00, i32 3
  %3204 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3200, <4 x float> %3203, <4 x float> %3196)
  %3205 = getelementptr inbounds float, float* %1, i64 9
  %3206 = load float, float* %3205, align 4
  %3207 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3206, i32 3
  %3208 = getelementptr inbounds float, float* %0, i64 4
  %3209 = load float, float* %3208, align 4
  %3210 = insertelement <4 x float> zeroinitializer, float %3209, i32 3
  %3211 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3207, <4 x float> %3210, <4 x float> %3204)
  %3212 = getelementptr inbounds float, float* %1, i64 8
  %3213 = load float, float* %3212, align 4
  %3214 = insertelement <4 x float> zeroinitializer, float %3213, i32 1
  %3215 = getelementptr inbounds float, float* %1, i64 9
  %3216 = load float, float* %3215, align 4
  %3217 = insertelement <4 x float> %3214, float %3216, i32 2
  %3218 = getelementptr inbounds float, float* %1, i64 10
  %3219 = load float, float* %3218, align 4
  %3220 = insertelement <4 x float> %3217, float %3219, i32 3
  %3221 = load float, float* %0, align 4
  %3222 = insertelement <4 x float> zeroinitializer, float %3221, i32 1
  %3223 = getelementptr inbounds float, float* %0, i64 4
  %3224 = load float, float* %3223, align 4
  %3225 = insertelement <4 x float> %3222, float %3224, i32 2
  %3226 = getelementptr inbounds float, float* %0, i64 8
  %3227 = load float, float* %3226, align 4
  %3228 = insertelement <4 x float> %3225, float %3227, i32 3
  %3229 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3220, <4 x float> %3228, <4 x float> %3211)
  %3230 = getelementptr inbounds float, float* %1, i64 8
  %3231 = load float, float* %3230, align 4
  %3232 = insertelement <4 x float> zeroinitializer, float %3231, i32 0
  %3233 = insertelement <4 x float> %3232, float 1.000000e+00, i32 1
  %3234 = insertelement <4 x float> %3233, float 1.000000e+00, i32 2
  %3235 = insertelement <4 x float> %3234, float 1.000000e+00, i32 3
  %3236 = load float, float* %0, align 4
  %3237 = insertelement <4 x float> zeroinitializer, float %3236, i32 0
  %3238 = insertelement <4 x float> %3237, float 0.000000e+00, i32 1
  %3239 = insertelement <4 x float> %3238, float 0.000000e+00, i32 2
  %3240 = insertelement <4 x float> %3239, float 0.000000e+00, i32 3
  %3241 = fmul <4 x float> %3235, %3240
  %3242 = fadd <4 x float> %3241, zeroinitializer
  %3243 = getelementptr inbounds float, float* %1, i64 9
  %3244 = load float, float* %3243, align 4
  %3245 = insertelement <4 x float> zeroinitializer, float %3244, i32 0
  %3246 = insertelement <4 x float> %3245, float 1.000000e+00, i32 1
  %3247 = insertelement <4 x float> %3246, float 1.000000e+00, i32 2
  %3248 = getelementptr inbounds float, float* %1, i64 8
  %3249 = load float, float* %3248, align 4
  %3250 = insertelement <4 x float> %3247, float %3249, i32 3
  %3251 = getelementptr inbounds float, float* %0, i64 4
  %3252 = load float, float* %3251, align 4
  %3253 = insertelement <4 x float> zeroinitializer, float %3252, i32 0
  %3254 = insertelement <4 x float> %3253, float 0.000000e+00, i32 1
  %3255 = insertelement <4 x float> %3254, float 0.000000e+00, i32 2
  %3256 = getelementptr inbounds float, float* %0, i64 1
  %3257 = load float, float* %3256, align 4
  %3258 = insertelement <4 x float> %3255, float %3257, i32 3
  %3259 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3250, <4 x float> %3258, <4 x float> %3242)
  %3260 = getelementptr inbounds float, float* %1, i64 10
  %3261 = load float, float* %3260, align 4
  %3262 = insertelement <4 x float> zeroinitializer, float %3261, i32 0
  %3263 = insertelement <4 x float> %3262, float 1.000000e+00, i32 1
  %3264 = insertelement <4 x float> %3263, float 1.000000e+00, i32 2
  %3265 = insertelement <4 x float> %3264, float 1.000000e+00, i32 3
  %3266 = getelementptr inbounds float, float* %0, i64 8
  %3267 = load float, float* %3266, align 4
  %3268 = insertelement <4 x float> zeroinitializer, float %3267, i32 0
  %3269 = insertelement <4 x float> %3268, float 0.000000e+00, i32 1
  %3270 = insertelement <4 x float> %3269, float 0.000000e+00, i32 2
  %3271 = insertelement <4 x float> %3270, float 0.000000e+00, i32 3
  %3272 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3265, <4 x float> %3271, <4 x float> %3259)
  %3273 = getelementptr inbounds float, float* %1, i64 11
  %3274 = load float, float* %3273, align 4
  %3275 = insertelement <4 x float> zeroinitializer, float %3274, i32 0
  %3276 = insertelement <4 x float> %3275, float 0.000000e+00, i32 1
  %3277 = getelementptr inbounds float, float* %1, i64 8
  %3278 = load float, float* %3277, align 4
  %3279 = insertelement <4 x float> %3276, float %3278, i32 2
  %3280 = getelementptr inbounds float, float* %1, i64 9
  %3281 = load float, float* %3280, align 4
  %3282 = insertelement <4 x float> %3279, float %3281, i32 3
  %3283 = getelementptr inbounds float, float* %0, i64 12
  %3284 = load float, float* %3283, align 4
  %3285 = insertelement <4 x float> zeroinitializer, float %3284, i32 0
  %3286 = insertelement <4 x float> %3285, float 0.000000e+00, i32 1
  %3287 = getelementptr inbounds float, float* %0, i64 1
  %3288 = load float, float* %3287, align 4
  %3289 = insertelement <4 x float> %3286, float %3288, i32 2
  %3290 = getelementptr inbounds float, float* %0, i64 5
  %3291 = load float, float* %3290, align 4
  %3292 = insertelement <4 x float> %3289, float %3291, i32 3
  %3293 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3282, <4 x float> %3292, <4 x float> %3272)
  %3294 = shufflevector <4 x float> %3229, <4 x float> %3293, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3295 = shufflevector <8 x float> %3190, <8 x float> %3294, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3296 = getelementptr inbounds float, float* %1, i64 8
  %3297 = load float, float* %3296, align 4
  %3298 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3297, i32 1
  %3299 = insertelement <4 x float> %3298, float 1.000000e+00, i32 2
  %3300 = insertelement <4 x float> %3299, float 1.000000e+00, i32 3
  %3301 = getelementptr inbounds float, float* %0, i64 1
  %3302 = load float, float* %3301, align 4
  %3303 = insertelement <4 x float> zeroinitializer, float %3302, i32 1
  %3304 = insertelement <4 x float> %3303, float 0.000000e+00, i32 2
  %3305 = insertelement <4 x float> %3304, float 0.000000e+00, i32 3
  %3306 = fmul <4 x float> %3300, %3305
  %3307 = getelementptr inbounds float, float* %1, i64 8
  %3308 = load float, float* %3307, align 4
  %3309 = insertelement <4 x float> zeroinitializer, float %3308, i32 0
  %3310 = insertelement <4 x float> %3309, float 1.000000e+00, i32 1
  %3311 = insertelement <4 x float> %3310, float 1.000000e+00, i32 2
  %3312 = insertelement <4 x float> %3311, float 1.000000e+00, i32 3
  %3313 = getelementptr inbounds float, float* %0, i64 1
  %3314 = load float, float* %3313, align 4
  %3315 = insertelement <4 x float> zeroinitializer, float %3314, i32 0
  %3316 = insertelement <4 x float> %3315, float 0.000000e+00, i32 1
  %3317 = insertelement <4 x float> %3316, float 0.000000e+00, i32 2
  %3318 = insertelement <4 x float> %3317, float 0.000000e+00, i32 3
  %3319 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3312, <4 x float> %3318, <4 x float> %3306)
  %3320 = getelementptr inbounds float, float* %1, i64 9
  %3321 = load float, float* %3320, align 4
  %3322 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3321, i32 1
  %3323 = insertelement <4 x float> %3322, float 1.000000e+00, i32 2
  %3324 = insertelement <4 x float> %3323, float 1.000000e+00, i32 3
  %3325 = getelementptr inbounds float, float* %0, i64 5
  %3326 = load float, float* %3325, align 4
  %3327 = insertelement <4 x float> zeroinitializer, float %3326, i32 1
  %3328 = insertelement <4 x float> %3327, float 0.000000e+00, i32 2
  %3329 = insertelement <4 x float> %3328, float 0.000000e+00, i32 3
  %3330 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3324, <4 x float> %3329, <4 x float> %3319)
  %3331 = getelementptr inbounds float, float* %1, i64 9
  %3332 = load float, float* %3331, align 4
  %3333 = insertelement <4 x float> zeroinitializer, float %3332, i32 0
  %3334 = getelementptr inbounds float, float* %1, i64 10
  %3335 = load float, float* %3334, align 4
  %3336 = insertelement <4 x float> %3333, float %3335, i32 1
  %3337 = insertelement <4 x float> %3336, float 1.000000e+00, i32 2
  %3338 = getelementptr inbounds float, float* %1, i64 8
  %3339 = load float, float* %3338, align 4
  %3340 = insertelement <4 x float> %3337, float %3339, i32 3
  %3341 = getelementptr inbounds float, float* %0, i64 5
  %3342 = load float, float* %3341, align 4
  %3343 = insertelement <4 x float> zeroinitializer, float %3342, i32 0
  %3344 = getelementptr inbounds float, float* %0, i64 9
  %3345 = load float, float* %3344, align 4
  %3346 = insertelement <4 x float> %3343, float %3345, i32 1
  %3347 = insertelement <4 x float> %3346, float 0.000000e+00, i32 2
  %3348 = getelementptr inbounds float, float* %0, i64 2
  %3349 = load float, float* %3348, align 4
  %3350 = insertelement <4 x float> %3347, float %3349, i32 3
  %3351 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3340, <4 x float> %3350, <4 x float> %3330)
  %3352 = getelementptr inbounds float, float* %1, i64 10
  %3353 = load float, float* %3352, align 4
  %3354 = insertelement <4 x float> zeroinitializer, float %3353, i32 0
  %3355 = getelementptr inbounds float, float* %1, i64 11
  %3356 = load float, float* %3355, align 4
  %3357 = insertelement <4 x float> %3354, float %3356, i32 1
  %3358 = insertelement <4 x float> %3357, float 1.000000e+00, i32 2
  %3359 = insertelement <4 x float> %3358, float 1.000000e+00, i32 3
  %3360 = getelementptr inbounds float, float* %0, i64 9
  %3361 = load float, float* %3360, align 4
  %3362 = insertelement <4 x float> zeroinitializer, float %3361, i32 0
  %3363 = getelementptr inbounds float, float* %0, i64 13
  %3364 = load float, float* %3363, align 4
  %3365 = insertelement <4 x float> %3362, float %3364, i32 1
  %3366 = insertelement <4 x float> %3365, float 0.000000e+00, i32 2
  %3367 = insertelement <4 x float> %3366, float 0.000000e+00, i32 3
  %3368 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3359, <4 x float> %3367, <4 x float> %3351)
  %3369 = getelementptr inbounds float, float* %1, i64 8
  %3370 = load float, float* %3369, align 4
  %3371 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3370, i32 2
  %3372 = insertelement <4 x float> %3371, float 1.000000e+00, i32 3
  %3373 = getelementptr inbounds float, float* %0, i64 2
  %3374 = load float, float* %3373, align 4
  %3375 = insertelement <4 x float> zeroinitializer, float %3374, i32 2
  %3376 = insertelement <4 x float> %3375, float 0.000000e+00, i32 3
  %3377 = fmul <4 x float> %3372, %3376
  %3378 = getelementptr inbounds float, float* %1, i64 8
  %3379 = load float, float* %3378, align 4
  %3380 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3379, i32 1
  %3381 = insertelement <4 x float> %3380, float 1.000000e+00, i32 2
  %3382 = insertelement <4 x float> %3381, float 1.000000e+00, i32 3
  %3383 = getelementptr inbounds float, float* %0, i64 2
  %3384 = load float, float* %3383, align 4
  %3385 = insertelement <4 x float> zeroinitializer, float %3384, i32 1
  %3386 = insertelement <4 x float> %3385, float 0.000000e+00, i32 2
  %3387 = insertelement <4 x float> %3386, float 0.000000e+00, i32 3
  %3388 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3382, <4 x float> %3387, <4 x float> %3377)
  %3389 = getelementptr inbounds float, float* %1, i64 8
  %3390 = load float, float* %3389, align 4
  %3391 = insertelement <4 x float> zeroinitializer, float %3390, i32 0
  %3392 = insertelement <4 x float> %3391, float 1.000000e+00, i32 1
  %3393 = getelementptr inbounds float, float* %1, i64 9
  %3394 = load float, float* %3393, align 4
  %3395 = insertelement <4 x float> %3392, float %3394, i32 2
  %3396 = insertelement <4 x float> %3395, float 1.000000e+00, i32 3
  %3397 = getelementptr inbounds float, float* %0, i64 2
  %3398 = load float, float* %3397, align 4
  %3399 = insertelement <4 x float> zeroinitializer, float %3398, i32 0
  %3400 = insertelement <4 x float> %3399, float 0.000000e+00, i32 1
  %3401 = getelementptr inbounds float, float* %0, i64 6
  %3402 = load float, float* %3401, align 4
  %3403 = insertelement <4 x float> %3400, float %3402, i32 2
  %3404 = insertelement <4 x float> %3403, float 0.000000e+00, i32 3
  %3405 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3396, <4 x float> %3404, <4 x float> %3388)
  %3406 = getelementptr inbounds float, float* %1, i64 9
  %3407 = load float, float* %3406, align 4
  %3408 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3407, i32 1
  %3409 = getelementptr inbounds float, float* %1, i64 10
  %3410 = load float, float* %3409, align 4
  %3411 = insertelement <4 x float> %3408, float %3410, i32 2
  %3412 = insertelement <4 x float> %3411, float 1.000000e+00, i32 3
  %3413 = getelementptr inbounds float, float* %0, i64 6
  %3414 = load float, float* %3413, align 4
  %3415 = insertelement <4 x float> zeroinitializer, float %3414, i32 1
  %3416 = getelementptr inbounds float, float* %0, i64 10
  %3417 = load float, float* %3416, align 4
  %3418 = insertelement <4 x float> %3415, float %3417, i32 2
  %3419 = insertelement <4 x float> %3418, float 0.000000e+00, i32 3
  %3420 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3412, <4 x float> %3419, <4 x float> %3405)
  %3421 = getelementptr inbounds float, float* %1, i64 9
  %3422 = load float, float* %3421, align 4
  %3423 = insertelement <4 x float> zeroinitializer, float %3422, i32 0
  %3424 = getelementptr inbounds float, float* %1, i64 10
  %3425 = load float, float* %3424, align 4
  %3426 = insertelement <4 x float> %3423, float %3425, i32 1
  %3427 = getelementptr inbounds float, float* %1, i64 11
  %3428 = load float, float* %3427, align 4
  %3429 = insertelement <4 x float> %3426, float %3428, i32 2
  %3430 = insertelement <4 x float> %3429, float 0.000000e+00, i32 3
  %3431 = getelementptr inbounds float, float* %0, i64 6
  %3432 = load float, float* %3431, align 4
  %3433 = insertelement <4 x float> zeroinitializer, float %3432, i32 0
  %3434 = getelementptr inbounds float, float* %0, i64 10
  %3435 = load float, float* %3434, align 4
  %3436 = insertelement <4 x float> %3433, float %3435, i32 1
  %3437 = getelementptr inbounds float, float* %0, i64 14
  %3438 = load float, float* %3437, align 4
  %3439 = insertelement <4 x float> %3436, float %3438, i32 2
  %3440 = insertelement <4 x float> %3439, float 0.000000e+00, i32 3
  %3441 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3430, <4 x float> %3440, <4 x float> %3420)
  %3442 = shufflevector <4 x float> %3368, <4 x float> %3441, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3443 = getelementptr inbounds float, float* %1, i64 8
  %3444 = load float, float* %3443, align 4
  %3445 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3444, i32 3
  %3446 = getelementptr inbounds float, float* %0, i64 3
  %3447 = load float, float* %3446, align 4
  %3448 = insertelement <4 x float> zeroinitializer, float %3447, i32 3
  %3449 = fmul <4 x float> %3445, %3448
  %3450 = getelementptr inbounds float, float* %1, i64 8
  %3451 = load float, float* %3450, align 4
  %3452 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3451, i32 2
  %3453 = insertelement <4 x float> %3452, float 1.000000e+00, i32 3
  %3454 = getelementptr inbounds float, float* %0, i64 3
  %3455 = load float, float* %3454, align 4
  %3456 = insertelement <4 x float> zeroinitializer, float %3455, i32 2
  %3457 = insertelement <4 x float> %3456, float 0.000000e+00, i32 3
  %3458 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3453, <4 x float> %3457, <4 x float> %3449)
  %3459 = getelementptr inbounds float, float* %1, i64 8
  %3460 = load float, float* %3459, align 4
  %3461 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3460, i32 1
  %3462 = insertelement <4 x float> %3461, float 1.000000e+00, i32 2
  %3463 = getelementptr inbounds float, float* %1, i64 9
  %3464 = load float, float* %3463, align 4
  %3465 = insertelement <4 x float> %3462, float %3464, i32 3
  %3466 = getelementptr inbounds float, float* %0, i64 3
  %3467 = load float, float* %3466, align 4
  %3468 = insertelement <4 x float> zeroinitializer, float %3467, i32 1
  %3469 = insertelement <4 x float> %3468, float 0.000000e+00, i32 2
  %3470 = getelementptr inbounds float, float* %0, i64 7
  %3471 = load float, float* %3470, align 4
  %3472 = insertelement <4 x float> %3469, float %3471, i32 3
  %3473 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3465, <4 x float> %3472, <4 x float> %3458)
  %3474 = getelementptr inbounds float, float* %1, i64 9
  %3475 = load float, float* %3474, align 4
  %3476 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3475, i32 2
  %3477 = getelementptr inbounds float, float* %1, i64 10
  %3478 = load float, float* %3477, align 4
  %3479 = insertelement <4 x float> %3476, float %3478, i32 3
  %3480 = getelementptr inbounds float, float* %0, i64 7
  %3481 = load float, float* %3480, align 4
  %3482 = insertelement <4 x float> zeroinitializer, float %3481, i32 2
  %3483 = getelementptr inbounds float, float* %0, i64 11
  %3484 = load float, float* %3483, align 4
  %3485 = insertelement <4 x float> %3482, float %3484, i32 3
  %3486 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3479, <4 x float> %3485, <4 x float> %3473)
  %3487 = getelementptr inbounds float, float* %1, i64 8
  %3488 = load float, float* %3487, align 4
  %3489 = insertelement <4 x float> zeroinitializer, float %3488, i32 0
  %3490 = getelementptr inbounds float, float* %1, i64 9
  %3491 = load float, float* %3490, align 4
  %3492 = insertelement <4 x float> %3489, float %3491, i32 1
  %3493 = getelementptr inbounds float, float* %1, i64 10
  %3494 = load float, float* %3493, align 4
  %3495 = insertelement <4 x float> %3492, float %3494, i32 2
  %3496 = getelementptr inbounds float, float* %1, i64 11
  %3497 = load float, float* %3496, align 4
  %3498 = insertelement <4 x float> %3495, float %3497, i32 3
  %3499 = getelementptr inbounds float, float* %0, i64 3
  %3500 = load float, float* %3499, align 4
  %3501 = insertelement <4 x float> zeroinitializer, float %3500, i32 0
  %3502 = getelementptr inbounds float, float* %0, i64 7
  %3503 = load float, float* %3502, align 4
  %3504 = insertelement <4 x float> %3501, float %3503, i32 1
  %3505 = getelementptr inbounds float, float* %0, i64 11
  %3506 = load float, float* %3505, align 4
  %3507 = insertelement <4 x float> %3504, float %3506, i32 2
  %3508 = getelementptr inbounds float, float* %0, i64 15
  %3509 = load float, float* %3508, align 4
  %3510 = insertelement <4 x float> %3507, float %3509, i32 3
  %3511 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3498, <4 x float> %3510, <4 x float> %3486)
  %3512 = getelementptr inbounds float, float* %1, i64 12
  %3513 = load float, float* %3512, align 4
  %3514 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3513, i32 3
  %3515 = load float, float* %0, align 4
  %3516 = insertelement <4 x float> zeroinitializer, float %3515, i32 3
  %3517 = fmul <4 x float> %3514, %3516
  %3518 = getelementptr inbounds float, float* %1, i64 12
  %3519 = load float, float* %3518, align 4
  %3520 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3519, i32 2
  %3521 = insertelement <4 x float> %3520, float 1.000000e+00, i32 3
  %3522 = load float, float* %0, align 4
  %3523 = insertelement <4 x float> zeroinitializer, float %3522, i32 2
  %3524 = insertelement <4 x float> %3523, float 0.000000e+00, i32 3
  %3525 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3521, <4 x float> %3524, <4 x float> %3517)
  %3526 = getelementptr inbounds float, float* %1, i64 13
  %3527 = load float, float* %3526, align 4
  %3528 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3527, i32 3
  %3529 = getelementptr inbounds float, float* %0, i64 4
  %3530 = load float, float* %3529, align 4
  %3531 = insertelement <4 x float> zeroinitializer, float %3530, i32 3
  %3532 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3528, <4 x float> %3531, <4 x float> %3525)
  %3533 = getelementptr inbounds float, float* %1, i64 12
  %3534 = load float, float* %3533, align 4
  %3535 = insertelement <4 x float> zeroinitializer, float %3534, i32 1
  %3536 = getelementptr inbounds float, float* %1, i64 13
  %3537 = load float, float* %3536, align 4
  %3538 = insertelement <4 x float> %3535, float %3537, i32 2
  %3539 = getelementptr inbounds float, float* %1, i64 14
  %3540 = load float, float* %3539, align 4
  %3541 = insertelement <4 x float> %3538, float %3540, i32 3
  %3542 = load float, float* %0, align 4
  %3543 = insertelement <4 x float> zeroinitializer, float %3542, i32 1
  %3544 = getelementptr inbounds float, float* %0, i64 4
  %3545 = load float, float* %3544, align 4
  %3546 = insertelement <4 x float> %3543, float %3545, i32 2
  %3547 = getelementptr inbounds float, float* %0, i64 8
  %3548 = load float, float* %3547, align 4
  %3549 = insertelement <4 x float> %3546, float %3548, i32 3
  %3550 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3541, <4 x float> %3549, <4 x float> %3532)
  %3551 = shufflevector <4 x float> %3511, <4 x float> %3550, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3552 = shufflevector <8 x float> %3442, <8 x float> %3551, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3553 = shufflevector <16 x float> %3295, <16 x float> %3552, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3554 = getelementptr inbounds float, float* %1, i64 12
  %3555 = load float, float* %3554, align 4
  %3556 = insertelement <4 x float> zeroinitializer, float %3555, i32 0
  %3557 = insertelement <4 x float> %3556, float 1.000000e+00, i32 1
  %3558 = insertelement <4 x float> %3557, float 1.000000e+00, i32 2
  %3559 = insertelement <4 x float> %3558, float 1.000000e+00, i32 3
  %3560 = load float, float* %0, align 4
  %3561 = insertelement <4 x float> zeroinitializer, float %3560, i32 0
  %3562 = insertelement <4 x float> %3561, float 0.000000e+00, i32 1
  %3563 = insertelement <4 x float> %3562, float 0.000000e+00, i32 2
  %3564 = insertelement <4 x float> %3563, float 0.000000e+00, i32 3
  %3565 = fmul <4 x float> %3559, %3564
  %3566 = fadd <4 x float> %3565, zeroinitializer
  %3567 = getelementptr inbounds float, float* %1, i64 13
  %3568 = load float, float* %3567, align 4
  %3569 = insertelement <4 x float> zeroinitializer, float %3568, i32 0
  %3570 = insertelement <4 x float> %3569, float 1.000000e+00, i32 1
  %3571 = insertelement <4 x float> %3570, float 1.000000e+00, i32 2
  %3572 = getelementptr inbounds float, float* %1, i64 12
  %3573 = load float, float* %3572, align 4
  %3574 = insertelement <4 x float> %3571, float %3573, i32 3
  %3575 = getelementptr inbounds float, float* %0, i64 4
  %3576 = load float, float* %3575, align 4
  %3577 = insertelement <4 x float> zeroinitializer, float %3576, i32 0
  %3578 = insertelement <4 x float> %3577, float 0.000000e+00, i32 1
  %3579 = insertelement <4 x float> %3578, float 0.000000e+00, i32 2
  %3580 = getelementptr inbounds float, float* %0, i64 1
  %3581 = load float, float* %3580, align 4
  %3582 = insertelement <4 x float> %3579, float %3581, i32 3
  %3583 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3574, <4 x float> %3582, <4 x float> %3566)
  %3584 = getelementptr inbounds float, float* %1, i64 14
  %3585 = load float, float* %3584, align 4
  %3586 = insertelement <4 x float> zeroinitializer, float %3585, i32 0
  %3587 = insertelement <4 x float> %3586, float 1.000000e+00, i32 1
  %3588 = insertelement <4 x float> %3587, float 1.000000e+00, i32 2
  %3589 = insertelement <4 x float> %3588, float 1.000000e+00, i32 3
  %3590 = getelementptr inbounds float, float* %0, i64 8
  %3591 = load float, float* %3590, align 4
  %3592 = insertelement <4 x float> zeroinitializer, float %3591, i32 0
  %3593 = insertelement <4 x float> %3592, float 0.000000e+00, i32 1
  %3594 = insertelement <4 x float> %3593, float 0.000000e+00, i32 2
  %3595 = insertelement <4 x float> %3594, float 0.000000e+00, i32 3
  %3596 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3589, <4 x float> %3595, <4 x float> %3583)
  %3597 = getelementptr inbounds float, float* %1, i64 15
  %3598 = load float, float* %3597, align 4
  %3599 = insertelement <4 x float> zeroinitializer, float %3598, i32 0
  %3600 = insertelement <4 x float> %3599, float 0.000000e+00, i32 1
  %3601 = getelementptr inbounds float, float* %1, i64 12
  %3602 = load float, float* %3601, align 4
  %3603 = insertelement <4 x float> %3600, float %3602, i32 2
  %3604 = getelementptr inbounds float, float* %1, i64 13
  %3605 = load float, float* %3604, align 4
  %3606 = insertelement <4 x float> %3603, float %3605, i32 3
  %3607 = getelementptr inbounds float, float* %0, i64 12
  %3608 = load float, float* %3607, align 4
  %3609 = insertelement <4 x float> zeroinitializer, float %3608, i32 0
  %3610 = insertelement <4 x float> %3609, float 0.000000e+00, i32 1
  %3611 = getelementptr inbounds float, float* %0, i64 1
  %3612 = load float, float* %3611, align 4
  %3613 = insertelement <4 x float> %3610, float %3612, i32 2
  %3614 = getelementptr inbounds float, float* %0, i64 5
  %3615 = load float, float* %3614, align 4
  %3616 = insertelement <4 x float> %3613, float %3615, i32 3
  %3617 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3606, <4 x float> %3616, <4 x float> %3596)
  %3618 = getelementptr inbounds float, float* %1, i64 12
  %3619 = load float, float* %3618, align 4
  %3620 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3619, i32 1
  %3621 = insertelement <4 x float> %3620, float 1.000000e+00, i32 2
  %3622 = insertelement <4 x float> %3621, float 1.000000e+00, i32 3
  %3623 = getelementptr inbounds float, float* %0, i64 1
  %3624 = load float, float* %3623, align 4
  %3625 = insertelement <4 x float> zeroinitializer, float %3624, i32 1
  %3626 = insertelement <4 x float> %3625, float 0.000000e+00, i32 2
  %3627 = insertelement <4 x float> %3626, float 0.000000e+00, i32 3
  %3628 = fmul <4 x float> %3622, %3627
  %3629 = getelementptr inbounds float, float* %1, i64 12
  %3630 = load float, float* %3629, align 4
  %3631 = insertelement <4 x float> zeroinitializer, float %3630, i32 0
  %3632 = insertelement <4 x float> %3631, float 1.000000e+00, i32 1
  %3633 = insertelement <4 x float> %3632, float 1.000000e+00, i32 2
  %3634 = insertelement <4 x float> %3633, float 1.000000e+00, i32 3
  %3635 = getelementptr inbounds float, float* %0, i64 1
  %3636 = load float, float* %3635, align 4
  %3637 = insertelement <4 x float> zeroinitializer, float %3636, i32 0
  %3638 = insertelement <4 x float> %3637, float 0.000000e+00, i32 1
  %3639 = insertelement <4 x float> %3638, float 0.000000e+00, i32 2
  %3640 = insertelement <4 x float> %3639, float 0.000000e+00, i32 3
  %3641 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3634, <4 x float> %3640, <4 x float> %3628)
  %3642 = getelementptr inbounds float, float* %1, i64 13
  %3643 = load float, float* %3642, align 4
  %3644 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3643, i32 1
  %3645 = insertelement <4 x float> %3644, float 1.000000e+00, i32 2
  %3646 = insertelement <4 x float> %3645, float 1.000000e+00, i32 3
  %3647 = getelementptr inbounds float, float* %0, i64 5
  %3648 = load float, float* %3647, align 4
  %3649 = insertelement <4 x float> zeroinitializer, float %3648, i32 1
  %3650 = insertelement <4 x float> %3649, float 0.000000e+00, i32 2
  %3651 = insertelement <4 x float> %3650, float 0.000000e+00, i32 3
  %3652 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3646, <4 x float> %3651, <4 x float> %3641)
  %3653 = getelementptr inbounds float, float* %1, i64 13
  %3654 = load float, float* %3653, align 4
  %3655 = insertelement <4 x float> zeroinitializer, float %3654, i32 0
  %3656 = getelementptr inbounds float, float* %1, i64 14
  %3657 = load float, float* %3656, align 4
  %3658 = insertelement <4 x float> %3655, float %3657, i32 1
  %3659 = insertelement <4 x float> %3658, float 1.000000e+00, i32 2
  %3660 = getelementptr inbounds float, float* %1, i64 12
  %3661 = load float, float* %3660, align 4
  %3662 = insertelement <4 x float> %3659, float %3661, i32 3
  %3663 = getelementptr inbounds float, float* %0, i64 5
  %3664 = load float, float* %3663, align 4
  %3665 = insertelement <4 x float> zeroinitializer, float %3664, i32 0
  %3666 = getelementptr inbounds float, float* %0, i64 9
  %3667 = load float, float* %3666, align 4
  %3668 = insertelement <4 x float> %3665, float %3667, i32 1
  %3669 = insertelement <4 x float> %3668, float 0.000000e+00, i32 2
  %3670 = getelementptr inbounds float, float* %0, i64 2
  %3671 = load float, float* %3670, align 4
  %3672 = insertelement <4 x float> %3669, float %3671, i32 3
  %3673 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3662, <4 x float> %3672, <4 x float> %3652)
  %3674 = getelementptr inbounds float, float* %1, i64 14
  %3675 = load float, float* %3674, align 4
  %3676 = insertelement <4 x float> zeroinitializer, float %3675, i32 0
  %3677 = getelementptr inbounds float, float* %1, i64 15
  %3678 = load float, float* %3677, align 4
  %3679 = insertelement <4 x float> %3676, float %3678, i32 1
  %3680 = insertelement <4 x float> %3679, float 1.000000e+00, i32 2
  %3681 = insertelement <4 x float> %3680, float 1.000000e+00, i32 3
  %3682 = getelementptr inbounds float, float* %0, i64 9
  %3683 = load float, float* %3682, align 4
  %3684 = insertelement <4 x float> zeroinitializer, float %3683, i32 0
  %3685 = getelementptr inbounds float, float* %0, i64 13
  %3686 = load float, float* %3685, align 4
  %3687 = insertelement <4 x float> %3684, float %3686, i32 1
  %3688 = insertelement <4 x float> %3687, float 0.000000e+00, i32 2
  %3689 = insertelement <4 x float> %3688, float 0.000000e+00, i32 3
  %3690 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3681, <4 x float> %3689, <4 x float> %3673)
  %3691 = shufflevector <4 x float> %3617, <4 x float> %3690, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3692 = getelementptr inbounds float, float* %1, i64 12
  %3693 = load float, float* %3692, align 4
  %3694 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3693, i32 2
  %3695 = insertelement <4 x float> %3694, float 1.000000e+00, i32 3
  %3696 = getelementptr inbounds float, float* %0, i64 2
  %3697 = load float, float* %3696, align 4
  %3698 = insertelement <4 x float> zeroinitializer, float %3697, i32 2
  %3699 = insertelement <4 x float> %3698, float 0.000000e+00, i32 3
  %3700 = fmul <4 x float> %3695, %3699
  %3701 = getelementptr inbounds float, float* %1, i64 12
  %3702 = load float, float* %3701, align 4
  %3703 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3702, i32 1
  %3704 = insertelement <4 x float> %3703, float 1.000000e+00, i32 2
  %3705 = insertelement <4 x float> %3704, float 1.000000e+00, i32 3
  %3706 = getelementptr inbounds float, float* %0, i64 2
  %3707 = load float, float* %3706, align 4
  %3708 = insertelement <4 x float> zeroinitializer, float %3707, i32 1
  %3709 = insertelement <4 x float> %3708, float 0.000000e+00, i32 2
  %3710 = insertelement <4 x float> %3709, float 0.000000e+00, i32 3
  %3711 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3705, <4 x float> %3710, <4 x float> %3700)
  %3712 = getelementptr inbounds float, float* %1, i64 12
  %3713 = load float, float* %3712, align 4
  %3714 = insertelement <4 x float> zeroinitializer, float %3713, i32 0
  %3715 = insertelement <4 x float> %3714, float 1.000000e+00, i32 1
  %3716 = getelementptr inbounds float, float* %1, i64 13
  %3717 = load float, float* %3716, align 4
  %3718 = insertelement <4 x float> %3715, float %3717, i32 2
  %3719 = insertelement <4 x float> %3718, float 1.000000e+00, i32 3
  %3720 = getelementptr inbounds float, float* %0, i64 2
  %3721 = load float, float* %3720, align 4
  %3722 = insertelement <4 x float> zeroinitializer, float %3721, i32 0
  %3723 = insertelement <4 x float> %3722, float 0.000000e+00, i32 1
  %3724 = getelementptr inbounds float, float* %0, i64 6
  %3725 = load float, float* %3724, align 4
  %3726 = insertelement <4 x float> %3723, float %3725, i32 2
  %3727 = insertelement <4 x float> %3726, float 0.000000e+00, i32 3
  %3728 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3719, <4 x float> %3727, <4 x float> %3711)
  %3729 = getelementptr inbounds float, float* %1, i64 13
  %3730 = load float, float* %3729, align 4
  %3731 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3730, i32 1
  %3732 = getelementptr inbounds float, float* %1, i64 14
  %3733 = load float, float* %3732, align 4
  %3734 = insertelement <4 x float> %3731, float %3733, i32 2
  %3735 = insertelement <4 x float> %3734, float 1.000000e+00, i32 3
  %3736 = getelementptr inbounds float, float* %0, i64 6
  %3737 = load float, float* %3736, align 4
  %3738 = insertelement <4 x float> zeroinitializer, float %3737, i32 1
  %3739 = getelementptr inbounds float, float* %0, i64 10
  %3740 = load float, float* %3739, align 4
  %3741 = insertelement <4 x float> %3738, float %3740, i32 2
  %3742 = insertelement <4 x float> %3741, float 0.000000e+00, i32 3
  %3743 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3735, <4 x float> %3742, <4 x float> %3728)
  %3744 = getelementptr inbounds float, float* %1, i64 13
  %3745 = load float, float* %3744, align 4
  %3746 = insertelement <4 x float> zeroinitializer, float %3745, i32 0
  %3747 = getelementptr inbounds float, float* %1, i64 14
  %3748 = load float, float* %3747, align 4
  %3749 = insertelement <4 x float> %3746, float %3748, i32 1
  %3750 = getelementptr inbounds float, float* %1, i64 15
  %3751 = load float, float* %3750, align 4
  %3752 = insertelement <4 x float> %3749, float %3751, i32 2
  %3753 = insertelement <4 x float> %3752, float 0.000000e+00, i32 3
  %3754 = getelementptr inbounds float, float* %0, i64 6
  %3755 = load float, float* %3754, align 4
  %3756 = insertelement <4 x float> zeroinitializer, float %3755, i32 0
  %3757 = getelementptr inbounds float, float* %0, i64 10
  %3758 = load float, float* %3757, align 4
  %3759 = insertelement <4 x float> %3756, float %3758, i32 1
  %3760 = getelementptr inbounds float, float* %0, i64 14
  %3761 = load float, float* %3760, align 4
  %3762 = insertelement <4 x float> %3759, float %3761, i32 2
  %3763 = insertelement <4 x float> %3762, float 0.000000e+00, i32 3
  %3764 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3753, <4 x float> %3763, <4 x float> %3743)
  %3765 = getelementptr inbounds float, float* %1, i64 12
  %3766 = load float, float* %3765, align 4
  %3767 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 0.000000e+00>, float %3766, i32 3
  %3768 = getelementptr inbounds float, float* %0, i64 3
  %3769 = load float, float* %3768, align 4
  %3770 = insertelement <4 x float> zeroinitializer, float %3769, i32 3
  %3771 = fmul <4 x float> %3767, %3770
  %3772 = getelementptr inbounds float, float* %1, i64 12
  %3773 = load float, float* %3772, align 4
  %3774 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3773, i32 2
  %3775 = insertelement <4 x float> %3774, float 1.000000e+00, i32 3
  %3776 = getelementptr inbounds float, float* %0, i64 3
  %3777 = load float, float* %3776, align 4
  %3778 = insertelement <4 x float> zeroinitializer, float %3777, i32 2
  %3779 = insertelement <4 x float> %3778, float 0.000000e+00, i32 3
  %3780 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3775, <4 x float> %3779, <4 x float> %3771)
  %3781 = getelementptr inbounds float, float* %1, i64 12
  %3782 = load float, float* %3781, align 4
  %3783 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3782, i32 1
  %3784 = insertelement <4 x float> %3783, float 1.000000e+00, i32 2
  %3785 = getelementptr inbounds float, float* %1, i64 13
  %3786 = load float, float* %3785, align 4
  %3787 = insertelement <4 x float> %3784, float %3786, i32 3
  %3788 = getelementptr inbounds float, float* %0, i64 3
  %3789 = load float, float* %3788, align 4
  %3790 = insertelement <4 x float> zeroinitializer, float %3789, i32 1
  %3791 = insertelement <4 x float> %3790, float 0.000000e+00, i32 2
  %3792 = getelementptr inbounds float, float* %0, i64 7
  %3793 = load float, float* %3792, align 4
  %3794 = insertelement <4 x float> %3791, float %3793, i32 3
  %3795 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3787, <4 x float> %3794, <4 x float> %3780)
  %3796 = getelementptr inbounds float, float* %1, i64 13
  %3797 = load float, float* %3796, align 4
  %3798 = insertelement <4 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %3797, i32 2
  %3799 = getelementptr inbounds float, float* %1, i64 14
  %3800 = load float, float* %3799, align 4
  %3801 = insertelement <4 x float> %3798, float %3800, i32 3
  %3802 = getelementptr inbounds float, float* %0, i64 7
  %3803 = load float, float* %3802, align 4
  %3804 = insertelement <4 x float> zeroinitializer, float %3803, i32 2
  %3805 = getelementptr inbounds float, float* %0, i64 11
  %3806 = load float, float* %3805, align 4
  %3807 = insertelement <4 x float> %3804, float %3806, i32 3
  %3808 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3801, <4 x float> %3807, <4 x float> %3795)
  %3809 = getelementptr inbounds float, float* %1, i64 12
  %3810 = load float, float* %3809, align 4
  %3811 = insertelement <4 x float> zeroinitializer, float %3810, i32 0
  %3812 = getelementptr inbounds float, float* %1, i64 13
  %3813 = load float, float* %3812, align 4
  %3814 = insertelement <4 x float> %3811, float %3813, i32 1
  %3815 = getelementptr inbounds float, float* %1, i64 14
  %3816 = load float, float* %3815, align 4
  %3817 = insertelement <4 x float> %3814, float %3816, i32 2
  %3818 = getelementptr inbounds float, float* %1, i64 15
  %3819 = load float, float* %3818, align 4
  %3820 = insertelement <4 x float> %3817, float %3819, i32 3
  %3821 = getelementptr inbounds float, float* %0, i64 3
  %3822 = load float, float* %3821, align 4
  %3823 = insertelement <4 x float> zeroinitializer, float %3822, i32 0
  %3824 = getelementptr inbounds float, float* %0, i64 7
  %3825 = load float, float* %3824, align 4
  %3826 = insertelement <4 x float> %3823, float %3825, i32 1
  %3827 = getelementptr inbounds float, float* %0, i64 11
  %3828 = load float, float* %3827, align 4
  %3829 = insertelement <4 x float> %3826, float %3828, i32 2
  %3830 = getelementptr inbounds float, float* %0, i64 15
  %3831 = load float, float* %3830, align 4
  %3832 = insertelement <4 x float> %3829, float %3831, i32 3
  %3833 = call <4 x float> @llvm.fma.v4f32(<4 x float> %3820, <4 x float> %3832, <4 x float> %3808)
  %3834 = shufflevector <4 x float> %3764, <4 x float> %3833, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3835 = shufflevector <8 x float> %3691, <8 x float> %3834, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3836 = load i32, i32* %11, align 4
  %3837 = sitofp i32 %3836 to float
  %3838 = insertelement <4 x float> zeroinitializer, float %3837, i32 0
  %3839 = load i32, i32* %9, align 4
  %3840 = sitofp i32 %3839 to float
  %3841 = insertelement <4 x float> %3838, float %3840, i32 1
  %3842 = insertelement <4 x float> %3841, float 0.000000e+00, i32 2
  %3843 = insertelement <4 x float> %3842, float 0.000000e+00, i32 3
  %3844 = shufflevector <4 x float> %3843, <4 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %3845 = shufflevector <8 x float> %3844, <8 x float> zeroinitializer, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
  %3846 = shufflevector <16 x float> %3835, <16 x float> %3845, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
  %3847 = shufflevector <32 x float> %3553, <32 x float> %3846, <64 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63>
  %3848 = shufflevector <64 x float> %3047, <64 x float> %3847, <128 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127>
  %3849 = shufflevector <128 x float> %2021, <128 x float> %3848, <256 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255>
  %3850 = extractelement <256 x float> %3849, i32 0
  store float %3850, float* %2, align 4
  %3851 = extractelement <256 x float> %3849, i32 1
  store float %3851, float* %2, align 4
  %3852 = extractelement <256 x float> %3849, i32 2
  store float %3852, float* %2, align 4
  %3853 = extractelement <256 x float> %3849, i32 3
  store float %3853, float* %2, align 4
  %3854 = extractelement <256 x float> %3849, i32 4
  store float %3854, float* %2, align 4
  %3855 = extractelement <256 x float> %3849, i32 5
  %3856 = getelementptr inbounds float, float* %2, i64 1
  store float %3855, float* %3856, align 4
  %3857 = extractelement <256 x float> %3849, i32 6
  %3858 = getelementptr inbounds float, float* %2, i64 1
  store float %3857, float* %3858, align 4
  %3859 = extractelement <256 x float> %3849, i32 7
  %3860 = getelementptr inbounds float, float* %2, i64 1
  store float %3859, float* %3860, align 4
  %3861 = extractelement <256 x float> %3849, i32 8
  %3862 = getelementptr inbounds float, float* %2, i64 1
  store float %3861, float* %3862, align 4
  %3863 = extractelement <256 x float> %3849, i32 9
  %3864 = getelementptr inbounds float, float* %2, i64 1
  store float %3863, float* %3864, align 4
  %3865 = extractelement <256 x float> %3849, i32 10
  %3866 = getelementptr inbounds float, float* %2, i64 2
  store float %3865, float* %3866, align 4
  %3867 = extractelement <256 x float> %3849, i32 11
  %3868 = getelementptr inbounds float, float* %2, i64 2
  store float %3867, float* %3868, align 4
  %3869 = extractelement <256 x float> %3849, i32 12
  %3870 = getelementptr inbounds float, float* %2, i64 2
  store float %3869, float* %3870, align 4
  %3871 = extractelement <256 x float> %3849, i32 13
  %3872 = getelementptr inbounds float, float* %2, i64 2
  store float %3871, float* %3872, align 4
  %3873 = extractelement <256 x float> %3849, i32 14
  %3874 = getelementptr inbounds float, float* %2, i64 2
  store float %3873, float* %3874, align 4
  %3875 = extractelement <256 x float> %3849, i32 15
  %3876 = getelementptr inbounds float, float* %2, i64 3
  store float %3875, float* %3876, align 4
  %3877 = extractelement <256 x float> %3849, i32 16
  %3878 = getelementptr inbounds float, float* %2, i64 3
  store float %3877, float* %3878, align 4
  %3879 = extractelement <256 x float> %3849, i32 17
  %3880 = getelementptr inbounds float, float* %2, i64 3
  store float %3879, float* %3880, align 4
  %3881 = extractelement <256 x float> %3849, i32 18
  %3882 = getelementptr inbounds float, float* %2, i64 3
  store float %3881, float* %3882, align 4
  %3883 = extractelement <256 x float> %3849, i32 19
  %3884 = getelementptr inbounds float, float* %2, i64 3
  store float %3883, float* %3884, align 4
  %3885 = extractelement <256 x float> %3849, i32 20
  %3886 = getelementptr inbounds float, float* %2, i64 4
  store float %3885, float* %3886, align 4
  %3887 = extractelement <256 x float> %3849, i32 21
  %3888 = getelementptr inbounds float, float* %2, i64 4
  store float %3887, float* %3888, align 4
  %3889 = extractelement <256 x float> %3849, i32 22
  %3890 = getelementptr inbounds float, float* %2, i64 4
  store float %3889, float* %3890, align 4
  %3891 = extractelement <256 x float> %3849, i32 23
  %3892 = getelementptr inbounds float, float* %2, i64 4
  store float %3891, float* %3892, align 4
  %3893 = extractelement <256 x float> %3849, i32 24
  %3894 = getelementptr inbounds float, float* %2, i64 4
  store float %3893, float* %3894, align 4
  %3895 = extractelement <256 x float> %3849, i32 25
  %3896 = getelementptr inbounds float, float* %2, i64 5
  store float %3895, float* %3896, align 4
  %3897 = extractelement <256 x float> %3849, i32 26
  %3898 = getelementptr inbounds float, float* %2, i64 5
  store float %3897, float* %3898, align 4
  %3899 = extractelement <256 x float> %3849, i32 27
  %3900 = getelementptr inbounds float, float* %2, i64 5
  store float %3899, float* %3900, align 4
  %3901 = extractelement <256 x float> %3849, i32 28
  %3902 = getelementptr inbounds float, float* %2, i64 5
  store float %3901, float* %3902, align 4
  %3903 = extractelement <256 x float> %3849, i32 29
  %3904 = getelementptr inbounds float, float* %2, i64 5
  store float %3903, float* %3904, align 4
  %3905 = extractelement <256 x float> %3849, i32 30
  %3906 = getelementptr inbounds float, float* %2, i64 6
  store float %3905, float* %3906, align 4
  %3907 = extractelement <256 x float> %3849, i32 31
  %3908 = getelementptr inbounds float, float* %2, i64 6
  store float %3907, float* %3908, align 4
  %3909 = extractelement <256 x float> %3849, i32 32
  %3910 = getelementptr inbounds float, float* %2, i64 6
  store float %3909, float* %3910, align 4
  %3911 = extractelement <256 x float> %3849, i32 33
  %3912 = getelementptr inbounds float, float* %2, i64 6
  store float %3911, float* %3912, align 4
  %3913 = extractelement <256 x float> %3849, i32 34
  %3914 = getelementptr inbounds float, float* %2, i64 6
  store float %3913, float* %3914, align 4
  %3915 = extractelement <256 x float> %3849, i32 35
  %3916 = getelementptr inbounds float, float* %2, i64 7
  store float %3915, float* %3916, align 4
  %3917 = extractelement <256 x float> %3849, i32 36
  %3918 = getelementptr inbounds float, float* %2, i64 7
  store float %3917, float* %3918, align 4
  %3919 = extractelement <256 x float> %3849, i32 37
  %3920 = getelementptr inbounds float, float* %2, i64 7
  store float %3919, float* %3920, align 4
  %3921 = extractelement <256 x float> %3849, i32 38
  %3922 = getelementptr inbounds float, float* %2, i64 7
  store float %3921, float* %3922, align 4
  %3923 = extractelement <256 x float> %3849, i32 39
  %3924 = getelementptr inbounds float, float* %2, i64 7
  store float %3923, float* %3924, align 4
  %3925 = extractelement <256 x float> %3849, i32 40
  %3926 = getelementptr inbounds float, float* %2, i64 8
  store float %3925, float* %3926, align 4
  %3927 = extractelement <256 x float> %3849, i32 41
  %3928 = getelementptr inbounds float, float* %2, i64 8
  store float %3927, float* %3928, align 4
  %3929 = extractelement <256 x float> %3849, i32 42
  %3930 = getelementptr inbounds float, float* %2, i64 8
  store float %3929, float* %3930, align 4
  %3931 = extractelement <256 x float> %3849, i32 43
  %3932 = getelementptr inbounds float, float* %2, i64 8
  store float %3931, float* %3932, align 4
  %3933 = extractelement <256 x float> %3849, i32 44
  %3934 = getelementptr inbounds float, float* %2, i64 8
  store float %3933, float* %3934, align 4
  %3935 = extractelement <256 x float> %3849, i32 45
  %3936 = getelementptr inbounds float, float* %2, i64 9
  store float %3935, float* %3936, align 4
  %3937 = extractelement <256 x float> %3849, i32 46
  %3938 = getelementptr inbounds float, float* %2, i64 9
  store float %3937, float* %3938, align 4
  %3939 = extractelement <256 x float> %3849, i32 47
  %3940 = getelementptr inbounds float, float* %2, i64 9
  store float %3939, float* %3940, align 4
  %3941 = extractelement <256 x float> %3849, i32 48
  %3942 = getelementptr inbounds float, float* %2, i64 9
  store float %3941, float* %3942, align 4
  %3943 = extractelement <256 x float> %3849, i32 49
  %3944 = getelementptr inbounds float, float* %2, i64 9
  store float %3943, float* %3944, align 4
  %3945 = extractelement <256 x float> %3849, i32 50
  %3946 = getelementptr inbounds float, float* %2, i64 10
  store float %3945, float* %3946, align 4
  %3947 = extractelement <256 x float> %3849, i32 51
  %3948 = getelementptr inbounds float, float* %2, i64 10
  store float %3947, float* %3948, align 4
  %3949 = extractelement <256 x float> %3849, i32 52
  %3950 = getelementptr inbounds float, float* %2, i64 10
  store float %3949, float* %3950, align 4
  %3951 = extractelement <256 x float> %3849, i32 53
  %3952 = getelementptr inbounds float, float* %2, i64 10
  store float %3951, float* %3952, align 4
  %3953 = extractelement <256 x float> %3849, i32 54
  %3954 = getelementptr inbounds float, float* %2, i64 10
  store float %3953, float* %3954, align 4
  %3955 = extractelement <256 x float> %3849, i32 55
  %3956 = getelementptr inbounds float, float* %2, i64 11
  store float %3955, float* %3956, align 4
  %3957 = extractelement <256 x float> %3849, i32 56
  %3958 = getelementptr inbounds float, float* %2, i64 11
  store float %3957, float* %3958, align 4
  %3959 = extractelement <256 x float> %3849, i32 57
  %3960 = getelementptr inbounds float, float* %2, i64 11
  store float %3959, float* %3960, align 4
  %3961 = extractelement <256 x float> %3849, i32 58
  %3962 = getelementptr inbounds float, float* %2, i64 11
  store float %3961, float* %3962, align 4
  %3963 = extractelement <256 x float> %3849, i32 59
  %3964 = getelementptr inbounds float, float* %2, i64 11
  store float %3963, float* %3964, align 4
  %3965 = extractelement <256 x float> %3849, i32 60
  %3966 = getelementptr inbounds float, float* %2, i64 12
  store float %3965, float* %3966, align 4
  %3967 = extractelement <256 x float> %3849, i32 61
  %3968 = getelementptr inbounds float, float* %2, i64 12
  store float %3967, float* %3968, align 4
  %3969 = extractelement <256 x float> %3849, i32 62
  %3970 = getelementptr inbounds float, float* %2, i64 12
  store float %3969, float* %3970, align 4
  %3971 = extractelement <256 x float> %3849, i32 63
  %3972 = getelementptr inbounds float, float* %2, i64 12
  store float %3971, float* %3972, align 4
  %3973 = extractelement <256 x float> %3849, i32 64
  %3974 = getelementptr inbounds float, float* %2, i64 12
  store float %3973, float* %3974, align 4
  %3975 = extractelement <256 x float> %3849, i32 65
  %3976 = getelementptr inbounds float, float* %2, i64 13
  store float %3975, float* %3976, align 4
  %3977 = extractelement <256 x float> %3849, i32 66
  %3978 = getelementptr inbounds float, float* %2, i64 13
  store float %3977, float* %3978, align 4
  %3979 = extractelement <256 x float> %3849, i32 67
  %3980 = getelementptr inbounds float, float* %2, i64 13
  store float %3979, float* %3980, align 4
  %3981 = extractelement <256 x float> %3849, i32 68
  %3982 = getelementptr inbounds float, float* %2, i64 13
  store float %3981, float* %3982, align 4
  %3983 = extractelement <256 x float> %3849, i32 69
  %3984 = getelementptr inbounds float, float* %2, i64 13
  store float %3983, float* %3984, align 4
  %3985 = extractelement <256 x float> %3849, i32 70
  %3986 = getelementptr inbounds float, float* %2, i64 14
  store float %3985, float* %3986, align 4
  %3987 = extractelement <256 x float> %3849, i32 71
  %3988 = getelementptr inbounds float, float* %2, i64 14
  store float %3987, float* %3988, align 4
  %3989 = extractelement <256 x float> %3849, i32 72
  %3990 = getelementptr inbounds float, float* %2, i64 14
  store float %3989, float* %3990, align 4
  %3991 = extractelement <256 x float> %3849, i32 73
  %3992 = getelementptr inbounds float, float* %2, i64 14
  store float %3991, float* %3992, align 4
  %3993 = extractelement <256 x float> %3849, i32 74
  %3994 = getelementptr inbounds float, float* %2, i64 14
  store float %3993, float* %3994, align 4
  %3995 = extractelement <256 x float> %3849, i32 75
  %3996 = getelementptr inbounds float, float* %2, i64 15
  store float %3995, float* %3996, align 4
  %3997 = extractelement <256 x float> %3849, i32 76
  %3998 = getelementptr inbounds float, float* %2, i64 15
  store float %3997, float* %3998, align 4
  %3999 = extractelement <256 x float> %3849, i32 77
  %4000 = getelementptr inbounds float, float* %2, i64 15
  store float %3999, float* %4000, align 4
  %4001 = extractelement <256 x float> %3849, i32 78
  %4002 = getelementptr inbounds float, float* %2, i64 15
  store float %4001, float* %4002, align 4
  %4003 = extractelement <256 x float> %3849, i32 79
  %4004 = getelementptr inbounds float, float* %2, i64 15
  store float %4003, float* %4004, align 4
  %4005 = extractelement <256 x float> %3849, i32 80
  store float %4005, float* %2, align 4
  %4006 = extractelement <256 x float> %3849, i32 81
  store float %4006, float* %2, align 4
  %4007 = extractelement <256 x float> %3849, i32 82
  store float %4007, float* %2, align 4
  %4008 = extractelement <256 x float> %3849, i32 83
  store float %4008, float* %2, align 4
  %4009 = extractelement <256 x float> %3849, i32 84
  store float %4009, float* %2, align 4
  %4010 = extractelement <256 x float> %3849, i32 85
  %4011 = getelementptr inbounds float, float* %2, i64 1
  store float %4010, float* %4011, align 4
  %4012 = extractelement <256 x float> %3849, i32 86
  %4013 = getelementptr inbounds float, float* %2, i64 1
  store float %4012, float* %4013, align 4
  %4014 = extractelement <256 x float> %3849, i32 87
  %4015 = getelementptr inbounds float, float* %2, i64 1
  store float %4014, float* %4015, align 4
  %4016 = extractelement <256 x float> %3849, i32 88
  %4017 = getelementptr inbounds float, float* %2, i64 1
  store float %4016, float* %4017, align 4
  %4018 = extractelement <256 x float> %3849, i32 89
  %4019 = getelementptr inbounds float, float* %2, i64 1
  store float %4018, float* %4019, align 4
  %4020 = extractelement <256 x float> %3849, i32 90
  %4021 = getelementptr inbounds float, float* %2, i64 2
  store float %4020, float* %4021, align 4
  %4022 = extractelement <256 x float> %3849, i32 91
  %4023 = getelementptr inbounds float, float* %2, i64 2
  store float %4022, float* %4023, align 4
  %4024 = extractelement <256 x float> %3849, i32 92
  %4025 = getelementptr inbounds float, float* %2, i64 2
  store float %4024, float* %4025, align 4
  %4026 = extractelement <256 x float> %3849, i32 93
  %4027 = getelementptr inbounds float, float* %2, i64 2
  store float %4026, float* %4027, align 4
  %4028 = extractelement <256 x float> %3849, i32 94
  %4029 = getelementptr inbounds float, float* %2, i64 2
  store float %4028, float* %4029, align 4
  %4030 = extractelement <256 x float> %3849, i32 95
  %4031 = getelementptr inbounds float, float* %2, i64 3
  store float %4030, float* %4031, align 4
  %4032 = extractelement <256 x float> %3849, i32 96
  %4033 = getelementptr inbounds float, float* %2, i64 3
  store float %4032, float* %4033, align 4
  %4034 = extractelement <256 x float> %3849, i32 97
  %4035 = getelementptr inbounds float, float* %2, i64 3
  store float %4034, float* %4035, align 4
  %4036 = extractelement <256 x float> %3849, i32 98
  %4037 = getelementptr inbounds float, float* %2, i64 3
  store float %4036, float* %4037, align 4
  %4038 = extractelement <256 x float> %3849, i32 99
  %4039 = getelementptr inbounds float, float* %2, i64 3
  store float %4038, float* %4039, align 4
  %4040 = extractelement <256 x float> %3849, i32 100
  %4041 = getelementptr inbounds float, float* %2, i64 4
  store float %4040, float* %4041, align 4
  %4042 = extractelement <256 x float> %3849, i32 101
  %4043 = getelementptr inbounds float, float* %2, i64 4
  store float %4042, float* %4043, align 4
  %4044 = extractelement <256 x float> %3849, i32 102
  %4045 = getelementptr inbounds float, float* %2, i64 4
  store float %4044, float* %4045, align 4
  %4046 = extractelement <256 x float> %3849, i32 103
  %4047 = getelementptr inbounds float, float* %2, i64 4
  store float %4046, float* %4047, align 4
  %4048 = extractelement <256 x float> %3849, i32 104
  %4049 = getelementptr inbounds float, float* %2, i64 4
  store float %4048, float* %4049, align 4
  %4050 = extractelement <256 x float> %3849, i32 105
  %4051 = getelementptr inbounds float, float* %2, i64 5
  store float %4050, float* %4051, align 4
  %4052 = extractelement <256 x float> %3849, i32 106
  %4053 = getelementptr inbounds float, float* %2, i64 5
  store float %4052, float* %4053, align 4
  %4054 = extractelement <256 x float> %3849, i32 107
  %4055 = getelementptr inbounds float, float* %2, i64 5
  store float %4054, float* %4055, align 4
  %4056 = extractelement <256 x float> %3849, i32 108
  %4057 = getelementptr inbounds float, float* %2, i64 5
  store float %4056, float* %4057, align 4
  %4058 = extractelement <256 x float> %3849, i32 109
  %4059 = getelementptr inbounds float, float* %2, i64 5
  store float %4058, float* %4059, align 4
  %4060 = extractelement <256 x float> %3849, i32 110
  %4061 = getelementptr inbounds float, float* %2, i64 6
  store float %4060, float* %4061, align 4
  %4062 = extractelement <256 x float> %3849, i32 111
  %4063 = getelementptr inbounds float, float* %2, i64 6
  store float %4062, float* %4063, align 4
  %4064 = extractelement <256 x float> %3849, i32 112
  %4065 = getelementptr inbounds float, float* %2, i64 6
  store float %4064, float* %4065, align 4
  %4066 = extractelement <256 x float> %3849, i32 113
  %4067 = getelementptr inbounds float, float* %2, i64 6
  store float %4066, float* %4067, align 4
  %4068 = extractelement <256 x float> %3849, i32 114
  %4069 = getelementptr inbounds float, float* %2, i64 6
  store float %4068, float* %4069, align 4
  %4070 = extractelement <256 x float> %3849, i32 115
  %4071 = getelementptr inbounds float, float* %2, i64 7
  store float %4070, float* %4071, align 4
  %4072 = extractelement <256 x float> %3849, i32 116
  %4073 = getelementptr inbounds float, float* %2, i64 7
  store float %4072, float* %4073, align 4
  %4074 = extractelement <256 x float> %3849, i32 117
  %4075 = getelementptr inbounds float, float* %2, i64 7
  store float %4074, float* %4075, align 4
  %4076 = extractelement <256 x float> %3849, i32 118
  %4077 = getelementptr inbounds float, float* %2, i64 7
  store float %4076, float* %4077, align 4
  %4078 = extractelement <256 x float> %3849, i32 119
  %4079 = getelementptr inbounds float, float* %2, i64 7
  store float %4078, float* %4079, align 4
  %4080 = extractelement <256 x float> %3849, i32 120
  %4081 = getelementptr inbounds float, float* %2, i64 8
  store float %4080, float* %4081, align 4
  %4082 = extractelement <256 x float> %3849, i32 121
  %4083 = getelementptr inbounds float, float* %2, i64 8
  store float %4082, float* %4083, align 4
  %4084 = extractelement <256 x float> %3849, i32 122
  %4085 = getelementptr inbounds float, float* %2, i64 8
  store float %4084, float* %4085, align 4
  %4086 = extractelement <256 x float> %3849, i32 123
  %4087 = getelementptr inbounds float, float* %2, i64 8
  store float %4086, float* %4087, align 4
  %4088 = extractelement <256 x float> %3849, i32 124
  %4089 = getelementptr inbounds float, float* %2, i64 8
  store float %4088, float* %4089, align 4
  %4090 = extractelement <256 x float> %3849, i32 125
  %4091 = getelementptr inbounds float, float* %2, i64 9
  store float %4090, float* %4091, align 4
  %4092 = extractelement <256 x float> %3849, i32 126
  %4093 = getelementptr inbounds float, float* %2, i64 9
  store float %4092, float* %4093, align 4
  %4094 = extractelement <256 x float> %3849, i32 127
  %4095 = getelementptr inbounds float, float* %2, i64 9
  store float %4094, float* %4095, align 4
  %4096 = extractelement <256 x float> %3849, i32 128
  %4097 = getelementptr inbounds float, float* %2, i64 9
  store float %4096, float* %4097, align 4
  %4098 = extractelement <256 x float> %3849, i32 129
  %4099 = getelementptr inbounds float, float* %2, i64 9
  store float %4098, float* %4099, align 4
  %4100 = extractelement <256 x float> %3849, i32 130
  %4101 = getelementptr inbounds float, float* %2, i64 10
  store float %4100, float* %4101, align 4
  %4102 = extractelement <256 x float> %3849, i32 131
  %4103 = getelementptr inbounds float, float* %2, i64 10
  store float %4102, float* %4103, align 4
  %4104 = extractelement <256 x float> %3849, i32 132
  %4105 = getelementptr inbounds float, float* %2, i64 10
  store float %4104, float* %4105, align 4
  %4106 = extractelement <256 x float> %3849, i32 133
  %4107 = getelementptr inbounds float, float* %2, i64 10
  store float %4106, float* %4107, align 4
  %4108 = extractelement <256 x float> %3849, i32 134
  %4109 = getelementptr inbounds float, float* %2, i64 10
  store float %4108, float* %4109, align 4
  %4110 = extractelement <256 x float> %3849, i32 135
  %4111 = getelementptr inbounds float, float* %2, i64 11
  store float %4110, float* %4111, align 4
  %4112 = extractelement <256 x float> %3849, i32 136
  %4113 = getelementptr inbounds float, float* %2, i64 11
  store float %4112, float* %4113, align 4
  %4114 = extractelement <256 x float> %3849, i32 137
  %4115 = getelementptr inbounds float, float* %2, i64 11
  store float %4114, float* %4115, align 4
  %4116 = extractelement <256 x float> %3849, i32 138
  %4117 = getelementptr inbounds float, float* %2, i64 11
  store float %4116, float* %4117, align 4
  %4118 = extractelement <256 x float> %3849, i32 139
  %4119 = getelementptr inbounds float, float* %2, i64 11
  store float %4118, float* %4119, align 4
  %4120 = extractelement <256 x float> %3849, i32 140
  %4121 = getelementptr inbounds float, float* %2, i64 12
  store float %4120, float* %4121, align 4
  %4122 = extractelement <256 x float> %3849, i32 141
  %4123 = getelementptr inbounds float, float* %2, i64 12
  store float %4122, float* %4123, align 4
  %4124 = extractelement <256 x float> %3849, i32 142
  %4125 = getelementptr inbounds float, float* %2, i64 12
  store float %4124, float* %4125, align 4
  %4126 = extractelement <256 x float> %3849, i32 143
  %4127 = getelementptr inbounds float, float* %2, i64 12
  store float %4126, float* %4127, align 4
  %4128 = extractelement <256 x float> %3849, i32 144
  %4129 = getelementptr inbounds float, float* %2, i64 12
  store float %4128, float* %4129, align 4
  %4130 = extractelement <256 x float> %3849, i32 145
  %4131 = getelementptr inbounds float, float* %2, i64 13
  store float %4130, float* %4131, align 4
  %4132 = extractelement <256 x float> %3849, i32 146
  %4133 = getelementptr inbounds float, float* %2, i64 13
  store float %4132, float* %4133, align 4
  %4134 = extractelement <256 x float> %3849, i32 147
  %4135 = getelementptr inbounds float, float* %2, i64 13
  store float %4134, float* %4135, align 4
  %4136 = extractelement <256 x float> %3849, i32 148
  %4137 = getelementptr inbounds float, float* %2, i64 13
  store float %4136, float* %4137, align 4
  %4138 = extractelement <256 x float> %3849, i32 149
  %4139 = getelementptr inbounds float, float* %2, i64 13
  store float %4138, float* %4139, align 4
  %4140 = extractelement <256 x float> %3849, i32 150
  %4141 = getelementptr inbounds float, float* %2, i64 14
  store float %4140, float* %4141, align 4
  %4142 = extractelement <256 x float> %3849, i32 151
  %4143 = getelementptr inbounds float, float* %2, i64 14
  store float %4142, float* %4143, align 4
  %4144 = extractelement <256 x float> %3849, i32 152
  %4145 = getelementptr inbounds float, float* %2, i64 14
  store float %4144, float* %4145, align 4
  %4146 = extractelement <256 x float> %3849, i32 153
  %4147 = getelementptr inbounds float, float* %2, i64 14
  store float %4146, float* %4147, align 4
  %4148 = extractelement <256 x float> %3849, i32 154
  %4149 = getelementptr inbounds float, float* %2, i64 14
  store float %4148, float* %4149, align 4
  %4150 = extractelement <256 x float> %3849, i32 155
  %4151 = getelementptr inbounds float, float* %2, i64 15
  store float %4150, float* %4151, align 4
  %4152 = extractelement <256 x float> %3849, i32 156
  %4153 = getelementptr inbounds float, float* %2, i64 15
  store float %4152, float* %4153, align 4
  %4154 = extractelement <256 x float> %3849, i32 157
  %4155 = getelementptr inbounds float, float* %2, i64 15
  store float %4154, float* %4155, align 4
  %4156 = extractelement <256 x float> %3849, i32 158
  %4157 = getelementptr inbounds float, float* %2, i64 15
  store float %4156, float* %4157, align 4
  %4158 = extractelement <256 x float> %3849, i32 159
  %4159 = getelementptr inbounds float, float* %2, i64 15
  store float %4158, float* %4159, align 4
  %4160 = extractelement <256 x float> %3849, i32 160
  store float %4160, float* %2, align 4
  %4161 = extractelement <256 x float> %3849, i32 161
  store float %4161, float* %2, align 4
  %4162 = extractelement <256 x float> %3849, i32 162
  store float %4162, float* %2, align 4
  %4163 = extractelement <256 x float> %3849, i32 163
  store float %4163, float* %2, align 4
  %4164 = extractelement <256 x float> %3849, i32 164
  store float %4164, float* %2, align 4
  %4165 = extractelement <256 x float> %3849, i32 165
  %4166 = getelementptr inbounds float, float* %2, i64 1
  store float %4165, float* %4166, align 4
  %4167 = extractelement <256 x float> %3849, i32 166
  %4168 = getelementptr inbounds float, float* %2, i64 1
  store float %4167, float* %4168, align 4
  %4169 = extractelement <256 x float> %3849, i32 167
  %4170 = getelementptr inbounds float, float* %2, i64 1
  store float %4169, float* %4170, align 4
  %4171 = extractelement <256 x float> %3849, i32 168
  %4172 = getelementptr inbounds float, float* %2, i64 1
  store float %4171, float* %4172, align 4
  %4173 = extractelement <256 x float> %3849, i32 169
  %4174 = getelementptr inbounds float, float* %2, i64 1
  store float %4173, float* %4174, align 4
  %4175 = extractelement <256 x float> %3849, i32 170
  %4176 = getelementptr inbounds float, float* %2, i64 2
  store float %4175, float* %4176, align 4
  %4177 = extractelement <256 x float> %3849, i32 171
  %4178 = getelementptr inbounds float, float* %2, i64 2
  store float %4177, float* %4178, align 4
  %4179 = extractelement <256 x float> %3849, i32 172
  %4180 = getelementptr inbounds float, float* %2, i64 2
  store float %4179, float* %4180, align 4
  %4181 = extractelement <256 x float> %3849, i32 173
  %4182 = getelementptr inbounds float, float* %2, i64 2
  store float %4181, float* %4182, align 4
  %4183 = extractelement <256 x float> %3849, i32 174
  %4184 = getelementptr inbounds float, float* %2, i64 2
  store float %4183, float* %4184, align 4
  %4185 = extractelement <256 x float> %3849, i32 175
  %4186 = getelementptr inbounds float, float* %2, i64 3
  store float %4185, float* %4186, align 4
  %4187 = extractelement <256 x float> %3849, i32 176
  %4188 = getelementptr inbounds float, float* %2, i64 3
  store float %4187, float* %4188, align 4
  %4189 = extractelement <256 x float> %3849, i32 177
  %4190 = getelementptr inbounds float, float* %2, i64 3
  store float %4189, float* %4190, align 4
  %4191 = extractelement <256 x float> %3849, i32 178
  %4192 = getelementptr inbounds float, float* %2, i64 3
  store float %4191, float* %4192, align 4
  %4193 = extractelement <256 x float> %3849, i32 179
  %4194 = getelementptr inbounds float, float* %2, i64 3
  store float %4193, float* %4194, align 4
  %4195 = extractelement <256 x float> %3849, i32 180
  %4196 = getelementptr inbounds float, float* %2, i64 4
  store float %4195, float* %4196, align 4
  %4197 = extractelement <256 x float> %3849, i32 181
  %4198 = getelementptr inbounds float, float* %2, i64 4
  store float %4197, float* %4198, align 4
  %4199 = extractelement <256 x float> %3849, i32 182
  %4200 = getelementptr inbounds float, float* %2, i64 4
  store float %4199, float* %4200, align 4
  %4201 = extractelement <256 x float> %3849, i32 183
  %4202 = getelementptr inbounds float, float* %2, i64 4
  store float %4201, float* %4202, align 4
  %4203 = extractelement <256 x float> %3849, i32 184
  %4204 = getelementptr inbounds float, float* %2, i64 4
  store float %4203, float* %4204, align 4
  %4205 = extractelement <256 x float> %3849, i32 185
  %4206 = getelementptr inbounds float, float* %2, i64 5
  store float %4205, float* %4206, align 4
  %4207 = extractelement <256 x float> %3849, i32 186
  %4208 = getelementptr inbounds float, float* %2, i64 5
  store float %4207, float* %4208, align 4
  %4209 = extractelement <256 x float> %3849, i32 187
  %4210 = getelementptr inbounds float, float* %2, i64 5
  store float %4209, float* %4210, align 4
  %4211 = extractelement <256 x float> %3849, i32 188
  %4212 = getelementptr inbounds float, float* %2, i64 5
  store float %4211, float* %4212, align 4
  %4213 = extractelement <256 x float> %3849, i32 189
  %4214 = getelementptr inbounds float, float* %2, i64 5
  store float %4213, float* %4214, align 4
  %4215 = extractelement <256 x float> %3849, i32 190
  %4216 = getelementptr inbounds float, float* %2, i64 6
  store float %4215, float* %4216, align 4
  %4217 = extractelement <256 x float> %3849, i32 191
  %4218 = getelementptr inbounds float, float* %2, i64 6
  store float %4217, float* %4218, align 4
  %4219 = extractelement <256 x float> %3849, i32 192
  %4220 = getelementptr inbounds float, float* %2, i64 6
  store float %4219, float* %4220, align 4
  %4221 = extractelement <256 x float> %3849, i32 193
  %4222 = getelementptr inbounds float, float* %2, i64 6
  store float %4221, float* %4222, align 4
  %4223 = extractelement <256 x float> %3849, i32 194
  %4224 = getelementptr inbounds float, float* %2, i64 6
  store float %4223, float* %4224, align 4
  %4225 = extractelement <256 x float> %3849, i32 195
  %4226 = getelementptr inbounds float, float* %2, i64 7
  store float %4225, float* %4226, align 4
  %4227 = extractelement <256 x float> %3849, i32 196
  %4228 = getelementptr inbounds float, float* %2, i64 7
  store float %4227, float* %4228, align 4
  %4229 = extractelement <256 x float> %3849, i32 197
  %4230 = getelementptr inbounds float, float* %2, i64 7
  store float %4229, float* %4230, align 4
  %4231 = extractelement <256 x float> %3849, i32 198
  %4232 = getelementptr inbounds float, float* %2, i64 7
  store float %4231, float* %4232, align 4
  %4233 = extractelement <256 x float> %3849, i32 199
  %4234 = getelementptr inbounds float, float* %2, i64 7
  store float %4233, float* %4234, align 4
  %4235 = extractelement <256 x float> %3849, i32 200
  %4236 = getelementptr inbounds float, float* %2, i64 8
  store float %4235, float* %4236, align 4
  %4237 = extractelement <256 x float> %3849, i32 201
  %4238 = getelementptr inbounds float, float* %2, i64 8
  store float %4237, float* %4238, align 4
  %4239 = extractelement <256 x float> %3849, i32 202
  %4240 = getelementptr inbounds float, float* %2, i64 8
  store float %4239, float* %4240, align 4
  %4241 = extractelement <256 x float> %3849, i32 203
  %4242 = getelementptr inbounds float, float* %2, i64 8
  store float %4241, float* %4242, align 4
  %4243 = extractelement <256 x float> %3849, i32 204
  %4244 = getelementptr inbounds float, float* %2, i64 8
  store float %4243, float* %4244, align 4
  %4245 = extractelement <256 x float> %3849, i32 205
  %4246 = getelementptr inbounds float, float* %2, i64 9
  store float %4245, float* %4246, align 4
  %4247 = extractelement <256 x float> %3849, i32 206
  %4248 = getelementptr inbounds float, float* %2, i64 9
  store float %4247, float* %4248, align 4
  %4249 = extractelement <256 x float> %3849, i32 207
  %4250 = getelementptr inbounds float, float* %2, i64 9
  store float %4249, float* %4250, align 4
  %4251 = extractelement <256 x float> %3849, i32 208
  %4252 = getelementptr inbounds float, float* %2, i64 9
  store float %4251, float* %4252, align 4
  %4253 = extractelement <256 x float> %3849, i32 209
  %4254 = getelementptr inbounds float, float* %2, i64 9
  store float %4253, float* %4254, align 4
  %4255 = extractelement <256 x float> %3849, i32 210
  %4256 = getelementptr inbounds float, float* %2, i64 10
  store float %4255, float* %4256, align 4
  %4257 = extractelement <256 x float> %3849, i32 211
  %4258 = getelementptr inbounds float, float* %2, i64 10
  store float %4257, float* %4258, align 4
  %4259 = extractelement <256 x float> %3849, i32 212
  %4260 = getelementptr inbounds float, float* %2, i64 10
  store float %4259, float* %4260, align 4
  %4261 = extractelement <256 x float> %3849, i32 213
  %4262 = getelementptr inbounds float, float* %2, i64 10
  store float %4261, float* %4262, align 4
  %4263 = extractelement <256 x float> %3849, i32 214
  %4264 = getelementptr inbounds float, float* %2, i64 10
  store float %4263, float* %4264, align 4
  %4265 = extractelement <256 x float> %3849, i32 215
  %4266 = getelementptr inbounds float, float* %2, i64 11
  store float %4265, float* %4266, align 4
  %4267 = extractelement <256 x float> %3849, i32 216
  %4268 = getelementptr inbounds float, float* %2, i64 11
  store float %4267, float* %4268, align 4
  %4269 = extractelement <256 x float> %3849, i32 217
  %4270 = getelementptr inbounds float, float* %2, i64 11
  store float %4269, float* %4270, align 4
  %4271 = extractelement <256 x float> %3849, i32 218
  %4272 = getelementptr inbounds float, float* %2, i64 11
  store float %4271, float* %4272, align 4
  %4273 = extractelement <256 x float> %3849, i32 219
  %4274 = getelementptr inbounds float, float* %2, i64 11
  store float %4273, float* %4274, align 4
  %4275 = extractelement <256 x float> %3849, i32 220
  %4276 = getelementptr inbounds float, float* %2, i64 12
  store float %4275, float* %4276, align 4
  %4277 = extractelement <256 x float> %3849, i32 221
  %4278 = getelementptr inbounds float, float* %2, i64 12
  store float %4277, float* %4278, align 4
  %4279 = extractelement <256 x float> %3849, i32 222
  %4280 = getelementptr inbounds float, float* %2, i64 12
  store float %4279, float* %4280, align 4
  %4281 = extractelement <256 x float> %3849, i32 223
  %4282 = getelementptr inbounds float, float* %2, i64 12
  store float %4281, float* %4282, align 4
  %4283 = extractelement <256 x float> %3849, i32 224
  %4284 = getelementptr inbounds float, float* %2, i64 12
  store float %4283, float* %4284, align 4
  %4285 = extractelement <256 x float> %3849, i32 225
  %4286 = getelementptr inbounds float, float* %2, i64 13
  store float %4285, float* %4286, align 4
  %4287 = extractelement <256 x float> %3849, i32 226
  %4288 = getelementptr inbounds float, float* %2, i64 13
  store float %4287, float* %4288, align 4
  %4289 = extractelement <256 x float> %3849, i32 227
  %4290 = getelementptr inbounds float, float* %2, i64 13
  store float %4289, float* %4290, align 4
  %4291 = extractelement <256 x float> %3849, i32 228
  %4292 = getelementptr inbounds float, float* %2, i64 13
  store float %4291, float* %4292, align 4
  %4293 = extractelement <256 x float> %3849, i32 229
  %4294 = getelementptr inbounds float, float* %2, i64 13
  store float %4293, float* %4294, align 4
  %4295 = extractelement <256 x float> %3849, i32 230
  %4296 = getelementptr inbounds float, float* %2, i64 14
  store float %4295, float* %4296, align 4
  %4297 = extractelement <256 x float> %3849, i32 231
  %4298 = getelementptr inbounds float, float* %2, i64 14
  store float %4297, float* %4298, align 4
  %4299 = extractelement <256 x float> %3849, i32 232
  %4300 = getelementptr inbounds float, float* %2, i64 14
  store float %4299, float* %4300, align 4
  %4301 = extractelement <256 x float> %3849, i32 233
  %4302 = getelementptr inbounds float, float* %2, i64 14
  store float %4301, float* %4302, align 4
  %4303 = extractelement <256 x float> %3849, i32 234
  %4304 = getelementptr inbounds float, float* %2, i64 14
  store float %4303, float* %4304, align 4
  %4305 = extractelement <256 x float> %3849, i32 235
  %4306 = getelementptr inbounds float, float* %2, i64 15
  store float %4305, float* %4306, align 4
  %4307 = extractelement <256 x float> %3849, i32 236
  %4308 = getelementptr inbounds float, float* %2, i64 15
  store float %4307, float* %4308, align 4
  %4309 = extractelement <256 x float> %3849, i32 237
  %4310 = getelementptr inbounds float, float* %2, i64 15
  store float %4309, float* %4310, align 4
  %4311 = extractelement <256 x float> %3849, i32 238
  %4312 = getelementptr inbounds float, float* %2, i64 15
  store float %4311, float* %4312, align 4
  %4313 = extractelement <256 x float> %3849, i32 239
  %4314 = getelementptr inbounds float, float* %2, i64 15
  store float %4313, float* %4314, align 4
  %4315 = extractelement <256 x float> %3849, i32 240
  %4316 = fptosi float %4315 to i32
  %4317 = getelementptr inbounds float, float* %1, i64 1
  %4318 = bitcast float* %4317 to i32*
  store i32 %4316, i32* %4318, align 4
  %4319 = extractelement <256 x float> %3849, i32 241
  %4320 = fptosi float %4319 to i32
  %4321 = getelementptr inbounds float, float* %1, i64 4
  %4322 = bitcast float* %4321 to i32*
  store i32 %4320, i32* %4322, align 4
  br label %4323

4323:                                             ; preds = %4323, %.preheader26
  %indvars.iv2730 = phi i64 [ 2, %.preheader26 ], [ %indvars.iv.next28.1, %4323 ]
  %4324 = getelementptr inbounds float, float* %1, i64 %indvars.iv2730
  %4325 = bitcast float* %4324 to i32*
  %4326 = load i32, i32* %4325, align 4
  %4327 = shl nuw nsw i64 %indvars.iv2730, 2
  %4328 = getelementptr inbounds float, float* %1, i64 %4327
  %4329 = bitcast float* %4328 to i32*
  %4330 = load i32, i32* %4329, align 4
  %4331 = getelementptr inbounds float, float* %1, i64 %indvars.iv2730
  %4332 = bitcast float* %4331 to i32*
  store i32 %4330, i32* %4332, align 4
  %4333 = shl nuw nsw i64 %indvars.iv2730, 2
  %4334 = getelementptr inbounds float, float* %1, i64 %4333
  %4335 = bitcast float* %4334 to i32*
  store i32 %4326, i32* %4335, align 4
  %indvars.iv.next28 = or i64 %indvars.iv2730, 1
  %4336 = getelementptr inbounds float, float* %1, i64 %indvars.iv.next28
  %4337 = bitcast float* %4336 to i32*
  %4338 = load i32, i32* %4337, align 4
  %4339 = shl nuw nsw i64 %indvars.iv.next28, 2
  %4340 = getelementptr inbounds float, float* %1, i64 %4339
  %4341 = bitcast float* %4340 to i32*
  %4342 = load i32, i32* %4341, align 4
  %4343 = getelementptr inbounds float, float* %1, i64 %indvars.iv.next28
  %4344 = bitcast float* %4343 to i32*
  store i32 %4342, i32* %4344, align 4
  %4345 = shl nuw nsw i64 %indvars.iv.next28, 2
  %4346 = getelementptr inbounds float, float* %1, i64 %4345
  %4347 = bitcast float* %4346 to i32*
  store i32 %4338, i32* %4347, align 4
  %indvars.iv.next28.1 = add nuw nsw i64 %indvars.iv2730, 2
  %exitcond.1.not = icmp eq i64 %indvars.iv.next28.1, 4
  br i1 %exitcond.1.not, label %.lr.ph.new.1, label %4323

.lr.ph.new.1:                                     ; preds = %.lr.ph.new.1, %4323
  %indvars.iv2730.1 = phi i64 [ %indvars.iv.next28.1.1, %.lr.ph.new.1 ], [ 2, %4323 ]
  %4348 = add nuw nsw i64 %indvars.iv2730.1, 4
  %4349 = getelementptr inbounds float, float* %1, i64 %4348
  %4350 = bitcast float* %4349 to i32*
  %4351 = load i32, i32* %4350, align 4
  %4352 = shl nuw nsw i64 %indvars.iv2730.1, 2
  %4353 = or i64 %4352, 1
  %4354 = getelementptr inbounds float, float* %1, i64 %4353
  %4355 = bitcast float* %4354 to i32*
  %4356 = load i32, i32* %4355, align 4
  %4357 = add nuw nsw i64 %indvars.iv2730.1, 4
  %4358 = getelementptr inbounds float, float* %1, i64 %4357
  %4359 = bitcast float* %4358 to i32*
  store i32 %4356, i32* %4359, align 4
  %4360 = shl nuw nsw i64 %indvars.iv2730.1, 2
  %4361 = or i64 %4360, 1
  %4362 = getelementptr inbounds float, float* %1, i64 %4361
  %4363 = bitcast float* %4362 to i32*
  store i32 %4351, i32* %4363, align 4
  %indvars.iv.next28.1124 = or i64 %indvars.iv2730.1, 1
  %4364 = add nuw nsw i64 %indvars.iv2730.1, 5
  %4365 = getelementptr inbounds float, float* %1, i64 %4364
  %4366 = bitcast float* %4365 to i32*
  %4367 = load i32, i32* %4366, align 4
  %4368 = shl nuw nsw i64 %indvars.iv.next28.1124, 2
  %4369 = or i64 %4368, 1
  %4370 = getelementptr inbounds float, float* %1, i64 %4369
  %4371 = bitcast float* %4370 to i32*
  %4372 = load i32, i32* %4371, align 4
  %4373 = add nuw nsw i64 %indvars.iv2730.1, 5
  %4374 = getelementptr inbounds float, float* %1, i64 %4373
  %4375 = bitcast float* %4374 to i32*
  store i32 %4372, i32* %4375, align 4
  %4376 = shl nuw nsw i64 %indvars.iv.next28.1124, 2
  %4377 = or i64 %4376, 1
  %4378 = getelementptr inbounds float, float* %1, i64 %4377
  %4379 = bitcast float* %4378 to i32*
  store i32 %4367, i32* %4379, align 4
  %indvars.iv.next28.1.1 = add nuw nsw i64 %indvars.iv2730.1, 2
  %exitcond.1.1.not = icmp eq i64 %indvars.iv.next28.1.1, 4
  br i1 %exitcond.1.1.not, label %.prol.preheader.2, label %.lr.ph.new.1

.prol.preheader.2:                                ; preds = %.lr.ph.new.1
  %4380 = getelementptr inbounds float, float* %1, i64 11
  %4381 = bitcast float* %4380 to i32*
  %4382 = load i32, i32* %4381, align 4
  %4383 = getelementptr inbounds float, float* %1, i64 14
  %4384 = bitcast float* %4383 to i32*
  %4385 = load i32, i32* %4384, align 4
  %4386 = getelementptr inbounds float, float* %1, i64 11
  %4387 = bitcast float* %4386 to i32*
  store i32 %4385, i32* %4387, align 4
  %4388 = getelementptr inbounds float, float* %1, i64 14
  %4389 = bitcast float* %4388 to i32*
  store i32 %4382, i32* %4389, align 4
  ret void
}

; Function Attrs: nounwind
declare i8* @__memcpy_chk(i8*, i8*, i64, i64) #3

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.objectsize.i64.p0i8(i8*, i1 immarg, i1 immarg, i1 immarg) #1

; Function Attrs: allocsize(0,1)
declare i8* @calloc(i64, i64) #4

; Function Attrs: noinline nounwind ssp uwtable
define i32 @main() #2 {
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

; Function Attrs: argmemonly nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.sqrt.f32(float) #1

; Function Attrs: nounwind readnone speculatable willreturn
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>) #1

attributes #0 = { alwaysinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { allocsize(0,1) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind willreturn }
attributes #6 = { argmemonly nounwind willreturn writeonly }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 11.0.1"}
