  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 16
  %8 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 16
  %9 = fadd float %7, %8
  %10 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 0), align 16
  %11 = fadd float %9, %10
  %12 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 0), align 16
  %13 = fadd float %11, %12
  %14 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 0), align 16
  %15 = fadd float %13, %14
  %16 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  store float %15, float* %16, align 16
  %17 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %18 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %19 = fadd float %17, %18
  %20 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 1), align 4
  %21 = fadd float %19, %20
  %22 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 1), align 4
  %23 = fadd float %21, %22
  %24 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 1), align 4
  %25 = fadd float %23, %24
  %26 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  store float %25, float* %26, align 4
  %27 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 8
  %28 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 8
  %29 = fadd float %27, %28
  %30 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 2), align 8
  %31 = fadd float %29, %30
  %32 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 2), align 8
  %33 = fadd float %31, %32
  %34 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 2), align 8
  %35 = fadd float %33, %34
  %36 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  store float %35, float* %36, align 8
  %37 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %38 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %39 = fadd float %37, %38
  %40 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 3), align 4
  %41 = fadd float %39, %40
  %42 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 3), align 4
  %43 = fadd float %41, %42
  %44 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 3), align 4
  %45 = fadd float %43, %44
  %46 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  store float %45, float* %46, align 4
  %47 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 4
  %48 = insertelement <4 x float> zeroinitializer, float %47, i32 0
  %49 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %50 = insertelement <4 x float> %48, float %49, i32 1
  %51 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 4
  %52 = insertelement <4 x float> %50, float %51, i32 2
  %53 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %54 = insertelement <4 x float> %52, float %53, i32 3
  %55 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 4
  %56 = insertelement <4 x float> zeroinitializer, float %55, i32 0
  %57 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %58 = insertelement <4 x float> %56, float %57, i32 1
  %59 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 4
  %60 = insertelement <4 x float> %58, float %59, i32 2
  %61 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %62 = insertelement <4 x float> %60, float %61, i32 3
  %63 = fadd <4 x float> %54, %62
  %64 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 0), align 4
  %65 = insertelement <4 x float> zeroinitializer, float %64, i32 0
  %66 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 1), align 4
  %67 = insertelement <4 x float> %65, float %66, i32 1
  %68 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 2), align 4
  %69 = insertelement <4 x float> %67, float %68, i32 2
  %70 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 3), align 4
  %71 = insertelement <4 x float> %69, float %70, i32 3
  %72 = fadd <4 x float> %63, %71
  %73 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 0), align 4
  %74 = insertelement <4 x float> zeroinitializer, float %73, i32 0
  %75 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 1), align 4
  %76 = insertelement <4 x float> %74, float %75, i32 1
  %77 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 2), align 4
  %78 = insertelement <4 x float> %76, float %77, i32 2
  %79 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @d_in, i64 0, i64 3), align 4
  %80 = insertelement <4 x float> %78, float %79, i32 3
  %81 = fadd <4 x float> %72, %80
  %82 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 0), align 4
  %83 = insertelement <4 x float> zeroinitializer, float %82, i32 0
  %84 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 1), align 4
  %85 = insertelement <4 x float> %83, float %84, i32 1
  %86 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 2), align 4
  %87 = insertelement <4 x float> %85, float %86, i32 2
  %88 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @e_in, i64 0, i64 3), align 4
  %89 = insertelement <4 x float> %87, float %88, i32 3
  %90 = fadd <4 x float> %81, %89
  %91 = extractelement <4 x float> %90, i32 0
  store float %91, float* %16, align 16
  %92 = extractelement <4 x float> %90, i32 1
  store float %92, float* %26, align 4
  %93 = extractelement <4 x float> %90, i32 2
  store float %93, float* %36, align 8
  %94 = extractelement <4 x float> %90, i32 3
  store float %94, float* %46, align 4
  %95 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %96 = load float, float* %95, align 16
  %97 = fpext float %96 to double
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %97)
  %99 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %100 = load float, float* %99, align 4
  %101 = fpext float %100 to double
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %101)
  %103 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %104 = load float, float* %103, align 8
  %105 = fpext float %104 to double
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %105)
  %107 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %108 = load float, float* %107, align 4
  %109 = fpext float %108 to double
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %109)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Num(0), Get([0, 1]), Symbol("b_in"), Num(0), Get([3, 4]), Add([2, 5]), Symbol("c_in"), Num(0), Get([7, 8]), Add([6, 9]), Symbol("d_in"), Num(0), Get([11, 12]), Add([10, 13]), Symbol("e_in"), Num(0), Get([15, 16]), Add([14, 17]), Symbol("a_in"), Num(1), Get([19, 20]), Symbol("b_in"), Num(1), Get([22, 23]), Add([21, 24]), Symbol("c_in"), Num(1), Get([26, 27]), Add([25, 28]), Symbol("d_in"), Num(1), Get([30, 31]), Add([29, 32]), Symbol("e_in"), Num(1), Get([34, 35]), Add([33, 36]), Symbol("a_in"), Num(2), Get([38, 39]), Symbol("b_in"), Num(2), Get([41, 42]), Add([40, 43]), Symbol("c_in"), Num(2), Get([45, 46]), Add([44, 47]), Symbol("d_in"), Num(2), Get([49, 50]), Add([48, 51]), Symbol("e_in"), Num(2), Get([53, 54]), Add([52, 55]), Symbol("a_in"), Num(3), Get([57, 58]), Symbol("b_in"), Num(3), Get([60, 61]), Add([59, 62]), Symbol("c_in"), Num(3), Get([64, 65]), Add([63, 66]), Symbol("d_in"), Num(3), Get([68, 69]), Add([67, 70]), Symbol("e_in"), Num(3), Get([72, 73]), Add([71, 74]), Vec([18, 37, 56, 75])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 7 iterations, reason: Some(Saturated)
[Symbol("a_in"), Num(0), Get([0, 1]), Symbol("a_in"), Num(1), Get([3, 4]), Symbol("a_in"), Num(2), Get([6, 7]), Symbol("a_in"), Num(3), Get([9, 10]), LitVec([2, 5, 8, 11]), Symbol("b_in"), Num(0), Get([13, 14]), Symbol("b_in"), Num(1), Get([16, 17]), Symbol("b_in"), Num(2), Get([19, 20]), Symbol("b_in"), Num(3), Get([22, 23]), LitVec([15, 18, 21, 24]), VecAdd([12, 25]), Symbol("c_in"), Num(0), Get([27, 28]), Symbol("c_in"), Num(1), Get([30, 31]), Symbol("c_in"), Num(2), Get([33, 34]), Symbol("c_in"), Num(3), Get([36, 37]), LitVec([29, 32, 35, 38]), VecAdd([26, 39]), Symbol("d_in"), Num(0), Get([41, 42]), Symbol("d_in"), Num(1), Get([44, 45]), Symbol("d_in"), Num(2), Get([47, 48]), Symbol("d_in"), Num(3), Get([50, 51]), LitVec([43, 46, 49, 52]), VecAdd([40, 53]), Symbol("e_in"), Num(0), Get([55, 56]), Symbol("e_in"), Num(1), Get([58, 59]), Symbol("e_in"), Num(2), Get([61, 62]), Symbol("e_in"), Num(3), Get([64, 65]), LitVec([57, 60, 63, 66]), VecAdd([54, 67])]
