  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca float, align 4
  %19 = alloca i32, align 4
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store float* %2, float** %9, align 8
  store float* %3, float** %10, align 8
  store float* %4, float** %11, align 8
  store float* %5, float** %12, align 8
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  store i32 4, i32* %17, align 4
  store float 0.000000e+00, float* %18, align 4
  store i32 0, i32* %19, align 4
  br label %20

20:                                               ; preds = %42, %6
  %21 = load i32, i32* %19, align 4
  %22 = icmp slt i32 %21, 8
  br i1 %22, label %23, label %45

23:                                               ; preds = %20
  %24 = load float*, float** %7, align 8
  %25 = load i32, i32* %19, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %24, i64 %26
  %28 = load float, float* %27, align 4
  %29 = load float*, float** %11, align 8
  %30 = load i32, i32* %19, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %29, i64 %31
  store float %28, float* %32, align 4
  %33 = load float*, float** %8, align 8
  %34 = load i32, i32* %19, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %33, i64 %35
  %37 = load float, float* %36, align 4
  %38 = load float*, float** %12, align 8
  %39 = load i32, i32* %19, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %38, i64 %40
  store float %37, float* %41, align 4
  br label %42

42:                                               ; preds = %23
  %43 = load i32, i32* %19, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %19, align 4
  br label %20

45:                                               ; preds = %20
  br label %46

46:                                               ; preds = %239, %45
  %47 = load i32, i32* %17, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %244

49:                                               ; preds = %46
  %50 = load i32, i32* %17, align 4
  store i32 %50, i32* %14, align 4
  br label %51

51:                                               ; preds = %236, %49
  %52 = load i32, i32* %14, align 4
  %53 = icmp slt i32 %52, 8
  br i1 %53, label %54, label %239

54:                                               ; preds = %51
  %55 = load i32, i32* %14, align 4
  %56 = load i32, i32* %17, align 4
  %57 = or i32 %55, %56
  store i32 %57, i32* %14, align 4
  %58 = load i32, i32* %14, align 4
  %59 = load i32, i32* %17, align 4
  %60 = xor i32 %58, %59
  store i32 %60, i32* %13, align 4
  %61 = load float*, float** %11, align 8
  %62 = load i32, i32* %13, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %61, i64 %63
  %65 = load float, float* %64, align 4
  %66 = load float*, float** %11, align 8
  %67 = load i32, i32* %14, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %66, i64 %68
  %70 = load float, float* %69, align 4
  %71 = fadd float %65, %70
  %72 = load float*, float** %11, align 8
  %73 = load i32, i32* %13, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds float, float* %72, i64 %74
  %76 = load float, float* %75, align 4
  %77 = load float*, float** %11, align 8
  %78 = load i32, i32* %14, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %77, i64 %79
  %81 = load float, float* %80, align 4
  %82 = fsub float %76, %81
  %83 = load float*, float** %11, align 8
  %84 = load i32, i32* %14, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %83, i64 %85
  %87 = load float, float* %18, align 4
  %88 = load float*, float** %11, align 8
  %89 = load i32, i32* %13, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds float, float* %88, i64 %90
  store float %87, float* %91, align 4
  %92 = load float*, float** %12, align 8
  %93 = load i32, i32* %13, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds float, float* %92, i64 %94
  %96 = load float, float* %95, align 4
  %97 = load float*, float** %12, align 8
  %98 = load i32, i32* %14, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float* %97, i64 %99
  %101 = load float, float* %100, align 4
  %102 = fadd float %96, %101
  %103 = load float*, float** %12, align 8
  %104 = load i32, i32* %13, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds float, float* %103, i64 %105
  %107 = load float, float* %106, align 4
  %108 = load float*, float** %12, align 8
  %109 = load i32, i32* %14, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds float, float* %108, i64 %110
  %112 = load float, float* %111, align 4
  %113 = fsub float %107, %112
  %114 = load float*, float** %12, align 8
  %115 = load i32, i32* %14, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %114, i64 %116
  %118 = load float, float* %64, align 4
  %119 = insertelement <4 x float> zeroinitializer, float %118, i32 0
  %120 = insertelement <4 x float> %119, float 0.000000e+00, i32 1
  %121 = load float, float* %95, align 4
  %122 = insertelement <4 x float> %120, float %121, i32 2
  %123 = insertelement <4 x float> %122, float 0.000000e+00, i32 3
  %124 = load float, float* %69, align 4
  %125 = insertelement <4 x float> zeroinitializer, float %124, i32 0
  %126 = load float, float* %75, align 4
  %127 = load float, float* %80, align 4
  %128 = fsub float %126, %127
  %129 = insertelement <4 x float> %125, float %128, i32 1
  %130 = load float, float* %100, align 4
  %131 = insertelement <4 x float> %129, float %130, i32 2
  %132 = load float, float* %106, align 4
  %133 = load float, float* %111, align 4
  %134 = fsub float %132, %133
  %135 = insertelement <4 x float> %131, float %134, i32 3
  %136 = fadd <4 x float> %123, %135
  %137 = extractelement <4 x float> %136, i32 0
  store float %137, float* %18, align 4
  %138 = extractelement <4 x float> %136, i32 1
  store float %138, float* %86, align 4
  %139 = extractelement <4 x float> %136, i32 2
  store float %139, float* %18, align 4
  %140 = extractelement <4 x float> %136, i32 3
  store float %140, float* %117, align 4
  %141 = load float, float* %18, align 4
  %142 = load float*, float** %12, align 8
  %143 = load i32, i32* %13, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds float, float* %142, i64 %144
  store float %141, float* %145, align 4
  %146 = load i32, i32* %13, align 4
  %147 = load i32, i32* %15, align 4
  %148 = shl i32 %146, %147
  %149 = and i32 %148, 7
  store i32 %149, i32* %16, align 4
  %150 = load i32, i32* %16, align 4
  %151 = icmp sgt i32 %150, 0
  br i1 %151, label %152, label %236

152:                                              ; preds = %54
  %153 = load float*, float** %9, align 8
  %154 = load i32, i32* %16, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds float, float* %153, i64 %155
  %157 = load float, float* %156, align 4
  %158 = load float*, float** %11, align 8
  %159 = load i32, i32* %14, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds float, float* %158, i64 %160
  %162 = load float, float* %161, align 4
  %163 = fmul float %157, %162
  %164 = load float*, float** %10, align 8
  %165 = load i32, i32* %16, align 4
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds float, float* %164, i64 %166
  %168 = load float, float* %167, align 4
  %169 = load float*, float** %12, align 8
  %170 = load i32, i32* %14, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %169, i64 %171
  %173 = load float, float* %172, align 4
  %174 = fmul float %168, %173
  %175 = fsub float %163, %174
  %176 = load float*, float** %9, align 8
  %177 = load i32, i32* %16, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds float, float* %176, i64 %178
  %180 = load float, float* %179, align 4
  %181 = load float*, float** %12, align 8
  %182 = load i32, i32* %14, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds float, float* %181, i64 %183
  %185 = load float, float* %184, align 4
  %186 = fmul float %180, %185
  %187 = load float*, float** %10, align 8
  %188 = load i32, i32* %16, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds float, float* %187, i64 %189
  %191 = load float, float* %190, align 4
  %192 = load float*, float** %11, align 8
  %193 = load i32, i32* %14, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds float, float* %192, i64 %194
  %196 = load float, float* %195, align 4
  %197 = fmul float %191, %196
  %198 = fadd float %186, %197
  %199 = load float*, float** %12, align 8
  %200 = load i32, i32* %14, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds float, float* %199, i64 %201
  %203 = load float, float* %179, align 4
  %204 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %203, i32 1
  %205 = insertelement <4 x float> %204, float 1.000000e+00, i32 2
  %206 = insertelement <4 x float> %205, float 1.000000e+00, i32 3
  %207 = load float, float* %184, align 4
  %208 = insertelement <4 x float> zeroinitializer, float %207, i32 1
  %209 = insertelement <4 x float> %208, float 0.000000e+00, i32 2
  %210 = insertelement <4 x float> %209, float 0.000000e+00, i32 3
  %211 = fmul <4 x float> %206, %210
  %212 = load float, float* %190, align 4
  %213 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %212, i32 1
  %214 = insertelement <4 x float> %213, float 1.000000e+00, i32 2
  %215 = insertelement <4 x float> %214, float 1.000000e+00, i32 3
  %216 = load float, float* %156, align 4
  %217 = load float, float* %161, align 4
  %218 = fmul float %216, %217
  %219 = load float, float* %167, align 4
  %220 = load float, float* %172, align 4
  %221 = fmul float %219, %220
  %222 = fsub float %218, %221
  %223 = insertelement <4 x float> zeroinitializer, float %222, i32 0
  %224 = load float, float* %195, align 4
  %225 = insertelement <4 x float> %223, float %224, i32 1
  %226 = insertelement <4 x float> %225, float 0.000000e+00, i32 2
  %227 = insertelement <4 x float> %226, float 0.000000e+00, i32 3
  %228 = call <4 x float> @llvm.fma.f32(<4 x float> %215, <4 x float> %227, <4 x float> %211)
  %229 = extractelement <4 x float> %228, i32 0
  store float %229, float* %18, align 4
  %230 = extractelement <4 x float> %228, i32 1
  store float %230, float* %202, align 4
  %231 = load float, float* %18, align 4
  %232 = load float*, float** %11, align 8
  %233 = load i32, i32* %14, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds float, float* %232, i64 %234
  store float %231, float* %235, align 4
  br label %236

236:                                              ; preds = %152, %54
  %237 = load i32, i32* %14, align 4
  %238 = add nsw i32 %237, 1
  store i32 %238, i32* %14, align 4
  br label %51

239:                                              ; preds = %51
  %240 = load i32, i32* %17, align 4
  %241 = ashr i32 %240, 1
  store i32 %241, i32* %17, align 4
  %242 = load i32, i32* %15, align 4
  %243 = add nsw i32 %242, 1
  store i32 %243, i32* %15, align 4
  br label %46

244:                                              ; preds = %46
  ret void
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Add([2, 5]), Symbol("no-array-name3"), Symbol("-3,"), Get([7, 8]), Symbol("no-array-name4"), Symbol("-4,"), Get([10, 11]), Minus([9, 12]), Symbol("no-array-name5"), Symbol("-5,"), Get([14, 15]), Symbol("no-array-name6"), Symbol("-6,"), Get([17, 18]), Add([16, 19]), Symbol("no-array-name7"), Symbol("-7,"), Get([21, 22]), Symbol("no-array-name8"), Symbol("-8,"), Get([24, 25]), Minus([23, 26]), Vec([6, 13, 20, 27])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Num(0), Symbol("no-array-name5"), Symbol("-5,"), Get([4, 5]), Num(0), Vec([2, 3, 6, 7]), Symbol("no-array-name2"), Symbol("-2,"), Get([9, 10]), Symbol("no-array-name3"), Symbol("-3,"), Get([12, 13]), Symbol("no-array-name4"), Symbol("-4,"), Get([15, 16]), Minus([14, 17]), Symbol("no-array-name6"), Symbol("-6,"), Get([19, 20]), Symbol("no-array-name7"), Symbol("-7,"), Get([22, 23]), Symbol("no-array-name8"), Symbol("-8,"), Get([25, 26]), Minus([24, 27]), Vec([11, 18, 21, 28]), VecAdd([8, 29])]
RecExpr { nodes: [Symbol("no-array-name9"), Symbol("-9,"), Get([0, 1]), Symbol("no-array-name10"), Symbol("-10,"), Get([3, 4]), Mul([2, 5]), Symbol("no-array-name11"), Symbol("-11,"), Get([7, 8]), Symbol("no-array-name12"), Symbol("-12,"), Get([10, 11]), Mul([9, 12]), Minus([6, 13]), Symbol("no-array-name13"), Symbol("-13,"), Get([15, 16]), Symbol("no-array-name14"), Symbol("-14,"), Get([18, 19]), Mul([17, 20]), Symbol("no-array-name15"), Symbol("-15,"), Get([22, 23]), Symbol("no-array-name16"), Symbol("-16,"), Get([25, 26]), Mul([24, 27]), Add([21, 28]), Num(0), Num(0), Vec([14, 29, 30, 31])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 6 iterations, reason: Some(Saturated)
[Num(1), Symbol("no-array-name13"), Symbol("-13,"), Get([1, 2]), Num(1), Num(1), Vec([0, 3, 4, 5]), Num(0), Symbol("no-array-name14"), Symbol("-14,"), Get([8, 9]), Num(0), Num(0), LitVec([7, 10, 11, 12]), VecMul([6, 13]), Num(1), Symbol("no-array-name15"), Symbol("-15,"), Get([16, 17]), Num(1), Num(1), Vec([15, 18, 19, 20]), Symbol("no-array-name9"), Symbol("-9,"), Get([22, 23]), Symbol("no-array-name10"), Symbol("-10,"), Get([25, 26]), Mul([24, 27]), Symbol("no-array-name11"), Symbol("-11,"), Get([29, 30]), Symbol("no-array-name12"), Symbol("-12,"), Get([32, 33]), Mul([31, 34]), Minus([28, 35]), Symbol("no-array-name16"), Symbol("-16,"), Get([37, 38]), Num(0), Num(0), Vec([36, 39, 40, 41]), VecMAC([14, 21, 42])]
