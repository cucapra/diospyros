  %7 = alloca float*, align 8
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca float*, align 8
  %11 = alloca float*, align 8
  %12 = alloca float*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca float, align 4
  %19 = alloca i32, align 4
  store float* %0, float** %7, align 8
  store float* %1, float** %8, align 8
  store float* %2, float** %9, align 8
  store float* %3, float** %10, align 8
  store float* %4, float** %11, align 8
  store float* %5, float** %12, align 8
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  store i32 4, i32* %17, align 4
  store float 0.000000e+00, float* %18, align 4
  store i32 0, i32* %19, align 4
  br label %20

20:                                               ; preds = %42, %6
  %21 = load i32, i32* %19, align 4
  %22 = icmp slt i32 %21, 8
  br i1 %22, label %23, label %45

23:                                               ; preds = %20
  %24 = load float*, float** %7, align 8
  %25 = load i32, i32* %19, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds float, float* %24, i64 %26
  %28 = load float, float* %27, align 4
  %29 = load float*, float** %11, align 8
  %30 = load i32, i32* %19, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds float, float* %29, i64 %31
  store float %28, float* %32, align 4
  %33 = load float*, float** %8, align 8
  %34 = load i32, i32* %19, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %33, i64 %35
  %37 = load float, float* %36, align 4
  %38 = load float*, float** %12, align 8
  %39 = load i32, i32* %19, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds float, float* %38, i64 %40
  store float %37, float* %41, align 4
  br label %42

42:                                               ; preds = %23
  %43 = load i32, i32* %19, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %19, align 4
  br label %20

45:                                               ; preds = %20
  br label %46

46:                                               ; preds = %240, %45
  %47 = load i32, i32* %17, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %245

49:                                               ; preds = %46
  %50 = load i32, i32* %17, align 4
  store i32 %50, i32* %14, align 4
  br label %51

51:                                               ; preds = %237, %49
  %52 = load i32, i32* %14, align 4
  %53 = icmp slt i32 %52, 8
  br i1 %53, label %54, label %240

54:                                               ; preds = %51
  %55 = load i32, i32* %14, align 4
  %56 = load i32, i32* %17, align 4
  %57 = or i32 %55, %56
  store i32 %57, i32* %14, align 4
  %58 = load i32, i32* %14, align 4
  %59 = load i32, i32* %17, align 4
  %60 = xor i32 %58, %59
  store i32 %60, i32* %13, align 4
  %61 = load float*, float** %11, align 8
  %62 = load i32, i32* %13, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %61, i64 %63
  %65 = load float, float* %64, align 4
  %66 = load float*, float** %11, align 8
  %67 = load i32, i32* %14, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds float, float* %66, i64 %68
  %70 = load float, float* %69, align 4
  %71 = fadd float %65, %70
  %72 = load float*, float** %11, align 8
  %73 = load i32, i32* %13, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds float, float* %72, i64 %74
  %76 = load float, float* %75, align 4
  %77 = load float*, float** %11, align 8
  %78 = load i32, i32* %14, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds float, float* %77, i64 %79
  %81 = load float, float* %80, align 4
  %82 = fsub float %76, %81
  %83 = load float*, float** %11, align 8
  %84 = load i32, i32* %14, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds float, float* %83, i64 %85
  %87 = load float, float* %64, align 4
  %88 = load float, float* %69, align 4
  %89 = fadd float %87, %88
  %90 = insertelement <4 x float> zeroinitializer, float %89, i32 0
  %91 = load float, float* %75, align 4
  %92 = load float, float* %80, align 4
  %93 = fsub float %91, %92
  %94 = insertelement <4 x float> %90, float %93, i32 1
  %95 = insertelement <4 x float> %94, float 0.000000e+00, i32 2
  %96 = insertelement <4 x float> %95, float 0.000000e+00, i32 3
  %97 = extractelement <4 x float> %96, i32 0
  store float %97, float* %18, align 4
  %98 = extractelement <4 x float> %96, i32 1
  store float %98, float* %86, align 4
  %99 = load float, float* %18, align 4
  %100 = load float*, float** %11, align 8
  %101 = load i32, i32* %13, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds float, float* %100, i64 %102
  store float %99, float* %103, align 4
  %104 = load float*, float** %12, align 8
  %105 = load i32, i32* %13, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds float, float* %104, i64 %106
  %108 = load float, float* %107, align 4
  %109 = load float*, float** %12, align 8
  %110 = load i32, i32* %14, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds float, float* %109, i64 %111
  %113 = load float, float* %112, align 4
  %114 = fadd float %108, %113
  %115 = load float*, float** %12, align 8
  %116 = load i32, i32* %13, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds float, float* %115, i64 %117
  %119 = load float, float* %118, align 4
  %120 = load float*, float** %12, align 8
  %121 = load i32, i32* %14, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds float, float* %120, i64 %122
  %124 = load float, float* %123, align 4
  %125 = fsub float %119, %124
  %126 = load float*, float** %12, align 8
  %127 = load i32, i32* %14, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds float, float* %126, i64 %128
  %130 = load float, float* %107, align 4
  %131 = load float, float* %112, align 4
  %132 = fadd float %130, %131
  %133 = insertelement <4 x float> zeroinitializer, float %132, i32 0
  %134 = load float, float* %118, align 4
  %135 = load float, float* %123, align 4
  %136 = fsub float %134, %135
  %137 = insertelement <4 x float> %133, float %136, i32 1
  %138 = insertelement <4 x float> %137, float 0.000000e+00, i32 2
  %139 = insertelement <4 x float> %138, float 0.000000e+00, i32 3
  %140 = extractelement <4 x float> %139, i32 0
  store float %140, float* %18, align 4
  %141 = extractelement <4 x float> %139, i32 1
  store float %141, float* %129, align 4
  %142 = load float, float* %18, align 4
  %143 = load float*, float** %12, align 8
  %144 = load i32, i32* %13, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds float, float* %143, i64 %145
  store float %142, float* %146, align 4
  %147 = load i32, i32* %13, align 4
  %148 = load i32, i32* %15, align 4
  %149 = shl i32 %147, %148
  %150 = and i32 %149, 7
  store i32 %150, i32* %16, align 4
  %151 = load i32, i32* %16, align 4
  %152 = icmp sgt i32 %151, 0
  br i1 %152, label %153, label %237

153:                                              ; preds = %54
  %154 = load float*, float** %9, align 8
  %155 = load i32, i32* %16, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds float, float* %154, i64 %156
  %158 = load float, float* %157, align 4
  %159 = load float*, float** %11, align 8
  %160 = load i32, i32* %14, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds float, float* %159, i64 %161
  %163 = load float, float* %162, align 4
  %164 = fmul float %158, %163
  %165 = load float*, float** %10, align 8
  %166 = load i32, i32* %16, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds float, float* %165, i64 %167
  %169 = load float, float* %168, align 4
  %170 = load float*, float** %12, align 8
  %171 = load i32, i32* %14, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds float, float* %170, i64 %172
  %174 = load float, float* %173, align 4
  %175 = fmul float %169, %174
  %176 = fsub float %164, %175
  %177 = load float*, float** %9, align 8
  %178 = load i32, i32* %16, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds float, float* %177, i64 %179
  %181 = load float, float* %180, align 4
  %182 = load float*, float** %12, align 8
  %183 = load i32, i32* %14, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds float, float* %182, i64 %184
  %186 = load float, float* %185, align 4
  %187 = fmul float %181, %186
  %188 = load float*, float** %10, align 8
  %189 = load i32, i32* %16, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %188, i64 %190
  %192 = load float, float* %191, align 4
  %193 = load float*, float** %11, align 8
  %194 = load i32, i32* %14, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds float, float* %193, i64 %195
  %197 = load float, float* %196, align 4
  %198 = fmul float %192, %197
  %199 = fadd float %187, %198
  %200 = load float*, float** %12, align 8
  %201 = load i32, i32* %14, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds float, float* %200, i64 %202
  %204 = load float, float* %180, align 4
  %205 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %204, i32 1
  %206 = insertelement <4 x float> %205, float 1.000000e+00, i32 2
  %207 = insertelement <4 x float> %206, float 1.000000e+00, i32 3
  %208 = load float, float* %185, align 4
  %209 = insertelement <4 x float> zeroinitializer, float %208, i32 1
  %210 = insertelement <4 x float> %209, float 0.000000e+00, i32 2
  %211 = insertelement <4 x float> %210, float 0.000000e+00, i32 3
  %212 = fmul <4 x float> %207, %211
  %213 = load float, float* %191, align 4
  %214 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %213, i32 1
  %215 = insertelement <4 x float> %214, float 1.000000e+00, i32 2
  %216 = insertelement <4 x float> %215, float 1.000000e+00, i32 3
  %217 = load float, float* %157, align 4
  %218 = load float, float* %162, align 4
  %219 = fmul float %217, %218
  %220 = load float, float* %168, align 4
  %221 = load float, float* %173, align 4
  %222 = fmul float %220, %221
  %223 = fsub float %219, %222
  %224 = insertelement <4 x float> zeroinitializer, float %223, i32 0
  %225 = load float, float* %196, align 4
  %226 = insertelement <4 x float> %224, float %225, i32 1
  %227 = insertelement <4 x float> %226, float 0.000000e+00, i32 2
  %228 = insertelement <4 x float> %227, float 0.000000e+00, i32 3
  %229 = call <4 x float> @llvm.fma.f32(<4 x float> %216, <4 x float> %228, <4 x float> %212)
  %230 = extractelement <4 x float> %229, i32 0
  store float %230, float* %18, align 4
  %231 = extractelement <4 x float> %229, i32 1
  store float %231, float* %203, align 4
  %232 = load float, float* %18, align 4
  %233 = load float*, float** %11, align 8
  %234 = load i32, i32* %14, align 4
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds float, float* %233, i64 %235
  store float %232, float* %236, align 4
  br label %237

237:                                              ; preds = %153, %54
  %238 = load i32, i32* %14, align 4
  %239 = add nsw i32 %238, 1
  store i32 %239, i32* %14, align 4
  br label %51

240:                                              ; preds = %51
  %241 = load i32, i32* %17, align 4
  %242 = ashr i32 %241, 1
  store i32 %242, i32* %17, align 4
  %243 = load i32, i32* %15, align 4
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %15, align 4
  br label %46

245:                                              ; preds = %46
  ret void
  %1 = alloca i32, align 4
  %2 = alloca [8 x float], align 16
  %3 = alloca [8 x float], align 16
  %4 = alloca [4 x float], align 16
  %5 = alloca [4 x float], align 16
  %6 = alloca [8 x float], align 16
  %7 = alloca [8 x float], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = bitcast [8 x float]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 bitcast ([8 x float]* @__const.main.real_in to i8*), i64 32, i1 false)
  %11 = bitcast [8 x float]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 bitcast ([8 x float]* @__const.main.img_in to i8*), i64 32, i1 false)
  %12 = bitcast [4 x float]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 bitcast ([4 x float]* @__const.main.real_twid_in to i8*), i64 16, i1 false)
  %13 = bitcast [4 x float]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 bitcast ([4 x float]* @__const.main.img_twid_in to i8*), i64 16, i1 false)
  %14 = bitcast [8 x float]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 bitcast ([8 x float]* @__const.main.real_out to i8*), i64 32, i1 false)
  %15 = bitcast [8 x float]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([8 x float]* @__const.main.img_out to i8*), i64 32, i1 false)
  %16 = getelementptr inbounds [8 x float], [8 x float]* %2, i64 0, i64 0
  %17 = getelementptr inbounds [8 x float], [8 x float]* %3, i64 0, i64 0
  %18 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %19 = getelementptr inbounds [4 x float], [4 x float]* %5, i64 0, i64 0
  %20 = getelementptr inbounds [8 x float], [8 x float]* %6, i64 0, i64 0
  %21 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 0
  call void @fft(float* %16, float* %17, float* %18, float* %19, float* %20, float* %21)
  store i32 0, i32* %8, align 4
  br label %22

22:                                               ; preds = %32, %0
  %23 = load i32, i32* %8, align 4
  %24 = icmp slt i32 %23, 8
  br i1 %24, label %25, label %35

25:                                               ; preds = %22
  %26 = load i32, i32* %8, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [8 x float], [8 x float]* %6, i64 0, i64 %27
  %29 = load float, float* %28, align 4
  %30 = fpext float %29 to double
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %30)
  br label %32

32:                                               ; preds = %25
  %33 = load i32, i32* %8, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %8, align 4
  br label %22

35:                                               ; preds = %22
  store i32 0, i32* %9, align 4
  br label %36

36:                                               ; preds = %46, %35
  %37 = load i32, i32* %9, align 4
  %38 = icmp slt i32 %37, 8
  br i1 %38, label %39, label %49

39:                                               ; preds = %36
  %40 = load i32, i32* %9, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [8 x float], [8 x float]* %7, i64 0, i64 %41
  %43 = load float, float* %42, align 4
  %44 = fpext float %43 to double
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %44)
  br label %46

46:                                               ; preds = %39
  %47 = load i32, i32* %9, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %9, align 4
  br label %36

49:                                               ; preds = %36
  %50 = load i32, i32* %1, align 4
  ret i32 %50
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Add([2, 5]), Symbol("no-array-name3"), Symbol("-3,"), Get([7, 8]), Symbol("no-array-name4"), Symbol("-4,"), Get([10, 11]), Minus([9, 12]), Num(0), Num(0), Vec([6, 13, 14, 15])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Add([2, 5]), Symbol("no-array-name3"), Symbol("-3,"), Get([7, 8]), Symbol("no-array-name4"), Symbol("-4,"), Get([10, 11]), Minus([9, 12]), Num(0), Num(0), Vec([6, 13, 14, 15])]
RecExpr { nodes: [Symbol("no-array-name5"), Symbol("-5,"), Get([0, 1]), Symbol("no-array-name6"), Symbol("-6,"), Get([3, 4]), Add([2, 5]), Symbol("no-array-name7"), Symbol("-7,"), Get([7, 8]), Symbol("no-array-name8"), Symbol("-8,"), Get([10, 11]), Minus([9, 12]), Num(0), Num(0), Vec([6, 13, 14, 15])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name5"), Symbol("-5,"), Get([0, 1]), Symbol("no-array-name6"), Symbol("-6,"), Get([3, 4]), Add([2, 5]), Symbol("no-array-name7"), Symbol("-7,"), Get([7, 8]), Symbol("no-array-name8"), Symbol("-8,"), Get([10, 11]), Minus([9, 12]), Num(0), Num(0), Vec([6, 13, 14, 15])]
RecExpr { nodes: [Symbol("no-array-name9"), Symbol("-9,"), Get([0, 1]), Symbol("no-array-name10"), Symbol("-10,"), Get([3, 4]), Mul([2, 5]), Symbol("no-array-name11"), Symbol("-11,"), Get([7, 8]), Symbol("no-array-name12"), Symbol("-12,"), Get([10, 11]), Mul([9, 12]), Minus([6, 13]), Symbol("no-array-name13"), Symbol("-13,"), Get([15, 16]), Symbol("no-array-name14"), Symbol("-14,"), Get([18, 19]), Mul([17, 20]), Symbol("no-array-name15"), Symbol("-15,"), Get([22, 23]), Symbol("no-array-name16"), Symbol("-16,"), Get([25, 26]), Mul([24, 27]), Add([21, 28]), Num(0), Num(0), Vec([14, 29, 30, 31])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 6 iterations, reason: Some(Saturated)
[Num(1), Symbol("no-array-name13"), Symbol("-13,"), Get([1, 2]), Num(1), Num(1), Vec([0, 3, 4, 5]), Num(0), Symbol("no-array-name14"), Symbol("-14,"), Get([8, 9]), Num(0), Num(0), LitVec([7, 10, 11, 12]), VecMul([6, 13]), Num(1), Symbol("no-array-name15"), Symbol("-15,"), Get([16, 17]), Num(1), Num(1), Vec([15, 18, 19, 20]), Symbol("no-array-name9"), Symbol("-9,"), Get([22, 23]), Symbol("no-array-name10"), Symbol("-10,"), Get([25, 26]), Mul([24, 27]), Symbol("no-array-name11"), Symbol("-11,"), Get([29, 30]), Symbol("no-array-name12"), Symbol("-12,"), Get([32, 33]), Mul([31, 34]), Minus([28, 35]), Symbol("no-array-name16"), Symbol("-16,"), Get([37, 38]), Num(0), Num(0), Vec([36, 39, 40, 41]), VecMAC([14, 21, 42])]
