  %4 = alloca float*, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store float* %0, float** %4, align 8
  store float* %1, float** %5, align 8
  store float* %2, float** %6, align 8
  store i32 0, i32* %7, align 4
  br label %10

10:                                               ; preds = %80, %3
  %11 = load i32, i32* %7, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %83

13:                                               ; preds = %10
  store i32 0, i32* %8, align 4
  br label %14

14:                                               ; preds = %76, %13
  %15 = load i32, i32* %8, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %79

17:                                               ; preds = %14
  %18 = load float*, float** %6, align 8
  %19 = load i32, i32* %7, align 4
  %20 = mul nsw i32 2, %19
  %21 = load i32, i32* %8, align 4
  %22 = add nsw i32 %20, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds float, float* %18, i64 %23
  store float 0.000000e+00, float* %24, align 4
  store i32 0, i32* %9, align 4
  br label %25

25:                                               ; preds = %72, %17
  %26 = load i32, i32* %9, align 4
  %27 = icmp slt i32 %26, 2
  br i1 %27, label %28, label %75

28:                                               ; preds = %25
  %29 = load float*, float** %4, align 8
  %30 = load i32, i32* %7, align 4
  %31 = mul nsw i32 2, %30
  %32 = load i32, i32* %9, align 4
  %33 = add nsw i32 %31, %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds float, float* %29, i64 %34
  %36 = load float, float* %35, align 4
  %37 = load float*, float** %5, align 8
  %38 = load i32, i32* %9, align 4
  %39 = mul nsw i32 2, %38
  %40 = load i32, i32* %8, align 4
  %41 = add nsw i32 %39, %40
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %37, i64 %42
  %44 = load float, float* %43, align 4
  %45 = fmul float %36, %44
  %46 = load float*, float** %6, align 8
  %47 = load i32, i32* %7, align 4
  %48 = mul nsw i32 2, %47
  %49 = load i32, i32* %8, align 4
  %50 = add nsw i32 %48, %49
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds float, float* %46, i64 %51
  %53 = load float, float* %52, align 4
  %54 = fadd float %53, %45
  %55 = load float, float* %52, align 4
  %56 = insertelement <4 x float> zeroinitializer, float %55, i32 0
  %57 = insertelement <4 x float> %56, float 0.000000e+00, i32 1
  %58 = insertelement <4 x float> %57, float 0.000000e+00, i32 2
  %59 = insertelement <4 x float> %58, float 0.000000e+00, i32 3
  %60 = load float, float* %35, align 4
  %61 = insertelement <4 x float> zeroinitializer, float %60, i32 0
  %62 = insertelement <4 x float> %61, float 0.000000e+00, i32 1
  %63 = insertelement <4 x float> %62, float 0.000000e+00, i32 2
  %64 = insertelement <4 x float> %63, float 0.000000e+00, i32 3
  %65 = load float, float* %43, align 4
  %66 = insertelement <4 x float> zeroinitializer, float %65, i32 0
  %67 = insertelement <4 x float> %66, float 0.000000e+00, i32 1
  %68 = insertelement <4 x float> %67, float 0.000000e+00, i32 2
  %69 = insertelement <4 x float> %68, float 0.000000e+00, i32 3
  %70 = call <4 x float> @llvm.fma.f32(<4 x float> %64, <4 x float> %69, <4 x float> %59)
  %71 = extractelement <4 x float> %70, i32 0
  store float %71, float* %52, align 4
  br label %72

72:                                               ; preds = %28
  %73 = load i32, i32* %9, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %9, align 4
  br label %25

75:                                               ; preds = %25
  br label %76

76:                                               ; preds = %75
  %77 = load i32, i32* %8, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %8, align 4
  br label %14

79:                                               ; preds = %14
  br label %80

80:                                               ; preds = %79
  %81 = load i32, i32* %7, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %7, align 4
  br label %10

83:                                               ; preds = %10
  ret void
  %1 = alloca i32, align 4
  %2 = alloca [4 x float], align 16
  %3 = alloca [4 x float], align 16
  %4 = alloca [4 x float], align 16
  store i32 0, i32* %1, align 4
  %5 = bitcast [4 x float]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([4 x float]* @__const.main.a_in to i8*), i64 16, i1 false)
  %6 = bitcast [4 x float]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 bitcast ([4 x float]* @__const.main.b_in to i8*), i64 16, i1 false)
  %7 = bitcast [4 x float]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %7, i8 0, i64 16, i1 false)
  %8 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 0
  %9 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  call void @matrix_multiply(float* %8, float* %9, float* %10)
  %11 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %12 = load float, float* %11, align 16
  %13 = fpext float %12 to double
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %13)
  %15 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 1
  %16 = load float, float* %15, align 4
  %17 = fpext float %16 to double
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %17)
  %19 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 2
  %20 = load float, float* %19, align 8
  %21 = fpext float %20 to double
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %21)
  %23 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 3
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %25)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Mul([2, 5]), Symbol("no-array-name3"), Symbol("-3,"), Get([7, 8]), Add([9, 6]), Num(0), Num(0), Num(0), Vec([10, 11, 12, 13])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name3"), Symbol("-3,"), Get([0, 1]), Num(0), Num(0), Num(0), LitVec([2, 3, 4, 5]), Symbol("no-array-name1"), Symbol("-1,"), Get([7, 8]), Num(0), Num(0), Num(0), LitVec([9, 10, 11, 12]), Symbol("no-array-name2"), Symbol("-2,"), Get([14, 15]), Num(0), Num(0), Num(0), LitVec([16, 17, 18, 19]), VecMAC([6, 13, 20])]
