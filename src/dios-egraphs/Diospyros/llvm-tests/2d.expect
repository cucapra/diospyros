  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 0, i64 3), align 4
  %8 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 16
  %9 = fadd float %7, %8
  %10 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  store float %9, float* %10, align 16
  %11 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 1, i64 3), align 4
  %12 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %13 = fadd float %11, %12
  %14 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  store float %13, float* %14, align 4
  %15 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 2, i64 3), align 4
  %16 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 8
  %17 = fadd float %15, %16
  %18 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  store float %17, float* %18, align 8
  %19 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 3, i64 3), align 4
  %20 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 0, i64 1), align 4
  %21 = fadd float %19, %20
  %22 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 0, i64 3), align 4
  %23 = insertelement <4 x float> zeroinitializer, float %22, i32 0
  %24 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 1, i64 3), align 4
  %25 = insertelement <4 x float> %23, float %24, i32 1
  %26 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 2, i64 3), align 4
  %27 = insertelement <4 x float> %25, float %26, i32 2
  %28 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 3, i64 3), align 4
  %29 = insertelement <4 x float> %27, float %28, i32 3
  %30 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 4
  %31 = insertelement <4 x float> zeroinitializer, float %30, i32 0
  %32 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %33 = insertelement <4 x float> %31, float %32, i32 1
  %34 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 4
  %35 = insertelement <4 x float> %33, float %34, i32 2
  %36 = load float, float* getelementptr inbounds ([4 x [4 x float]], [4 x [4 x float]]* @a_in, i64 0, i64 0, i64 1), align 4
  %37 = insertelement <4 x float> %35, float %36, i32 3
  %38 = fadd <4 x float> %29, %37
  %39 = extractelement <4 x float> %38, i32 0
  store float %39, float* %10, align 16
  %40 = extractelement <4 x float> %38, i32 1
  store float %40, float* %14, align 4
  %41 = extractelement <4 x float> %38, i32 2
  store float %41, float* %18, align 8
  %42 = extractelement <4 x float> %38, i32 3
  %43 = insertelement float %42, float %22, i32 0
  %44 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  store float %21, float* %44, align 4
  %45 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %46 = load float, float* %45, align 16
  %47 = fpext float %46 to double
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %47)
  %49 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %50 = load float, float* %49, align 4
  %51 = fpext float %50 to double
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %51)
  %53 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %54 = load float, float* %53, align 8
  %55 = fpext float %54 to double
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %55)
  %57 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %59)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Symbol("0,0,3,"), Get([0, 1]), Symbol("b_in"), Symbol("0,0,"), Get([3, 4]), Add([2, 5]), Symbol("a_in"), Symbol("0,1,3,"), Get([7, 8]), Symbol("b_in"), Symbol("0,1,"), Get([10, 11]), Add([9, 12]), Symbol("a_in"), Symbol("0,2,3,"), Get([14, 15]), Symbol("b_in"), Symbol("0,2,"), Get([17, 18]), Add([16, 19]), Symbol("a_in"), Symbol("0,3,3,"), Get([21, 22]), Symbol("a_in"), Symbol("0,0,1,"), Get([24, 25]), Add([23, 26]), Vec([6, 13, 20, 27])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("a_in"), Symbol("0,0,3,"), Get([0, 1]), Symbol("a_in"), Symbol("0,1,3,"), Get([3, 4]), Symbol("a_in"), Symbol("0,2,3,"), Get([6, 7]), Symbol("a_in"), Symbol("0,3,3,"), Get([9, 10]), LitVec([2, 5, 8, 11]), Symbol("b_in"), Symbol("0,0,"), Get([13, 14]), Symbol("b_in"), Symbol("0,1,"), Get([16, 17]), Symbol("b_in"), Symbol("0,2,"), Get([19, 20]), Symbol("a_in"), Symbol("0,0,1,"), Get([22, 23]), Vec([15, 18, 21, 24]), VecAdd([12, 25])]
