  %4 = alloca float*, align 8
  %5 = alloca float, align 4
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  store float* %0, float** %4, align 8
  store float %1, float* %5, align 4
  store float* %2, float** %6, align 8
  store i32 0, i32* %7, align 4
  br label %8

8:                                                ; preds = %34, %3
  %9 = load i32, i32* %7, align 4
  %10 = icmp slt i32 %9, 8
  br i1 %10, label %11, label %37

11:                                               ; preds = %8
  %12 = load float*, float** %4, align 8
  %13 = load i32, i32* %7, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds float, float* %12, i64 %14
  %16 = load float, float* %15, align 4
  %17 = load float, float* %5, align 4
  %18 = fmul float %16, %17
  %19 = load float*, float** %6, align 8
  %20 = load i32, i32* %7, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds float, float* %19, i64 %21
  %23 = load float, float* %15, align 4
  %24 = insertelement <4 x float> zeroinitializer, float %23, i32 0
  %25 = insertelement <4 x float> %24, float 0.000000e+00, i32 1
  %26 = insertelement <4 x float> %25, float 0.000000e+00, i32 2
  %27 = insertelement <4 x float> %26, float 0.000000e+00, i32 3
  %28 = insertelement <4 x float> zeroinitializer, float %17, i32 0
  %29 = insertelement <4 x float> %28, float 0.000000e+00, i32 1
  %30 = insertelement <4 x float> %29, float 0.000000e+00, i32 2
  %31 = insertelement <4 x float> %30, float 0.000000e+00, i32 3
  %32 = fmul <4 x float> %27, %31
  %33 = extractelement <4 x float> %32, i32 0
  store float %33, float* %22, align 4
  br label %34

34:                                               ; preds = %11
  %35 = load i32, i32* %7, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %7, align 4
  br label %8

37:                                               ; preds = %8
  ret void
  %1 = alloca i32, align 4
  %2 = alloca [8 x float], align 16
  %3 = alloca float, align 4
  %4 = alloca [8 x float], align 16
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = bitcast [8 x float]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 bitcast ([8 x float]* @__const.main.a_in to i8*), i64 32, i1 false)
  store float 1.000000e+01, float* %3, align 4
  %7 = bitcast [8 x float]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([8 x float]* @__const.main.b_in to i8*), i64 32, i1 false)
  %8 = getelementptr inbounds [8 x float], [8 x float]* %2, i64 0, i64 0
  %9 = load float, float* %3, align 4
  %10 = getelementptr inbounds [8 x float], [8 x float]* %4, i64 0, i64 0
  call void @matrix_multiply(float* %8, float %9, float* %10)
  store i32 0, i32* %5, align 4
  br label %11

11:                                               ; preds = %21, %0
  %12 = load i32, i32* %5, align 4
  %13 = icmp slt i32 %12, 8
  br i1 %13, label %14, label %24

14:                                               ; preds = %11
  %15 = load i32, i32* %5, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [8 x float], [8 x float]* %4, i64 0, i64 %16
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %19)
  br label %21

21:                                               ; preds = %14
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %11

24:                                               ; preds = %11
  %25 = load i32, i32* %1, align 4
  ret i32 %25
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-temp-name1"), Mul([2, 3]), Num(0), Num(0), Num(0), Vec([4, 5, 6, 7])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Num(0), Num(0), Num(0), LitVec([2, 3, 4, 5]), Symbol("no-temp-name1"), Num(0), Num(0), Num(0), Vec([7, 8, 9, 10]), VecMul([6, 11])]
