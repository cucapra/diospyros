  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [5 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 0), align 16
  %8 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 0), align 16
  %9 = fadd float %7, %8
  %10 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  %11 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 1), align 4
  %12 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 1), align 4
  %13 = fadd float %11, %12
  %14 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 1
  %15 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 2), align 8
  %16 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 2), align 8
  %17 = fadd float %15, %16
  %18 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 2
  %19 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 3), align 4
  %20 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 3), align 4
  %21 = fadd float %19, %20
  %22 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 3
  %23 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 4), align 16
  %24 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 4), align 16
  %25 = fadd float %23, %24
  %26 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 4
  %27 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 0), align 4
  %28 = insertelement <4 x float> zeroinitializer, float %27, i32 0
  %29 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 1), align 4
  %30 = insertelement <4 x float> %28, float %29, i32 1
  %31 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 2), align 4
  %32 = insertelement <4 x float> %30, float %31, i32 2
  %33 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 3), align 4
  %34 = insertelement <4 x float> %32, float %33, i32 3
  %35 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 0), align 4
  %36 = insertelement <4 x float> zeroinitializer, float %35, i32 0
  %37 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 1), align 4
  %38 = insertelement <4 x float> %36, float %37, i32 1
  %39 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 2), align 4
  %40 = insertelement <4 x float> %38, float %39, i32 2
  %41 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 3), align 4
  %42 = insertelement <4 x float> %40, float %41, i32 3
  %43 = fadd <4 x float> %34, %42
  %44 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 4), align 4
  %45 = insertelement <4 x float> zeroinitializer, float %44, i32 0
  %46 = insertelement <4 x float> %45, float 0.000000e+00, i32 1
  %47 = insertelement <4 x float> %46, float 0.000000e+00, i32 2
  %48 = insertelement <4 x float> %47, float 0.000000e+00, i32 3
  %49 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 4), align 4
  %50 = insertelement <4 x float> zeroinitializer, float %49, i32 0
  %51 = insertelement <4 x float> %50, float 0.000000e+00, i32 1
  %52 = insertelement <4 x float> %51, float 0.000000e+00, i32 2
  %53 = insertelement <4 x float> %52, float 0.000000e+00, i32 3
  %54 = fadd <4 x float> %48, %53
  %55 = shufflevector <4 x float> %43, <4 x float> %54, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %56 = extractelement <8 x float> %55, i32 0
  store float %56, float* %10, align 16
  %57 = extractelement <8 x float> %55, i32 1
  store float %57, float* %14, align 4
  %58 = extractelement <8 x float> %55, i32 2
  store float %58, float* %18, align 8
  %59 = extractelement <8 x float> %55, i32 3
  store float %59, float* %22, align 4
  %60 = extractelement <8 x float> %55, i32 4
  store float %60, float* %26, align 16
  %61 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  %62 = load float, float* %61, align 16
  %63 = fpext float %62 to double
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %63)
  %65 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 1
  %66 = load float, float* %65, align 4
  %67 = fpext float %66 to double
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %67)
  %69 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 2
  %70 = load float, float* %69, align 8
  %71 = fpext float %70 to double
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %71)
  %73 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 3
  %74 = load float, float* %73, align 4
  %75 = fpext float %74 to double
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %75)
  %77 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 4
  %78 = load float, float* %77, align 16
  %79 = fpext float %78 to double
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), double %79)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Symbol("b_in"), Symbol("0,0,"), Get([3, 4]), Add([2, 5]), Symbol("a_in"), Symbol("0,1,"), Get([7, 8]), Symbol("b_in"), Symbol("0,1,"), Get([10, 11]), Add([9, 12]), Symbol("a_in"), Symbol("0,2,"), Get([14, 15]), Symbol("b_in"), Symbol("0,2,"), Get([17, 18]), Add([16, 19]), Symbol("a_in"), Symbol("0,3,"), Get([21, 22]), Symbol("b_in"), Symbol("0,3,"), Get([24, 25]), Add([23, 26]), Symbol("a_in"), Symbol("0,4,"), Get([28, 29]), Symbol("b_in"), Symbol("0,4,"), Get([31, 32]), Add([30, 33]), Vec([6, 13, 20, 27]), Num(0), Num(0), Num(0), Vec([34, 36, 37, 38]), Concat([35, 39])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Symbol("a_in"), Symbol("0,1,"), Get([3, 4]), Symbol("a_in"), Symbol("0,2,"), Get([6, 7]), Symbol("a_in"), Symbol("0,3,"), Get([9, 10]), LitVec([2, 5, 8, 11]), Symbol("b_in"), Symbol("0,0,"), Get([13, 14]), Symbol("b_in"), Symbol("0,1,"), Get([16, 17]), Symbol("b_in"), Symbol("0,2,"), Get([19, 20]), Symbol("b_in"), Symbol("0,3,"), Get([22, 23]), LitVec([15, 18, 21, 24]), VecAdd([12, 25]), Symbol("a_in"), Symbol("0,4,"), Get([27, 28]), Num(0), Num(0), Num(0), LitVec([29, 30, 31, 32]), Symbol("b_in"), Symbol("0,4,"), Get([34, 35]), Num(0), Num(0), Num(0), LitVec([36, 37, 38, 39]), VecAdd([33, 40]), Concat([26, 41])]
