  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [5 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 0), align 16
  %8 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 0), align 16
  %9 = fadd float %7, %8
  %10 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  store float %9, float* %10, align 16
  %11 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 1), align 4
  %12 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 1), align 4
  %13 = fadd float %11, %12
  %14 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 1
  store float %13, float* %14, align 4
  %15 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 2), align 8
  %16 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 2), align 8
  %17 = fadd float %15, %16
  %18 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 2
  store float %17, float* %18, align 8
  %19 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 3), align 4
  %20 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 3), align 4
  %21 = fadd float %19, %20
  %22 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 3
  store float %21, float* %22, align 4
  %23 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 4), align 16
  %24 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 4), align 16
  %25 = fadd float %23, %24
  %26 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 0), align 4
  %27 = insertelement <4 x float> zeroinitializer, float %26, i32 0
  %28 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 1), align 4
  %29 = insertelement <4 x float> %27, float %28, i32 1
  %30 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 2), align 4
  %31 = insertelement <4 x float> %29, float %30, i32 2
  %32 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 3), align 4
  %33 = insertelement <4 x float> %31, float %32, i32 3
  %34 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 0), align 4
  %35 = insertelement <4 x float> zeroinitializer, float %34, i32 0
  %36 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 1), align 4
  %37 = insertelement <4 x float> %35, float %36, i32 1
  %38 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 2), align 4
  %39 = insertelement <4 x float> %37, float %38, i32 2
  %40 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 3), align 4
  %41 = insertelement <4 x float> %39, float %40, i32 3
  %42 = fadd <4 x float> %33, %41
  %43 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @a_in, i64 0, i64 4), align 4
  %44 = insertelement <4 x float> zeroinitializer, float %43, i32 0
  %45 = insertelement <4 x float> %44, float 0.000000e+00, i32 1
  %46 = insertelement <4 x float> %45, float 0.000000e+00, i32 2
  %47 = insertelement <4 x float> %46, float 0.000000e+00, i32 3
  %48 = load float, float* getelementptr inbounds ([5 x float], [5 x float]* @b_in, i64 0, i64 4), align 4
  %49 = insertelement <4 x float> zeroinitializer, float %48, i32 0
  %50 = insertelement <4 x float> %49, float 0.000000e+00, i32 1
  %51 = insertelement <4 x float> %50, float 0.000000e+00, i32 2
  %52 = insertelement <4 x float> %51, float 0.000000e+00, i32 3
  %53 = fadd <4 x float> %47, %52
  %54 = shufflevector <4 x float> %42, <4 x float> %53, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>
  %55 = extractelement <8 x float> %54, i32 0
  store float %55, float* %10, align 16
  %56 = extractelement <8 x float> %54, i32 1
  store float %56, float* %14, align 4
  %57 = extractelement <8 x float> %54, i32 2
  store float %57, float* %18, align 8
  %58 = extractelement <8 x float> %54, i32 3
  store float %58, float* %22, align 4
  %59 = extractelement <8 x float> %54, i32 4
  %60 = insertelement float %59, float %26, i32 0
  %61 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 4
  store float %25, float* %61, align 16
  %62 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  %63 = load float, float* %62, align 16
  %64 = fpext float %63 to double
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %64)
  %66 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 1
  %67 = load float, float* %66, align 4
  %68 = fpext float %67 to double
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %68)
  %70 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 2
  %71 = load float, float* %70, align 8
  %72 = fpext float %71 to double
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %72)
  %74 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 3
  %75 = load float, float* %74, align 4
  %76 = fpext float %75 to double
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %76)
  %78 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 4
  %79 = load float, float* %78, align 16
  %80 = fpext float %79 to double
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), double %80)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Symbol("b_in"), Symbol("0,0,"), Get([3, 4]), Add([2, 5]), Symbol("a_in"), Symbol("0,1,"), Get([7, 8]), Symbol("b_in"), Symbol("0,1,"), Get([10, 11]), Add([9, 12]), Symbol("a_in"), Symbol("0,2,"), Get([14, 15]), Symbol("b_in"), Symbol("0,2,"), Get([17, 18]), Add([16, 19]), Symbol("a_in"), Symbol("0,3,"), Get([21, 22]), Symbol("b_in"), Symbol("0,3,"), Get([24, 25]), Add([23, 26]), Symbol("a_in"), Symbol("0,4,"), Get([28, 29]), Symbol("b_in"), Symbol("0,4,"), Get([31, 32]), Add([30, 33]), Vec([6, 13, 20, 27]), Num(0), Num(0), Num(0), Vec([34, 36, 37, 38]), Concat([35, 39])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Symbol("a_in"), Symbol("0,1,"), Get([3, 4]), Symbol("a_in"), Symbol("0,2,"), Get([6, 7]), Symbol("a_in"), Symbol("0,3,"), Get([9, 10]), LitVec([2, 5, 8, 11]), Symbol("b_in"), Symbol("0,0,"), Get([13, 14]), Symbol("b_in"), Symbol("0,1,"), Get([16, 17]), Symbol("b_in"), Symbol("0,2,"), Get([19, 20]), Symbol("b_in"), Symbol("0,3,"), Get([22, 23]), LitVec([15, 18, 21, 24]), VecAdd([12, 25]), Symbol("a_in"), Symbol("0,4,"), Get([27, 28]), Num(0), Num(0), Num(0), LitVec([29, 30, 31, 32]), Symbol("b_in"), Symbol("0,4,"), Get([34, 35]), Num(0), Num(0), Num(0), LitVec([36, 37, 38, 39]), VecAdd([33, 40]), Concat([26, 41])]
