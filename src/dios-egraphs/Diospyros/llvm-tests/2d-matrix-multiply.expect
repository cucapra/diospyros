  %4 = alloca [2 x float]*, align 8
  %5 = alloca [2 x float]*, align 8
  %6 = alloca [2 x float]*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = alloca i32, align 4
  store [2 x float]* %0, [2 x float]** %4, align 8
  store [2 x float]* %1, [2 x float]** %5, align 8
  store [2 x float]* %2, [2 x float]** %6, align 8
  store i32 0, i32* %7, align 4
  br label %11

11:                                               ; preds = %74, %3
  %12 = load i32, i32* %7, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %77

14:                                               ; preds = %11
  store i32 0, i32* %8, align 4
  br label %15

15:                                               ; preds = %70, %14
  %16 = load i32, i32* %8, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %73

18:                                               ; preds = %15
  store float 0.000000e+00, float* %9, align 4
  store i32 0, i32* %10, align 4
  br label %19

19:                                               ; preds = %58, %18
  %20 = load i32, i32* %10, align 4
  %21 = icmp slt i32 %20, 2
  br i1 %21, label %22, label %61

22:                                               ; preds = %19
  %23 = load [2 x float]*, [2 x float]** %4, align 8
  %24 = load i32, i32* %7, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [2 x float], [2 x float]* %23, i64 %25
  %27 = load i32, i32* %10, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [2 x float], [2 x float]* %26, i64 0, i64 %28
  %30 = load float, float* %29, align 4
  %31 = load [2 x float]*, [2 x float]** %5, align 8
  %32 = load i32, i32* %10, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [2 x float], [2 x float]* %31, i64 %33
  %35 = load i32, i32* %8, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [2 x float], [2 x float]* %34, i64 0, i64 %36
  %38 = load float, float* %37, align 4
  %39 = fmul float %30, %38
  %40 = load float, float* %9, align 4
  %41 = fadd float %40, %39
  %42 = insertelement <4 x float> zeroinitializer, float %40, i32 0
  %43 = insertelement <4 x float> %42, float 0.000000e+00, i32 1
  %44 = insertelement <4 x float> %43, float 0.000000e+00, i32 2
  %45 = insertelement <4 x float> %44, float 0.000000e+00, i32 3
  %46 = load float, float* %29, align 4
  %47 = insertelement <4 x float> zeroinitializer, float %46, i32 0
  %48 = insertelement <4 x float> %47, float 0.000000e+00, i32 1
  %49 = insertelement <4 x float> %48, float 0.000000e+00, i32 2
  %50 = insertelement <4 x float> %49, float 0.000000e+00, i32 3
  %51 = load float, float* %37, align 4
  %52 = insertelement <4 x float> zeroinitializer, float %51, i32 0
  %53 = insertelement <4 x float> %52, float 0.000000e+00, i32 1
  %54 = insertelement <4 x float> %53, float 0.000000e+00, i32 2
  %55 = insertelement <4 x float> %54, float 0.000000e+00, i32 3
  %56 = call <4 x float> @llvm.fma.f32(<4 x float> %50, <4 x float> %55, <4 x float> %45)
  %57 = extractelement <4 x float> %56, i32 0
  store float %57, float* %9, align 4
  br label %58

58:                                               ; preds = %22
  %59 = load i32, i32* %10, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %10, align 4
  br label %19

61:                                               ; preds = %19
  %62 = load float, float* %9, align 4
  %63 = load [2 x float]*, [2 x float]** %6, align 8
  %64 = load i32, i32* %7, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [2 x float], [2 x float]* %63, i64 %65
  %67 = load i32, i32* %8, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [2 x float], [2 x float]* %66, i64 0, i64 %68
  store float %62, float* %69, align 4
  br label %70

70:                                               ; preds = %61
  %71 = load i32, i32* %8, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %8, align 4
  br label %15

73:                                               ; preds = %15
  br label %74

74:                                               ; preds = %73
  %75 = load i32, i32* %7, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %7, align 4
  br label %11

77:                                               ; preds = %11
  ret void
  %1 = alloca i32, align 4
  %2 = alloca [2 x [2 x float]], align 16
  %3 = alloca [2 x [2 x float]], align 16
  %4 = alloca [2 x [2 x float]], align 16
  store i32 0, i32* %1, align 4
  %5 = bitcast [2 x [2 x float]]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([2 x [2 x float]]* @__const.main.a_in to i8*), i64 16, i1 false)
  %6 = bitcast [2 x [2 x float]]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 bitcast ([2 x [2 x float]]* @__const.main.b_in to i8*), i64 16, i1 false)
  %7 = bitcast [2 x [2 x float]]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %7, i8 0, i64 16, i1 false)
  %8 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %2, i64 0, i64 0
  %9 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %3, i64 0, i64 0
  %10 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %4, i64 0, i64 0
  call void @matrix_multiply([2 x float]* %8, [2 x float]* %9, [2 x float]* %10)
  %11 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %4, i64 0, i64 0
  %12 = getelementptr inbounds [2 x float], [2 x float]* %11, i64 0, i64 0
  %13 = load float, float* %12, align 16
  %14 = fpext float %13 to double
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %14)
  %16 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %4, i64 0, i64 0
  %17 = getelementptr inbounds [2 x float], [2 x float]* %16, i64 0, i64 1
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %19)
  %21 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %4, i64 0, i64 1
  %22 = getelementptr inbounds [2 x float], [2 x float]* %21, i64 0, i64 0
  %23 = load float, float* %22, align 8
  %24 = fpext float %23 to double
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %24)
  %26 = getelementptr inbounds [2 x [2 x float]], [2 x [2 x float]]* %4, i64 0, i64 1
  %27 = getelementptr inbounds [2 x float], [2 x float]* %26, i64 0, i64 1
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %29)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("0,-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("0,-2,"), Get([3, 4]), Mul([2, 5]), Symbol("no-temp-name1"), Add([7, 6]), Num(0), Num(0), Num(0), Vec([8, 9, 10, 11])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-temp-name1"), Num(0), Num(0), Num(0), Vec([0, 1, 2, 3]), Symbol("no-array-name1"), Symbol("0,-1,"), Get([5, 6]), Num(0), Num(0), Num(0), LitVec([7, 8, 9, 10]), Symbol("no-array-name2"), Symbol("0,-2,"), Get([12, 13]), Num(0), Num(0), Num(0), LitVec([14, 15, 16, 17]), VecMAC([4, 11, 18])]
