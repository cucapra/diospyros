  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 16
  %8 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 16
  %9 = fadd float %7, %8
  %10 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  store float %9, float* %10, align 16
  %11 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %12 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %13 = fmul float %11, %12
  %14 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  store float %13, float* %14, align 4
  %15 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 8
  %16 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 8
  %17 = fadd float %15, %16
  %18 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  store float %17, float* %18, align 8
  %19 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %20 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %21 = fmul float %19, %20
  %22 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 4
  %23 = insertelement <4 x float> zeroinitializer, float %22, i32 0
  %24 = insertelement <4 x float> %23, float 0.000000e+00, i32 1
  %25 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 4
  %26 = insertelement <4 x float> %24, float %25, i32 2
  %27 = insertelement <4 x float> %26, float 0.000000e+00, i32 3
  %28 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %29 = insertelement <4 x float> <float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %28, i32 1
  %30 = insertelement <4 x float> %29, float 1.000000e+00, i32 2
  %31 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %32 = insertelement <4 x float> %30, float %31, i32 3
  %33 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 4
  %34 = insertelement <4 x float> zeroinitializer, float %33, i32 0
  %35 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %36 = insertelement <4 x float> %34, float %35, i32 1
  %37 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 4
  %38 = insertelement <4 x float> %36, float %37, i32 2
  %39 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %40 = insertelement <4 x float> %38, float %39, i32 3
  %41 = call <4 x float> @llvm.fma.f32(<4 x float> %32, <4 x float> %40, <4 x float> %27)
  %42 = extractelement <4 x float> %41, i32 0
  store float %42, float* %10, align 16
  %43 = extractelement <4 x float> %41, i32 1
  store float %43, float* %14, align 4
  %44 = extractelement <4 x float> %41, i32 2
  store float %44, float* %18, align 8
  %45 = extractelement <4 x float> %41, i32 3
  %46 = insertelement float %45, float %22, i32 0
  %47 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  store float %21, float* %47, align 4
  %48 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %49 = load float, float* %48, align 16
  %50 = fpext float %49 to double
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %50)
  %52 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %53 = load float, float* %52, align 4
  %54 = fpext float %53 to double
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %54)
  %56 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %57 = load float, float* %56, align 8
  %58 = fpext float %57 to double
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %58)
  %60 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %61 = load float, float* %60, align 4
  %62 = fpext float %61 to double
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %62)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Symbol("b_in"), Symbol("0,0,"), Get([3, 4]), Add([2, 5]), Symbol("a_in"), Symbol("0,1,"), Get([7, 8]), Symbol("b_in"), Symbol("0,1,"), Get([10, 11]), Mul([9, 12]), Symbol("a_in"), Symbol("0,2,"), Get([14, 15]), Symbol("b_in"), Symbol("0,2,"), Get([17, 18]), Add([16, 19]), Symbol("a_in"), Symbol("0,3,"), Get([21, 22]), Symbol("b_in"), Symbol("0,3,"), Get([24, 25]), Mul([23, 26]), Vec([6, 13, 20, 27])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Num(0), Symbol("a_in"), Symbol("0,2,"), Get([4, 5]), Num(0), LitVec([2, 3, 6, 7]), Num(1), Symbol("a_in"), Symbol("0,1,"), Get([10, 11]), Num(1), Symbol("a_in"), Symbol("0,3,"), Get([14, 15]), Vec([9, 12, 13, 16]), Symbol("b_in"), Symbol("0,0,"), Get([18, 19]), Symbol("b_in"), Symbol("0,1,"), Get([21, 22]), Symbol("b_in"), Symbol("0,2,"), Get([24, 25]), Symbol("b_in"), Symbol("0,3,"), Get([27, 28]), LitVec([20, 23, 26, 29]), VecMAC([8, 17, 30])]
