  %4 = alloca float*, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store float* %0, float** %4, align 8
  store float* %1, float** %5, align 8
  store float* %2, float** %6, align 8
  store i32 0, i32* %7, align 4
  br label %15

15:                                               ; preds = %109, %3
  %16 = load i32, i32* %7, align 4
  %17 = icmp slt i32 %16, 3
  br i1 %17, label %18, label %112

18:                                               ; preds = %15
  store i32 0, i32* %8, align 4
  br label %19

19:                                               ; preds = %105, %18
  %20 = load i32, i32* %8, align 4
  %21 = icmp slt i32 %20, 3
  br i1 %21, label %22, label %108

22:                                               ; preds = %19
  store i32 0, i32* %9, align 4
  br label %23

23:                                               ; preds = %101, %22
  %24 = load i32, i32* %9, align 4
  %25 = icmp slt i32 %24, 2
  br i1 %25, label %26, label %104

26:                                               ; preds = %23
  store i32 0, i32* %10, align 4
  br label %27

27:                                               ; preds = %97, %26
  %28 = load i32, i32* %10, align 4
  %29 = icmp slt i32 %28, 2
  br i1 %29, label %30, label %100

30:                                               ; preds = %27
  %31 = load i32, i32* %9, align 4
  %32 = sub nsw i32 1, %31
  store i32 %32, i32* %11, align 4
  %33 = load i32, i32* %10, align 4
  %34 = sub nsw i32 1, %33
  store i32 %34, i32* %12, align 4
  %35 = load i32, i32* %7, align 4
  %36 = load i32, i32* %11, align 4
  %37 = sub nsw i32 %35, %36
  store i32 %37, i32* %13, align 4
  %38 = load i32, i32* %8, align 4
  %39 = load i32, i32* %12, align 4
  %40 = sub nsw i32 %38, %39
  store i32 %40, i32* %14, align 4
  %41 = load i32, i32* %13, align 4
  %42 = icmp sge i32 %41, 0
  br i1 %42, label %43, label %96

43:                                               ; preds = %30
  %44 = load i32, i32* %13, align 4
  %45 = icmp slt i32 %44, 2
  br i1 %45, label %46, label %96

46:                                               ; preds = %43
  %47 = load i32, i32* %14, align 4
  %48 = icmp sge i32 %47, 0
  br i1 %48, label %49, label %96

49:                                               ; preds = %46
  %50 = load i32, i32* %14, align 4
  %51 = icmp slt i32 %50, 2
  br i1 %51, label %52, label %96

52:                                               ; preds = %49
  %53 = load float*, float** %4, align 8
  %54 = load i32, i32* %13, align 4
  %55 = mul nsw i32 %54, 2
  %56 = load i32, i32* %14, align 4
  %57 = add nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds float, float* %53, i64 %58
  %60 = load float, float* %59, align 4
  %61 = load float*, float** %5, align 8
  %62 = load i32, i32* %11, align 4
  %63 = mul nsw i32 %62, 2
  %64 = load i32, i32* %12, align 4
  %65 = add nsw i32 %63, %64
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds float, float* %61, i64 %66
  %68 = load float, float* %67, align 4
  %69 = fmul float %60, %68
  %70 = load float*, float** %6, align 8
  %71 = load i32, i32* %7, align 4
  %72 = mul nsw i32 %71, 3
  %73 = load i32, i32* %8, align 4
  %74 = add nsw i32 %72, %73
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds float, float* %70, i64 %75
  %77 = load float, float* %76, align 4
  %78 = fadd float %77, %69
  %79 = load float, float* %76, align 4
  %80 = insertelement <4 x float> zeroinitializer, float %79, i32 0
  %81 = insertelement <4 x float> %80, float 0.000000e+00, i32 1
  %82 = insertelement <4 x float> %81, float 0.000000e+00, i32 2
  %83 = insertelement <4 x float> %82, float 0.000000e+00, i32 3
  %84 = load float, float* %59, align 4
  %85 = insertelement <4 x float> zeroinitializer, float %84, i32 0
  %86 = insertelement <4 x float> %85, float 0.000000e+00, i32 1
  %87 = insertelement <4 x float> %86, float 0.000000e+00, i32 2
  %88 = insertelement <4 x float> %87, float 0.000000e+00, i32 3
  %89 = load float, float* %67, align 4
  %90 = insertelement <4 x float> zeroinitializer, float %89, i32 0
  %91 = insertelement <4 x float> %90, float 0.000000e+00, i32 1
  %92 = insertelement <4 x float> %91, float 0.000000e+00, i32 2
  %93 = insertelement <4 x float> %92, float 0.000000e+00, i32 3
  %94 = call <4 x float> @llvm.fma.f32(<4 x float> %88, <4 x float> %93, <4 x float> %83)
  %95 = extractelement <4 x float> %94, i32 0
  store float %95, float* %76, align 4
  br label %96

96:                                               ; preds = %52, %49, %46, %43, %30
  br label %97

97:                                               ; preds = %96
  %98 = load i32, i32* %10, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %10, align 4
  br label %27

100:                                              ; preds = %27
  br label %101

101:                                              ; preds = %100
  %102 = load i32, i32* %9, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %9, align 4
  br label %23

104:                                              ; preds = %23
  br label %105

105:                                              ; preds = %104
  %106 = load i32, i32* %8, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %8, align 4
  br label %19

108:                                              ; preds = %19
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %7, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %7, align 4
  br label %15

112:                                              ; preds = %15
  ret void
  %1 = alloca i32, align 4
  %2 = alloca [4 x float], align 16
  %3 = alloca [4 x float], align 16
  %4 = alloca [9 x float], align 16
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = bitcast [4 x float]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 bitcast ([4 x float]* @__const.main.mat_in to i8*), i64 16, i1 false)
  %7 = bitcast [4 x float]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([4 x float]* @__const.main.f_in to i8*), i64 16, i1 false)
  %8 = bitcast [9 x float]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %8, i8 0, i64 36, i1 false)
  %9 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 0
  %11 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 0
  call void @convolution(float* %9, float* %10, float* %11)
  store i32 0, i32* %5, align 4
  br label %12

12:                                               ; preds = %22, %0
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 9
  br i1 %14, label %15, label %25

15:                                               ; preds = %12
  %16 = load i32, i32* %5, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %20)
  br label %22

22:                                               ; preds = %15
  %23 = load i32, i32* %5, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %5, align 4
  br label %12

25:                                               ; preds = %12
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Mul([2, 5]), Symbol("no-array-name3"), Symbol("-3,"), Get([7, 8]), Add([9, 6]), Num(0), Num(0), Num(0), Vec([10, 11, 12, 13])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name3"), Symbol("-3,"), Get([0, 1]), Num(0), Num(0), Num(0), LitVec([2, 3, 4, 5]), Symbol("no-array-name1"), Symbol("-1,"), Get([7, 8]), Num(0), Num(0), Num(0), LitVec([9, 10, 11, 12]), Symbol("no-array-name2"), Symbol("-2,"), Get([14, 15]), Num(0), Num(0), Num(0), LitVec([16, 17, 18, 19]), VecMAC([6, 13, 20])]
