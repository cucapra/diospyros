  %4 = alloca float*, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca float, align 4
  store float* %0, float** %4, align 8
  store float* %1, float** %5, align 8
  store float* %2, float** %6, align 8
  store i32 0, i32* %7, align 4
  br label %16

16:                                               ; preds = %117, %3
  %17 = load i32, i32* %7, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %120

19:                                               ; preds = %16
  store i32 0, i32* %8, align 4
  br label %20

20:                                               ; preds = %113, %19
  %21 = load i32, i32* %8, align 4
  %22 = icmp slt i32 %21, 3
  br i1 %22, label %23, label %116

23:                                               ; preds = %20
  store i32 0, i32* %9, align 4
  br label %24

24:                                               ; preds = %109, %23
  %25 = load i32, i32* %9, align 4
  %26 = icmp slt i32 %25, 2
  br i1 %26, label %27, label %112

27:                                               ; preds = %24
  store i32 0, i32* %10, align 4
  br label %28

28:                                               ; preds = %105, %27
  %29 = load i32, i32* %10, align 4
  %30 = icmp slt i32 %29, 2
  br i1 %30, label %31, label %108

31:                                               ; preds = %28
  %32 = load i32, i32* %9, align 4
  %33 = sub nsw i32 1, %32
  store i32 %33, i32* %11, align 4
  %34 = load i32, i32* %10, align 4
  %35 = sub nsw i32 1, %34
  store i32 %35, i32* %12, align 4
  %36 = load i32, i32* %7, align 4
  %37 = load i32, i32* %11, align 4
  %38 = sub nsw i32 %36, %37
  store i32 %38, i32* %13, align 4
  %39 = load i32, i32* %8, align 4
  %40 = load i32, i32* %12, align 4
  %41 = sub nsw i32 %39, %40
  store i32 %41, i32* %14, align 4
  %42 = load i32, i32* %13, align 4
  %43 = icmp sge i32 %42, 0
  br i1 %43, label %44, label %104

44:                                               ; preds = %31
  %45 = load i32, i32* %13, align 4
  %46 = icmp slt i32 %45, 2
  br i1 %46, label %47, label %104

47:                                               ; preds = %44
  %48 = load i32, i32* %14, align 4
  %49 = icmp sge i32 %48, 0
  br i1 %49, label %50, label %104

50:                                               ; preds = %47
  %51 = load i32, i32* %14, align 4
  %52 = icmp slt i32 %51, 2
  br i1 %52, label %53, label %104

53:                                               ; preds = %50
  %54 = load float*, float** %4, align 8
  %55 = load i32, i32* %13, align 4
  %56 = mul nsw i32 %55, 2
  %57 = load i32, i32* %14, align 4
  %58 = add nsw i32 %56, %57
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds float, float* %54, i64 %59
  %61 = load float, float* %60, align 4
  %62 = load float*, float** %5, align 8
  %63 = load i32, i32* %11, align 4
  %64 = mul nsw i32 %63, 2
  %65 = load i32, i32* %12, align 4
  %66 = add nsw i32 %64, %65
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %62, i64 %67
  %69 = load float, float* %68, align 4
  %70 = fmul float %61, %69
  %71 = load float, float* %60, align 4
  %72 = insertelement <4 x float> zeroinitializer, float %71, i32 0
  %73 = insertelement <4 x float> %72, float 0.000000e+00, i32 1
  %74 = insertelement <4 x float> %73, float 0.000000e+00, i32 2
  %75 = insertelement <4 x float> %74, float 0.000000e+00, i32 3
  %76 = load float, float* %68, align 4
  %77 = insertelement <4 x float> zeroinitializer, float %76, i32 0
  %78 = insertelement <4 x float> %77, float 0.000000e+00, i32 1
  %79 = insertelement <4 x float> %78, float 0.000000e+00, i32 2
  %80 = insertelement <4 x float> %79, float 0.000000e+00, i32 3
  %81 = fmul <4 x float> %75, %80
  %82 = extractelement <4 x float> %81, i32 0
  store float %82, float* %15, align 4
  %83 = load float, float* %15, align 4
  %84 = load float*, float** %6, align 8
  %85 = load i32, i32* %7, align 4
  %86 = mul nsw i32 %85, 3
  %87 = load i32, i32* %8, align 4
  %88 = add nsw i32 %86, %87
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds float, float* %84, i64 %89
  %91 = load float, float* %90, align 4
  %92 = fadd float %91, %83
  %93 = load float, float* %90, align 4
  %94 = insertelement <4 x float> zeroinitializer, float %93, i32 0
  %95 = insertelement <4 x float> %94, float 0.000000e+00, i32 1
  %96 = insertelement <4 x float> %95, float 0.000000e+00, i32 2
  %97 = insertelement <4 x float> %96, float 0.000000e+00, i32 3
  %98 = insertelement <4 x float> zeroinitializer, float %83, i32 0
  %99 = insertelement <4 x float> %98, float 0.000000e+00, i32 1
  %100 = insertelement <4 x float> %99, float 0.000000e+00, i32 2
  %101 = insertelement <4 x float> %100, float 0.000000e+00, i32 3
  %102 = fadd <4 x float> %97, %101
  %103 = extractelement <4 x float> %102, i32 0
  store float %103, float* %90, align 4
  br label %104

104:                                              ; preds = %53, %50, %47, %44, %31
  br label %105

105:                                              ; preds = %104
  %106 = load i32, i32* %10, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %10, align 4
  br label %28

108:                                              ; preds = %28
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %9, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %9, align 4
  br label %24

112:                                              ; preds = %24
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %8, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %8, align 4
  br label %20

116:                                              ; preds = %20
  br label %117

117:                                              ; preds = %116
  %118 = load i32, i32* %7, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %7, align 4
  br label %16

120:                                              ; preds = %16
  ret void
  %1 = alloca i32, align 4
  %2 = alloca [4 x float], align 16
  %3 = alloca [4 x float], align 16
  %4 = alloca [9 x float], align 16
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = bitcast [4 x float]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 bitcast ([4 x float]* @__const.main.mat_in to i8*), i64 16, i1 false)
  %7 = bitcast [4 x float]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([4 x float]* @__const.main.f_in to i8*), i64 16, i1 false)
  %8 = bitcast [9 x float]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %8, i8 0, i64 36, i1 false)
  %9 = getelementptr inbounds [4 x float], [4 x float]* %2, i64 0, i64 0
  %10 = getelementptr inbounds [4 x float], [4 x float]* %3, i64 0, i64 0
  %11 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 0
  call void @convolution(float* %9, float* %10, float* %11)
  store i32 0, i32* %5, align 4
  br label %12

12:                                               ; preds = %22, %0
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 9
  br i1 %14, label %15, label %25

15:                                               ; preds = %12
  %16 = load i32, i32* %5, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), double %20)
  br label %22

22:                                               ; preds = %15
  %23 = load i32, i32* %5, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %5, align 4
  br label %12

25:                                               ; preds = %12
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Mul([2, 5]), Num(0), Num(0), Num(0), Vec([6, 7, 8, 9])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Num(0), Num(0), Num(0), LitVec([2, 3, 4, 5]), Symbol("no-array-name2"), Symbol("-2,"), Get([7, 8]), Num(0), Num(0), Num(0), LitVec([9, 10, 11, 12]), VecMul([6, 13])]
RecExpr { nodes: [Symbol("no-array-name3"), Symbol("-3,"), Get([0, 1]), Symbol("no-temp-name1"), Add([2, 3]), Num(0), Num(0), Num(0), Vec([4, 5, 6, 7])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-array-name3"), Symbol("-3,"), Get([0, 1]), Num(0), Num(0), Num(0), LitVec([2, 3, 4, 5]), Symbol("no-temp-name1"), Num(0), Num(0), Num(0), Vec([7, 8, 9, 10]), VecAdd([6, 11])]
