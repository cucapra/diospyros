  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 16
  %8 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 16
  %9 = fadd float %7, %8
  %10 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 0), align 16
  %11 = fadd float %9, %10
  %12 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  store float %11, float* %12, align 16
  %13 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %14 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %15 = fadd float %13, %14
  %16 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 1), align 4
  %17 = fadd float %15, %16
  %18 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  store float %17, float* %18, align 4
  %19 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 8
  %20 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 8
  %21 = fadd float %19, %20
  %22 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 2), align 8
  %23 = fadd float %21, %22
  %24 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  store float %23, float* %24, align 8
  %25 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %26 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %27 = fadd float %25, %26
  %28 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 3), align 4
  %29 = fadd float %27, %28
  %30 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 4
  %31 = insertelement <4 x float> zeroinitializer, float %30, i32 0
  %32 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %33 = insertelement <4 x float> %31, float %32, i32 1
  %34 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 4
  %35 = insertelement <4 x float> %33, float %34, i32 2
  %36 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %37 = insertelement <4 x float> %35, float %36, i32 3
  %38 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 4
  %39 = insertelement <4 x float> zeroinitializer, float %38, i32 0
  %40 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %41 = insertelement <4 x float> %39, float %40, i32 1
  %42 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 4
  %43 = insertelement <4 x float> %41, float %42, i32 2
  %44 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %45 = insertelement <4 x float> %43, float %44, i32 3
  %46 = fadd <4 x float> %37, %45
  %47 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 0), align 4
  %48 = insertelement <4 x float> zeroinitializer, float %47, i32 0
  %49 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 1), align 4
  %50 = insertelement <4 x float> %48, float %49, i32 1
  %51 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 2), align 4
  %52 = insertelement <4 x float> %50, float %51, i32 2
  %53 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @c_in, i64 0, i64 3), align 4
  %54 = insertelement <4 x float> %52, float %53, i32 3
  %55 = fadd <4 x float> %46, %54
  %56 = extractelement <4 x float> %55, i32 0
  store float %56, float* %12, align 16
  %57 = extractelement <4 x float> %55, i32 1
  store float %57, float* %18, align 4
  %58 = extractelement <4 x float> %55, i32 2
  store float %58, float* %24, align 8
  %59 = extractelement <4 x float> %55, i32 3
  %60 = insertelement float %59, float %30, i32 0
  %61 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  store float %29, float* %61, align 4
  %62 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %63 = load float, float* %62, align 16
  %64 = fpext float %63 to double
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %64)
  %66 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %67 = load float, float* %66, align 4
  %68 = fpext float %67 to double
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %68)
  %70 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %71 = load float, float* %70, align 8
  %72 = fpext float %71 to double
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %72)
  %74 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %75 = load float, float* %74, align 4
  %76 = fpext float %75 to double
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %76)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Symbol("0,"), Get([0, 1]), Symbol("b_in"), Symbol("0,"), Get([3, 4]), Add([2, 5]), Symbol("c_in"), Symbol("0,"), Get([7, 8]), Add([6, 9]), Symbol("a_in"), Symbol("1,"), Get([11, 12]), Symbol("b_in"), Symbol("1,"), Get([14, 15]), Add([13, 16]), Symbol("c_in"), Symbol("1,"), Get([18, 19]), Add([17, 20]), Symbol("a_in"), Symbol("2,"), Get([22, 23]), Symbol("b_in"), Symbol("2,"), Get([25, 26]), Add([24, 27]), Symbol("c_in"), Symbol("2,"), Get([29, 30]), Add([28, 31]), Symbol("a_in"), Symbol("3,"), Get([33, 34]), Symbol("b_in"), Symbol("3,"), Get([36, 37]), Add([35, 38]), Symbol("c_in"), Symbol("3,"), Get([40, 41]), Add([39, 42]), Vec([10, 21, 32, 43])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 6 iterations, reason: Some(Saturated)
[Symbol("a_in"), Symbol("0,"), Get([0, 1]), Symbol("a_in"), Symbol("1,"), Get([3, 4]), Symbol("a_in"), Symbol("2,"), Get([6, 7]), Symbol("a_in"), Symbol("3,"), Get([9, 10]), LitVec([2, 5, 8, 11]), Symbol("b_in"), Symbol("0,"), Get([13, 14]), Symbol("b_in"), Symbol("1,"), Get([16, 17]), Symbol("b_in"), Symbol("2,"), Get([19, 20]), Symbol("b_in"), Symbol("3,"), Get([22, 23]), LitVec([15, 18, 21, 24]), VecAdd([12, 25]), Symbol("c_in"), Symbol("0,"), Get([27, 28]), Symbol("c_in"), Symbol("1,"), Get([30, 31]), Symbol("c_in"), Symbol("2,"), Get([33, 34]), Symbol("c_in"), Symbol("3,"), Get([36, 37]), LitVec([29, 32, 35, 38]), VecAdd([26, 39])]
