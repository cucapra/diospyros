  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 16
  %8 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 16
  %9 = fadd float %7, %8
  %10 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  store float %9, float* %10, align 16
  %11 = load float, float* @t1, align 4
  %12 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %13 = fadd float %11, %12
  %14 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  store float %13, float* %14, align 4
  %15 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 8
  %16 = load float, float* @t2, align 4
  %17 = fadd float %15, %16
  %18 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  store float %17, float* %18, align 8
  %19 = load float, float* @t2, align 4
  %20 = load float, float* @t1, align 4
  %21 = fadd float %19, %20
  %22 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 4
  %23 = insertelement <4 x float> zeroinitializer, float %22, i32 0
  %24 = insertelement <4 x float> %23, float %20, i32 1
  %25 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 4
  %26 = insertelement <4 x float> %24, float %25, i32 2
  %27 = insertelement <4 x float> %26, float %19, i32 3
  %28 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 4
  %29 = insertelement <4 x float> zeroinitializer, float %28, i32 0
  %30 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %31 = insertelement <4 x float> %29, float %30, i32 1
  %32 = insertelement <4 x float> %31, float %19, i32 2
  %33 = insertelement <4 x float> %32, float %20, i32 3
  %34 = fadd <4 x float> %27, %33
  %35 = extractelement <4 x float> %34, i32 0
  store float %35, float* %10, align 16
  %36 = extractelement <4 x float> %34, i32 1
  store float %36, float* %14, align 4
  %37 = extractelement <4 x float> %34, i32 2
  store float %37, float* %18, align 8
  %38 = extractelement <4 x float> %34, i32 3
  %39 = insertelement float %38, float %22, i32 0
  %40 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  store float %21, float* %40, align 4
  %41 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %42 = load float, float* %41, align 16
  %43 = fpext float %42 to double
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %43)
  %45 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %47)
  %49 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %50 = load float, float* %49, align 8
  %51 = fpext float %50 to double
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %51)
  %53 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %54 = load float, float* %53, align 4
  %55 = fpext float %54 to double
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %55)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Symbol("0,"), Get([0, 1]), Symbol("b_in"), Symbol("0,"), Get([3, 4]), Add([2, 5]), Symbol("t1"), Symbol("b_in"), Symbol("1,"), Get([8, 9]), Add([7, 10]), Symbol("a_in"), Symbol("2,"), Get([12, 13]), Symbol("t2"), Add([14, 15]), Symbol("t2"), Symbol("t1"), Add([17, 18]), Vec([6, 11, 16, 19])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("a_in"), Symbol("0,"), Get([0, 1]), Symbol("t1"), Symbol("a_in"), Symbol("2,"), Get([4, 5]), Symbol("t2"), Vec([2, 3, 6, 7]), Symbol("b_in"), Symbol("0,"), Get([9, 10]), Symbol("b_in"), Symbol("1,"), Get([12, 13]), Symbol("t2"), Symbol("t1"), Vec([11, 14, 15, 16]), VecAdd([8, 17])]
