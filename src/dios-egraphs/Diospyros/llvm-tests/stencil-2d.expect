  %4 = alloca float*, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca float, align 4
  store float* %0, float** %4, align 8
  store float* %1, float** %5, align 8
  store float* %2, float** %6, align 8
  store i32 0, i32* %7, align 4
  br label %13

13:                                               ; preds = %89, %3
  %14 = load i32, i32* %7, align 4
  %15 = icmp slt i32 %14, 6
  br i1 %15, label %16, label %92

16:                                               ; preds = %13
  store i32 0, i32* %8, align 4
  br label %17

17:                                               ; preds = %85, %16
  %18 = load i32, i32* %8, align 4
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %20, label %88

20:                                               ; preds = %17
  store float 0.000000e+00, float* %9, align 4
  store i32 0, i32* %10, align 4
  br label %21

21:                                               ; preds = %73, %20
  %22 = load i32, i32* %10, align 4
  %23 = icmp slt i32 %22, 3
  br i1 %23, label %24, label %76

24:                                               ; preds = %21
  store i32 0, i32* %11, align 4
  br label %25

25:                                               ; preds = %69, %24
  %26 = load i32, i32* %11, align 4
  %27 = icmp slt i32 %26, 3
  br i1 %27, label %28, label %72

28:                                               ; preds = %25
  %29 = load float*, float** %6, align 8
  %30 = load i32, i32* %10, align 4
  %31 = mul nsw i32 %30, 3
  %32 = load i32, i32* %11, align 4
  %33 = add nsw i32 %31, %32
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds float, float* %29, i64 %34
  %36 = load float, float* %35, align 4
  %37 = load float*, float** %4, align 8
  %38 = load i32, i32* %7, align 4
  %39 = load i32, i32* %10, align 4
  %40 = add nsw i32 %38, %39
  %41 = mul nsw i32 %40, 4
  %42 = load i32, i32* %8, align 4
  %43 = add nsw i32 %41, %42
  %44 = load i32, i32* %11, align 4
  %45 = add nsw i32 %43, %44
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %37, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fmul float %36, %48
  %50 = load float, float* %12, align 4
  %51 = load float, float* %9, align 4
  %52 = fadd float %51, %50
  %53 = insertelement <4 x float> zeroinitializer, float %51, i32 1
  %54 = insertelement <4 x float> %53, float 0.000000e+00, i32 2
  %55 = insertelement <4 x float> %54, float 0.000000e+00, i32 3
  %56 = load float, float* %35, align 4
  %57 = insertelement <4 x float> zeroinitializer, float %56, i32 0
  %58 = insertelement <4 x float> %57, float 1.000000e+00, i32 1
  %59 = insertelement <4 x float> %58, float 1.000000e+00, i32 2
  %60 = insertelement <4 x float> %59, float 1.000000e+00, i32 3
  %61 = load float, float* %47, align 4
  %62 = insertelement <4 x float> zeroinitializer, float %61, i32 0
  %63 = insertelement <4 x float> %62, float %50, i32 1
  %64 = insertelement <4 x float> %63, float 0.000000e+00, i32 2
  %65 = insertelement <4 x float> %64, float 0.000000e+00, i32 3
  %66 = call <4 x float> @llvm.fma.f32(<4 x float> %60, <4 x float> %65, <4 x float> %55)
  %67 = extractelement <4 x float> %66, i32 0
  store float %67, float* %12, align 4
  %68 = extractelement <4 x float> %66, i32 1
  store float %68, float* %9, align 4
  br label %69

69:                                               ; preds = %28
  %70 = load i32, i32* %11, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %11, align 4
  br label %25

72:                                               ; preds = %25
  br label %73

73:                                               ; preds = %72
  %74 = load i32, i32* %10, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %10, align 4
  br label %21

76:                                               ; preds = %21
  %77 = load float, float* %9, align 4
  %78 = load float*, float** %5, align 8
  %79 = load i32, i32* %7, align 4
  %80 = mul nsw i32 %79, 4
  %81 = load i32, i32* %8, align 4
  %82 = add nsw i32 %80, %81
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds float, float* %78, i64 %83
  store float %77, float* %84, align 4
  br label %85

85:                                               ; preds = %76
  %86 = load i32, i32* %8, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %8, align 4
  br label %17

88:                                               ; preds = %17
  br label %89

89:                                               ; preds = %88
  %90 = load i32, i32* %7, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %7, align 4
  br label %13

92:                                               ; preds = %13
  ret void
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Mul([2, 5]), Symbol("no-temp-name1"), Symbol("no-temp-name2"), Add([7, 8]), Num(0), Num(0), Vec([6, 9, 10, 11])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Num(0), Symbol("no-temp-name1"), Num(0), Num(0), Vec([0, 1, 2, 3]), Symbol("no-array-name1"), Symbol("-1,"), Get([5, 6]), Num(1), Num(1), Num(1), Vec([7, 8, 9, 10]), Symbol("no-array-name2"), Symbol("-2,"), Get([12, 13]), Symbol("no-temp-name2"), Num(0), Num(0), Vec([14, 15, 16, 17]), VecMAC([4, 11, 18])]
