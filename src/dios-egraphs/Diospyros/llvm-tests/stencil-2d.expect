  %4 = alloca float*, align 8
  %5 = alloca float*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store float* %0, float** %4, align 8
  store float* %1, float** %5, align 8
  store float* %2, float** %6, align 8
  store i32 0, i32* %7, align 4
  br label %12

12:                                               ; preds = %87, %3
  %13 = load i32, i32* %7, align 4
  %14 = icmp slt i32 %13, 6
  br i1 %14, label %15, label %90

15:                                               ; preds = %12
  store i32 0, i32* %8, align 4
  br label %16

16:                                               ; preds = %83, %15
  %17 = load i32, i32* %8, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %86

19:                                               ; preds = %16
  store float 0.000000e+00, float* %9, align 4
  store i32 0, i32* %10, align 4
  br label %20

20:                                               ; preds = %71, %19
  %21 = load i32, i32* %10, align 4
  %22 = icmp slt i32 %21, 3
  br i1 %22, label %23, label %74

23:                                               ; preds = %20
  store i32 0, i32* %11, align 4
  br label %24

24:                                               ; preds = %67, %23
  %25 = load i32, i32* %11, align 4
  %26 = icmp slt i32 %25, 3
  br i1 %26, label %27, label %70

27:                                               ; preds = %24
  %28 = load float*, float** %6, align 8
  %29 = load i32, i32* %10, align 4
  %30 = mul nsw i32 %29, 3
  %31 = load i32, i32* %11, align 4
  %32 = add nsw i32 %30, %31
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds float, float* %28, i64 %33
  %35 = load float, float* %34, align 4
  %36 = load float*, float** %4, align 8
  %37 = load i32, i32* %7, align 4
  %38 = load i32, i32* %10, align 4
  %39 = add nsw i32 %37, %38
  %40 = mul nsw i32 %39, 4
  %41 = load i32, i32* %8, align 4
  %42 = add nsw i32 %40, %41
  %43 = load i32, i32* %11, align 4
  %44 = add nsw i32 %42, %43
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds float, float* %36, i64 %45
  %47 = load float, float* %46, align 4
  %48 = fmul float %35, %47
  %49 = load float, float* %9, align 4
  %50 = fadd float %49, %48
  %51 = insertelement <4 x float> zeroinitializer, float %49, i32 0
  %52 = insertelement <4 x float> %51, float 0.000000e+00, i32 1
  %53 = insertelement <4 x float> %52, float 0.000000e+00, i32 2
  %54 = insertelement <4 x float> %53, float 0.000000e+00, i32 3
  %55 = load float, float* %34, align 4
  %56 = insertelement <4 x float> zeroinitializer, float %55, i32 0
  %57 = insertelement <4 x float> %56, float 0.000000e+00, i32 1
  %58 = insertelement <4 x float> %57, float 0.000000e+00, i32 2
  %59 = insertelement <4 x float> %58, float 0.000000e+00, i32 3
  %60 = load float, float* %46, align 4
  %61 = insertelement <4 x float> zeroinitializer, float %60, i32 0
  %62 = insertelement <4 x float> %61, float 0.000000e+00, i32 1
  %63 = insertelement <4 x float> %62, float 0.000000e+00, i32 2
  %64 = insertelement <4 x float> %63, float 0.000000e+00, i32 3
  %65 = call <4 x float> @llvm.fma.f32(<4 x float> %59, <4 x float> %64, <4 x float> %54)
  %66 = extractelement <4 x float> %65, i32 0
  store float %66, float* %9, align 4
  br label %67

67:                                               ; preds = %27
  %68 = load i32, i32* %11, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %11, align 4
  br label %24

70:                                               ; preds = %24
  br label %71

71:                                               ; preds = %70
  %72 = load i32, i32* %10, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %10, align 4
  br label %20

74:                                               ; preds = %20
  %75 = load float, float* %9, align 4
  %76 = load float*, float** %5, align 8
  %77 = load i32, i32* %7, align 4
  %78 = mul nsw i32 %77, 4
  %79 = load i32, i32* %8, align 4
  %80 = add nsw i32 %78, %79
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %76, i64 %81
  store float %75, float* %82, align 4
  br label %83

83:                                               ; preds = %74
  %84 = load i32, i32* %8, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %8, align 4
  br label %16

86:                                               ; preds = %16
  br label %87

87:                                               ; preds = %86
  %88 = load i32, i32* %7, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %7, align 4
  br label %12

90:                                               ; preds = %12
  ret void
  %1 = alloca i32, align 4
  %2 = alloca [32 x float], align 16
  %3 = alloca [32 x float], align 16
  %4 = alloca [9 x float], align 16
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = bitcast [32 x float]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 bitcast ([32 x float]* @__const.main.orig_in to i8*), i64 128, i1 false)
  %7 = bitcast [32 x float]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([32 x float]* @__const.main.sol_out to i8*), i64 128, i1 false)
  %8 = bitcast [9 x float]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %8, i8* align 16 bitcast ([9 x float]* @__const.main.filter_in to i8*), i64 36, i1 false)
  %9 = getelementptr inbounds [32 x float], [32 x float]* %2, i64 0, i64 0
  %10 = getelementptr inbounds [32 x float], [32 x float]* %3, i64 0, i64 0
  %11 = getelementptr inbounds [9 x float], [9 x float]* %4, i64 0, i64 0
  call void @stencil(float* %9, float* %10, float* %11)
  store i32 0, i32* %5, align 4
  br label %12

12:                                               ; preds = %22, %0
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 32
  br i1 %14, label %15, label %25

15:                                               ; preds = %12
  %16 = load i32, i32* %5, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [32 x float], [32 x float]* %3, i64 0, i64 %17
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), double %20)
  br label %22

22:                                               ; preds = %15
  %23 = load i32, i32* %5, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %5, align 4
  br label %12

25:                                               ; preds = %12
  %26 = load i32, i32* %1, align 4
  ret i32 %26
---STDERR---
RecExpr { nodes: [Symbol("no-array-name1"), Symbol("-1,"), Get([0, 1]), Symbol("no-array-name2"), Symbol("-2,"), Get([3, 4]), Mul([2, 5]), Symbol("no-temp-name1"), Add([7, 6]), Num(0), Num(0), Num(0), Vec([8, 9, 10, 11])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("no-temp-name1"), Num(0), Num(0), Num(0), Vec([0, 1, 2, 3]), Symbol("no-array-name1"), Symbol("-1,"), Get([5, 6]), Num(0), Num(0), Num(0), LitVec([7, 8, 9, 10]), Symbol("no-array-name2"), Symbol("-2,"), Get([12, 13]), Num(0), Num(0), Num(0), LitVec([14, 15, 16, 17]), VecMAC([4, 11, 18])]
