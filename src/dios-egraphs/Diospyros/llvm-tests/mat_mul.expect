  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %8 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 16
  %9 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 16
  %10 = fmul float %8, %9
  %11 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %12 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 8
  %13 = fmul float %11, %12
  %14 = fadd float %10, %13
  store float %14, float* %7, align 4
  %15 = getelementptr inbounds float, float* %7, i64 1
  %16 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 16
  %17 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %18 = fmul float %16, %17
  %19 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %20 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %21 = fmul float %19, %20
  %22 = fadd float %18, %21
  store float %22, float* %15, align 4
  %23 = getelementptr inbounds float, float* %15, i64 1
  %24 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 8
  %25 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 16
  %26 = fmul float %24, %25
  %27 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %28 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 8
  %29 = fmul float %27, %28
  %30 = fadd float %26, %29
  store float %30, float* %23, align 4
  %31 = getelementptr inbounds float, float* %23, i64 1
  %32 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 8
  %33 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %34 = fmul float %32, %33
  %35 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %36 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %37 = fmul float %35, %36
  %38 = fadd float %34, %37
  store float %38, float* %31, align 4
  %39 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %40 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 4
  %41 = insertelement <4 x float> zeroinitializer, float %40, i32 0
  %42 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 4
  %43 = insertelement <4 x float> %41, float %42, i32 1
  %44 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 4
  %45 = insertelement <4 x float> %43, float %44, i32 2
  %46 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 2), align 4
  %47 = insertelement <4 x float> %45, float %46, i32 3
  %48 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 4
  %49 = insertelement <4 x float> zeroinitializer, float %48, i32 0
  %50 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %51 = insertelement <4 x float> %49, float %50, i32 1
  %52 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 0), align 4
  %53 = insertelement <4 x float> %51, float %52, i32 2
  %54 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %55 = insertelement <4 x float> %53, float %54, i32 3
  %56 = fmul <4 x float> %47, %55
  %57 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %58 = insertelement <4 x float> zeroinitializer, float %57, i32 0
  %59 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 1), align 4
  %60 = insertelement <4 x float> %58, float %59, i32 1
  %61 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %62 = insertelement <4 x float> %60, float %61, i32 2
  %63 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %64 = insertelement <4 x float> %62, float %63, i32 3
  %65 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 4
  %66 = insertelement <4 x float> zeroinitializer, float %65, i32 0
  %67 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %68 = insertelement <4 x float> %66, float %67, i32 1
  %69 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 4
  %70 = insertelement <4 x float> %68, float %69, i32 2
  %71 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %72 = insertelement <4 x float> %70, float %71, i32 3
  %73 = call <4 x float> @llvm.fma.f32(<4 x float> %56, <4 x float> %64, <4 x float> %72)
  %74 = extractelement <4 x float> %73, i32 0
  %75 = getelementptr inbounds float, float %74, i64 1
  %76 = extractelement <4 x float> %73, i32 1
  %77 = getelementptr inbounds float, float %76, i64 1
  %78 = extractelement <4 x float> %73, i32 2
  %79 = getelementptr inbounds float, float %78, i64 1
  %80 = extractelement <4 x float> %73, i32 3
  %81 = getelementptr inbounds [4 x float], float %80, i64 0, i64 0
  %82 = load float, float* %39, align 16
  %83 = fpext float %82 to double
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %83)
  %85 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %86 = load float, float* %85, align 4
  %87 = fpext float %86 to double
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %87)
  %89 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %90 = load float, float* %89, align 8
  %91 = fpext float %90 to double
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %91)
  %93 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %94 = load float, float* %93, align 4
  %95 = fpext float %94 to double
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %95)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Num(0), Get([0, 1]), Symbol("b_in"), Num(0), Get([3, 4]), Mul([2, 5]), Symbol("a_in"), Num(1), Get([7, 8]), Symbol("b_in"), Num(2), Get([10, 11]), Mul([9, 12]), Add([6, 13]), Symbol("a_in"), Num(0), Get([15, 16]), Symbol("b_in"), Num(1), Get([18, 19]), Mul([17, 20]), Symbol("a_in"), Num(1), Get([22, 23]), Symbol("b_in"), Num(3), Get([25, 26]), Mul([24, 27]), Add([21, 28]), Symbol("a_in"), Num(2), Get([30, 31]), Symbol("b_in"), Num(0), Get([33, 34]), Mul([32, 35]), Symbol("a_in"), Num(3), Get([37, 38]), Symbol("b_in"), Num(2), Get([40, 41]), Mul([39, 42]), Add([36, 43]), Symbol("a_in"), Num(2), Get([45, 46]), Symbol("b_in"), Num(1), Get([48, 49]), Mul([47, 50]), Symbol("a_in"), Num(3), Get([52, 53]), Symbol("b_in"), Num(3), Get([55, 56]), Mul([54, 57]), Add([51, 58]), Vec([14, 29, 44, 59])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 8 iterations, reason: Some(Saturated)
[Symbol("a_in"), Num(0), Get([0, 1]), Symbol("a_in"), Num(0), Get([3, 4]), Symbol("a_in"), Num(2), Get([6, 7]), Symbol("a_in"), Num(2), Get([9, 10]), LitVec([2, 5, 8, 11]), Symbol("b_in"), Num(0), Get([13, 14]), Symbol("b_in"), Num(1), Get([16, 17]), Symbol("b_in"), Num(0), Get([19, 20]), Symbol("b_in"), Num(1), Get([22, 23]), LitVec([15, 18, 21, 24]), VecMul([12, 25]), Symbol("a_in"), Num(1), Get([27, 28]), Symbol("a_in"), Num(1), Get([30, 31]), Symbol("a_in"), Num(3), Get([33, 34]), Symbol("a_in"), Num(3), Get([36, 37]), LitVec([29, 32, 35, 38]), Symbol("b_in"), Num(2), Get([40, 41]), Symbol("b_in"), Num(3), Get([43, 44]), Symbol("b_in"), Num(2), Get([46, 47]), Symbol("b_in"), Num(3), Get([49, 50]), LitVec([42, 45, 48, 51]), VecMAC([26, 39, 52])]
