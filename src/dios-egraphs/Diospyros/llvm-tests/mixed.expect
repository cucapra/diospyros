  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x float], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 16
  %8 = fadd float %7, 3.000000e+00
  %9 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  store float %8, float* %9, align 16
  %10 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %11 = fadd float 5.000000e+00, %10
  %12 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  store float %11, float* %12, align 4
  %13 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 8
  %14 = fadd float 3.000000e+00, %13
  %15 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  store float %14, float* %15, align 8
  %16 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %17 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %18 = fadd float %16, %17
  %19 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 0), align 4
  %20 = insertelement <4 x float> zeroinitializer, float %19, i32 0
  %21 = insertelement <4 x float> %20, float 5.000000e+00, i32 1
  %22 = insertelement <4 x float> %21, float 3.000000e+00, i32 2
  %23 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @a_in, i64 0, i64 3), align 4
  %24 = insertelement <4 x float> %22, float %23, i32 3
  %25 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 1), align 4
  %26 = insertelement <4 x float> <float 3.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, float %25, i32 1
  %27 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 2), align 4
  %28 = insertelement <4 x float> %26, float %27, i32 2
  %29 = load float, float* getelementptr inbounds ([4 x float], [4 x float]* @b_in, i64 0, i64 3), align 4
  %30 = insertelement <4 x float> %28, float %29, i32 3
  %31 = fadd <4 x float> %24, %30
  %32 = extractelement <4 x float> %31, i32 0
  store float %32, float* %9, align 16
  %33 = extractelement <4 x float> %31, i32 1
  store float %33, float* %12, align 4
  %34 = extractelement <4 x float> %31, i32 2
  store float %34, float* %15, align 8
  %35 = extractelement <4 x float> %31, i32 3
  %36 = insertelement float %35, float %19, i32 0
  %37 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  store float %18, float* %37, align 4
  %38 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 0
  %39 = load float, float* %38, align 16
  %40 = fpext float %39 to double
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), double %40)
  %42 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 1
  %43 = load float, float* %42, align 4
  %44 = fpext float %43 to double
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), double %44)
  %46 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 2
  %47 = load float, float* %46, align 8
  %48 = fpext float %47 to double
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), double %48)
  %50 = getelementptr inbounds [4 x float], [4 x float]* %6, i64 0, i64 3
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), double %52)
  ret i32 0
---STDERR---
RecExpr { nodes: [Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Num(3), Add([2, 3]), Num(5), Symbol("b_in"), Symbol("0,1,"), Get([6, 7]), Add([5, 8]), Num(3), Symbol("b_in"), Symbol("0,2,"), Get([11, 12]), Add([10, 13]), Symbol("a_in"), Symbol("0,3,"), Get([15, 16]), Symbol("b_in"), Symbol("0,3,"), Get([18, 19]), Add([17, 20]), Vec([4, 9, 14, 21])] }
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 5 iterations, reason: Some(Saturated)
[Symbol("a_in"), Symbol("0,0,"), Get([0, 1]), Num(5), Num(3), Symbol("a_in"), Symbol("0,3,"), Get([5, 6]), Vec([2, 3, 4, 7]), Num(3), Symbol("b_in"), Symbol("0,1,"), Get([10, 11]), Symbol("b_in"), Symbol("0,2,"), Get([13, 14]), Symbol("b_in"), Symbol("0,3,"), Get([16, 17]), Vec([9, 12, 15, 18]), VecAdd([8, 19])]
