Match!
  store float %17, float* %18, align 4
Incoming instr
  store float %17, float* %18, align 4
Incoming arg
  %17 = fmul float %16, 2.000000e+00
Incoming instr
  %17 = fmul float %16, 2.000000e+00
Incoming arg
  %16 = load float, float* %15, align 4
Incoming instr
  %16 = load float, float* %15, align 4
Incoming arg
  %15 = getelementptr inbounds float, float* %0, i64 %13
Incoming instr
  %15 = getelementptr inbounds float, float* %0, i64 %13
Incoming arg
  %13 = phi i64 [ %19, %.epil.preheader13 ], [ %11, %..preheader_crit_edge.unr-lcssa ]
Incoming instr
  %13 = phi i64 [ %19, %.epil.preheader13 ], [ %11, %..preheader_crit_edge.unr-lcssa ]
Incoming arg
  %19 = add nuw nsw i64 %13, 1
Incoming instr
  %19 = add nuw nsw i64 %13, 1
Incoming arg
  %18 = getelementptr inbounds float, float* %1, i64 %13
Incoming instr
  %18 = getelementptr inbounds float, float* %1, i64 %13
Incoming arg
  %13 = phi i64 [ %19, %.epil.preheader13 ], [ %11, %..preheader_crit_edge.unr-lcssa ]
Incoming instr
  %13 = phi i64 [ %19, %.epil.preheader13 ], [ %11, %..preheader_crit_edge.unr-lcssa ]
Incoming arg
  %19 = add nuw nsw i64 %13, 1
Incoming instr
  %19 = add nuw nsw i64 %13, 1
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 4 iterations, reason: Some(Saturated)
Match!
  store float %37, float* %38, align 4
Incoming instr
  store float %37, float* %38, align 4
Incoming arg
  %37 = fmul float %36, 2.000000e+00
Incoming instr
  %37 = fmul float %36, 2.000000e+00
Incoming arg
  %36 = load float, float* %35, align 4
Incoming instr
  %36 = load float, float* %35, align 4
Incoming arg
  %35 = getelementptr inbounds float, float* %0, i64 %33
Incoming instr
  %35 = getelementptr inbounds float, float* %0, i64 %33
Incoming arg
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming instr
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming arg
  %54 = add nuw nsw i64 %33, 4
Incoming instr
  %54 = add nuw nsw i64 %33, 4
Incoming arg
  %38 = getelementptr inbounds float, float* %1, i64 %33
Incoming instr
  %38 = getelementptr inbounds float, float* %1, i64 %33
Incoming arg
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming instr
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming arg
  %54 = add nuw nsw i64 %33, 4
Incoming instr
  %54 = add nuw nsw i64 %33, 4
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 4 iterations, reason: Some(Saturated)
Match!
  store float %42, float* %43, align 4
Incoming instr
  store float %42, float* %43, align 4
Incoming arg
  %42 = fmul float %41, 2.000000e+00
Incoming instr
  %42 = fmul float %41, 2.000000e+00
Incoming arg
  %41 = load float, float* %40, align 4
Incoming instr
  %41 = load float, float* %40, align 4
Incoming arg
  %40 = getelementptr inbounds float, float* %0, i64 %39
Incoming instr
  %40 = getelementptr inbounds float, float* %0, i64 %39
Incoming arg
  %39 = or i64 %33, 1
Incoming instr
  %39 = or i64 %33, 1
Incoming arg
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming instr
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming arg
  %54 = add nuw nsw i64 %33, 4
Incoming instr
  %54 = add nuw nsw i64 %33, 4
Incoming arg
  %43 = getelementptr inbounds float, float* %1, i64 %39
Incoming instr
  %43 = getelementptr inbounds float, float* %1, i64 %39
Incoming arg
  %39 = or i64 %33, 1
Incoming instr
  %39 = or i64 %33, 1
Incoming arg
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming instr
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming arg
  %54 = add nuw nsw i64 %33, 4
Incoming instr
  %54 = add nuw nsw i64 %33, 4
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 4 iterations, reason: Some(Saturated)
Match!
  store float %52, float* %53, align 4
Incoming instr
  store float %52, float* %53, align 4
Incoming arg
  %52 = fmul float %51, 2.000000e+00
Incoming instr
  %52 = fmul float %51, 2.000000e+00
Incoming arg
  %51 = load float, float* %50, align 4
Incoming instr
  %51 = load float, float* %50, align 4
Incoming arg
  %50 = getelementptr inbounds float, float* %0, i64 %49
Incoming instr
  %50 = getelementptr inbounds float, float* %0, i64 %49
Incoming arg
  %49 = or i64 %33, 3
Incoming instr
  %49 = or i64 %33, 3
Incoming arg
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming instr
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming arg
  %54 = add nuw nsw i64 %33, 4
Incoming instr
  %54 = add nuw nsw i64 %33, 4
Incoming arg
  %53 = getelementptr inbounds float, float* %1, i64 %49
Incoming instr
  %53 = getelementptr inbounds float, float* %1, i64 %49
Incoming arg
  %49 = or i64 %33, 3
Incoming instr
  %49 = or i64 %33, 3
Incoming arg
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming instr
  %33 = phi i64 [ 0, %.lr.ph11.new ], [ %54, %32 ]
Incoming arg
  %54 = add nuw nsw i64 %33, 4
Incoming instr
  %54 = add nuw nsw i64 %33, 4
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 4 iterations, reason: Some(Saturated)
Match!
  store float %4, float* %1, align 4
Incoming instr
  store float %4, float* %1, align 4
Incoming arg
  %4 = fmul float %3, 2.000000e+00
Incoming instr
  %4 = fmul float %3, 2.000000e+00
Incoming arg
  %3 = load float, float* %0, align 4
Incoming instr
  %3 = load float, float* %0, align 4
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 4 iterations, reason: Some(Saturated)
Match!
  store float %7, float* %8, align 4
Incoming instr
  store float %7, float* %8, align 4
Incoming arg
  %7 = fmul float %6, 2.000000e+00
Incoming instr
  %7 = fmul float %6, 2.000000e+00
Incoming arg
  %6 = load float, float* %5, align 4
Incoming instr
  %6 = load float, float* %5, align 4
Incoming arg
  %5 = getelementptr inbounds float, float* %0, i64 1
Incoming instr
  %5 = getelementptr inbounds float, float* %0, i64 1
Incoming arg
  %8 = getelementptr inbounds float, float* %1, i64 1
Incoming instr
  %8 = getelementptr inbounds float, float* %1, i64 1
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 4 iterations, reason: Some(Saturated)
Match!
  store float %11, float* %12, align 4
Incoming instr
  store float %11, float* %12, align 4
Incoming arg
  %11 = fmul float %10, 2.000000e+00
Incoming instr
  %11 = fmul float %10, 2.000000e+00
Incoming arg
  %10 = load float, float* %9, align 4
Incoming instr
  %10 = load float, float* %9, align 4
Incoming arg
  %9 = getelementptr inbounds float, float* %0, i64 2
Incoming instr
  %9 = getelementptr inbounds float, float* %0, i64 2
Incoming arg
  %12 = getelementptr inbounds float, float* %1, i64 2
Incoming instr
  %12 = getelementptr inbounds float, float* %1, i64 2
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 4 iterations, reason: Some(Saturated)
Match!
  store float %25, float* %28, align 4
Incoming instr
  store float %25, float* %28, align 4
Incoming arg
  %25 = fadd float %24, %19
Incoming instr
  %25 = fadd float %24, %19
Incoming arg
  %24 = fadd float %23, %15
Incoming instr
  %24 = fadd float %23, %15
Incoming arg
  %23 = fadd float %22, %11
Incoming instr
  %23 = fadd float %22, %11
Incoming arg
  %22 = fadd float %21, %7
Incoming instr
  %22 = fadd float %21, %7
Incoming arg
  %21 = fadd float %4, 0.000000e+00
Incoming instr
  %21 = fadd float %4, 0.000000e+00
Incoming arg
  %4 = fmul float %3, 2.000000e+00
Incoming instr
  %4 = fmul float %3, 2.000000e+00
Incoming arg
  %3 = load float, float* %0, align 4
Incoming instr
  %3 = load float, float* %0, align 4
Incoming arg
  %7 = fmul float %6, 2.000000e+00
Incoming instr
  %7 = fmul float %6, 2.000000e+00
Incoming arg
  %6 = load float, float* %5, align 4
Incoming instr
  %6 = load float, float* %5, align 4
Incoming arg
  %5 = getelementptr inbounds float, float* %0, i64 1
Incoming instr
  %5 = getelementptr inbounds float, float* %0, i64 1
Incoming arg
  %11 = fmul float %10, 2.000000e+00
Incoming instr
  %11 = fmul float %10, 2.000000e+00
Incoming arg
  %10 = load float, float* %9, align 4
Incoming instr
  %10 = load float, float* %9, align 4
Incoming arg
  %9 = getelementptr inbounds float, float* %0, i64 2
Incoming instr
  %9 = getelementptr inbounds float, float* %0, i64 2
Incoming arg
  %15 = fmul float %14, 2.000000e+00
Incoming instr
  %15 = fmul float %14, 2.000000e+00
Incoming arg
  %14 = load float, float* %13, align 4
Incoming instr
  %14 = load float, float* %13, align 4
Incoming arg
  %13 = getelementptr inbounds float, float* %0, i64 3
Incoming instr
  %13 = getelementptr inbounds float, float* %0, i64 3
Incoming arg
  %19 = fmul float %18, 2.000000e+00
Incoming instr
  %19 = fmul float %18, 2.000000e+00
Incoming arg
  %18 = load float, float* %17, align 4
Incoming instr
  %18 = load float, float* %17, align 4
Incoming arg
  %17 = getelementptr inbounds float, float* %0, i64 4
Incoming instr
  %17 = getelementptr inbounds float, float* %0, i64 4
Incoming arg
  %28 = getelementptr inbounds float, float* %2, i64 3
Incoming instr
  %28 = getelementptr inbounds float, float* %2, i64 3
Dropping inapplicable rules: div-1 div-1-inv neg-neg neg-neg-rev neg-sgn neg-sgn-rev neg-zero-inv neg-zero-inv-rev neg-minus neg-minus-rev neg-minus-zero neg-minus-zero-rev sqrt-1-inv sqrt-1-inv-rev neg_unop sqrt_unop /_binop
Stopped after 11 iterations, reason: Some(Saturated)
