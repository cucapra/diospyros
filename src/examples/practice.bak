#lang rosette

(require rosette/query/debug)

;(define (always-same)
;  (define-symbolic x integer?)
;  x)

;(always-same)

;(define-symbolic x boolean?)

;(assert x)

;(asserts)

;(define-symbolic z y boolean?)
;(assert z)
;(asserts)

;(define sol (solve (assert y)))
;(asserts)
;(evaluate z sol)
;(evaluate y sol)
;(solve (assert (not z)))

;(define-symbolic x y integer?)
;(define inc (solve+))
;(inc (< x y))

;(inc (> x 5))

;(inc (< y 4))

;(define-symbolic x y boolean?)
;(assert x)
;(asserts)

;(define sol (verify (assert y)))
;(asserts)
;(evaluate x sol)
;(evaluate y sol)

;(define-symbolic x c integer?)
;(assert (even? x))
;(asserts)

;(define sol
;  (synthesize #:forall x
;              #:guarantee (assert (odd? (+ x c)))))

;(asserts)

;(evaluate x sol)

;(evaluate c sol)

(define-symbolic x y integer?)

(define results (+ y x))

(assert (= x y))

(solve (assert (equal? results 6)))





