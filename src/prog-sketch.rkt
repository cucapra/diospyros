#lang rosette

(require "ast.rkt"
         "utils.rkt"
         "configuration.rkt"
         racket/trace
         threading)

(provide (all-defined-out))

;;=================== SKETCH DEFINITIONS =========================

; Generate a sketch that interleaves computation and shuffling `iterations`
; times.
; `shuffle-thunk` takes one argument, the current iteration, and returns a list
; of program insts and names of shuffle vectors defined.
; `compute-thunk` takes two arguments, the current iteration and the names of the
; shuffle vectors for this iteration, and returs a list of program insts.
(define (sketch-compute-shuffle-interleave shuffle-thunk
                                           compute-thunk
                                           number)
  (define instructions
    (for/list ([i (in-range number)])
      (define-values (shuffle-defs shuffle-names)
        (shuffle-thunk i))
      (define compute
        (compute-thunk i shuffle-names))
      (append shuffle-defs compute)))

  (flatten instructions))

; Returns a function that generates `shuf-num` shuffle vectors of size
; `reg-size` to be used for a program sketch.
(define (symbolic-shuffle-gen shuf-num)
  (lambda (iteration)
    (define shuf-names
      (for/list ([n (in-range shuf-num)])
        (string->symbol
          (string-append "shuf"
                         (number->string n)
                         "-"
                         (number->string iteration)))))
    (define insts
      (map (lambda (shuf-name)
             (vec-const shuf-name
                        (make-symbolic-bv-list-indices (current-reg-size))))
           shuf-names))
    (values insts shuf-names)))


; Equivalence classes based on names generated by symbolic-shuffle-gen.
; Names are of the form shufn-i where n is the class number.
(define (prefix-equiv name)
  (~> name
      symbol->string
      (string-split _ "-")
      first
      (string-split _ "shuf")
      first
      string->number))

; Partition an declared vector based on the register size
(define (partition-vector id size)
  (define len (* (current-reg-size)
                 (exact-ceiling (/ size (current-reg-size)))))
  (define vals
    (for/list ([i (in-range 0 len (current-reg-size))])
      (let* ([start i]
             [end (min len (+ i (current-reg-size)))]
             [new-id (string->symbol
                       (format "~a_~a_~a" id start end))]
             [start-bv (bv-index start)]
             [end-bv (bv-index end)])
        (list new-id
          (vec-load new-id id start-bv end-bv)
          (vec-store id new-id start-bv end-bv)))))
  (values (map first vals) (map second vals) (map third vals)))

; TODO(rachit): Define a sketch where the compute can use previously defined
; shuffle vectors. The sketch should take a parameter `n` that specifies the
; "history" of shuffle vectors the compute at iteration `i` can use.
; For example, for n = 3, computation at `i` can choose to use shuffle
; vectors from `i-2`, `i-1`, and `i`. This choice allows the sketch to
; discover reuse of shuffle vectors while also giving us a parameter to
; tune the complexity of the synthesis formulation.
;
; Note that this "history" based mechanism doesn't disallow global reuse
; patterns as long as the compute kernels can commute. To reuse a shuffle
; vector that is further away, the synthesizer can simply reorder the
; computation.
(define (sketch-compute-shuffle-interleave-history shuffle-thunk
                                                   compute-thunk
                                                   number
                                                   #:window-size window-size)

  (define (take-window vec start end)
    (take (drop vec
                (max 0 start)
                 start)
          (add1 end)))

  ; Store the names of currently defined shufs
  (define def-shufs (make-vector number #f))

  (define instructions
    (for/list ([i (in-range number)])
      (define-values (shuffle-defs shuffle-names)
        (shuffle-thunk i))
      (bv-list-set! def-shufs i shuffle-names)
      (define compute
        (compute-thunk i (take-window (- i window-size) i)))
      (append (shuffle-defs compute))))

  (flatten instructions))
