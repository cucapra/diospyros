#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.5 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1292 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"ast.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 15 #"\"dsp-insts.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 12 #"\"interp.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 18 #"\"matrix-utils.rkt\""
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 19 3 30 #"\"register-allocation-pass.rkt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Determines registers used and sorts ascending"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"ordered-regs-used"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 5 #"shufs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"sort"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 6 #"reg-of"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 5 #"shufs"
0 0 24 3 4 #"))) "
0 0 14 3 1 #"<"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; Truncates shuffles to reference only the accessed registers."
0 0 24 29 1 #"\n"
0 0 17 3 43 #"; reg-size 4,  [0, 1, 8, 9] -> [0, 1, 2, 3]"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"truncate-shuf"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 17 #"ordered-regs-used"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (["
0 0 14 3 3 #"mod"
0 0 24 3 2 #" ("
0 0 14 3 6 #"modulo"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 3 #"reg"
0 0 24 3 2 #" ("
0 0 14 3 6 #"reg-of"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ["
0 0 14 3 6 #"offset"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 8 #"index-of"
0 0 24 3 1 #" "
0 0 14 3 17 #"ordered-regs-used"
0 0 24 3 1 #" "
0 0 14 3 3 #"reg"
0 0 24 3 2 #") "
0 0 14 3 8 #"reg-size"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"mod"
0 0 24 3 1 #" "
0 0 14 3 6 #"offset"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"reg-for-source"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"inp"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 10 #"source-vec"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"inp"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"hash?"
0 0 24 3 1 #" "
0 0 14 3 10 #"source-vec"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 10 #"source-vec"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 10 #"source-vec"
0 0 24 3 4 #"])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(4
 #"; Map an index to either the input it references, or the allocated r"
 #"egister"
) 0 0 24 29 1 #"\n"
0 0 17 3 33 #"; that now holds that index value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"inp-id-for-idx"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 3 #") ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 19 3 28 #"\"idx ~a not found in inputs\""
0 0 24 3 2 #") "
0 0 14 3 3 #"idx"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"inp-id"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-val"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 6 #"inp-id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 25 #"; The input is a constant"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"       [("
0 0 14 3 7 #"vector?"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"const-len"
0 0 24 3 2 #" ("
0 0 14 3 13 #"vector-length"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 44 #"; Our index falls inside the constant vector"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 9 #"const-len"
0 0 24 3 2 #") "
0 0 14 3 6 #"inp-id"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 33 #"; Otherwise, on to the next input"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"inp-id-for-idx"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 9 #"const-len"
0 0 24 3 5 #"))])]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 50 #"; Input has been mapped across allocated registers"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 25 #"; The mapped input symbol"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"          [("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 3 #") ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 17 3 33 #"; Otherwise, on to the next input"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-len"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 2 #" ("
0 0 14 3 10 #"hash->list"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 14 #"inp-id-for-idx"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"idx"
0 0 24 3 1 #" "
0 0 14 3 8 #"hash-len"
0 0 24 3 9 #"))])])]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"shuffle-or-select"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"idxs"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"shufs"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"idxs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"ordered-regs"
0 0 24 3 2 #" ("
0 0 14 3 17 #"ordered-regs-used"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 5 #"shufs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"num-regs"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 12 #"ordered-regs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 52 #"; Get the allocated register each index falls within"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-ids"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 14 #"inp-id-for-idx"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 3 #") ("
0 0 14 3 12 #"vector->list"
0 0 24 3 1 #" "
0 0 14 3 5 #"shufs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-inps"
0 0 24 3 2 #" ("
0 0 14 3 17 #"remove-duplicates"
0 0 24 3 1 #" "
0 0 14 3 7 #"inp-ids"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"vector-map!"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 13 #"truncate-shuf"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 12 #"ordered-regs"
0 0 24 3 2 #") "
0 0 14 3 5 #"shufs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"idxs"
0 0 24 3 1 #" "
0 0 14 3 8 #"new-inps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #"; Produces 1 or more instructions, modifies env"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"truncate-select-inst"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"    [("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"idxs"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 17 #"shuffle-or-select"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"idxs"
0 0 24 3 1 #" "
0 0 14 3 4 #"inps"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ["
0 0 14 3 1 #"_"
0 0 24 3 1 #" "
0 0 14 3 4 #"inst"
0 0 24 3 3 #"]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"select-truncation"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"instrs"
0 0 24 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 20 #"truncate-select-inst"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 10 #"prog-insts"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 19 #";(pretty-print env)"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 6 #"instrs"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 33 #"; Test program copied from matmul"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"prog"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"vec-extern-decl"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"vec-extern-decl"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"vec-extern-decl"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"Z"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"vec-app"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"vec-mac"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"vec-shuffle-set!"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-0"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"vec-app"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"vec-mac"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"vec-shuffle-set!"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"7"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"vec-app"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"vec-mac"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"vec-shuffle-set!"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-2"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"vec-app"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"vec-mac"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"vec-shuffle-set!"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-3"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"vec-const"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"#("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf0-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"A"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-B"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf1-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"B"
0 0 24 3 1 #" "
0 0 14 3 1 #"Z"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 11 #"vec-shuffle"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"C"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"vec-app"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"vec-mac"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"reg-C"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-A"
0 0 24 3 1 #" "
0 0 14 3 5 #"reg-B"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"vec-shuffle-set!"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"C"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 7 #"shuf2-4"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"out"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"reg-alloc"
0 0 24 3 2 #" ("
0 0 14 3 19 #"register-allocation"
0 0 24 3 1 #" "
0 0 14 3 1 #"p"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 12 #"pretty-print"
0 0 24 3 2 #" ("
0 0 14 3 17 #"select-truncation"
0 0 24 3 1 #" "
0 0 14 3 9 #"reg-alloc"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 8 #"reg-size"
0 0 24 3 2 #"))"
0           0
