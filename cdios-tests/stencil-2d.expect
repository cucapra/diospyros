#include <float.h>
#include <math.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <xtensa/sim.h>
#include <xtensa/tie/xt_pdxn.h>
#include <xtensa/tie/xt_timer.h>
#include <xtensa/xt_profiling.h>

int __attribute__((section(".dram0.data"))) Z[4] = {0, 0, 0, 0};
float __attribute__((section(".dram0.data"))) v_0[4] = {0.0, 0, 0, 0};
int __attribute__((section(".dram0.data"))) v_5[4] = {4, 4, 0, 0};
int __attribute__((section(".dram0.data"))) v_5_0[4] = {0, 0, 4, 4};
int __attribute__((section(".dram0.data"))) v_10[4] = {5, 5, 0, 0};
int __attribute__((section(".dram0.data"))) v_10_0[4] = {1, 1, 4, 4};
int __attribute__((section(".dram0.data"))) v_15[4] = {6, 6, 0, 0};
int __attribute__((section(".dram0.data"))) v_15_0[4] = {2, 2, 4, 4};
int __attribute__((section(".dram0.data"))) v_21[4] = {7, 7, 0, 0};
int __attribute__((section(".dram0.data"))) v_21_0[4] = {3, 3, 4, 4};
int __attribute__((section(".dram0.data"))) v_26[4] = {8, 8, 0, 0};
int __attribute__((section(".dram0.data"))) v_26_0[4] = {0, 0, 4, 4};
int __attribute__((section(".dram0.data"))) v_31[4] = {9, 9, 0, 0};
int __attribute__((section(".dram0.data"))) v_31_0[4] = {1, 1, 4, 4};
int __attribute__((section(".dram0.data"))) v_37[4] = {10, 10, 0, 0};
int __attribute__((section(".dram0.data"))) v_37_0[4] = {2, 2, 4, 4};
int __attribute__((section(".dram0.data"))) v_42[4] = {11, 11, 0, 0};
int __attribute__((section(".dram0.data"))) v_42_0[4] = {3, 3, 4, 4};
int __attribute__((section(".dram0.data"))) v_47[4] = {12, 12, 0, 0};
int __attribute__((section(".dram0.data"))) v_47_0[4] = {0, 0, 4, 4};
int __attribute__((section(".dram0.data"))) v_250[4] = {0, 0, 0, 0};
int __attribute__((section(".dram0.data"))) v_250_0[4] = {0, 0, 0, 0};
void kernel(float *orig_in, float *sol_out, float *filter_in) {
  float *__restrict orig_in_mut = orig_in;
  valign align_orig_in;
  align_orig_in = PDX_LA_MXF32_PP((xb_vecMxf32 *)orig_in);
  float *__restrict sol_out_mut = sol_out;
  valign align_sol_out = PDX_Z_ALIGN();
  float *__restrict filter_in_mut = filter_in;
  valign align_filter_in;
  align_filter_in = PDX_LA_MXF32_PP((xb_vecMxf32 *)filter_in);
  xb_vecMxf32 filter_in_0_4;
  PDX_LAV_MXF32_XP(filter_in_0_4, align_filter_in, (xb_vecMxf32 *)filter_in_mut,
                   16);
  xb_vecMxf32 filter_in_4_8;
  PDX_LAV_MXF32_XP(filter_in_4_8, align_filter_in, (xb_vecMxf32 *)filter_in_mut,
                   16);
  xb_vecMxf32 filter_in_8_12;
  PDX_LAV_MXF32_XP(filter_in_8_12, align_filter_in,
                   (xb_vecMxf32 *)filter_in_mut, 16);
  float v_1 = orig_in[0];
  float v_2 = orig_in[1];
  float v_3 = 1;
  float v_4_tmp[4] = {v_1, v_2, v_3, v_3};
  xb_vecMxf32 v_4 = *((xb_vecMxf32 *)v_4_tmp);
  xb_vecMxf32 v_6;
  v_6 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_0_4),
      *((xb_vecMx32 *)v_5_0)));
  xb_vecMxf32 v_7 = PDX_MUL_MXF32(v_4, v_6);
  float v_8 = orig_in[2];
  float v_9_tmp[4] = {v_2, v_8, v_3, v_3};
  xb_vecMxf32 v_9 = *((xb_vecMxf32 *)v_9_tmp);
  xb_vecMxf32 v_11;
  v_11 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_0_4),
      *((xb_vecMx32 *)v_10_0)));
  xb_vecMxf32 v_12 = v_7;
  PDX_MULA_MXF32(v_12, v_9, v_11);
  float v_13 = orig_in[3];
  float v_14_tmp[4] = {v_8, v_13, v_3, v_3};
  xb_vecMxf32 v_14 = *((xb_vecMxf32 *)v_14_tmp);
  xb_vecMxf32 v_16;
  v_16 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_0_4),
      *((xb_vecMx32 *)v_15_0)));
  xb_vecMxf32 v_17 = v_12;
  PDX_MULA_MXF32(v_17, v_14, v_16);
  float v_18 = orig_in[4];
  float v_19 = orig_in[5];
  float v_20_tmp[4] = {v_18, v_19, v_3, v_3};
  xb_vecMxf32 v_20 = *((xb_vecMxf32 *)v_20_tmp);
  xb_vecMxf32 v_22;
  v_22 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_0_4),
      *((xb_vecMx32 *)v_21_0)));
  xb_vecMxf32 v_23 = v_17;
  PDX_MULA_MXF32(v_23, v_20, v_22);
  float v_24 = orig_in[6];
  float v_25_tmp[4] = {v_19, v_24, v_3, v_3};
  xb_vecMxf32 v_25 = *((xb_vecMxf32 *)v_25_tmp);
  xb_vecMxf32 v_27;
  v_27 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_4_8),
      *((xb_vecMx32 *)v_26_0)));
  xb_vecMxf32 v_28 = v_23;
  PDX_MULA_MXF32(v_28, v_25, v_27);
  float v_29 = orig_in[7];
  float v_30_tmp[4] = {v_24, v_29, v_3, v_3};
  xb_vecMxf32 v_30 = *((xb_vecMxf32 *)v_30_tmp);
  xb_vecMxf32 v_32;
  v_32 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_4_8),
      *((xb_vecMx32 *)v_31_0)));
  xb_vecMxf32 v_33 = v_28;
  PDX_MULA_MXF32(v_33, v_30, v_32);
  float v_34 = orig_in[8];
  float v_35 = orig_in[9];
  float v_36_tmp[4] = {v_34, v_35, v_3, v_3};
  xb_vecMxf32 v_36 = *((xb_vecMxf32 *)v_36_tmp);
  xb_vecMxf32 v_38;
  v_38 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_4_8),
      *((xb_vecMx32 *)v_37_0)));
  xb_vecMxf32 v_39 = v_33;
  PDX_MULA_MXF32(v_39, v_36, v_38);
  float v_40 = orig_in[10];
  float v_41_tmp[4] = {v_35, v_40, v_3, v_3};
  xb_vecMxf32 v_41 = *((xb_vecMxf32 *)v_41_tmp);
  xb_vecMxf32 v_43;
  v_43 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_4_8),
      *((xb_vecMx32 *)v_42_0)));
  xb_vecMxf32 v_44 = v_39;
  PDX_MULA_MXF32(v_44, v_41, v_43);
  float v_45 = orig_in[11];
  float v_46_tmp[4] = {v_40, v_45, v_3, v_3};
  xb_vecMxf32 v_46 = *((xb_vecMxf32 *)v_46_tmp);
  xb_vecMxf32 v_48;
  v_48 = PDX_MOV_MXF32_FROM_MX32(PDX_SEL_MX32(
      *((xb_vecMxf32 *)v_0), PDX_MOV_MX32_FROM_MXF32(filter_in_8_12),
      *((xb_vecMx32 *)v_47_0)));
  xb_vecMxf32 v_49 = v_44;
  PDX_MULA_MXF32(v_49, v_46, v_48);
  xb_vecMxf32 v_53 = PDX_MUL_MXF32(v_20, v_6);
  xb_vecMxf32 v_57 = v_53;
  PDX_MULA_MXF32(v_57, v_25, v_11);
  xb_vecMxf32 v_61 = v_57;
  PDX_MULA_MXF32(v_61, v_30, v_16);
  xb_vecMxf32 v_65 = v_61;
  PDX_MULA_MXF32(v_65, v_36, v_22);
  xb_vecMxf32 v_69 = v_65;
  PDX_MULA_MXF32(v_69, v_41, v_27);
  xb_vecMxf32 v_73 = v_69;
  PDX_MULA_MXF32(v_73, v_46, v_32);
  float v_74 = orig_in[12];
  float v_75 = orig_in[13];
  float v_76_tmp[4] = {v_74, v_75, v_3, v_3};
  xb_vecMxf32 v_76 = *((xb_vecMxf32 *)v_76_tmp);
  xb_vecMxf32 v_79 = v_73;
  PDX_MULA_MXF32(v_79, v_76, v_38);
  float v_80 = orig_in[14];
  float v_81_tmp[4] = {v_75, v_80, v_3, v_3};
  xb_vecMxf32 v_81 = *((xb_vecMxf32 *)v_81_tmp);
  xb_vecMxf32 v_84 = v_79;
  PDX_MULA_MXF32(v_84, v_81, v_43);
  float v_85 = orig_in[15];
  float v_86_tmp[4] = {v_80, v_85, v_3, v_3};
  xb_vecMxf32 v_86 = *((xb_vecMxf32 *)v_86_tmp);
  xb_vecMxf32 v_89 = v_84;
  PDX_MULA_MXF32(v_89, v_86, v_48);
  xb_vecMxf32 v_93 = PDX_MUL_MXF32(v_36, v_6);
  xb_vecMxf32 v_97 = v_93;
  PDX_MULA_MXF32(v_97, v_41, v_11);
  xb_vecMxf32 v_101 = v_97;
  PDX_MULA_MXF32(v_101, v_46, v_16);
  xb_vecMxf32 v_105 = v_101;
  PDX_MULA_MXF32(v_105, v_76, v_22);
  xb_vecMxf32 v_109 = v_105;
  PDX_MULA_MXF32(v_109, v_81, v_27);
  xb_vecMxf32 v_113 = v_109;
  PDX_MULA_MXF32(v_113, v_86, v_32);
  float v_114 = orig_in[16];
  float v_115 = orig_in[17];
  float v_116_tmp[4] = {v_114, v_115, v_3, v_3};
  xb_vecMxf32 v_116 = *((xb_vecMxf32 *)v_116_tmp);
  xb_vecMxf32 v_119 = v_113;
  PDX_MULA_MXF32(v_119, v_116, v_38);
  float v_120 = orig_in[18];
  float v_121_tmp[4] = {v_115, v_120, v_3, v_3};
  xb_vecMxf32 v_121 = *((xb_vecMxf32 *)v_121_tmp);
  xb_vecMxf32 v_124 = v_119;
  PDX_MULA_MXF32(v_124, v_121, v_43);
  float v_125 = orig_in[19];
  float v_126_tmp[4] = {v_120, v_125, v_3, v_3};
  xb_vecMxf32 v_126 = *((xb_vecMxf32 *)v_126_tmp);
  xb_vecMxf32 v_129 = v_124;
  PDX_MULA_MXF32(v_129, v_126, v_48);
  xb_vecMxf32 v_133 = PDX_MUL_MXF32(v_76, v_6);
  xb_vecMxf32 v_137 = v_133;
  PDX_MULA_MXF32(v_137, v_81, v_11);
  xb_vecMxf32 v_141 = v_137;
  PDX_MULA_MXF32(v_141, v_86, v_16);
  xb_vecMxf32 v_145 = v_141;
  PDX_MULA_MXF32(v_145, v_116, v_22);
  xb_vecMxf32 v_149 = v_145;
  PDX_MULA_MXF32(v_149, v_121, v_27);
  xb_vecMxf32 v_153 = v_149;
  PDX_MULA_MXF32(v_153, v_126, v_32);
  float v_154 = orig_in[20];
  float v_155 = orig_in[21];
  float v_156_tmp[4] = {v_154, v_155, v_3, v_3};
  xb_vecMxf32 v_156 = *((xb_vecMxf32 *)v_156_tmp);
  xb_vecMxf32 v_159 = v_153;
  PDX_MULA_MXF32(v_159, v_156, v_38);
  float v_160 = orig_in[22];
  float v_161_tmp[4] = {v_155, v_160, v_3, v_3};
  xb_vecMxf32 v_161 = *((xb_vecMxf32 *)v_161_tmp);
  xb_vecMxf32 v_164 = v_159;
  PDX_MULA_MXF32(v_164, v_161, v_43);
  float v_165 = orig_in[23];
  float v_166_tmp[4] = {v_160, v_165, v_3, v_3};
  xb_vecMxf32 v_166 = *((xb_vecMxf32 *)v_166_tmp);
  xb_vecMxf32 v_169 = v_164;
  PDX_MULA_MXF32(v_169, v_166, v_48);
  xb_vecMxf32 v_173 = PDX_MUL_MXF32(v_116, v_6);
  xb_vecMxf32 v_177 = v_173;
  PDX_MULA_MXF32(v_177, v_121, v_11);
  xb_vecMxf32 v_181 = v_177;
  PDX_MULA_MXF32(v_181, v_126, v_16);
  xb_vecMxf32 v_185 = v_181;
  PDX_MULA_MXF32(v_185, v_156, v_22);
  xb_vecMxf32 v_189 = v_185;
  PDX_MULA_MXF32(v_189, v_161, v_27);
  xb_vecMxf32 v_193 = v_189;
  PDX_MULA_MXF32(v_193, v_166, v_32);
  float v_194 = orig_in[24];
  float v_195 = orig_in[25];
  float v_196_tmp[4] = {v_194, v_195, v_3, v_3};
  xb_vecMxf32 v_196 = *((xb_vecMxf32 *)v_196_tmp);
  xb_vecMxf32 v_199 = v_193;
  PDX_MULA_MXF32(v_199, v_196, v_38);
  float v_200 = orig_in[26];
  float v_201_tmp[4] = {v_195, v_200, v_3, v_3};
  xb_vecMxf32 v_201 = *((xb_vecMxf32 *)v_201_tmp);
  xb_vecMxf32 v_204 = v_199;
  PDX_MULA_MXF32(v_204, v_201, v_43);
  float v_205 = orig_in[27];
  float v_206_tmp[4] = {v_200, v_205, v_3, v_3};
  xb_vecMxf32 v_206 = *((xb_vecMxf32 *)v_206_tmp);
  xb_vecMxf32 v_209 = v_204;
  PDX_MULA_MXF32(v_209, v_206, v_48);
  xb_vecMxf32 v_213 = PDX_MUL_MXF32(v_156, v_6);
  xb_vecMxf32 v_217 = v_213;
  PDX_MULA_MXF32(v_217, v_161, v_11);
  xb_vecMxf32 v_221 = v_217;
  PDX_MULA_MXF32(v_221, v_166, v_16);
  xb_vecMxf32 v_225 = v_221;
  PDX_MULA_MXF32(v_225, v_196, v_22);
  xb_vecMxf32 v_229 = v_225;
  PDX_MULA_MXF32(v_229, v_201, v_27);
  xb_vecMxf32 v_233 = v_229;
  PDX_MULA_MXF32(v_233, v_206, v_32);
  float v_234 = orig_in[28];
  float v_235 = orig_in[29];
  float v_236_tmp[4] = {v_234, v_235, v_3, v_3};
  xb_vecMxf32 v_236 = *((xb_vecMxf32 *)v_236_tmp);
  xb_vecMxf32 v_239 = v_233;
  PDX_MULA_MXF32(v_239, v_236, v_38);
  float v_240 = orig_in[30];
  float v_241_tmp[4] = {v_235, v_240, v_3, v_3};
  xb_vecMxf32 v_241 = *((xb_vecMxf32 *)v_241_tmp);
  xb_vecMxf32 v_244 = v_239;
  PDX_MULA_MXF32(v_244, v_241, v_43);
  float v_245 = orig_in[31];
  float v_246_tmp[4] = {v_240, v_245, v_3, v_3};
  xb_vecMxf32 v_246 = *((xb_vecMxf32 *)v_246_tmp);
  xb_vecMxf32 v_249 = v_244;
  PDX_MULA_MXF32(v_249, v_246, v_48);
  xb_vecMxf32 v_251;
  v_251 = PDX_MOV_MXF32_FROM_MX32(
      PDX_SHFL_MX32(*((xb_vecMxf32 *)v_0), *((xb_vecMx32 *)v_250_0)));
  PDX_SAV_MXF32_XP(v_49, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAV_MXF32_XP(v_89, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAV_MXF32_XP(v_129, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAV_MXF32_XP(v_169, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAV_MXF32_XP(v_209, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAV_MXF32_XP(v_249, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAV_MXF32_XP(v_251, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAV_MXF32_XP(v_251, align_sol_out, (xb_vecMxf32 *)sol_out, 16);
  PDX_SAPOS_MXF32_FP(align_sol_out, (xb_vecMxf32 *)sol_out);
}
